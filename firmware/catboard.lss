
catboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00000fda  0000106e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800232  00800232  000011a0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  000018d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000000be  00000000  00000000  00001991  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000010d2  00000000  00000000  00001a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000054b  00000000  00000000  00002b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000ba5  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001b0  00000000  00000000  00003c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000594  00000000  00000000  00003dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000010a8  00000000  00000000  00004358  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b8  00000000  00000000  00005400  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_pubtypes 0000007e  00000000  00000000  000054b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
   2:	00 00       	nop
   4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	00 00       	nop
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	00 00       	nop
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	00 00       	nop
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
  1e:	00 00       	nop
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	00 00       	nop
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	00 00       	nop
  28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fd c5       	rjmp	.+3066   	; 0xc28 <__vector_11>
  2e:	00 00       	nop
  30:	5a c6       	rjmp	.+3252   	; 0xce6 <__vector_12>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
  36:	00 00       	nop
  38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
  46:	00 00       	nop
  48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
  4e:	00 00       	nop
  50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
  52:	00 00       	nop
  54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
  56:	00 00       	nop
  58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
  5e:	00 00       	nop
  60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
  62:	00 00       	nop
  64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
  66:	00 00       	nop
  68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
  6e:	00 00       	nop
  70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
  72:	00 00       	nop

00000074 <descriptor_list>:
  74:	00 01 00 00 ab 00 12 00 02 00 00 bd 00 22 00 22     ............."."
  84:	00 00 df 00 3f 00 21 00 00 cf 00 09 00 03 00 00     ....?.!.........
  94:	1e 01 04 01 03 09 04 22 01 0e 02 03 09 04 32 01     ......."......2.
  a4:	12                                                  .

000000a5 <endpoint_config_table>:
  a5:	00 00 01 c1 06 00                                   ......

000000ab <device_descriptor>:
  ab:	12 01 00 02 00 00 00 20 c0 16 7c 04 00 01 01 02     ....... ..|.....
  bb:	00 01                                               ..

000000bd <config1_descriptor>:
  bd:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  cd:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
  dd:	00 01                                               ..

000000df <keyboard_hid_report_desc>:
  df:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
  ef:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
  ff:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 10f:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

0000011e <string0>:
 11e:	04 03 09 04                                         ....

00000122 <string1>:
 122:	0e 03 69 00 62 00 6e 00 54 00 65 00 6f 00 00 00     ..i.b.n.T.e.o...

00000132 <string2>:
 132:	12 03 43 00 61 00 74 00 62 00 6f 00 61 00 72 00     ..C.a.t.b.o.a.r.
 142:	64 00 00 00                                         d...

00000146 <__ctors_end>:
 146:	11 24       	eor	r1, r1
 148:	1f be       	out	0x3f, r1	; 63
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	d2 e0       	ldi	r29, 0x02	; 2
 14e:	de bf       	out	0x3e, r29	; 62
 150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
 152:	12 e0       	ldi	r17, 0x02	; 2
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	b1 e0       	ldi	r27, 0x01	; 1
 158:	ea ed       	ldi	r30, 0xDA	; 218
 15a:	ff e0       	ldi	r31, 0x0F	; 15
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x10>
 15e:	05 90       	lpm	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	a2 33       	cpi	r26, 0x32	; 50
 164:	b1 07       	cpc	r27, r17
 166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0xc>

00000168 <__do_clear_bss>:
 168:	12 e0       	ldi	r17, 0x02	; 2
 16a:	a2 e3       	ldi	r26, 0x32	; 50
 16c:	b2 e0       	ldi	r27, 0x02	; 2
 16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
 170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
 172:	a6 38       	cpi	r26, 0x86	; 134
 174:	b1 07       	cpc	r27, r17
 176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
 178:	dd d4       	rcall	.+2490   	; 0xb34 <main>
 17a:	2d c7       	rjmp	.+3674   	; 0xfd6 <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <init_ports>:

#define FN_KEY_ID			7*5+4

// Init ports
void init_ports(void) {
	DDRB  = 0b01001010; DDRC  = 0b00100000; DDRD  = 0b00000100;
 17e:	8a e4       	ldi	r24, 0x4A	; 74
 180:	84 b9       	out	0x04, r24	; 4
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	87 b9       	out	0x07, r24	; 7
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0xFF;		PORTC = 0xFF; 		PORTD = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	88 b9       	out	0x08, r24	; 8
 190:	8b b9       	out	0x0b, r24	; 11
 192:	08 95       	ret

00000194 <init>:
	}
}

void init(void) {
	// Set for 16 MHz clock
	CLKPR = 0x80; CLKPR = 0;
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	80 93 61 00 	sts	0x0061, r24
 19a:	10 92 61 00 	sts	0x0061, r1

	init_ports();
 19e:	ef df       	rcall	.-34     	; 0x17e <init_ports>
 1a0:	56 9a       	sbi	0x0a, 6	; 10

	LED_CONFIG;
 1a2:	3e 9a       	sbi	0x07, 6	; 7
	LED_RED_CONFIG;
 1a4:	51 9a       	sbi	0x0a, 1	; 10
	LED_BLUE_CONFIG;
 1a6:	46 9a       	sbi	0x08, 6	; 8

	LED_RED_OFF;
 1a8:	59 98       	cbi	0x0b, 1	; 11
	LED_BLUE_OFF;
 1aa:	80 91 01 01 	lds	r24, 0x0101
	if (led) LED_ON;
 1ae:	81 11       	cpse	r24, r1
 1b0:	5e 98       	cbi	0x0b, 6	; 11
 1b2:	ea e4       	ldi	r30, 0x4A	; 74
 1b4:	f2 e0       	ldi	r31, 0x02	; 2
 1b6:	11 92       	st	Z+, r1

	for (uint8_t i=0; i<KEYS; i++) {
		pressed[i] = 0;
 1b8:	82 e0       	ldi	r24, 0x02	; 2

	LED_RED_OFF;
	LED_BLUE_OFF;
	if (led) LED_ON;

	for (uint8_t i=0; i<KEYS; i++) {
 1ba:	e6 38       	cpi	r30, 0x86	; 134
 1bc:	f8 07       	cpc	r31, r24
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <init+0x22>
 1c0:	d5 d4       	rcall	.+2474   	; 0xb6c <usb_init>
		pressed[i] = 0;
	}

	usb_init();
 1c2:	e8 d4       	rcall	.+2512   	; 0xb94 <usb_configured>
 1c4:	88 23       	and	r24, r24
	while(!usb_configured());
 1c6:	e9 f3       	breq	.-6      	; 0x1c2 <init+0x2e>
 1c8:	5e 9a       	sbi	0x0b, 6	; 11
 1ca:	80 91 01 01 	lds	r24, 0x0101
	LED_OFF;
 1ce:	81 11       	cpse	r24, r1
	if (led) LED_RED_ON;
 1d0:	46 98       	cbi	0x08, 6	; 8
 1d2:	80 91 46 02 	lds	r24, 0x0246
 1d6:	80 93 3e 02 	sts	0x023E, r24
	caps_lock_led = keyboard_leds;
 1da:	08 95       	ret

000001dc <caps_lock_change_layer>:
	//if (keyboard_leds) LED_ON; else LED_OFF;
	repeat_tick();
	_delay_ms(5);
}

void caps_lock_change_layer() {
 1dc:	20 91 46 02 	lds	r18, 0x0246
 1e0:	22 70       	andi	r18, 0x02	; 2
 1e2:	20 93 3e 02 	sts	0x023E, r18
 1e6:	80 91 0a 01 	lds	r24, 0x010A
 1ea:	90 91 0b 01 	lds	r25, 0x010B
	caps_lock_led = (keyboard_leds & LED_CAPS_LOCK);
	if ((caps_lock_led) && (layout != layer1)) {
 1ee:	22 23       	and	r18, r18
 1f0:	d9 f0       	breq	.+54     	; 0x228 <caps_lock_change_layer+0x4c>
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	87 38       	cpi	r24, 0x87	; 135
 1f6:	92 07       	cpc	r25, r18
 1f8:	81 f1       	breq	.+96     	; 0x25a <caps_lock_change_layer+0x7e>
		if (layout==layer_fn) {
 1fa:	8b 54       	subi	r24, 0x4B	; 75
 1fc:	91 40       	sbci	r25, 0x01	; 1
 1fe:	39 f4       	brne	.+14     	; 0x20e <caps_lock_change_layer+0x32>
			prev_layer = layer1;
 200:	87 e8       	ldi	r24, 0x87	; 135
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	90 93 3c 02 	sts	0x023C, r25
 208:	80 93 3b 02 	sts	0x023B, r24
 20c:	06 c0       	rjmp	.+12     	; 0x21a <caps_lock_change_layer+0x3e>
		} else {
			layout = layer1;
 20e:	87 e8       	ldi	r24, 0x87	; 135
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	90 93 0b 01 	sts	0x010B, r25
 216:	80 93 0a 01 	sts	0x010A, r24
		}
		LED_RED_OFF;
 21a:	46 9a       	sbi	0x08, 6	; 8
		if (led) LED_BLUE_ON;
 21c:	80 91 01 01 	lds	r24, 0x0101
 220:	88 23       	and	r24, r24
 222:	d9 f0       	breq	.+54     	; 0x25a <caps_lock_change_layer+0x7e>
 224:	59 9a       	sbi	0x0b, 1	; 11
 226:	08 95       	ret
	} else if ((! caps_lock_led) && (layout != layer2)) {
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	86 3f       	cpi	r24, 0xF6	; 246
 22c:	92 07       	cpc	r25, r18
 22e:	a9 f0       	breq	.+42     	; 0x25a <caps_lock_change_layer+0x7e>
		if (layout==layer_fn) {
 230:	8b 54       	subi	r24, 0x4B	; 75
 232:	91 40       	sbci	r25, 0x01	; 1
 234:	39 f4       	brne	.+14     	; 0x244 <caps_lock_change_layer+0x68>
			prev_layer = layer2;
 236:	86 ef       	ldi	r24, 0xF6	; 246
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	90 93 3c 02 	sts	0x023C, r25
 23e:	80 93 3b 02 	sts	0x023B, r24
 242:	06 c0       	rjmp	.+12     	; 0x250 <caps_lock_change_layer+0x74>
		} else {
			layout = layer2;
 244:	86 ef       	ldi	r24, 0xF6	; 246
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	90 93 0b 01 	sts	0x010B, r25
 24c:	80 93 0a 01 	sts	0x010A, r24
		}
		LED_BLUE_OFF;
 250:	59 98       	cbi	0x0b, 1	; 11
		if (led) LED_RED_ON;
 252:	80 91 01 01 	lds	r24, 0x0101
 256:	81 11       	cpse	r24, r1
 258:	46 98       	cbi	0x08, 6	; 8
 25a:	08 95       	ret

0000025c <change_layout>:
		}
	}
}

void change_layout(void) {
	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || os_mode==2) { // Press Cmd+Space
 25c:	80 91 0c 01 	lds	r24, 0x010C
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	91 f4       	brne	.+36     	; 0x288 <change_layout+0x2c>
		keyboard_modifier_keys = KEY_GUI;
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	80 93 3f 02 	sts	0x023F, r24
		keyboard_keys[0] = 0;
 26a:	10 92 40 02 	sts	0x0240, r1
		usb_keyboard_send();
 26e:	95 d4       	rcall	.+2346   	; 0xb9a <usb_keyboard_send>
 270:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	80 e7       	ldi	r24, 0x70	; 112
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <change_layout+0x1a>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <change_layout+0x24>
 280:	00 00       	nop
 282:	68 e0       	ldi	r22, 0x08	; 8
		_delay_ms(50);
		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 284:	8c e2       	ldi	r24, 0x2C	; 44
 286:	11 c0       	rjmp	.+34     	; 0x2aa <change_layout+0x4e>
 288:	84 e0       	ldi	r24, 0x04	; 4
	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
		keyboard_modifier_keys = KEY_ALT;
 28a:	80 93 3f 02 	sts	0x023F, r24
 28e:	10 92 40 02 	sts	0x0240, r1
		keyboard_keys[0] = 0;
 292:	83 d4       	rcall	.+2310   	; 0xb9a <usb_keyboard_send>
		usb_keyboard_send();
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	80 e7       	ldi	r24, 0x70	; 112
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <change_layout+0x3e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <change_layout+0x48>
 2a4:	00 00       	nop
 2a6:	66 e0       	ldi	r22, 0x06	; 6
 2a8:	80 e0       	ldi	r24, 0x00	; 0
		_delay_ms(50);
		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 2aa:	b1 c4       	rjmp	.+2402   	; 0xc0e <usb_keyboard_press>

000002ac <get_code>:
	}
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
 2ac:	8c 33       	cpi	r24, 0x3C	; 60
 2ae:	10 f5       	brcc	.+68     	; 0x2f4 <get_code+0x48>
	uint8_t key_code = 0;
	if (key_id<KEYS) { // not 0xFF
		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	f9 01       	movw	r30, r18
 2b6:	e6 5b       	subi	r30, 0xB6	; 182
 2b8:	fd 4f       	sbci	r31, 0xFD	; 253
 2ba:	90 81       	ld	r25, Z
 2bc:	91 30       	cpi	r25, 0x01	; 1
 2be:	39 f4       	brne	.+14     	; 0x2ce <get_code+0x22>
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 2c0:	f9 01       	movw	r30, r18
 2c2:	e5 5b       	subi	r30, 0xB5	; 181
 2c4:	fe 4f       	sbci	r31, 0xFE	; 254
 2c6:	80 81       	ld	r24, Z
 2c8:	18 16       	cp	r1, r24
 2ca:	ac f0       	brlt	.+42     	; 0x2f6 <get_code+0x4a>
 2cc:	13 c0       	rjmp	.+38     	; 0x2f4 <get_code+0x48>
				key_code = layer_fn[key_id];
			}
		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from layer1
 2ce:	40 91 0a 01 	lds	r20, 0x010A
 2d2:	50 91 0b 01 	lds	r21, 0x010B
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	4b 34       	cpi	r20, 0x4B	; 75
 2da:	56 07       	cpc	r21, r22
 2dc:	31 f0       	breq	.+12     	; 0x2ea <get_code+0x3e>
 2de:	92 30       	cpi	r25, 0x02	; 2
 2e0:	21 f4       	brne	.+8      	; 0x2ea <get_code+0x3e>
			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 2e2:	f9 01       	movw	r30, r18
 2e4:	e9 57       	subi	r30, 0x79	; 121
 2e6:	fe 4f       	sbci	r31, 0xFE	; 254
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <get_code+0x44>
		} else {
			key_code = layout[key_id];
 2ea:	fa 01       	movw	r30, r20
 2ec:	e8 0f       	add	r30, r24
 2ee:	f1 1d       	adc	r31, r1
 2f0:	80 81       	ld	r24, Z
 2f2:	08 95       	ret
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
		} else {
			key_code = layout[key_id];
		}
	}
	return key_code;
}
 2f6:	08 95       	ret

000002f8 <send>:
		_delay_ms(50);
		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
	}
}

void send(void) {
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	c3 e0       	ldi	r28, 0x03	; 3
 302:	d1 e0       	ldi	r29, 0x01	; 1
 304:	00 e4       	ldi	r16, 0x40	; 64
 306:	12 e0       	ldi	r17, 0x02	; 2
	uint8_t i;
	for (i=0; i<6; i++) {
		keyboard_keys[i] = get_code(queue[i]);
 308:	89 91       	ld	r24, Y+
 30a:	d0 df       	rcall	.-96     	; 0x2ac <get_code>
 30c:	f8 01       	movw	r30, r16
 30e:	81 93       	st	Z+, r24
 310:	8f 01       	movw	r16, r30
 312:	f1 e0       	ldi	r31, 0x01	; 1
	}
}

void send(void) {
	uint8_t i;
	for (i=0; i<6; i++) {
 314:	c9 30       	cpi	r28, 0x09	; 9
 316:	df 07       	cpc	r29, r31
 318:	b9 f7       	brne	.-18     	; 0x308 <__stack+0x9>
 31a:	80 91 3d 02 	lds	r24, 0x023D
		keyboard_keys[i] = get_code(queue[i]);
	}
	keyboard_modifier_keys = mod_keys;
 31e:	80 93 3f 02 	sts	0x023F, r24
 322:	df 91       	pop	r29
	usb_keyboard_send();
}
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	37 c4       	rjmp	.+2158   	; 0xb9a <usb_keyboard_send>

0000032c <key_release>:
	uint8_t i;
	for (i=0; i<6; i++) {
		keyboard_keys[i] = get_code(queue[i]);
	}
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	c8 2f       	mov	r28, r24
	}
}

void key_release(uint8_t key_id) {
	uint8_t i;
	int8_t pressed_key_id = pressed[key_id];
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	f9 01       	movw	r30, r18
 338:	e6 5b       	subi	r30, 0xB6	; 182
 33a:	fd 4f       	sbci	r31, 0xFD	; 253
 33c:	d0 81       	ld	r29, Z
	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 33e:	d1 30       	cpi	r29, 0x01	; 1
 340:	21 f4       	brne	.+8      	; 0x34a <key_release+0x1e>
 342:	f9 01       	movw	r30, r18
 344:	e5 5b       	subi	r30, 0xB5	; 181
 346:	fe 4f       	sbci	r31, 0xFE	; 254
 348:	13 c0       	rjmp	.+38     	; 0x370 <key_release+0x44>
 34a:	e0 91 0a 01 	lds	r30, 0x010A
 34e:	f0 91 0b 01 	lds	r31, 0x010B
 352:	e2 0f       	add	r30, r18
 354:	f3 1f       	adc	r31, r19
 356:	80 81       	ld	r24, Z
	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 358:	d6 30       	cpi	r29, 0x06	; 6
 35a:	59 f4       	brne	.+22     	; 0x372 <key_release+0x46>
 35c:	40 91 3b 02 	lds	r20, 0x023B
 360:	50 91 3c 02 	lds	r21, 0x023C
 364:	41 15       	cp	r20, r1
 366:	51 05       	cpc	r21, r1
 368:	21 f0       	breq	.+8      	; 0x372 <key_release+0x46>
		key_code = prev_layer[key_id];
 36a:	fa 01       	movw	r30, r20
 36c:	e2 0f       	add	r30, r18
 36e:	f3 1f       	adc	r31, r19
 370:	80 81       	ld	r24, Z
	}
	pressed[key_id] = 0;
 372:	f9 01       	movw	r30, r18
 374:	e6 5b       	subi	r30, 0xB6	; 182
 376:	fd 4f       	sbci	r31, 0xFD	; 253
 378:	10 82       	st	Z, r1
	if (locked) return;
 37a:	90 91 3a 02 	lds	r25, 0x023A
 37e:	91 11       	cpse	r25, r1
 380:	2f c1       	rjmp	.+606    	; 0x5e0 <key_release+0x2b4>
	if (key_code>=KEY_CB_START) { // Catboard keys release
 382:	8d 36       	cpi	r24, 0x6D	; 109
 384:	08 f4       	brcc	.+2      	; 0x388 <key_release+0x5c>
 386:	a8 c0       	rjmp	.+336    	; 0x4d8 <key_release+0x1ac>
		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 388:	8d 37       	cpi	r24, 0x7D	; 125
 38a:	39 f4       	brne	.+14     	; 0x39a <key_release+0x6e>
 38c:	d3 30       	cpi	r29, 0x03	; 3
 38e:	09 f4       	brne	.+2      	; 0x392 <key_release+0x66>
 390:	27 c1       	rjmp	.+590    	; 0x5e0 <key_release+0x2b4>
			mod_keys &= ~(KEY_ALT);
 392:	80 91 3d 02 	lds	r24, 0x023D
 396:	8b 7f       	andi	r24, 0xFB	; 251
 398:	08 c0       	rjmp	.+16     	; 0x3aa <key_release+0x7e>
			send();
		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 39a:	8d 36       	cpi	r24, 0x6D	; 109
 39c:	09 f0       	breq	.+2      	; 0x3a0 <key_release+0x74>
 39e:	41 c0       	rjmp	.+130    	; 0x422 <key_release+0xf6>
 3a0:	80 91 3d 02 	lds	r24, 0x023D
 3a4:	d5 30       	cpi	r29, 0x05	; 5
 3a6:	31 f4       	brne	.+12     	; 0x3b4 <key_release+0x88>
			mod_keys &= ~(KEY_CTRL);
 3a8:	8e 7f       	andi	r24, 0xFE	; 254
 3aa:	80 93 3d 02 	sts	0x023D, r24
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	}
}
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
			mod_keys &= ~(KEY_ALT);
			send();
		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
			mod_keys &= ~(KEY_CTRL);
			send();
 3b2:	a2 cf       	rjmp	.-188    	; 0x2f8 <send>
 3b4:	8d 7f       	andi	r24, 0xFD	; 253
		} else if (key_code==KEY_LAYER1) { // LAYER1
			mod_keys &= ~(KEY_SHIFT);
 3b6:	80 93 3d 02 	sts	0x023D, r24
 3ba:	9e df       	rcall	.-196    	; 0x2f8 <send>
			send();
 3bc:	80 91 00 01 	lds	r24, 0x0100
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 3c0:	8c 13       	cpse	r24, r28
 3c2:	86 c0       	rjmp	.+268    	; 0x4d0 <key_release+0x1a4>
 3c4:	80 91 38 02 	lds	r24, 0x0238
 3c8:	90 91 39 02 	lds	r25, 0x0239
 3cc:	00 97       	sbiw	r24, 0x00	; 0
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <key_release+0xa6>
 3d0:	7f c0       	rjmp	.+254    	; 0x4d0 <key_release+0x1a4>
 3d2:	c2 97       	sbiw	r24, 0x32	; 50
 3d4:	08 f0       	brcs	.+2      	; 0x3d8 <key_release+0xac>
 3d6:	7c c0       	rjmp	.+248    	; 0x4d0 <key_release+0x1a4>
 3d8:	d4 30       	cpi	r29, 0x04	; 4
 3da:	09 f4       	brne	.+2      	; 0x3de <key_release+0xb2>
 3dc:	79 c0       	rjmp	.+242    	; 0x4d0 <key_release+0x1a4>
 3de:	80 91 0a 01 	lds	r24, 0x010A
				if (layout!=layer1) {
 3e2:	90 91 0b 01 	lds	r25, 0x010B
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	87 38       	cpi	r24, 0x87	; 135
 3ea:	92 07       	cpc	r25, r18
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <key_release+0xc4>
 3ee:	70 c0       	rjmp	.+224    	; 0x4d0 <key_release+0x1a4>
 3f0:	8b 54       	subi	r24, 0x4B	; 75
 3f2:	91 40       	sbci	r25, 0x01	; 1
					if (layout==layer_fn) {
 3f4:	39 f4       	brne	.+14     	; 0x404 <key_release+0xd8>
 3f6:	87 e8       	ldi	r24, 0x87	; 135
 3f8:	91 e0       	ldi	r25, 0x01	; 1
						prev_layer = layer1;
 3fa:	90 93 3c 02 	sts	0x023C, r25
 3fe:	80 93 3b 02 	sts	0x023B, r24
 402:	06 c0       	rjmp	.+12     	; 0x410 <key_release+0xe4>
 404:	87 e8       	ldi	r24, 0x87	; 135
 406:	91 e0       	ldi	r25, 0x01	; 1
					} else {
						layout = layer1;
 408:	90 93 0b 01 	sts	0x010B, r25
 40c:	80 93 0a 01 	sts	0x010A, r24
 410:	25 df       	rcall	.-438    	; 0x25c <change_layout>
 412:	46 9a       	sbi	0x08, 6	; 8
					}
					change_layout();
 414:	80 91 01 01 	lds	r24, 0x0101
					//LED_ON;
					LED_RED_OFF;
 418:	88 23       	and	r24, r24
					if (led) LED_BLUE_ON;
 41a:	09 f4       	brne	.+2      	; 0x41e <key_release+0xf2>
 41c:	59 c0       	rjmp	.+178    	; 0x4d0 <key_release+0x1a4>
 41e:	59 9a       	sbi	0x0b, 1	; 11
 420:	57 c0       	rjmp	.+174    	; 0x4d0 <key_release+0x1a4>
 422:	8e 36       	cpi	r24, 0x6E	; 110
 424:	b9 f5       	brne	.+110    	; 0x494 <key_release+0x168>
 426:	80 91 3d 02 	lds	r24, 0x023D
			last_key = 0xFF;
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		} else if (key_code==KEY_LAYER2) { // LAYER2
 42a:	8f 7d       	andi	r24, 0xDF	; 223
			mod_keys &= ~(KEY_RIGHT_SHIFT);
 42c:	80 93 3d 02 	sts	0x023D, r24
 430:	63 df       	rcall	.-314    	; 0x2f8 <send>
 432:	80 91 00 01 	lds	r24, 0x0100
			send();
 436:	8c 13       	cpse	r24, r28
 438:	4b c0       	rjmp	.+150    	; 0x4d0 <key_release+0x1a4>
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 43a:	80 91 38 02 	lds	r24, 0x0238
 43e:	90 91 39 02 	lds	r25, 0x0239
 442:	00 97       	sbiw	r24, 0x00	; 0
 444:	09 f4       	brne	.+2      	; 0x448 <key_release+0x11c>
 446:	44 c0       	rjmp	.+136    	; 0x4d0 <key_release+0x1a4>
 448:	c2 97       	sbiw	r24, 0x32	; 50
 44a:	08 f0       	brcs	.+2      	; 0x44e <key_release+0x122>
 44c:	41 c0       	rjmp	.+130    	; 0x4d0 <key_release+0x1a4>
 44e:	d4 30       	cpi	r29, 0x04	; 4
 450:	09 f4       	brne	.+2      	; 0x454 <key_release+0x128>
 452:	3e c0       	rjmp	.+124    	; 0x4d0 <key_release+0x1a4>
 454:	80 91 0a 01 	lds	r24, 0x010A
 458:	90 91 0b 01 	lds	r25, 0x010B
				if (layout!=layer2) {
 45c:	21 e0       	ldi	r18, 0x01	; 1
 45e:	86 3f       	cpi	r24, 0xF6	; 246
 460:	92 07       	cpc	r25, r18
 462:	b1 f1       	breq	.+108    	; 0x4d0 <key_release+0x1a4>
 464:	8b 54       	subi	r24, 0x4B	; 75
 466:	91 40       	sbci	r25, 0x01	; 1
 468:	39 f4       	brne	.+14     	; 0x478 <key_release+0x14c>
 46a:	86 ef       	ldi	r24, 0xF6	; 246
					if (layout==layer_fn) {
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	90 93 3c 02 	sts	0x023C, r25
						prev_layer = layer2;
 472:	80 93 3b 02 	sts	0x023B, r24
 476:	06 c0       	rjmp	.+12     	; 0x484 <key_release+0x158>
 478:	86 ef       	ldi	r24, 0xF6	; 246
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	90 93 0b 01 	sts	0x010B, r25
					} else {
						layout = layer2;
 480:	80 93 0a 01 	sts	0x010A, r24
 484:	eb de       	rcall	.-554    	; 0x25c <change_layout>
 486:	59 98       	cbi	0x0b, 1	; 11
 488:	80 91 01 01 	lds	r24, 0x0101
					}
					change_layout();
 48c:	88 23       	and	r24, r24
 48e:	01 f1       	breq	.+64     	; 0x4d0 <key_release+0x1a4>
					//LED_OFF;
					LED_BLUE_OFF;
 490:	46 98       	cbi	0x08, 6	; 8
					if (led) LED_RED_ON;
 492:	1e c0       	rjmp	.+60     	; 0x4d0 <key_release+0x1a4>
 494:	87 37       	cpi	r24, 0x77	; 119
 496:	09 f0       	breq	.+2      	; 0x49a <key_release+0x16e>
 498:	a3 c0       	rjmp	.+326    	; 0x5e0 <key_release+0x2b4>
 49a:	80 91 3d 02 	lds	r24, 0x023D
			last_key = 0xFF;
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 49e:	8d 7f       	andi	r24, 0xFD	; 253
 4a0:	80 93 3d 02 	sts	0x023D, r24
			mod_keys &= ~KEY_SHIFT;
 4a4:	29 df       	rcall	.-430    	; 0x2f8 <send>
 4a6:	80 91 00 01 	lds	r24, 0x0100
 4aa:	8c 13       	cpse	r24, r28
 4ac:	11 c0       	rjmp	.+34     	; 0x4d0 <key_release+0x1a4>
			send();
 4ae:	80 91 38 02 	lds	r24, 0x0238
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod_keys) {
 4b2:	90 91 39 02 	lds	r25, 0x0239
 4b6:	00 97       	sbiw	r24, 0x00	; 0
 4b8:	59 f0       	breq	.+22     	; 0x4d0 <key_release+0x1a4>
 4ba:	c2 97       	sbiw	r24, 0x32	; 50
 4bc:	48 f4       	brcc	.+18     	; 0x4d0 <key_release+0x1a4>
 4be:	d2 30       	cpi	r29, 0x02	; 2
 4c0:	39 f0       	breq	.+14     	; 0x4d0 <key_release+0x1a4>
 4c2:	80 91 3d 02 	lds	r24, 0x023D
 4c6:	81 11       	cpse	r24, r1
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <key_release+0x1a4>
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	8c e2       	ldi	r24, 0x2C	; 44
 4ce:	9f d3       	rcall	.+1854   	; 0xc0e <usb_keyboard_press>
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	80 93 00 01 	sts	0x0100, r24
				usb_keyboard_press(KEY_SPACE, mod_keys);
 4d6:	6f c0       	rjmp	.+222    	; 0x5b6 <key_release+0x28a>
 4d8:	85 36       	cpi	r24, 0x65	; 101
 4da:	08 f4       	brcc	.+2      	; 0x4de <key_release+0x1b2>
 4dc:	49 c0       	rjmp	.+146    	; 0x570 <key_release+0x244>
			}
			last_key = 0xFF;
 4de:	90 91 0c 01 	lds	r25, 0x010C
 4e2:	92 30       	cpi	r25, 0x02	; 2
 4e4:	51 f4       	brne	.+20     	; 0x4fa <key_release+0x1ce>
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 4e6:	85 36       	cpi	r24, 0x65	; 101
 4e8:	21 f4       	brne	.+8      	; 0x4f2 <key_release+0x1c6>
 4ea:	80 91 3d 02 	lds	r24, 0x023D
		if (os_mode==2 && key_code==KEY_LCTRL) {
 4ee:	87 7f       	andi	r24, 0xF7	; 247
 4f0:	09 c0       	rjmp	.+18     	; 0x504 <key_release+0x1d8>
 4f2:	89 36       	cpi	r24, 0x69	; 105
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <key_release+0x1cc>
 4f6:	70 c0       	rjmp	.+224    	; 0x5d8 <key_release+0x2ac>
			mod_keys &= ~KEY_GUI;
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <key_release+0x1d2>
 4fa:	8c 36       	cpi	r24, 0x6C	; 108
 4fc:	31 f4       	brne	.+12     	; 0x50a <key_release+0x1de>
 4fe:	80 91 3d 02 	lds	r24, 0x023D
		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 502:	8f 77       	andi	r24, 0x7F	; 127
 504:	80 93 3d 02 	sts	0x023D, r24
 508:	1f c0       	rjmp	.+62     	; 0x548 <key_release+0x21c>
 50a:	85 36       	cpi	r24, 0x65	; 101
			mod_keys &= ~KEY_RIGHT_GUI;
 50c:	21 f4       	brne	.+8      	; 0x516 <key_release+0x1ea>
 50e:	80 91 3d 02 	lds	r24, 0x023D
 512:	8e 7f       	andi	r24, 0xFE	; 254
 514:	f7 cf       	rjmp	.-18     	; 0x504 <key_release+0x1d8>
 516:	90 91 3d 02 	lds	r25, 0x023D
		} else if (key_code==KEY_LCTRL) {
 51a:	86 36       	cpi	r24, 0x66	; 102
			mod_keys &= ~KEY_CTRL;
 51c:	11 f4       	brne	.+4      	; 0x522 <key_release+0x1f6>
 51e:	9d 7f       	andi	r25, 0xFD	; 253
 520:	11 c0       	rjmp	.+34     	; 0x544 <key_release+0x218>
 522:	87 36       	cpi	r24, 0x67	; 103
 524:	11 f4       	brne	.+4      	; 0x52a <key_release+0x1fe>
 526:	9b 7f       	andi	r25, 0xFB	; 251
		} else if (key_code==KEY_LSHIFT) {
 528:	0d c0       	rjmp	.+26     	; 0x544 <key_release+0x218>
 52a:	88 36       	cpi	r24, 0x68	; 104
			mod_keys &= ~KEY_SHIFT;
 52c:	11 f4       	brne	.+4      	; 0x532 <key_release+0x206>
 52e:	97 7f       	andi	r25, 0xF7	; 247
		} else if (key_code==KEY_LALT) {
 530:	09 c0       	rjmp	.+18     	; 0x544 <key_release+0x218>
 532:	89 36       	cpi	r24, 0x69	; 105
			mod_keys &= ~KEY_ALT;
 534:	11 f4       	brne	.+4      	; 0x53a <key_release+0x20e>
 536:	9f 7e       	andi	r25, 0xEF	; 239
		} else if (key_code==KEY_LGUI) {
 538:	05 c0       	rjmp	.+10     	; 0x544 <key_release+0x218>
 53a:	8a 36       	cpi	r24, 0x6A	; 106
			mod_keys &= ~KEY_GUI;
 53c:	11 f4       	brne	.+4      	; 0x542 <key_release+0x216>
 53e:	9f 7d       	andi	r25, 0xDF	; 223
		} else if (key_code==KEY_RCTRL) {
 540:	01 c0       	rjmp	.+2      	; 0x544 <key_release+0x218>
 542:	9f 7b       	andi	r25, 0xBF	; 191
			mod_keys &= ~KEY_RIGHT_CTRL;
 544:	90 93 3d 02 	sts	0x023D, r25
		} else if (key_code==KEY_RSHIFT) {
 548:	d7 de       	rcall	.-594    	; 0x2f8 <send>
 54a:	10 92 39 02 	sts	0x0239, r1
			mod_keys &= ~KEY_RIGHT_SHIFT;
 54e:	10 92 38 02 	sts	0x0238, r1
		} else if (key_code==KEY_RALT) {
			mod_keys &= ~KEY_RIGHT_ALT;
 552:	10 92 37 02 	sts	0x0237, r1
		} else if (key_code==KEY_RGUI) {
			mod_keys &= ~KEY_RIGHT_GUI;
		}
		send();
 556:	10 92 36 02 	sts	0x0236, r1
		press_time = 0;
 55a:	10 92 35 02 	sts	0x0235, r1
 55e:	10 92 34 02 	sts	0x0234, r1
		press_time2 = 0;
 562:	10 92 33 02 	sts	0x0233, r1
 566:	10 92 32 02 	sts	0x0232, r1
		release_time = 0;
 56a:	10 92 00 01 	sts	0x0100, r1
 56e:	38 c0       	rjmp	.+112    	; 0x5e0 <key_release+0x2b4>
 570:	e3 e0       	ldi	r30, 0x03	; 3
		repeat_time = 0;
 572:	f1 e0       	ldi	r31, 0x01	; 1
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	91 91       	ld	r25, Z+
 578:	9c 17       	cp	r25, r28
		last_key = 0;
 57a:	59 f0       	breq	.+22     	; 0x592 <key_release+0x266>
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	86 30       	cpi	r24, 0x06	; 6
 580:	d1 f7       	brne	.-12     	; 0x576 <key_release+0x24a>
 582:	07 c0       	rjmp	.+14     	; 0x592 <key_release+0x266>
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 584:	e8 2f       	mov	r30, r24
		release_time = 0;
		repeat_time = 0;
		last_key = 0;
	} else {
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	ed 5f       	subi	r30, 0xFD	; 253
 58a:	fe 4f       	sbci	r31, 0xFE	; 254
		press_time2 = 0;
		release_time = 0;
		repeat_time = 0;
		last_key = 0;
	} else {
		for (i=0; i<6; i++) {
 58c:	91 81       	ldd	r25, Z+1	; 0x01
 58e:	90 83       	st	Z, r25
 590:	8f 5f       	subi	r24, 0xFF	; 255
 592:	86 30       	cpi	r24, 0x06	; 6
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
			queue[i] = queue[i+1];
 594:	b9 f7       	brne	.-18     	; 0x584 <key_release+0x258>
 596:	b0 de       	rcall	.-672    	; 0x2f8 <send>
 598:	80 91 00 01 	lds	r24, 0x0100
 59c:	8c 13       	cpse	r24, r28
 59e:	0b c0       	rjmp	.+22     	; 0x5b6 <key_release+0x28a>
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
 5a0:	10 92 37 02 	sts	0x0237, r1
 5a4:	10 92 36 02 	sts	0x0236, r1
			queue[i] = queue[i+1];
		}
		send();
 5a8:	81 e0       	ldi	r24, 0x01	; 1
		// Autorepeat
		if (last_key==key_id) { // realise time
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	90 93 35 02 	sts	0x0235, r25
 5b0:	80 93 34 02 	sts	0x0234, r24
			press_time2 = 0;
 5b4:	0c c0       	rjmp	.+24     	; 0x5ce <key_release+0x2a2>
 5b6:	10 92 39 02 	sts	0x0239, r1
			release_time = 1;
 5ba:	10 92 38 02 	sts	0x0238, r1
 5be:	10 92 37 02 	sts	0x0237, r1
 5c2:	10 92 36 02 	sts	0x0236, r1
 5c6:	10 92 35 02 	sts	0x0235, r1
			repeat_time = 0;
		} else { // reset
			press_time = 0;
 5ca:	10 92 34 02 	sts	0x0234, r1
 5ce:	10 92 33 02 	sts	0x0233, r1
			press_time2 = 0;
 5d2:	10 92 32 02 	sts	0x0232, r1
 5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <key_release+0x2b4>
			release_time = 0;
 5d8:	8c 36       	cpi	r24, 0x6C	; 108
 5da:	09 f0       	breq	.+2      	; 0x5de <key_release+0x2b2>
 5dc:	9c cf       	rjmp	.-200    	; 0x516 <key_release+0x1ea>
 5de:	8f cf       	rjmp	.-226    	; 0x4fe <key_release+0x1d2>
			repeat_time = 0;
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <key_press>:
			press_time = 0;
		}
	}	
}

void key_press(uint8_t key_id) {
 5e6:	cf 93       	push	r28
 5e8:	c8 2f       	mov	r28, r24
			repeat_time = 0;
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys release
		if (os_mode==2 && key_code==KEY_LCTRL) {
			mod_keys &= ~KEY_GUI;
		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 5ea:	60 91 3d 02 	lds	r22, 0x023D
 5ee:	46 2f       	mov	r20, r22
 5f0:	4d 7d       	andi	r20, 0xDD	; 221
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	}
}
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	80 91 71 02 	lds	r24, 0x0271
 5fa:	81 11       	cpse	r24, r1
 5fc:	04 c0       	rjmp	.+8      	; 0x606 <key_press+0x20>
}

void key_press(uint8_t key_id) {
	uint8_t i;
	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGHT_GUI));
	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 5fe:	44 23       	and	r20, r20
 600:	21 f0       	breq	.+8      	; 0x60a <key_press+0x24>
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	03 c0       	rjmp	.+6      	; 0x60c <key_press+0x26>
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	01 c0       	rjmp	.+2      	; 0x60c <key_press+0x26>
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	f9 01       	movw	r30, r18
 60e:	e6 5b       	subi	r30, 0xB6	; 182
 610:	fd 4f       	sbci	r31, 0xFD	; 253
 612:	80 83       	st	Z, r24
	
	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	21 f4       	brne	.+8      	; 0x620 <key_press+0x3a>
 618:	f9 01       	movw	r30, r18
 61a:	e5 5b       	subi	r30, 0xB5	; 181
 61c:	fe 4f       	sbci	r31, 0xFE	; 254
 61e:	06 c0       	rjmp	.+12     	; 0x62c <key_press+0x46>
 620:	e0 91 0a 01 	lds	r30, 0x010A
 624:	f0 91 0b 01 	lds	r31, 0x010B
 628:	ec 0f       	add	r30, r28
 62a:	f1 1d       	adc	r31, r1
 62c:	70 81       	ld	r23, Z
	if (key_code==NULL) {
 62e:	71 11       	cpse	r23, r1
 630:	23 c0       	rjmp	.+70     	; 0x678 <key_press+0x92>
		key_code = layout[key_id];
 632:	8c 2f       	mov	r24, r28
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	e0 91 0a 01 	lds	r30, 0x010A
 63a:	f0 91 0b 01 	lds	r31, 0x010B
 63e:	e8 0f       	add	r30, r24
 640:	f9 1f       	adc	r31, r25
 642:	70 81       	ld	r23, Z
		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 644:	44 23       	and	r20, r20
 646:	11 f0       	breq	.+4      	; 0x64c <key_press+0x66>
 648:	42 e0       	ldi	r20, 0x02	; 2
 64a:	01 c0       	rjmp	.+2      	; 0x64e <key_press+0x68>
 64c:	4f ef       	ldi	r20, 0xFF	; 255
 64e:	f9 01       	movw	r30, r18
 650:	e6 5b       	subi	r30, 0xB6	; 182
 652:	fd 4f       	sbci	r31, 0xFD	; 253
 654:	40 83       	st	Z, r20
		if (key_code==NULL && prev_layer && ! mod_keys) {
 656:	71 11       	cpse	r23, r1
 658:	0f c0       	rjmp	.+30     	; 0x678 <key_press+0x92>
 65a:	40 91 3b 02 	lds	r20, 0x023B
 65e:	50 91 3c 02 	lds	r21, 0x023C
 662:	41 15       	cp	r20, r1
 664:	51 05       	cpc	r21, r1
 666:	41 f0       	breq	.+16     	; 0x678 <key_press+0x92>
 668:	61 11       	cpse	r22, r1
 66a:	06 c0       	rjmp	.+12     	; 0x678 <key_press+0x92>
			key_code = prev_layer[key_id];
 66c:	da 01       	movw	r26, r20
 66e:	a8 0f       	add	r26, r24
 670:	b9 1f       	adc	r27, r25
 672:	7c 91       	ld	r23, X
			pressed[key_id] = KEY_PRESSED_PREV;
 674:	86 e0       	ldi	r24, 0x06	; 6
 676:	80 83       	st	Z, r24
		}
	}

	if (locked && key_code!=KEY_LOCK) return;
 678:	80 91 3a 02 	lds	r24, 0x023A
 67c:	88 23       	and	r24, r24
 67e:	21 f0       	breq	.+8      	; 0x688 <key_press+0xa2>
 680:	7a 37       	cpi	r23, 0x7A	; 122
 682:	09 f0       	breq	.+2      	; 0x686 <key_press+0xa0>
 684:	61 c1       	rjmp	.+706    	; 0x948 <key_press+0x362>
 686:	9a c0       	rjmp	.+308    	; 0x7bc <key_press+0x1d6>
	
	if (key_code>=KEY_CB_START) { // Catboard keys
 688:	7d 36       	cpi	r23, 0x6D	; 109
 68a:	08 f4       	brcc	.+2      	; 0x68e <key_press+0xa8>
 68c:	e0 c0       	rjmp	.+448    	; 0x84e <key_press+0x268>
		if (key_code==KEY_ALT_TAB) { // AltTab press
 68e:	7d 37       	cpi	r23, 0x7D	; 125
 690:	19 f5       	brne	.+70     	; 0x6d8 <key_press+0xf2>
			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 692:	f9 01       	movw	r30, r18
 694:	e6 5b       	subi	r30, 0xB6	; 182
 696:	fd 4f       	sbci	r31, 0xFD	; 253
 698:	80 81       	ld	r24, Z
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	19 f4       	brne	.+6      	; 0x6a4 <key_press+0xbe>
				usb_keyboard_press(KEY_TAB, KEY_ALT);
 69e:	64 e0       	ldi	r22, 0x04	; 4
 6a0:	8b e2       	ldi	r24, 0x2B	; 43
 6a2:	5c c0       	rjmp	.+184    	; 0x75c <key_press+0x176>
			} else { // Alt press, Tab press and release
				if (! mod_keys) {
 6a4:	61 11       	cpse	r22, r1
 6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <key_press+0xca>
					mod_keys |= (KEY_ALT);
 6a8:	84 e0       	ldi	r24, 0x04	; 4
 6aa:	80 93 3d 02 	sts	0x023D, r24
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <key_press+0xce>
				} else {
					pressed[key_id] = KEY_PRESSED_ALT;
 6b0:	83 e0       	ldi	r24, 0x03	; 3
 6b2:	80 83       	st	Z, r24
				}
				keyboard_modifier_keys = mod_keys;
 6b4:	80 91 3d 02 	lds	r24, 0x023D
 6b8:	80 93 3f 02 	sts	0x023F, r24
				keyboard_keys[0] = KEY_TAB;
 6bc:	8b e2       	ldi	r24, 0x2B	; 43
 6be:	80 93 40 02 	sts	0x0240, r24
				usb_keyboard_send();
 6c2:	6b d2       	rcall	.+1238   	; 0xb9a <usb_keyboard_send>
 6c4:	2f ef       	ldi	r18, 0xFF	; 255
 6c6:	40 e7       	ldi	r20, 0x70	; 112
 6c8:	82 e0       	ldi	r24, 0x02	; 2
 6ca:	21 50       	subi	r18, 0x01	; 1
 6cc:	40 40       	sbci	r20, 0x00	; 0
 6ce:	80 40       	sbci	r24, 0x00	; 0
 6d0:	e1 f7       	brne	.-8      	; 0x6ca <key_press+0xe4>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <key_press+0xee>
 6d4:	00 00       	nop
 6d6:	13 c1       	rjmp	.+550    	; 0x8fe <key_press+0x318>
 6d8:	7e 37       	cpi	r23, 0x7E	; 126
				_delay_ms(50);
				send();
			}
		} else if (key_code==KEY_FN_LOCK) { // FnLock
 6da:	49 f5       	brne	.+82     	; 0x72e <key_press+0x148>
 6dc:	f9 01       	movw	r30, r18
			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 6de:	e6 5b       	subi	r30, 0xB6	; 182
 6e0:	fd 4f       	sbci	r31, 0xFD	; 253
 6e2:	80 81       	ld	r24, Z
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	09 f0       	breq	.+2      	; 0x6ea <key_press+0x104>
 6e8:	0b c1       	rjmp	.+534    	; 0x900 <key_press+0x31a>
 6ea:	62 72       	andi	r22, 0x22	; 34
 6ec:	09 f4       	brne	.+2      	; 0x6f0 <key_press+0x10a>
 6ee:	08 c1       	rjmp	.+528    	; 0x900 <key_press+0x31a>
 6f0:	20 91 3b 02 	lds	r18, 0x023B
				if (prev_layer) { // FnLock Off
 6f4:	30 91 3c 02 	lds	r19, 0x023C
 6f8:	21 15       	cp	r18, r1
 6fa:	31 05       	cpc	r19, r1
 6fc:	49 f0       	breq	.+18     	; 0x710 <key_press+0x12a>
 6fe:	30 93 0b 01 	sts	0x010B, r19
					layout = prev_layer;
 702:	20 93 0a 01 	sts	0x010A, r18
 706:	10 92 3c 02 	sts	0x023C, r1
					prev_layer = 0;
 70a:	10 92 3b 02 	sts	0x023B, r1
 70e:	f8 c0       	rjmp	.+496    	; 0x900 <key_press+0x31a>
 710:	80 91 0a 01 	lds	r24, 0x010A
				} else { // FnLock On
					prev_layer = layout;
 714:	90 91 0b 01 	lds	r25, 0x010B
 718:	90 93 3c 02 	sts	0x023C, r25
 71c:	80 93 3b 02 	sts	0x023B, r24
 720:	8f e0       	ldi	r24, 0x0F	; 15
					layout = layer_fnlock;
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	90 93 0b 01 	sts	0x010B, r25
 728:	80 93 0a 01 	sts	0x010A, r24
 72c:	e9 c0       	rjmp	.+466    	; 0x900 <key_press+0x31a>
 72e:	7c 37       	cpi	r23, 0x7C	; 124
				}
			}
		} else if (key_code==KEY_OS_MODE) { // Mac mode
 730:	b9 f4       	brne	.+46     	; 0x760 <key_press+0x17a>
 732:	f9 01       	movw	r30, r18
			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 734:	e6 5b       	subi	r30, 0xB6	; 182
 736:	fd 4f       	sbci	r31, 0xFD	; 253
 738:	80 81       	ld	r24, Z
 73a:	81 30       	cpi	r24, 0x01	; 1
 73c:	71 f4       	brne	.+28     	; 0x75a <key_press+0x174>
 73e:	86 2f       	mov	r24, r22
 740:	82 72       	andi	r24, 0x22	; 34
 742:	59 f0       	breq	.+22     	; 0x75a <key_press+0x174>
 744:	80 91 0c 01 	lds	r24, 0x010C
				os_mode++;
 748:	8f 5f       	subi	r24, 0xFF	; 255
 74a:	80 93 0c 01 	sts	0x010C, r24
 74e:	83 30       	cpi	r24, 0x03	; 3
				if (os_mode>2) os_mode = 0;
 750:	08 f4       	brcc	.+2      	; 0x754 <key_press+0x16e>
 752:	d6 c0       	rjmp	.+428    	; 0x900 <key_press+0x31a>
 754:	10 92 0c 01 	sts	0x010C, r1
 758:	d3 c0       	rjmp	.+422    	; 0x900 <key_press+0x31a>
 75a:	8c e2       	ldi	r24, 0x2C	; 44
			} else { // Press Space
				usb_keyboard_press(KEY_SPACE, mod_keys);
 75c:	58 d2       	rcall	.+1200   	; 0xc0e <usb_keyboard_press>
 75e:	d0 c0       	rjmp	.+416    	; 0x900 <key_press+0x31a>
 760:	7d 36       	cpi	r23, 0x6D	; 109
 762:	91 f4       	brne	.+36     	; 0x788 <key_press+0x1a2>
			}
		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 764:	86 2f       	mov	r24, r22
 766:	82 72       	andi	r24, 0x22	; 34
			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 768:	39 f0       	breq	.+14     	; 0x778 <key_press+0x192>
 76a:	f9 01       	movw	r30, r18
 76c:	e6 5b       	subi	r30, 0xB6	; 182
				pressed[key_id] = KEY_PRESSED_CTRL;
 76e:	fd 4f       	sbci	r31, 0xFD	; 253
 770:	85 e0       	ldi	r24, 0x05	; 5
 772:	80 83       	st	Z, r24
 774:	61 60       	ori	r22, 0x01	; 1
 776:	19 c0       	rjmp	.+50     	; 0x7aa <key_press+0x1c4>
				mod_keys |= KEY_CTRL;
 778:	66 23       	and	r22, r22
 77a:	b1 f0       	breq	.+44     	; 0x7a8 <key_press+0x1c2>
				send();
			} else {
				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 77c:	f9 01       	movw	r30, r18
 77e:	e6 5b       	subi	r30, 0xB6	; 182
 780:	fd 4f       	sbci	r31, 0xFD	; 253
 782:	84 e0       	ldi	r24, 0x04	; 4
 784:	80 83       	st	Z, r24
 786:	10 c0       	rjmp	.+32     	; 0x7a8 <key_press+0x1c2>
 788:	7e 36       	cpi	r23, 0x6E	; 110
 78a:	11 f4       	brne	.+4      	; 0x790 <key_press+0x1aa>
				mod_keys |= KEY_SHIFT;
				send();
			}
		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 78c:	60 62       	ori	r22, 0x20	; 32
 78e:	0d c0       	rjmp	.+26     	; 0x7aa <key_press+0x1c4>
			mod_keys |= KEY_RIGHT_SHIFT;
 790:	7b 37       	cpi	r23, 0x7B	; 123
 792:	41 f4       	brne	.+16     	; 0x7a4 <key_press+0x1be>
			send();
		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 91 02 01 	lds	r25, 0x0102
			turbo_repeat = ! turbo_repeat;
 79a:	91 11       	cpse	r25, r1
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	80 93 02 01 	sts	0x0102, r24
 7a2:	ae c0       	rjmp	.+348    	; 0x900 <key_press+0x31a>
 7a4:	77 37       	cpi	r23, 0x77	; 119
 7a6:	21 f4       	brne	.+8      	; 0x7b0 <key_press+0x1ca>
		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 7a8:	62 60       	ori	r22, 0x02	; 2
 7aa:	60 93 3d 02 	sts	0x023D, r22
			mod_keys |= KEY_SHIFT;
 7ae:	a7 c0       	rjmp	.+334    	; 0x8fe <key_press+0x318>
 7b0:	7f 36       	cpi	r23, 0x6F	; 111
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <key_press+0x1d0>
			send();
		} else if (key_code==KEY_MACRO) { // TODO: My Macro
 7b4:	a5 c0       	rjmp	.+330    	; 0x900 <key_press+0x31a>
 7b6:	7a 37       	cpi	r23, 0x7A	; 122
 7b8:	d1 f4       	brne	.+52     	; 0x7ee <key_press+0x208>
			uint16_t *macros;
			uint16_t *macros = macros_press[macros_pos_index];
			for (i==0; i<sizeof(macros); i=i+2) {
				usb_keyboard_press(macros[i], macros[i+1]);
			}*/
		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
 7ba:	10 c0       	rjmp	.+32     	; 0x7dc <key_press+0x1f6>
 7bc:	10 92 3a 02 	sts	0x023A, r1
			if (locked) {
				locked = 0;
 7c0:	80 91 01 01 	lds	r24, 0x0101
				if (led) {
 7c4:	88 23       	and	r24, r24
 7c6:	09 f4       	brne	.+2      	; 0x7ca <key_press+0x1e4>
 7c8:	9b c0       	rjmp	.+310    	; 0x900 <key_press+0x31a>
 7ca:	20 91 0a 01 	lds	r18, 0x010A
					if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 7ce:	30 91 0b 01 	lds	r19, 0x010B
 7d2:	91 e0       	ldi	r25, 0x01	; 1
 7d4:	27 38       	cpi	r18, 0x87	; 135
 7d6:	39 07       	cpc	r19, r25
 7d8:	61 f1       	breq	.+88     	; 0x832 <key_press+0x24c>
 7da:	24 c0       	rjmp	.+72     	; 0x824 <key_press+0x23e>
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	80 93 3a 02 	sts	0x023A, r24
					if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
				}
			} else {
				locked = 1;
 7e2:	5e 9a       	sbi	0x0b, 6	; 11
 7e4:	46 9a       	sbi	0x08, 6	; 8
				LED_OFF;
 7e6:	59 98       	cbi	0x0b, 1	; 11
				LED_RED_OFF;
 7e8:	68 e0       	ldi	r22, 0x08	; 8
				LED_BLUE_OFF;
 7ea:	8f e0       	ldi	r24, 0x0F	; 15
				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
 7ec:	b7 cf       	rjmp	.-146    	; 0x75c <key_press+0x176>
 7ee:	79 37       	cpi	r23, 0x79	; 121
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <key_press+0x20e>
			}
		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
 7f2:	86 c0       	rjmp	.+268    	; 0x900 <key_press+0x31a>
 7f4:	62 72       	andi	r22, 0x22	; 34
 7f6:	09 f4       	brne	.+2      	; 0x7fa <key_press+0x214>
 7f8:	83 c0       	rjmp	.+262    	; 0x900 <key_press+0x31a>
 7fa:	80 91 01 01 	lds	r24, 0x0101
			if (led) {
 7fe:	88 23       	and	r24, r24
 800:	31 f0       	breq	.+12     	; 0x80e <key_press+0x228>
 802:	10 92 01 01 	sts	0x0101, r1
				led = 0;
 806:	5e 9a       	sbi	0x0b, 6	; 11
 808:	46 9a       	sbi	0x08, 6	; 8
				LED_OFF;
 80a:	59 98       	cbi	0x0b, 1	; 11
				LED_RED_OFF;
 80c:	79 c0       	rjmp	.+242    	; 0x900 <key_press+0x31a>
				LED_BLUE_OFF;
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	80 93 01 01 	sts	0x0101, r24
			} else {
				led = 1;
 814:	20 91 0a 01 	lds	r18, 0x010A
				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 818:	30 91 0b 01 	lds	r19, 0x010B
 81c:	41 e0       	ldi	r20, 0x01	; 1
 81e:	27 38       	cpi	r18, 0x87	; 135
 820:	34 07       	cpc	r19, r20
 822:	39 f0       	breq	.+14     	; 0x832 <key_press+0x24c>
 824:	80 91 3b 02 	lds	r24, 0x023B
 828:	90 91 3c 02 	lds	r25, 0x023C
 82c:	87 58       	subi	r24, 0x87	; 135
 82e:	91 40       	sbci	r25, 0x01	; 1
 830:	09 f4       	brne	.+2      	; 0x834 <key_press+0x24e>
 832:	59 9a       	sbi	0x0b, 1	; 11
 834:	26 5f       	subi	r18, 0xF6	; 246
 836:	31 40       	sbci	r19, 0x01	; 1
				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 838:	41 f0       	breq	.+16     	; 0x84a <key_press+0x264>
 83a:	80 91 3b 02 	lds	r24, 0x023B
 83e:	90 91 3c 02 	lds	r25, 0x023C
 842:	86 5f       	subi	r24, 0xF6	; 246
 844:	91 40       	sbci	r25, 0x01	; 1
 846:	09 f0       	breq	.+2      	; 0x84a <key_press+0x264>
 848:	5b c0       	rjmp	.+182    	; 0x900 <key_press+0x31a>
 84a:	46 98       	cbi	0x08, 6	; 8
 84c:	59 c0       	rjmp	.+178    	; 0x900 <key_press+0x31a>
 84e:	75 36       	cpi	r23, 0x65	; 101
 850:	b0 f1       	brcs	.+108    	; 0x8be <key_press+0x2d8>
			}
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys
 852:	80 91 0c 01 	lds	r24, 0x010C
		if (os_mode==2 && key_code==KEY_LCTRL) {
 856:	82 30       	cpi	r24, 0x02	; 2
 858:	39 f4       	brne	.+14     	; 0x868 <key_press+0x282>
 85a:	75 36       	cpi	r23, 0x65	; 101
 85c:	09 f4       	brne	.+2      	; 0x860 <key_press+0x27a>
 85e:	16 c0       	rjmp	.+44     	; 0x88c <key_press+0x2a6>
 860:	79 36       	cpi	r23, 0x69	; 105
 862:	09 f0       	breq	.+2      	; 0x866 <key_press+0x280>
			mod_keys |= KEY_GUI;
		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 864:	6d c0       	rjmp	.+218    	; 0x940 <key_press+0x35a>
 866:	02 c0       	rjmp	.+4      	; 0x86c <key_press+0x286>
 868:	7c 36       	cpi	r23, 0x6C	; 108
 86a:	11 f4       	brne	.+4      	; 0x870 <key_press+0x28a>
 86c:	60 68       	ori	r22, 0x80	; 128
 86e:	19 c0       	rjmp	.+50     	; 0x8a2 <key_press+0x2bc>
			mod_keys |= KEY_RIGHT_GUI;
 870:	75 36       	cpi	r23, 0x65	; 101
 872:	11 f4       	brne	.+4      	; 0x878 <key_press+0x292>
		} else if (key_code==KEY_LCTRL) {
 874:	61 60       	ori	r22, 0x01	; 1
 876:	15 c0       	rjmp	.+42     	; 0x8a2 <key_press+0x2bc>
			mod_keys |= KEY_CTRL;
 878:	76 36       	cpi	r23, 0x66	; 102
 87a:	11 f4       	brne	.+4      	; 0x880 <key_press+0x29a>
		} else if (key_code==KEY_LSHIFT) {
 87c:	62 60       	ori	r22, 0x02	; 2
 87e:	11 c0       	rjmp	.+34     	; 0x8a2 <key_press+0x2bc>
			mod_keys |= KEY_SHIFT;
 880:	77 36       	cpi	r23, 0x67	; 103
 882:	11 f4       	brne	.+4      	; 0x888 <key_press+0x2a2>
		} else if (key_code==KEY_LALT) {
 884:	64 60       	ori	r22, 0x04	; 4
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <key_press+0x2bc>
			mod_keys |= KEY_ALT;
 888:	78 36       	cpi	r23, 0x68	; 104
 88a:	11 f4       	brne	.+4      	; 0x890 <key_press+0x2aa>
		} else if (key_code==KEY_LGUI) {
 88c:	68 60       	ori	r22, 0x08	; 8
 88e:	09 c0       	rjmp	.+18     	; 0x8a2 <key_press+0x2bc>
			mod_keys |= KEY_GUI;
 890:	79 36       	cpi	r23, 0x69	; 105
 892:	11 f4       	brne	.+4      	; 0x898 <key_press+0x2b2>
		} else if (key_code==KEY_RCTRL) {
 894:	60 61       	ori	r22, 0x10	; 16
 896:	05 c0       	rjmp	.+10     	; 0x8a2 <key_press+0x2bc>
			mod_keys |= KEY_RIGHT_CTRL;
 898:	7a 36       	cpi	r23, 0x6A	; 106
 89a:	11 f4       	brne	.+4      	; 0x8a0 <key_press+0x2ba>
		} else if (key_code==KEY_RSHIFT) {
 89c:	60 62       	ori	r22, 0x20	; 32
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <key_press+0x2bc>
			mod_keys |= KEY_RIGHT_SHIFT;
 8a0:	60 64       	ori	r22, 0x40	; 64
 8a2:	60 93 3d 02 	sts	0x023D, r22
		} else if (key_code==KEY_RALT) {
			mod_keys |= KEY_RIGHT_ALT;
 8a6:	28 dd       	rcall	.-1456   	; 0x2f8 <send>
 8a8:	10 92 39 02 	sts	0x0239, r1
		} else if (key_code==KEY_RGUI) {
			mod_keys |= KEY_RIGHT_GUI;
		}
		send();
 8ac:	10 92 38 02 	sts	0x0238, r1
		press_time = 0;
 8b0:	10 92 35 02 	sts	0x0235, r1
 8b4:	10 92 34 02 	sts	0x0234, r1
		press_time2 = 0;
		release_time = 0;
 8b8:	10 92 00 01 	sts	0x0100, r1
 8bc:	21 c0       	rjmp	.+66     	; 0x900 <key_press+0x31a>
		repeat_time = 0;
		last_key = 0;
 8be:	80 91 00 01 	lds	r24, 0x0100
 8c2:	8c 13       	cpse	r24, r28
		/*if (mod_keys & (KEY_ALT|KEY_RIGHT_ALT)) { // TODO: typo
			uint16_t num = layer2_typo[0];
			char str[4];
			itoa(num, &str, 16);
		}*/
		if (! (last_key==key_id && release_time<10)) { // debounce
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <key_press+0x2ec>
 8c6:	80 91 34 02 	lds	r24, 0x0234
 8ca:	90 91 35 02 	lds	r25, 0x0235
 8ce:	0a 97       	sbiw	r24, 0x0a	; 10
 8d0:	b8 f0       	brcs	.+46     	; 0x900 <key_press+0x31a>
 8d2:	80 91 07 01 	lds	r24, 0x0107
 8d6:	80 93 08 01 	sts	0x0108, r24
			for (i=5; i>0; i--) queue[i] = queue[i-1];
 8da:	80 91 06 01 	lds	r24, 0x0106
 8de:	80 93 07 01 	sts	0x0107, r24
 8e2:	80 91 05 01 	lds	r24, 0x0105
 8e6:	80 93 06 01 	sts	0x0106, r24
 8ea:	80 91 04 01 	lds	r24, 0x0104
 8ee:	80 93 05 01 	sts	0x0105, r24
 8f2:	80 91 03 01 	lds	r24, 0x0103
 8f6:	80 93 04 01 	sts	0x0104, r24
 8fa:	c0 93 03 01 	sts	0x0103, r28
 8fe:	fc dc       	rcall	.-1544   	; 0x2f8 <send>
			queue[0] = key_id;
 900:	80 91 00 01 	lds	r24, 0x0100
			send();
 904:	8c 13       	cpse	r24, r28
 906:	07 c0       	rjmp	.+14     	; 0x916 <key_press+0x330>
		}
	}
	// Autorepeat
	if (last_key==key_id) { // calc press2
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	90 93 37 02 	sts	0x0237, r25
		press_time2 = 1;
 910:	80 93 36 02 	sts	0x0236, r24
 914:	10 c0       	rjmp	.+32     	; 0x936 <key_press+0x350>
 916:	c0 93 00 01 	sts	0x0100, r28
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	90 e0       	ldi	r25, 0x00	; 0
		repeat_time = 0;
	} else { // calc press1
		last_key = key_id;
 91e:	90 93 39 02 	sts	0x0239, r25
		press_time = 1;
 922:	80 93 38 02 	sts	0x0238, r24
 926:	10 92 37 02 	sts	0x0237, r1
 92a:	10 92 36 02 	sts	0x0236, r1
		press_time2 = 0;
 92e:	10 92 35 02 	sts	0x0235, r1
 932:	10 92 34 02 	sts	0x0234, r1
		release_time = 0;
 936:	10 92 33 02 	sts	0x0233, r1
 93a:	10 92 32 02 	sts	0x0232, r1
		repeat_time = 0;
 93e:	04 c0       	rjmp	.+8      	; 0x948 <key_press+0x362>
 940:	7c 36       	cpi	r23, 0x6C	; 108
 942:	09 f0       	breq	.+2      	; 0x946 <key_press+0x360>
 944:	99 cf       	rjmp	.-206    	; 0x878 <key_press+0x292>
 946:	92 cf       	rjmp	.-220    	; 0x86c <key_press+0x286>
			}
		}
	} else if (key_code>=KEY_LCTRL) { // Mod keys
		if (os_mode==2 && key_code==KEY_LCTRL) {
			mod_keys |= KEY_GUI;
		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 948:	cf 91       	pop	r28
 94a:	08 95       	ret

0000094c <repeat_tick>:
		LED_BLUE_OFF;
		if (led) LED_RED_ON;
	}
}

void repeat_tick(void) {
 94c:	80 91 32 02 	lds	r24, 0x0232
		press_time = 1;
		press_time2 = 0;
		release_time = 0;
		repeat_time = 0;
	}
}
 950:	90 91 33 02 	lds	r25, 0x0233
 954:	00 97       	sbiw	r24, 0x00	; 0
 956:	39 f1       	breq	.+78     	; 0x9a6 <repeat_tick+0x5a>
	}
}

void repeat_tick(void) {
	if (repeat_time) { // repeat pause
		if (repeat_time<(release_time>>2)) {
 958:	20 91 34 02 	lds	r18, 0x0234
 95c:	30 91 35 02 	lds	r19, 0x0235
 960:	36 95       	lsr	r19
 962:	27 95       	ror	r18
 964:	36 95       	lsr	r19
 966:	27 95       	ror	r18
 968:	82 17       	cp	r24, r18
 96a:	93 07       	cpc	r25, r19
 96c:	10 f4       	brcc	.+4      	; 0x972 <repeat_tick+0x26>
			repeat_time++;
 96e:	01 96       	adiw	r24, 0x01	; 1
 970:	3c c0       	rjmp	.+120    	; 0x9ea <repeat_tick+0x9e>
		} else { // repeat press
			repeat_time = 1;
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	90 93 33 02 	sts	0x0233, r25
 97a:	80 93 32 02 	sts	0x0232, r24
			if (turbo_repeat) {
 97e:	80 91 02 01 	lds	r24, 0x0102
 982:	88 23       	and	r24, r24
 984:	09 f4       	brne	.+2      	; 0x988 <repeat_tick+0x3c>
 986:	67 c0       	rjmp	.+206    	; 0xa56 <repeat_tick+0x10a>
				keyboard_modifier_keys = mod_keys;
 988:	80 91 3d 02 	lds	r24, 0x023D
 98c:	80 93 3f 02 	sts	0x023F, r24
				keyboard_keys[0] = get_code(last_key);
 990:	80 91 00 01 	lds	r24, 0x0100
 994:	8b dc       	rcall	.-1770   	; 0x2ac <get_code>
 996:	80 93 40 02 	sts	0x0240, r24
 99a:	ff d0       	rcall	.+510    	; 0xb9a <usb_keyboard_send>
				if (! usb_keyboard_send()) { // repeat release
 99c:	81 11       	cpse	r24, r1
 99e:	5b c0       	rjmp	.+182    	; 0xa56 <repeat_tick+0x10a>
 9a0:	10 92 40 02 	sts	0x0240, r1
					keyboard_keys[0] = 0;
 9a4:	fa c0       	rjmp	.+500    	; 0xb9a <usb_keyboard_send>
 9a6:	20 91 36 02 	lds	r18, 0x0236
					usb_keyboard_send();
 9aa:	30 91 37 02 	lds	r19, 0x0237
				}
			}
		}
	} else if (press_time2) { // press2 pause
 9ae:	80 91 38 02 	lds	r24, 0x0238
 9b2:	90 91 39 02 	lds	r25, 0x0239
 9b6:	21 15       	cp	r18, r1
 9b8:	31 05       	cpc	r19, r1
 9ba:	e1 f0       	breq	.+56     	; 0x9f4 <repeat_tick+0xa8>
 9bc:	40 91 71 02 	lds	r20, 0x0271
 9c0:	44 23       	and	r20, r20
		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 9c2:	19 f0       	breq	.+6      	; 0x9ca <repeat_tick+0x7e>
 9c4:	45 e0       	ldi	r20, 0x05	; 5
 9c6:	50 e0       	ldi	r21, 0x00	; 0
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <repeat_tick+0x82>
 9ca:	4e e1       	ldi	r20, 0x1E	; 30
 9cc:	50 e0       	ldi	r21, 0x00	; 0
 9ce:	84 0f       	add	r24, r20
 9d0:	95 1f       	adc	r25, r21
 9d2:	28 17       	cp	r18, r24
 9d4:	39 07       	cpc	r19, r25
 9d6:	38 f4       	brcc	.+14     	; 0x9e6 <repeat_tick+0x9a>
 9d8:	2f 5f       	subi	r18, 0xFF	; 255
 9da:	3f 4f       	sbci	r19, 0xFF	; 255
 9dc:	30 93 37 02 	sts	0x0237, r19
			press_time2++;
 9e0:	20 93 36 02 	sts	0x0236, r18
 9e4:	08 95       	ret
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	90 93 33 02 	sts	0x0233, r25
		} else {
			repeat_time = 1;
 9ee:	80 93 32 02 	sts	0x0232, r24
 9f2:	08 95       	ret
 9f4:	20 91 34 02 	lds	r18, 0x0234
 9f8:	30 91 35 02 	lds	r19, 0x0235
		}
	} else if (release_time) { // release pause
 9fc:	21 15       	cp	r18, r1
 9fe:	31 05       	cpc	r19, r1
 a00:	d9 f0       	breq	.+54     	; 0xa38 <repeat_tick+0xec>
 a02:	c2 96       	adiw	r24, 0x32	; 50
 a04:	28 17       	cp	r18, r24
 a06:	39 07       	cpc	r19, r25
		if (release_time<(press_time+50)) {
 a08:	38 f4       	brcc	.+14     	; 0xa18 <repeat_tick+0xcc>
 a0a:	2f 5f       	subi	r18, 0xFF	; 255
 a0c:	3f 4f       	sbci	r19, 0xFF	; 255
 a0e:	30 93 35 02 	sts	0x0235, r19
			release_time++;
 a12:	20 93 34 02 	sts	0x0234, r18
 a16:	08 95       	ret
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	80 93 00 01 	sts	0x0100, r24
		} else {
			last_key = 0xFF;
 a1e:	10 92 35 02 	sts	0x0235, r1
 a22:	10 92 34 02 	sts	0x0234, r1
			release_time = 0;
 a26:	10 92 39 02 	sts	0x0239, r1
 a2a:	10 92 38 02 	sts	0x0238, r1
			press_time = 0;
 a2e:	10 92 37 02 	sts	0x0237, r1
 a32:	10 92 36 02 	sts	0x0236, r1
			press_time2 = 0;
 a36:	08 95       	ret
 a38:	00 97       	sbiw	r24, 0x00	; 0
 a3a:	69 f0       	breq	.+26     	; 0xa56 <repeat_tick+0x10a>
 a3c:	8a 3f       	cpi	r24, 0xFA	; 250
			release_time = 0;
		}
	} else if (press_time) { // press1 pause
 a3e:	91 05       	cpc	r25, r1
 a40:	30 f4       	brcc	.+12     	; 0xa4e <repeat_tick+0x102>
		if (press_time<250) {
 a42:	01 96       	adiw	r24, 0x01	; 1
 a44:	90 93 39 02 	sts	0x0239, r25
			press_time++;
 a48:	80 93 38 02 	sts	0x0238, r24
 a4c:	08 95       	ret
 a4e:	10 92 39 02 	sts	0x0239, r1
 a52:	10 92 38 02 	sts	0x0238, r1
		} else {
			press_time = 0;
 a56:	08 95       	ret

00000a58 <poll>:
	LED_OFF;
	if (led) LED_RED_ON;
	caps_lock_led = keyboard_leds;
}

void poll() {
 a58:	7f 92       	push	r7
 a5a:	8f 92       	push	r8
 a5c:	9f 92       	push	r9
 a5e:	af 92       	push	r10
 a60:	bf 92       	push	r11
 a62:	cf 92       	push	r12
 a64:	df 92       	push	r13
 a66:	ef 92       	push	r14
 a68:	ff 92       	push	r15
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	7c ee       	ldi	r23, 0xEC	; 236
 a74:	e7 2e       	mov	r14, r23
 a76:	71 e0       	ldi	r23, 0x01	; 1
 a78:	f7 2e       	mov	r15, r23
 a7a:	07 ee       	ldi	r16, 0xE7	; 231
 a7c:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 a7e:	81 2c       	mov	r8, r1
		*row_port[row] &= ~row_bit[row];
 a80:	d7 01       	movw	r26, r14
 a82:	cd 91       	ld	r28, X+
 a84:	dd 91       	ld	r29, X+
 a86:	7d 01       	movw	r14, r26
 a88:	f8 01       	movw	r30, r16
 a8a:	91 90       	ld	r9, Z+
 a8c:	8f 01       	movw	r16, r30
 a8e:	99 2d       	mov	r25, r9
 a90:	90 95       	com	r25
 a92:	88 81       	ld	r24, Y
 a94:	89 23       	and	r24, r25
 a96:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a98:	f5 e0       	ldi	r31, 0x05	; 5
 a9a:	fa 95       	dec	r31
 a9c:	f1 f7       	brne	.-4      	; 0xa9a <poll+0x42>
 a9e:	00 00       	nop
 aa0:	5f ec       	ldi	r21, 0xCF	; 207
 aa2:	c5 2e       	mov	r12, r21
 aa4:	51 e0       	ldi	r21, 0x01	; 1
 aa6:	d5 2e       	mov	r13, r21
 aa8:	63 ec       	ldi	r22, 0xC3	; 195
 aaa:	a6 2e       	mov	r10, r22
 aac:	61 e0       	ldi	r22, 0x01	; 1
 aae:	b6 2e       	mov	r11, r22
 ab0:	71 2c       	mov	r7, r1
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
			key_id = col*ROWS+row;
 ab2:	87 2d       	mov	r24, r7
 ab4:	88 0d       	add	r24, r8
			if (! (*col_pin[col] & col_bit[col])) { // press key
 ab6:	d6 01       	movw	r26, r12
 ab8:	ed 91       	ld	r30, X+
 aba:	fd 91       	ld	r31, X+
 abc:	6d 01       	movw	r12, r26
 abe:	d5 01       	movw	r26, r10
 ac0:	9d 91       	ld	r25, X+
 ac2:	5d 01       	movw	r10, r26
 ac4:	20 81       	ld	r18, Z
 ac6:	92 23       	and	r25, r18
 ac8:	28 2f       	mov	r18, r24
 aca:	30 e0       	ldi	r19, 0x00	; 0
				if (! pressed[key_id]) {
 acc:	f9 01       	movw	r30, r18
 ace:	e6 5b       	subi	r30, 0xB6	; 182
 ad0:	fd 4f       	sbci	r31, 0xFD	; 253
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
			key_id = col*ROWS+row;
			if (! (*col_pin[col] & col_bit[col])) { // press key
 ad2:	91 11       	cpse	r25, r1
 ad4:	05 c0       	rjmp	.+10     	; 0xae0 <poll+0x88>
				if (! pressed[key_id]) {
 ad6:	90 81       	ld	r25, Z
 ad8:	91 11       	cpse	r25, r1
 ada:	05 c0       	rjmp	.+10     	; 0xae6 <poll+0x8e>
					key_press(key_id);
 adc:	84 dd       	rcall	.-1272   	; 0x5e6 <key_press>
 ade:	03 c0       	rjmp	.+6      	; 0xae6 <poll+0x8e>
 ae0:	90 81       	ld	r25, Z
				}
			} else if (pressed[key_id]) { // release key
 ae2:	91 11       	cpse	r25, r1
 ae4:	23 dc       	rcall	.-1978   	; 0x32c <key_release>
				key_release(key_id);
 ae6:	b5 e0       	ldi	r27, 0x05	; 5
 ae8:	7b 0e       	add	r7, r27
 aea:	ec e3       	ldi	r30, 0x3C	; 60
 aec:	7e 12       	cpse	r7, r30
void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
 aee:	e1 cf       	rjmp	.-62     	; 0xab2 <poll+0x5a>
 af0:	88 81       	ld	r24, Y
 af2:	89 29       	or	r24, r9
				}
			} else if (pressed[key_id]) { // release key
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
 af4:	88 83       	st	Y, r24
 af6:	83 94       	inc	r8
 af8:	8b 12       	cpse	r8, r27
	caps_lock_led = keyboard_leds;
}

void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 afa:	c2 cf       	rjmp	.-124    	; 0xa80 <poll+0x28>
 afc:	80 91 46 02 	lds	r24, 0x0246
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
	}
	if (caps_lock_led != (keyboard_leds & LED_CAPS_LOCK)) { // change layout
 b00:	82 70       	andi	r24, 0x02	; 2
 b02:	90 91 3e 02 	lds	r25, 0x023E
 b06:	98 13       	cpse	r25, r24
 b08:	69 db       	rcall	.-2350   	; 0x1dc <caps_lock_change_layer>
 b0a:	20 df       	rcall	.-448    	; 0x94c <repeat_tick>
		caps_lock_change_layer();
 b0c:	8f e1       	ldi	r24, 0x1F	; 31
 b0e:	9e e4       	ldi	r25, 0x4E	; 78
	}
	//if (keyboard_leds) LED_ON; else LED_OFF;
	repeat_tick();
 b10:	01 97       	sbiw	r24, 0x01	; 1
 b12:	f1 f7       	brne	.-4      	; 0xb10 <poll+0xb8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b14:	00 c0       	rjmp	.+0      	; 0xb16 <poll+0xbe>
 b16:	00 00       	nop
 b18:	df 91       	pop	r29
 b1a:	cf 91       	pop	r28
 b1c:	1f 91       	pop	r17
 b1e:	0f 91       	pop	r16
	_delay_ms(5);
}
 b20:	ff 90       	pop	r15
 b22:	ef 90       	pop	r14
 b24:	df 90       	pop	r13
 b26:	cf 90       	pop	r12
 b28:	bf 90       	pop	r11
 b2a:	af 90       	pop	r10
 b2c:	9f 90       	pop	r9
 b2e:	8f 90       	pop	r8
 b30:	7f 90       	pop	r7
 b32:	08 95       	ret

00000b34 <main>:
ÅÍÎÏ˝ÓÔÒÚÆ»
`¸˛Ç◊ı˜Â¯˘¿
*/


int main(void) {
 b34:	84 b7       	in	r24, 0x34	; 52
 b36:	87 7f       	andi	r24, 0xF7	; 247
 b38:	84 bf       	out	0x34, r24	; 52
	// Disable watchdog if enabled by bootloader/fuses
	MCUSR &= ~(1 << WDRF);
	wdt_disable();
 b3a:	88 e1       	ldi	r24, 0x18	; 24
 b3c:	0f b6       	in	r0, 0x3f	; 63
 b3e:	f8 94       	cli
 b40:	80 93 60 00 	sts	0x0060, r24
 b44:	10 92 60 00 	sts	0x0060, r1
 b48:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	80 e8       	ldi	r24, 0x80	; 128
 b4e:	0f b6       	in	r0, 0x3f	; 63
 b50:	f8 94       	cli
 b52:	80 93 61 00 	sts	0x0061, r24
 b56:	90 93 61 00 	sts	0x0061, r25
 b5a:	0f be       	out	0x3f, r0	; 63

	// Disable clock division
	clock_prescale_set(clock_div_1);

	init();
 b5c:	1b db       	rcall	.-2506   	; 0x194 <init>
 b5e:	7c df       	rcall	.-264    	; 0xa58 <poll>
	for (;;) {
		poll();
 b60:	fe cf       	rjmp	.-4      	; 0xb5e <main+0x2a>

00000b62 <usb_wait_in_ready>:
 b62:	80 91 e8 00 	lds	r24, 0x00E8
 b66:	80 ff       	sbrs	r24, 0
 b68:	fc cf       	rjmp	.-8      	; 0xb62 <usb_wait_in_ready>
 b6a:	08 95       	ret

00000b6c <usb_init>:
 b6c:	80 ea       	ldi	r24, 0xA0	; 160
 b6e:	80 93 d8 00 	sts	0x00D8, r24
 b72:	86 e0       	ldi	r24, 0x06	; 6
 b74:	89 bd       	out	0x29, r24	; 41
 b76:	09 b4       	in	r0, 0x29	; 41
 b78:	00 fe       	sbrs	r0, 0
 b7a:	fd cf       	rjmp	.-6      	; 0xb76 <usb_init+0xa>
 b7c:	80 e8       	ldi	r24, 0x80	; 128
 b7e:	80 93 d8 00 	sts	0x00D8, r24
 b82:	10 92 e0 00 	sts	0x00E0, r1
 b86:	10 92 47 02 	sts	0x0247, r1
 b8a:	8c e0       	ldi	r24, 0x0C	; 12
 b8c:	80 93 e2 00 	sts	0x00E2, r24
 b90:	78 94       	sei
 b92:	08 95       	ret

00000b94 <usb_configured>:
 b94:	80 91 47 02 	lds	r24, 0x0247
 b98:	08 95       	ret

00000b9a <usb_keyboard_send>:
 b9a:	80 91 47 02 	lds	r24, 0x0247
 b9e:	88 23       	and	r24, r24
 ba0:	91 f1       	breq	.+100    	; 0xc06 <usb_keyboard_send+0x6c>
 ba2:	8f b7       	in	r24, 0x3f	; 63
 ba4:	f8 94       	cli
 ba6:	93 e0       	ldi	r25, 0x03	; 3
 ba8:	90 93 e9 00 	sts	0x00E9, r25
 bac:	90 91 e4 00 	lds	r25, 0x00E4
 bb0:	9e 5c       	subi	r25, 0xCE	; 206
 bb2:	23 e0       	ldi	r18, 0x03	; 3
 bb4:	30 91 e8 00 	lds	r19, 0x00E8
 bb8:	35 fd       	sbrc	r19, 5
 bba:	0e c0       	rjmp	.+28     	; 0xbd8 <usb_keyboard_send+0x3e>
 bbc:	8f bf       	out	0x3f, r24	; 63
 bbe:	80 91 47 02 	lds	r24, 0x0247
 bc2:	88 23       	and	r24, r24
 bc4:	01 f1       	breq	.+64     	; 0xc06 <usb_keyboard_send+0x6c>
 bc6:	80 91 e4 00 	lds	r24, 0x00E4
 bca:	89 17       	cp	r24, r25
 bcc:	f1 f0       	breq	.+60     	; 0xc0a <usb_keyboard_send+0x70>
 bce:	8f b7       	in	r24, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	20 93 e9 00 	sts	0x00E9, r18
 bd6:	ee cf       	rjmp	.-36     	; 0xbb4 <usb_keyboard_send+0x1a>
 bd8:	90 91 3f 02 	lds	r25, 0x023F
 bdc:	90 93 f1 00 	sts	0x00F1, r25
 be0:	10 92 f1 00 	sts	0x00F1, r1
 be4:	e0 e4       	ldi	r30, 0x40	; 64
 be6:	f2 e0       	ldi	r31, 0x02	; 2
 be8:	91 91       	ld	r25, Z+
 bea:	90 93 f1 00 	sts	0x00F1, r25
 bee:	92 e0       	ldi	r25, 0x02	; 2
 bf0:	e6 34       	cpi	r30, 0x46	; 70
 bf2:	f9 07       	cpc	r31, r25
 bf4:	c9 f7       	brne	.-14     	; 0xbe8 <usb_keyboard_send+0x4e>
 bf6:	9a e3       	ldi	r25, 0x3A	; 58
 bf8:	90 93 e8 00 	sts	0x00E8, r25
 bfc:	10 92 48 02 	sts	0x0248, r1
 c00:	8f bf       	out	0x3f, r24	; 63
 c02:	80 e0       	ldi	r24, 0x00	; 0
 c04:	08 95       	ret
 c06:	8f ef       	ldi	r24, 0xFF	; 255
 c08:	08 95       	ret
 c0a:	8f ef       	ldi	r24, 0xFF	; 255
 c0c:	08 95       	ret

00000c0e <usb_keyboard_press>:
 c0e:	60 93 3f 02 	sts	0x023F, r22
 c12:	80 93 40 02 	sts	0x0240, r24
 c16:	c1 df       	rcall	.-126    	; 0xb9a <usb_keyboard_send>
 c18:	88 23       	and	r24, r24
 c1a:	29 f4       	brne	.+10     	; 0xc26 <usb_keyboard_press+0x18>
 c1c:	10 92 3f 02 	sts	0x023F, r1
 c20:	10 92 40 02 	sts	0x0240, r1
 c24:	ba cf       	rjmp	.-140    	; 0xb9a <usb_keyboard_send>
 c26:	08 95       	ret

00000c28 <__vector_11>:
 c28:	1f 92       	push	r1
 c2a:	0f 92       	push	r0
 c2c:	0f b6       	in	r0, 0x3f	; 63
 c2e:	0f 92       	push	r0
 c30:	11 24       	eor	r1, r1
 c32:	2f 93       	push	r18
 c34:	8f 93       	push	r24
 c36:	9f 93       	push	r25
 c38:	ef 93       	push	r30
 c3a:	ff 93       	push	r31
 c3c:	80 91 e1 00 	lds	r24, 0x00E1
 c40:	10 92 e1 00 	sts	0x00E1, r1
 c44:	83 ff       	sbrs	r24, 3
 c46:	0f c0       	rjmp	.+30     	; 0xc66 <__vector_11+0x3e>
 c48:	10 92 e9 00 	sts	0x00E9, r1
 c4c:	91 e0       	ldi	r25, 0x01	; 1
 c4e:	90 93 eb 00 	sts	0x00EB, r25
 c52:	10 92 ec 00 	sts	0x00EC, r1
 c56:	92 e2       	ldi	r25, 0x22	; 34
 c58:	90 93 ed 00 	sts	0x00ED, r25
 c5c:	98 e0       	ldi	r25, 0x08	; 8
 c5e:	90 93 f0 00 	sts	0x00F0, r25
 c62:	10 92 47 02 	sts	0x0247, r1
 c66:	82 ff       	sbrs	r24, 2
 c68:	34 c0       	rjmp	.+104    	; 0xcd2 <__vector_11+0xaa>
 c6a:	80 91 47 02 	lds	r24, 0x0247
 c6e:	88 23       	and	r24, r24
 c70:	81 f1       	breq	.+96     	; 0xcd2 <__vector_11+0xaa>
 c72:	20 91 0d 01 	lds	r18, 0x010D
 c76:	22 23       	and	r18, r18
 c78:	61 f1       	breq	.+88     	; 0xcd2 <__vector_11+0xaa>
 c7a:	80 91 49 02 	lds	r24, 0x0249
 c7e:	8f 5f       	subi	r24, 0xFF	; 255
 c80:	80 93 49 02 	sts	0x0249, r24
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	83 70       	andi	r24, 0x03	; 3
 c88:	90 70       	andi	r25, 0x00	; 0
 c8a:	00 97       	sbiw	r24, 0x00	; 0
 c8c:	11 f5       	brne	.+68     	; 0xcd2 <__vector_11+0xaa>
 c8e:	83 e0       	ldi	r24, 0x03	; 3
 c90:	80 93 e9 00 	sts	0x00E9, r24
 c94:	80 91 e8 00 	lds	r24, 0x00E8
 c98:	85 ff       	sbrs	r24, 5
 c9a:	1b c0       	rjmp	.+54     	; 0xcd2 <__vector_11+0xaa>
 c9c:	80 91 48 02 	lds	r24, 0x0248
 ca0:	8f 5f       	subi	r24, 0xFF	; 255
 ca2:	80 93 48 02 	sts	0x0248, r24
 ca6:	82 17       	cp	r24, r18
 ca8:	a1 f4       	brne	.+40     	; 0xcd2 <__vector_11+0xaa>
 caa:	10 92 48 02 	sts	0x0248, r1
 cae:	80 91 3f 02 	lds	r24, 0x023F
 cb2:	80 93 f1 00 	sts	0x00F1, r24
 cb6:	10 92 f1 00 	sts	0x00F1, r1
 cba:	e0 e4       	ldi	r30, 0x40	; 64
 cbc:	f2 e0       	ldi	r31, 0x02	; 2
 cbe:	81 91       	ld	r24, Z+
 cc0:	80 93 f1 00 	sts	0x00F1, r24
 cc4:	82 e0       	ldi	r24, 0x02	; 2
 cc6:	e6 34       	cpi	r30, 0x46	; 70
 cc8:	f8 07       	cpc	r31, r24
 cca:	c9 f7       	brne	.-14     	; 0xcbe <__vector_11+0x96>
 ccc:	8a e3       	ldi	r24, 0x3A	; 58
 cce:	80 93 e8 00 	sts	0x00E8, r24
 cd2:	ff 91       	pop	r31
 cd4:	ef 91       	pop	r30
 cd6:	9f 91       	pop	r25
 cd8:	8f 91       	pop	r24
 cda:	2f 91       	pop	r18
 cdc:	0f 90       	pop	r0
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	0f 90       	pop	r0
 ce2:	1f 90       	pop	r1
 ce4:	18 95       	reti

00000ce6 <__vector_12>:
 ce6:	1f 92       	push	r1
 ce8:	0f 92       	push	r0
 cea:	0f b6       	in	r0, 0x3f	; 63
 cec:	0f 92       	push	r0
 cee:	11 24       	eor	r1, r1
 cf0:	cf 92       	push	r12
 cf2:	df 92       	push	r13
 cf4:	ef 92       	push	r14
 cf6:	ff 92       	push	r15
 cf8:	0f 93       	push	r16
 cfa:	1f 93       	push	r17
 cfc:	2f 93       	push	r18
 cfe:	3f 93       	push	r19
 d00:	4f 93       	push	r20
 d02:	5f 93       	push	r21
 d04:	6f 93       	push	r22
 d06:	7f 93       	push	r23
 d08:	8f 93       	push	r24
 d0a:	9f 93       	push	r25
 d0c:	af 93       	push	r26
 d0e:	bf 93       	push	r27
 d10:	ef 93       	push	r30
 d12:	ff 93       	push	r31
 d14:	df 93       	push	r29
 d16:	cf 93       	push	r28
 d18:	0f 92       	push	r0
 d1a:	cd b7       	in	r28, 0x3d	; 61
 d1c:	de b7       	in	r29, 0x3e	; 62
 d1e:	10 92 e9 00 	sts	0x00E9, r1
 d22:	80 91 e8 00 	lds	r24, 0x00E8
 d26:	83 ff       	sbrs	r24, 3
 d28:	39 c1       	rjmp	.+626    	; 0xf9c <__vector_12+0x2b6>
 d2a:	20 91 f1 00 	lds	r18, 0x00F1
 d2e:	30 91 f1 00 	lds	r19, 0x00F1
 d32:	80 91 f1 00 	lds	r24, 0x00F1
 d36:	c8 2e       	mov	r12, r24
 d38:	dd 24       	eor	r13, r13
 d3a:	40 91 f1 00 	lds	r20, 0x00F1
 d3e:	94 2f       	mov	r25, r20
 d40:	80 e0       	ldi	r24, 0x00	; 0
 d42:	c8 2a       	or	r12, r24
 d44:	d9 2a       	or	r13, r25
 d46:	00 91 f1 00 	lds	r16, 0x00F1
 d4a:	10 e0       	ldi	r17, 0x00	; 0
 d4c:	40 91 f1 00 	lds	r20, 0x00F1
 d50:	94 2f       	mov	r25, r20
 d52:	80 e0       	ldi	r24, 0x00	; 0
 d54:	08 2b       	or	r16, r24
 d56:	19 2b       	or	r17, r25
 d58:	60 91 f1 00 	lds	r22, 0x00F1
 d5c:	a0 91 f1 00 	lds	r26, 0x00F1
 d60:	82 ef       	ldi	r24, 0xF2	; 242
 d62:	80 93 e8 00 	sts	0x00E8, r24
 d66:	36 30       	cpi	r19, 0x06	; 6
 d68:	09 f0       	breq	.+2      	; 0xd6c <__vector_12+0x86>
 d6a:	59 c0       	rjmp	.+178    	; 0xe1e <__vector_12+0x138>
 d6c:	8b e7       	ldi	r24, 0x7B	; 123
 d6e:	90 e0       	ldi	r25, 0x00	; 0
 d70:	9c 01       	movw	r18, r24
 d72:	25 50       	subi	r18, 0x05	; 5
 d74:	30 40       	sbci	r19, 0x00	; 0
 d76:	fc 01       	movw	r30, r24
 d78:	37 97       	sbiw	r30, 0x07	; 7
 d7a:	45 91       	lpm	r20, Z+
 d7c:	54 91       	lpm	r21, Z+
 d7e:	4c 15       	cp	r20, r12
 d80:	5d 05       	cpc	r21, r13
 d82:	f9 f4       	brne	.+62     	; 0xdc2 <__vector_12+0xdc>
 d84:	f9 01       	movw	r30, r18
 d86:	45 91       	lpm	r20, Z+
 d88:	54 91       	lpm	r21, Z+
 d8a:	40 17       	cp	r20, r16
 d8c:	51 07       	cpc	r21, r17
 d8e:	c9 f4       	brne	.+50     	; 0xdc2 <__vector_12+0xdc>
 d90:	2e 5f       	subi	r18, 0xFE	; 254
 d92:	3f 4f       	sbci	r19, 0xFF	; 255
 d94:	f9 01       	movw	r30, r18
 d96:	85 91       	lpm	r24, Z+
 d98:	94 91       	lpm	r25, Z+
 d9a:	2e 5f       	subi	r18, 0xFE	; 254
 d9c:	3f 4f       	sbci	r19, 0xFF	; 255
 d9e:	f9 01       	movw	r30, r18
 da0:	24 91       	lpm	r18, Z+
 da2:	46 2f       	mov	r20, r22
 da4:	50 e0       	ldi	r21, 0x00	; 0
 da6:	7a 2f       	mov	r23, r26
 da8:	60 e0       	ldi	r22, 0x00	; 0
 daa:	46 2b       	or	r20, r22
 dac:	57 2b       	or	r21, r23
 dae:	4f 3f       	cpi	r20, 0xFF	; 255
 db0:	51 05       	cpc	r21, r1
 db2:	19 f0       	breq	.+6      	; 0xdba <__vector_12+0xd4>
 db4:	10 f0       	brcs	.+4      	; 0xdba <__vector_12+0xd4>
 db6:	4f ef       	ldi	r20, 0xFF	; 255
 db8:	50 e0       	ldi	r21, 0x00	; 0
 dba:	42 17       	cp	r20, r18
 dbc:	50 f4       	brcc	.+20     	; 0xdd2 <__vector_12+0xec>
 dbe:	24 2f       	mov	r18, r20
 dc0:	08 c0       	rjmp	.+16     	; 0xdd2 <__vector_12+0xec>
 dc2:	07 96       	adiw	r24, 0x07	; 7
 dc4:	29 5f       	subi	r18, 0xF9	; 249
 dc6:	3f 4f       	sbci	r19, 0xFF	; 255
 dc8:	f0 e0       	ldi	r31, 0x00	; 0
 dca:	8c 3a       	cpi	r24, 0xAC	; 172
 dcc:	9f 07       	cpc	r25, r31
 dce:	99 f6       	brne	.-90     	; 0xd76 <__vector_12+0x90>
 dd0:	e5 c0       	rjmp	.+458    	; 0xf9c <__vector_12+0x2b6>
 dd2:	ae ef       	ldi	r26, 0xFE	; 254
 dd4:	40 91 e8 00 	lds	r20, 0x00E8
 dd8:	50 e0       	ldi	r21, 0x00	; 0
 dda:	ba 01       	movw	r22, r20
 ddc:	65 70       	andi	r22, 0x05	; 5
 dde:	70 70       	andi	r23, 0x00	; 0
 de0:	61 15       	cp	r22, r1
 de2:	71 05       	cpc	r23, r1
 de4:	b9 f3       	breq	.-18     	; 0xdd4 <__vector_12+0xee>
 de6:	42 fd       	sbrc	r20, 2
 de8:	dc c0       	rjmp	.+440    	; 0xfa2 <__vector_12+0x2bc>
 dea:	32 2f       	mov	r19, r18
 dec:	21 32       	cpi	r18, 0x21	; 33
 dee:	08 f0       	brcs	.+2      	; 0xdf2 <__vector_12+0x10c>
 df0:	30 e2       	ldi	r19, 0x20	; 32
 df2:	ac 01       	movw	r20, r24
 df4:	63 2f       	mov	r22, r19
 df6:	07 c0       	rjmp	.+14     	; 0xe06 <__vector_12+0x120>
 df8:	fa 01       	movw	r30, r20
 dfa:	4f 5f       	subi	r20, 0xFF	; 255
 dfc:	5f 4f       	sbci	r21, 0xFF	; 255
 dfe:	e4 91       	lpm	r30, Z+
 e00:	e0 93 f1 00 	sts	0x00F1, r30
 e04:	61 50       	subi	r22, 0x01	; 1
 e06:	66 23       	and	r22, r22
 e08:	b9 f7       	brne	.-18     	; 0xdf8 <__vector_12+0x112>
 e0a:	83 0f       	add	r24, r19
 e0c:	91 1d       	adc	r25, r1
 e0e:	23 1b       	sub	r18, r19
 e10:	a0 93 e8 00 	sts	0x00E8, r26
 e14:	22 23       	and	r18, r18
 e16:	f1 f6       	brne	.-68     	; 0xdd4 <__vector_12+0xee>
 e18:	30 32       	cpi	r19, 0x20	; 32
 e1a:	e1 f2       	breq	.-72     	; 0xdd4 <__vector_12+0xee>
 e1c:	c2 c0       	rjmp	.+388    	; 0xfa2 <__vector_12+0x2bc>
 e1e:	35 30       	cpi	r19, 0x05	; 5
 e20:	49 f4       	brne	.+18     	; 0xe34 <__vector_12+0x14e>
 e22:	8e ef       	ldi	r24, 0xFE	; 254
 e24:	80 93 e8 00 	sts	0x00E8, r24
 e28:	9c de       	rcall	.-712    	; 0xb62 <usb_wait_in_ready>
 e2a:	8c 2d       	mov	r24, r12
 e2c:	80 68       	ori	r24, 0x80	; 128
 e2e:	80 93 e3 00 	sts	0x00E3, r24
 e32:	b7 c0       	rjmp	.+366    	; 0xfa2 <__vector_12+0x2bc>
 e34:	39 30       	cpi	r19, 0x09	; 9
 e36:	31 f5       	brne	.+76     	; 0xe84 <__vector_12+0x19e>
 e38:	22 23       	and	r18, r18
 e3a:	09 f0       	breq	.+2      	; 0xe3e <__vector_12+0x158>
 e3c:	69 c0       	rjmp	.+210    	; 0xf10 <__vector_12+0x22a>
 e3e:	c0 92 47 02 	sts	0x0247, r12
 e42:	8e ef       	ldi	r24, 0xFE	; 254
 e44:	80 93 e8 00 	sts	0x00E8, r24
 e48:	41 e0       	ldi	r20, 0x01	; 1
 e4a:	85 ea       	ldi	r24, 0xA5	; 165
 e4c:	90 e0       	ldi	r25, 0x00	; 0
 e4e:	40 93 e9 00 	sts	0x00E9, r20
 e52:	fc 01       	movw	r30, r24
 e54:	01 96       	adiw	r24, 0x01	; 1
 e56:	e4 91       	lpm	r30, Z+
 e58:	e0 93 eb 00 	sts	0x00EB, r30
 e5c:	ee 23       	and	r30, r30
 e5e:	69 f0       	breq	.+26     	; 0xe7a <__vector_12+0x194>
 e60:	9c 01       	movw	r18, r24
 e62:	2f 5f       	subi	r18, 0xFF	; 255
 e64:	3f 4f       	sbci	r19, 0xFF	; 255
 e66:	fc 01       	movw	r30, r24
 e68:	84 91       	lpm	r24, Z+
 e6a:	80 93 ec 00 	sts	0x00EC, r24
 e6e:	c9 01       	movw	r24, r18
 e70:	01 96       	adiw	r24, 0x01	; 1
 e72:	f9 01       	movw	r30, r18
 e74:	24 91       	lpm	r18, Z+
 e76:	20 93 ed 00 	sts	0x00ED, r18
 e7a:	4f 5f       	subi	r20, 0xFF	; 255
 e7c:	45 30       	cpi	r20, 0x05	; 5
 e7e:	39 f7       	brne	.-50     	; 0xe4e <__vector_12+0x168>
 e80:	8e e1       	ldi	r24, 0x1E	; 30
 e82:	41 c0       	rjmp	.+130    	; 0xf06 <__vector_12+0x220>
 e84:	38 30       	cpi	r19, 0x08	; 8
 e86:	39 f4       	brne	.+14     	; 0xe96 <__vector_12+0x1b0>
 e88:	20 38       	cpi	r18, 0x80	; 128
 e8a:	09 f0       	breq	.+2      	; 0xe8e <__vector_12+0x1a8>
 e8c:	41 c0       	rjmp	.+130    	; 0xf10 <__vector_12+0x22a>
 e8e:	69 de       	rcall	.-814    	; 0xb62 <usb_wait_in_ready>
 e90:	80 91 47 02 	lds	r24, 0x0247
 e94:	61 c0       	rjmp	.+194    	; 0xf58 <__vector_12+0x272>
 e96:	33 23       	and	r19, r19
 e98:	a9 f4       	brne	.+42     	; 0xec4 <__vector_12+0x1de>
 e9a:	29 83       	std	Y+1, r18	; 0x01
 e9c:	62 de       	rcall	.-828    	; 0xb62 <usb_wait_in_ready>
 e9e:	29 81       	ldd	r18, Y+1	; 0x01
 ea0:	22 38       	cpi	r18, 0x82	; 130
 ea2:	51 f4       	brne	.+20     	; 0xeb8 <__vector_12+0x1d2>
 ea4:	00 93 e9 00 	sts	0x00E9, r16
 ea8:	90 91 eb 00 	lds	r25, 0x00EB
 eac:	81 e0       	ldi	r24, 0x01	; 1
 eae:	95 ff       	sbrs	r25, 5
 eb0:	80 e0       	ldi	r24, 0x00	; 0
 eb2:	10 92 e9 00 	sts	0x00E9, r1
 eb6:	01 c0       	rjmp	.+2      	; 0xeba <__vector_12+0x1d4>
 eb8:	80 e0       	ldi	r24, 0x00	; 0
 eba:	80 93 f1 00 	sts	0x00F1, r24
 ebe:	10 92 f1 00 	sts	0x00F1, r1
 ec2:	68 c0       	rjmp	.+208    	; 0xf94 <__vector_12+0x2ae>
 ec4:	31 30       	cpi	r19, 0x01	; 1
 ec6:	11 f0       	breq	.+4      	; 0xecc <__vector_12+0x1e6>
 ec8:	33 30       	cpi	r19, 0x03	; 3
 eca:	11 f5       	brne	.+68     	; 0xf10 <__vector_12+0x22a>
 ecc:	22 30       	cpi	r18, 0x02	; 2
 ece:	01 f5       	brne	.+64     	; 0xf10 <__vector_12+0x22a>
 ed0:	c1 14       	cp	r12, r1
 ed2:	d1 04       	cpc	r13, r1
 ed4:	e9 f4       	brne	.+58     	; 0xf10 <__vector_12+0x22a>
 ed6:	40 2f       	mov	r20, r16
 ed8:	4f 77       	andi	r20, 0x7F	; 127
 eda:	84 2f       	mov	r24, r20
 edc:	81 50       	subi	r24, 0x01	; 1
 ede:	84 30       	cpi	r24, 0x04	; 4
 ee0:	b8 f4       	brcc	.+46     	; 0xf10 <__vector_12+0x22a>
 ee2:	8e ef       	ldi	r24, 0xFE	; 254
 ee4:	80 93 e8 00 	sts	0x00E8, r24
 ee8:	40 93 e9 00 	sts	0x00E9, r20
 eec:	33 30       	cpi	r19, 0x03	; 3
 eee:	09 f4       	brne	.+2      	; 0xef2 <__vector_12+0x20c>
 ef0:	55 c0       	rjmp	.+170    	; 0xf9c <__vector_12+0x2b6>
 ef2:	89 e1       	ldi	r24, 0x19	; 25
 ef4:	80 93 eb 00 	sts	0x00EB, r24
 ef8:	81 e0       	ldi	r24, 0x01	; 1
 efa:	90 e0       	ldi	r25, 0x00	; 0
 efc:	02 c0       	rjmp	.+4      	; 0xf02 <__vector_12+0x21c>
 efe:	88 0f       	add	r24, r24
 f00:	99 1f       	adc	r25, r25
 f02:	4a 95       	dec	r20
 f04:	e2 f7       	brpl	.-8      	; 0xefe <__vector_12+0x218>
 f06:	80 93 ea 00 	sts	0x00EA, r24
 f0a:	10 92 ea 00 	sts	0x00EA, r1
 f0e:	49 c0       	rjmp	.+146    	; 0xfa2 <__vector_12+0x2bc>
 f10:	01 15       	cp	r16, r1
 f12:	11 05       	cpc	r17, r1
 f14:	09 f0       	breq	.+2      	; 0xf18 <__vector_12+0x232>
 f16:	42 c0       	rjmp	.+132    	; 0xf9c <__vector_12+0x2b6>
 f18:	21 3a       	cpi	r18, 0xA1	; 161
 f1a:	09 f5       	brne	.+66     	; 0xf5e <__vector_12+0x278>
 f1c:	31 30       	cpi	r19, 0x01	; 1
 f1e:	89 f4       	brne	.+34     	; 0xf42 <__vector_12+0x25c>
 f20:	20 de       	rcall	.-960    	; 0xb62 <usb_wait_in_ready>
 f22:	80 91 3f 02 	lds	r24, 0x023F
 f26:	80 93 f1 00 	sts	0x00F1, r24
 f2a:	10 92 f1 00 	sts	0x00F1, r1
 f2e:	e0 e4       	ldi	r30, 0x40	; 64
 f30:	f2 e0       	ldi	r31, 0x02	; 2
 f32:	81 91       	ld	r24, Z+
 f34:	80 93 f1 00 	sts	0x00F1, r24
 f38:	22 e0       	ldi	r18, 0x02	; 2
 f3a:	e6 34       	cpi	r30, 0x46	; 70
 f3c:	f2 07       	cpc	r31, r18
 f3e:	c9 f7       	brne	.-14     	; 0xf32 <__vector_12+0x24c>
 f40:	29 c0       	rjmp	.+82     	; 0xf94 <__vector_12+0x2ae>
 f42:	32 30       	cpi	r19, 0x02	; 2
 f44:	21 f4       	brne	.+8      	; 0xf4e <__vector_12+0x268>
 f46:	0d de       	rcall	.-998    	; 0xb62 <usb_wait_in_ready>
 f48:	80 91 0d 01 	lds	r24, 0x010D
 f4c:	05 c0       	rjmp	.+10     	; 0xf58 <__vector_12+0x272>
 f4e:	33 30       	cpi	r19, 0x03	; 3
 f50:	29 f5       	brne	.+74     	; 0xf9c <__vector_12+0x2b6>
 f52:	07 de       	rcall	.-1010   	; 0xb62 <usb_wait_in_ready>
 f54:	80 91 0e 01 	lds	r24, 0x010E
 f58:	80 93 f1 00 	sts	0x00F1, r24
 f5c:	1b c0       	rjmp	.+54     	; 0xf94 <__vector_12+0x2ae>
 f5e:	21 32       	cpi	r18, 0x21	; 33
 f60:	e9 f4       	brne	.+58     	; 0xf9c <__vector_12+0x2b6>
 f62:	39 30       	cpi	r19, 0x09	; 9
 f64:	61 f4       	brne	.+24     	; 0xf7e <__vector_12+0x298>
 f66:	80 91 e8 00 	lds	r24, 0x00E8
 f6a:	82 ff       	sbrs	r24, 2
 f6c:	fc cf       	rjmp	.-8      	; 0xf66 <__vector_12+0x280>
 f6e:	80 91 f1 00 	lds	r24, 0x00F1
 f72:	80 93 46 02 	sts	0x0246, r24
 f76:	8b ef       	ldi	r24, 0xFB	; 251
 f78:	80 93 e8 00 	sts	0x00E8, r24
 f7c:	0b c0       	rjmp	.+22     	; 0xf94 <__vector_12+0x2ae>
 f7e:	3a 30       	cpi	r19, 0x0A	; 10
 f80:	29 f4       	brne	.+10     	; 0xf8c <__vector_12+0x2a6>
 f82:	d0 92 0d 01 	sts	0x010D, r13
 f86:	10 92 48 02 	sts	0x0248, r1
 f8a:	04 c0       	rjmp	.+8      	; 0xf94 <__vector_12+0x2ae>
 f8c:	3b 30       	cpi	r19, 0x0B	; 11
 f8e:	31 f4       	brne	.+12     	; 0xf9c <__vector_12+0x2b6>
 f90:	c0 92 0e 01 	sts	0x010E, r12
 f94:	8e ef       	ldi	r24, 0xFE	; 254
 f96:	80 93 e8 00 	sts	0x00E8, r24
 f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <__vector_12+0x2bc>
 f9c:	81 e2       	ldi	r24, 0x21	; 33
 f9e:	80 93 eb 00 	sts	0x00EB, r24
 fa2:	0f 90       	pop	r0
 fa4:	cf 91       	pop	r28
 fa6:	df 91       	pop	r29
 fa8:	ff 91       	pop	r31
 faa:	ef 91       	pop	r30
 fac:	bf 91       	pop	r27
 fae:	af 91       	pop	r26
 fb0:	9f 91       	pop	r25
 fb2:	8f 91       	pop	r24
 fb4:	7f 91       	pop	r23
 fb6:	6f 91       	pop	r22
 fb8:	5f 91       	pop	r21
 fba:	4f 91       	pop	r20
 fbc:	3f 91       	pop	r19
 fbe:	2f 91       	pop	r18
 fc0:	1f 91       	pop	r17
 fc2:	0f 91       	pop	r16
 fc4:	ff 90       	pop	r15
 fc6:	ef 90       	pop	r14
 fc8:	df 90       	pop	r13
 fca:	cf 90       	pop	r12
 fcc:	0f 90       	pop	r0
 fce:	0f be       	out	0x3f, r0	; 63
 fd0:	0f 90       	pop	r0
 fd2:	1f 90       	pop	r1
 fd4:	18 95       	reti

00000fd6 <_exit>:
 fd6:	f8 94       	cli

00000fd8 <__stop_program>:
 fd8:	ff cf       	rjmp	.-2      	; 0xfd8 <__stop_program>
