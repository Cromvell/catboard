
catboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00000e88  00000f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800232  00800232  0000104e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000000be  00000000  00000000  00001839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000105d  00000000  00000000  000018f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000051b  00000000  00000000  00002954  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000b3e  00000000  00000000  00002e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001a0  00000000  00000000  000039b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000570  00000000  00000000  00003b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000f23  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b0  00000000  00000000  00004fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_pubtypes 0000007e  00000000  00000000  00005093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
   2:	00 00       	nop
   4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	00 00       	nop
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	00 00       	nop
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	00 00       	nop
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
  1e:	00 00       	nop
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	00 00       	nop
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	00 00       	nop
  28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c5       	rjmp	.+2728   	; 0xad6 <__vector_11>
  2e:	00 00       	nop
  30:	b1 c5       	rjmp	.+2914   	; 0xb94 <__vector_12>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
  36:	00 00       	nop
  38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
  46:	00 00       	nop
  48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
  4e:	00 00       	nop
  50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
  52:	00 00       	nop
  54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
  56:	00 00       	nop
  58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
  5e:	00 00       	nop
  60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
  62:	00 00       	nop
  64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
  66:	00 00       	nop
  68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
  6e:	00 00       	nop
  70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
  72:	00 00       	nop

00000074 <descriptor_list>:
  74:	00 01 00 00 ab 00 12 00 02 00 00 bd 00 22 00 22     ............."."
  84:	00 00 df 00 3f 00 21 00 00 cf 00 09 00 03 00 00     ....?.!.........
  94:	1e 01 04 01 03 09 04 22 01 0e 02 03 09 04 32 01     ......."......2.
  a4:	12                                                  .

000000a5 <endpoint_config_table>:
  a5:	00 00 01 c1 06 00                                   ......

000000ab <device_descriptor>:
  ab:	12 01 00 02 00 00 00 20 c0 16 7c 04 00 01 01 02     ....... ..|.....
  bb:	00 01                                               ..

000000bd <config1_descriptor>:
  bd:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  cd:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
  dd:	00 01                                               ..

000000df <keyboard_hid_report_desc>:
  df:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
  ef:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
  ff:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 10f:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

0000011e <string0>:
 11e:	04 03 09 04                                         ....

00000122 <string1>:
 122:	0e 03 69 00 62 00 6e 00 54 00 65 00 6f 00 00 00     ..i.b.n.T.e.o...

00000132 <string2>:
 132:	12 03 43 00 61 00 74 00 62 00 6f 00 61 00 72 00     ..C.a.t.b.o.a.r.
 142:	64 00 00 00                                         d...

00000146 <__ctors_end>:
 146:	11 24       	eor	r1, r1
 148:	1f be       	out	0x3f, r1	; 63
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	d2 e0       	ldi	r29, 0x02	; 2
 14e:	de bf       	out	0x3e, r29	; 62
 150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
 152:	12 e0       	ldi	r17, 0x02	; 2
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	b1 e0       	ldi	r27, 0x01	; 1
 158:	e8 e8       	ldi	r30, 0x88	; 136
 15a:	fe e0       	ldi	r31, 0x0E	; 14
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x10>
 15e:	05 90       	lpm	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	a2 33       	cpi	r26, 0x32	; 50
 164:	b1 07       	cpc	r27, r17
 166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0xc>

00000168 <__do_clear_bss>:
 168:	12 e0       	ldi	r17, 0x02	; 2
 16a:	a2 e3       	ldi	r26, 0x32	; 50
 16c:	b2 e0       	ldi	r27, 0x02	; 2
 16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
 170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
 172:	a6 38       	cpi	r26, 0x86	; 134
 174:	b1 07       	cpc	r27, r17
 176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
 178:	34 d4       	rcall	.+2152   	; 0x9e2 <main>
 17a:	84 c6       	rjmp	.+3336   	; 0xe84 <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <init_ports>:
#define LED_RED_OFF	(PORTC	|= (1<<6))
#define LED_RED_ON		(PORTC	&= ~(1<<6))

// Init ports
void init_ports(void) {
	DDRB  = 0b01001010; DDRC  = 0b00100000; DDRD  = 0b00000100;
 17e:	8a e4       	ldi	r24, 0x4A	; 74
 180:	84 b9       	out	0x04, r24	; 4
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	87 b9       	out	0x07, r24	; 7
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0xFF;		PORTC = 0xFF; 		PORTD = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	88 b9       	out	0x08, r24	; 8
 190:	8b b9       	out	0x0b, r24	; 11
 192:	08 95       	ret

00000194 <init>:
	}
}

void init(void) {
	// Set for 16 MHz clock
	CLKPR = 0x80; CLKPR = 0;
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	80 93 61 00 	sts	0x0061, r24
 19a:	10 92 61 00 	sts	0x0061, r1

	init_ports();
 19e:	ef df       	rcall	.-34     	; 0x17e <init_ports>
 1a0:	56 9a       	sbi	0x0a, 6	; 10

	LED_CONFIG;
 1a2:	3e 9a       	sbi	0x07, 6	; 7
	LED_RED_CONFIG;
 1a4:	51 9a       	sbi	0x0a, 1	; 10
	LED_BLUE_CONFIG;
 1a6:	46 9a       	sbi	0x08, 6	; 8

	LED_RED_OFF;
 1a8:	59 98       	cbi	0x0b, 1	; 11
	LED_BLUE_OFF;
 1aa:	80 91 01 01 	lds	r24, 0x0101
	if (led) LED_ON;
 1ae:	81 11       	cpse	r24, r1
 1b0:	5e 98       	cbi	0x0b, 6	; 11
 1b2:	ea e4       	ldi	r30, 0x4A	; 74
 1b4:	f2 e0       	ldi	r31, 0x02	; 2
 1b6:	11 92       	st	Z+, r1

	for (uint8_t i=0; i<KEYS; i++) {
		pressed[i] = 0;
 1b8:	82 e0       	ldi	r24, 0x02	; 2

	LED_RED_OFF;
	LED_BLUE_OFF;
	if (led) LED_ON;

	for (uint8_t i=0; i<KEYS; i++) {
 1ba:	e6 38       	cpi	r30, 0x86	; 134
 1bc:	f8 07       	cpc	r31, r24
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <init+0x22>
 1c0:	2c d4       	rcall	.+2136   	; 0xa1a <usb_init>
		pressed[i] = 0;
	}

	usb_init();
 1c2:	3f d4       	rcall	.+2174   	; 0xa42 <usb_configured>
 1c4:	88 23       	and	r24, r24
	while(!usb_configured());
 1c6:	e9 f3       	breq	.-6      	; 0x1c2 <init+0x2e>
 1c8:	5e 9a       	sbi	0x0b, 6	; 11
 1ca:	80 91 01 01 	lds	r24, 0x0101
	LED_OFF;
 1ce:	81 11       	cpse	r24, r1
	if (led) LED_RED_ON;
 1d0:	46 98       	cbi	0x08, 6	; 8
 1d2:	08 95       	ret

000001d4 <change_layout>:
			repeat_time = 0;
		}
	}
}

void change_layout(void) {
 1d4:	80 91 3e 02 	lds	r24, 0x023E
	}

	usb_init();
	while(!usb_configured());
	LED_OFF;
	if (led) LED_RED_ON;
 1d8:	88 23       	and	r24, r24
 1da:	91 f0       	breq	.+36     	; 0x200 <change_layout+0x2c>
	}
}

void change_layout(void) {
	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || mac_mode) { // Press Cmd+Space
		keyboard_modifier_keys = KEY_GUI;
 1dc:	88 e0       	ldi	r24, 0x08	; 8
 1de:	80 93 3f 02 	sts	0x023F, r24
		keyboard_keys[0] = 0;
 1e2:	10 92 40 02 	sts	0x0240, r1
		usb_keyboard_send();
 1e6:	30 d4       	rcall	.+2144   	; 0xa48 <usb_keyboard_send>
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	80 e7       	ldi	r24, 0x70	; 112
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <change_layout+0x1a>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <change_layout+0x24>
 1f8:	00 00       	nop
 1fa:	68 e0       	ldi	r22, 0x08	; 8
		_delay_ms(50);
		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 1fc:	8c e2       	ldi	r24, 0x2C	; 44
 1fe:	11 c0       	rjmp	.+34     	; 0x222 <change_layout+0x4e>
 200:	84 e0       	ldi	r24, 0x04	; 4
	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
		keyboard_modifier_keys = KEY_ALT;
 202:	80 93 3f 02 	sts	0x023F, r24
 206:	10 92 40 02 	sts	0x0240, r1
		keyboard_keys[0] = 0;
 20a:	1e d4       	rcall	.+2108   	; 0xa48 <usb_keyboard_send>
		usb_keyboard_send();
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	80 e7       	ldi	r24, 0x70	; 112
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <change_layout+0x3e>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <change_layout+0x48>
 21c:	00 00       	nop
 21e:	66 e0       	ldi	r22, 0x06	; 6
 220:	80 e0       	ldi	r24, 0x00	; 0
		_delay_ms(50);
		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 222:	4c c4       	rjmp	.+2200   	; 0xabc <usb_keyboard_press>

00000224 <get_code>:
	}
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
 224:	8c 33       	cpi	r24, 0x3C	; 60
 226:	10 f5       	brcc	.+68     	; 0x26c <get_code+0x48>
	uint8_t key_code = 0;
	if (key_id<KEYS) { // not 0xFF
		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	f9 01       	movw	r30, r18
 22e:	e6 5b       	subi	r30, 0xB6	; 182
 230:	fd 4f       	sbci	r31, 0xFD	; 253
 232:	90 81       	ld	r25, Z
 234:	91 30       	cpi	r25, 0x01	; 1
 236:	39 f4       	brne	.+14     	; 0x246 <get_code+0x22>
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 238:	f9 01       	movw	r30, r18
 23a:	e6 5b       	subi	r30, 0xB6	; 182
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	80 81       	ld	r24, Z
 240:	18 16       	cp	r1, r24
 242:	ac f0       	brlt	.+42     	; 0x26e <get_code+0x4a>
 244:	13 c0       	rjmp	.+38     	; 0x26c <get_code+0x48>
				key_code = layer_fn[key_id];
			}
		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from layer1
 246:	40 91 0a 01 	lds	r20, 0x010A
 24a:	50 91 0b 01 	lds	r21, 0x010B
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	4a 34       	cpi	r20, 0x4A	; 74
 252:	56 07       	cpc	r21, r22
 254:	31 f0       	breq	.+12     	; 0x262 <get_code+0x3e>
 256:	92 30       	cpi	r25, 0x02	; 2
 258:	21 f4       	brne	.+8      	; 0x262 <get_code+0x3e>
			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 25a:	f9 01       	movw	r30, r18
 25c:	ea 57       	subi	r30, 0x7A	; 122
 25e:	fe 4f       	sbci	r31, 0xFE	; 254
 260:	03 c0       	rjmp	.+6      	; 0x268 <get_code+0x44>
		} else {
			key_code = layout[key_id];
 262:	fa 01       	movw	r30, r20
 264:	e8 0f       	add	r30, r24
 266:	f1 1d       	adc	r31, r1
 268:	80 81       	ld	r24, Z
 26a:	08 95       	ret
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
 26c:	80 e0       	ldi	r24, 0x00	; 0
		} else {
			key_code = layout[key_id];
		}
	}
	return key_code;
}
 26e:	08 95       	ret

00000270 <send>:
		_delay_ms(50);
		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
	}
}

void send(void) {
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	c3 e0       	ldi	r28, 0x03	; 3
 27a:	d1 e0       	ldi	r29, 0x01	; 1
 27c:	00 e4       	ldi	r16, 0x40	; 64
 27e:	12 e0       	ldi	r17, 0x02	; 2
	uint8_t i;
	for (i=0; i<6; i++) {
		keyboard_keys[i] = get_code(queue[i]);
 280:	89 91       	ld	r24, Y+
 282:	d0 df       	rcall	.-96     	; 0x224 <get_code>
 284:	f8 01       	movw	r30, r16
 286:	81 93       	st	Z+, r24
 288:	8f 01       	movw	r16, r30
 28a:	f1 e0       	ldi	r31, 0x01	; 1
	}
}

void send(void) {
	uint8_t i;
	for (i=0; i<6; i++) {
 28c:	c9 30       	cpi	r28, 0x09	; 9
 28e:	df 07       	cpc	r29, r31
 290:	b9 f7       	brne	.-18     	; 0x280 <send+0x10>
 292:	80 91 3d 02 	lds	r24, 0x023D
		keyboard_keys[i] = get_code(queue[i]);
	}
	keyboard_modifier_keys = mod_keys;
 296:	80 93 3f 02 	sts	0x023F, r24
 29a:	df 91       	pop	r29
	usb_keyboard_send();
}
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	d2 c3       	rjmp	.+1956   	; 0xa48 <usb_keyboard_send>

000002a4 <key_release>:
	uint8_t i;
	for (i=0; i<6; i++) {
		keyboard_keys[i] = get_code(queue[i]);
	}
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	d8 2f       	mov	r29, r24
	}
}

void key_release(uint8_t key_id) {
	uint8_t i;
	int8_t pressed_key_id = pressed[key_id];
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	f9 01       	movw	r30, r18
 2b0:	e6 5b       	subi	r30, 0xB6	; 182
 2b2:	fd 4f       	sbci	r31, 0xFD	; 253
 2b4:	c0 81       	ld	r28, Z
	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 2b6:	c1 30       	cpi	r28, 0x01	; 1
 2b8:	21 f4       	brne	.+8      	; 0x2c2 <key_release+0x1e>
 2ba:	f9 01       	movw	r30, r18
 2bc:	e6 5b       	subi	r30, 0xB6	; 182
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	13 c0       	rjmp	.+38     	; 0x2e8 <key_release+0x44>
 2c2:	e0 91 0a 01 	lds	r30, 0x010A
 2c6:	f0 91 0b 01 	lds	r31, 0x010B
 2ca:	e2 0f       	add	r30, r18
 2cc:	f3 1f       	adc	r31, r19
 2ce:	90 81       	ld	r25, Z
	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 2d0:	c6 30       	cpi	r28, 0x06	; 6
 2d2:	59 f4       	brne	.+22     	; 0x2ea <key_release+0x46>
 2d4:	40 91 3b 02 	lds	r20, 0x023B
 2d8:	50 91 3c 02 	lds	r21, 0x023C
 2dc:	41 15       	cp	r20, r1
 2de:	51 05       	cpc	r21, r1
 2e0:	21 f0       	breq	.+8      	; 0x2ea <key_release+0x46>
		key_code = prev_layer[key_id];
 2e2:	fa 01       	movw	r30, r20
 2e4:	e2 0f       	add	r30, r18
 2e6:	f3 1f       	adc	r31, r19
 2e8:	90 81       	ld	r25, Z
	}
	pressed[key_id] = 0;
 2ea:	f9 01       	movw	r30, r18
 2ec:	e6 5b       	subi	r30, 0xB6	; 182
 2ee:	fd 4f       	sbci	r31, 0xFD	; 253
 2f0:	10 82       	st	Z, r1
	if (locked) return;
 2f2:	80 91 3a 02 	lds	r24, 0x023A
 2f6:	81 11       	cpse	r24, r1
 2f8:	f8 c0       	rjmp	.+496    	; 0x4ea <__stack+0x1eb>
	if (key_code>0xF0) { // Catboard keys release
 2fa:	91 3f       	cpi	r25, 0xF1	; 241
 2fc:	08 f4       	brcc	.+2      	; 0x300 <__stack+0x1>
 2fe:	a4 c0       	rjmp	.+328    	; 0x448 <__stack+0x149>
		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 300:	9d 3f       	cpi	r25, 0xFD	; 253
 302:	39 f4       	brne	.+14     	; 0x312 <__stack+0x13>
 304:	c3 30       	cpi	r28, 0x03	; 3
 306:	09 f4       	brne	.+2      	; 0x30a <__stack+0xb>
 308:	f0 c0       	rjmp	.+480    	; 0x4ea <__stack+0x1eb>
			mod_keys &= ~(KEY_ALT);
 30a:	80 91 3d 02 	lds	r24, 0x023D
 30e:	8b 7f       	andi	r24, 0xFB	; 251
 310:	b4 c0       	rjmp	.+360    	; 0x47a <__stack+0x17b>
			send();
		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 312:	91 3f       	cpi	r25, 0xF1	; 241
 314:	09 f0       	breq	.+2      	; 0x318 <__stack+0x19>
 316:	3d c0       	rjmp	.+122    	; 0x392 <__stack+0x93>
 318:	80 91 3d 02 	lds	r24, 0x023D
 31c:	c5 30       	cpi	r28, 0x05	; 5
 31e:	11 f4       	brne	.+4      	; 0x324 <__stack+0x25>
			mod_keys &= ~(KEY_CTRL);
 320:	8e 7f       	andi	r24, 0xFE	; 254
 322:	ab c0       	rjmp	.+342    	; 0x47a <__stack+0x17b>
			send();
		} else if (key_code==KEY_LAYER1) { // LAYER1
			mod_keys &= ~(KEY_SHIFT);
 324:	8d 7f       	andi	r24, 0xFD	; 253
 326:	80 93 3d 02 	sts	0x023D, r24
			send();
 32a:	a2 df       	rcall	.-188    	; 0x270 <send>
 32c:	80 91 00 01 	lds	r24, 0x0100
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 330:	8d 13       	cpse	r24, r29
 332:	86 c0       	rjmp	.+268    	; 0x440 <__stack+0x141>
 334:	80 91 38 02 	lds	r24, 0x0238
 338:	90 91 39 02 	lds	r25, 0x0239
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	09 f4       	brne	.+2      	; 0x342 <__stack+0x43>
 340:	7f c0       	rjmp	.+254    	; 0x440 <__stack+0x141>
 342:	c2 97       	sbiw	r24, 0x32	; 50
 344:	08 f0       	brcs	.+2      	; 0x348 <__stack+0x49>
 346:	7c c0       	rjmp	.+248    	; 0x440 <__stack+0x141>
 348:	c4 30       	cpi	r28, 0x04	; 4
 34a:	09 f4       	brne	.+2      	; 0x34e <__stack+0x4f>
 34c:	79 c0       	rjmp	.+242    	; 0x440 <__stack+0x141>
 34e:	80 91 0a 01 	lds	r24, 0x010A
				if (layout!=layer1) {
 352:	90 91 0b 01 	lds	r25, 0x010B
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	86 38       	cpi	r24, 0x86	; 134
 35a:	92 07       	cpc	r25, r18
 35c:	09 f4       	brne	.+2      	; 0x360 <__stack+0x61>
 35e:	70 c0       	rjmp	.+224    	; 0x440 <__stack+0x141>
 360:	8a 54       	subi	r24, 0x4A	; 74
					if (layout==layer_fn) {
 362:	91 40       	sbci	r25, 0x01	; 1
 364:	39 f4       	brne	.+14     	; 0x374 <__stack+0x75>
 366:	86 e8       	ldi	r24, 0x86	; 134
						prev_layer = layer1;
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	90 93 3c 02 	sts	0x023C, r25
 36e:	80 93 3b 02 	sts	0x023B, r24
 372:	06 c0       	rjmp	.+12     	; 0x380 <__stack+0x81>
 374:	86 e8       	ldi	r24, 0x86	; 134
					} else {
						layout = layer1;
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	90 93 0b 01 	sts	0x010B, r25
 37c:	80 93 0a 01 	sts	0x010A, r24
 380:	29 df       	rcall	.-430    	; 0x1d4 <change_layout>
					}
					change_layout();
 382:	46 9a       	sbi	0x08, 6	; 8
 384:	80 91 01 01 	lds	r24, 0x0101
					//LED_ON;
					LED_RED_OFF;
					if (led) LED_BLUE_ON;
 388:	88 23       	and	r24, r24
 38a:	09 f4       	brne	.+2      	; 0x38e <__stack+0x8f>
 38c:	59 c0       	rjmp	.+178    	; 0x440 <__stack+0x141>
 38e:	59 9a       	sbi	0x0b, 1	; 11
 390:	57 c0       	rjmp	.+174    	; 0x440 <__stack+0x141>
 392:	92 3f       	cpi	r25, 0xF2	; 242
 394:	b9 f5       	brne	.+110    	; 0x404 <__stack+0x105>
			last_key = 0xFF;
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		} else if (key_code==KEY_LAYER2) { // LAYER2
 396:	80 91 3d 02 	lds	r24, 0x023D
			mod_keys &= ~(KEY_RIGHT_SHIFT);
 39a:	8f 7d       	andi	r24, 0xDF	; 223
 39c:	80 93 3d 02 	sts	0x023D, r24
 3a0:	67 df       	rcall	.-306    	; 0x270 <send>
 3a2:	80 91 00 01 	lds	r24, 0x0100
			send();
 3a6:	8d 13       	cpse	r24, r29
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 3a8:	4b c0       	rjmp	.+150    	; 0x440 <__stack+0x141>
 3aa:	80 91 38 02 	lds	r24, 0x0238
 3ae:	90 91 39 02 	lds	r25, 0x0239
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <__stack+0xb9>
 3b6:	44 c0       	rjmp	.+136    	; 0x440 <__stack+0x141>
 3b8:	c2 97       	sbiw	r24, 0x32	; 50
 3ba:	08 f0       	brcs	.+2      	; 0x3be <__stack+0xbf>
 3bc:	41 c0       	rjmp	.+130    	; 0x440 <__stack+0x141>
 3be:	c4 30       	cpi	r28, 0x04	; 4
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <__stack+0xc5>
 3c2:	3e c0       	rjmp	.+124    	; 0x440 <__stack+0x141>
 3c4:	80 91 0a 01 	lds	r24, 0x010A
 3c8:	90 91 0b 01 	lds	r25, 0x010B
				if (layout!=layer2) {
 3cc:	21 e0       	ldi	r18, 0x01	; 1
 3ce:	85 3f       	cpi	r24, 0xF5	; 245
 3d0:	92 07       	cpc	r25, r18
 3d2:	b1 f1       	breq	.+108    	; 0x440 <__stack+0x141>
 3d4:	8a 54       	subi	r24, 0x4A	; 74
 3d6:	91 40       	sbci	r25, 0x01	; 1
 3d8:	39 f4       	brne	.+14     	; 0x3e8 <__stack+0xe9>
					if (layout==layer_fn) {
 3da:	85 ef       	ldi	r24, 0xF5	; 245
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	90 93 3c 02 	sts	0x023C, r25
						prev_layer = layer2;
 3e2:	80 93 3b 02 	sts	0x023B, r24
 3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <__stack+0xf5>
 3e8:	85 ef       	ldi	r24, 0xF5	; 245
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	90 93 0b 01 	sts	0x010B, r25
					} else {
						layout = layer2;
 3f0:	80 93 0a 01 	sts	0x010A, r24
 3f4:	ef de       	rcall	.-546    	; 0x1d4 <change_layout>
 3f6:	59 98       	cbi	0x0b, 1	; 11
 3f8:	80 91 01 01 	lds	r24, 0x0101
					}
					change_layout();
 3fc:	88 23       	and	r24, r24
					//LED_OFF;
					LED_BLUE_OFF;
 3fe:	01 f1       	breq	.+64     	; 0x440 <__stack+0x141>
					if (led) LED_RED_ON;
 400:	46 98       	cbi	0x08, 6	; 8
 402:	1e c0       	rjmp	.+60     	; 0x440 <__stack+0x141>
 404:	93 3f       	cpi	r25, 0xF3	; 243
 406:	09 f0       	breq	.+2      	; 0x40a <__stack+0x10b>
 408:	70 c0       	rjmp	.+224    	; 0x4ea <__stack+0x1eb>
 40a:	80 91 3d 02 	lds	r24, 0x023D
			last_key = 0xFF;
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 40e:	8d 7f       	andi	r24, 0xFD	; 253
 410:	80 93 3d 02 	sts	0x023D, r24
			mod_keys &= ~KEY_SHIFT;
 414:	2d df       	rcall	.-422    	; 0x270 <send>
 416:	80 91 00 01 	lds	r24, 0x0100
 41a:	8d 13       	cpse	r24, r29
			send();
 41c:	11 c0       	rjmp	.+34     	; 0x440 <__stack+0x141>
 41e:	80 91 38 02 	lds	r24, 0x0238
			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod_keys) {
 422:	90 91 39 02 	lds	r25, 0x0239
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	59 f0       	breq	.+22     	; 0x440 <__stack+0x141>
 42a:	c2 97       	sbiw	r24, 0x32	; 50
 42c:	48 f4       	brcc	.+18     	; 0x440 <__stack+0x141>
 42e:	c2 30       	cpi	r28, 0x02	; 2
 430:	39 f0       	breq	.+14     	; 0x440 <__stack+0x141>
 432:	80 91 3d 02 	lds	r24, 0x023D
 436:	81 11       	cpse	r24, r1
 438:	03 c0       	rjmp	.+6      	; 0x440 <__stack+0x141>
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	8c e2       	ldi	r24, 0x2C	; 44
 43e:	3e d3       	rcall	.+1660   	; 0xabc <usb_keyboard_press>
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	80 93 00 01 	sts	0x0100, r24
				usb_keyboard_press(KEY_SPACE, mod_keys);
 446:	41 c0       	rjmp	.+130    	; 0x4ca <__stack+0x1cb>
 448:	97 ff       	sbrs	r25, 7
 44a:	1c c0       	rjmp	.+56     	; 0x484 <__stack+0x185>
			}
			last_key = 0xFF;
 44c:	80 91 3e 02 	lds	r24, 0x023E
 450:	88 23       	and	r24, r24
 452:	41 f0       	breq	.+16     	; 0x464 <__stack+0x165>
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	} else if (key_code>=0x80) { // Mod keys release
 454:	91 38       	cpi	r25, 0x81	; 129
 456:	21 f4       	brne	.+8      	; 0x460 <__stack+0x161>
		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 458:	80 91 3d 02 	lds	r24, 0x023D
 45c:	87 7f       	andi	r24, 0xF7	; 247
 45e:	0d c0       	rjmp	.+26     	; 0x47a <__stack+0x17b>
 460:	90 39       	cpi	r25, 0x90	; 144
 462:	11 f0       	breq	.+4      	; 0x468 <__stack+0x169>
			mod_keys &= ~KEY_GUI;
 464:	90 38       	cpi	r25, 0x80	; 128
 466:	21 f4       	brne	.+8      	; 0x470 <__stack+0x171>
 468:	80 91 3d 02 	lds	r24, 0x023D
		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD)) {
 46c:	8f 77       	andi	r24, 0x7F	; 127
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__stack+0x17b>
 470:	9f 77       	andi	r25, 0x7F	; 127
 472:	90 95       	com	r25
			mod_keys &= ~KEY_RIGHT_GUI;
 474:	80 91 3d 02 	lds	r24, 0x023D
 478:	89 23       	and	r24, r25
 47a:	80 93 3d 02 	sts	0x023D, r24
		} else {
			mod_keys &= ~(key_code & 0x7F);
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	f6 ce       	rjmp	.-532    	; 0x270 <send>
 484:	e3 e0       	ldi	r30, 0x03	; 3
 486:	f1 e0       	ldi	r31, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	}
}
 48a:	81 91       	ld	r24, Z+
 48c:	8d 17       	cp	r24, r29
		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD)) {
			mod_keys &= ~KEY_RIGHT_GUI;
		} else {
			mod_keys &= ~(key_code & 0x7F);
		}
		send();
 48e:	59 f0       	breq	.+22     	; 0x4a6 <__stack+0x1a7>
 490:	9f 5f       	subi	r25, 0xFF	; 255
 492:	96 30       	cpi	r25, 0x06	; 6
 494:	d1 f7       	brne	.-12     	; 0x48a <__stack+0x18b>
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	} else if (key_code>=0x80) { // Mod keys release
 496:	07 c0       	rjmp	.+14     	; 0x4a6 <__stack+0x1a7>
			mod_keys &= ~(key_code & 0x7F);
		}
		send();
	} else {
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
 498:	e9 2f       	mov	r30, r25
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	ed 5f       	subi	r30, 0xFD	; 253
		} else {
			mod_keys &= ~(key_code & 0x7F);
		}
		send();
	} else {
		for (i=0; i<6; i++) {
 49e:	fe 4f       	sbci	r31, 0xFE	; 254
 4a0:	81 81       	ldd	r24, Z+1	; 0x01
 4a2:	80 83       	st	Z, r24
 4a4:	9f 5f       	subi	r25, 0xFF	; 255
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
			queue[i] = queue[i+1];
 4a6:	96 30       	cpi	r25, 0x06	; 6
 4a8:	b9 f7       	brne	.-18     	; 0x498 <__stack+0x199>
 4aa:	e2 de       	rcall	.-572    	; 0x270 <send>
 4ac:	80 91 00 01 	lds	r24, 0x0100
 4b0:	8d 13       	cpse	r24, r29
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
 4b2:	0b c0       	rjmp	.+22     	; 0x4ca <__stack+0x1cb>
 4b4:	10 92 37 02 	sts	0x0237, r1
			queue[i] = queue[i+1];
		}
		send();
 4b8:	10 92 36 02 	sts	0x0236, r1
		// Autorepeat
		if (last_key==key_id) { // realise time
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	90 93 35 02 	sts	0x0235, r25
			press_time2 = 0;
 4c4:	80 93 34 02 	sts	0x0234, r24
 4c8:	0c c0       	rjmp	.+24     	; 0x4e2 <__stack+0x1e3>
 4ca:	10 92 39 02 	sts	0x0239, r1
			release_time = 1;
 4ce:	10 92 38 02 	sts	0x0238, r1
 4d2:	10 92 37 02 	sts	0x0237, r1
 4d6:	10 92 36 02 	sts	0x0236, r1
			repeat_time = 0;
		} else { // reset
			press_time = 0;
 4da:	10 92 35 02 	sts	0x0235, r1
 4de:	10 92 34 02 	sts	0x0234, r1
			press_time2 = 0;
 4e2:	10 92 33 02 	sts	0x0233, r1
 4e6:	10 92 32 02 	sts	0x0232, r1
			release_time = 0;
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <key_press>:
			press_time = 0;
		}
	}	
}

void key_press(uint8_t key_id) {
 4f0:	cf 93       	push	r28
			repeat_time = 0;
		} else { // reset
			press_time = 0;
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
 4f2:	c8 2f       	mov	r28, r24
	}	
}

void key_press(uint8_t key_id) {
	uint8_t i;
	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGHT_GUI));
 4f4:	60 91 3d 02 	lds	r22, 0x023D
 4f8:	96 2f       	mov	r25, r22
			press_time2 = 0;
			release_time = 0;
			repeat_time = 0;
		}
	}
}
 4fa:	9d 7d       	andi	r25, 0xDD	; 221
}

void key_press(uint8_t key_id) {
	uint8_t i;
	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGHT_GUI));
	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	80 91 71 02 	lds	r24, 0x0271
 504:	81 11       	cpse	r24, r1
 506:	04 c0       	rjmp	.+8      	; 0x510 <key_press+0x20>
 508:	99 23       	and	r25, r25
 50a:	21 f0       	breq	.+8      	; 0x514 <key_press+0x24>
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	03 c0       	rjmp	.+6      	; 0x516 <key_press+0x26>
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	01 c0       	rjmp	.+2      	; 0x516 <key_press+0x26>
 514:	8f ef       	ldi	r24, 0xFF	; 255
 516:	f9 01       	movw	r30, r18
 518:	e6 5b       	subi	r30, 0xB6	; 182
 51a:	fd 4f       	sbci	r31, 0xFD	; 253
 51c:	80 83       	st	Z, r24
	
	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	21 f4       	brne	.+8      	; 0x52a <key_press+0x3a>
 522:	f9 01       	movw	r30, r18
 524:	e6 5b       	subi	r30, 0xB6	; 182
 526:	fe 4f       	sbci	r31, 0xFE	; 254
 528:	06 c0       	rjmp	.+12     	; 0x536 <key_press+0x46>
 52a:	e0 91 0a 01 	lds	r30, 0x010A
 52e:	f0 91 0b 01 	lds	r31, 0x010B
 532:	ec 0f       	add	r30, r28
 534:	f1 1d       	adc	r31, r1
 536:	80 81       	ld	r24, Z
	if (key_code==NULL) {
 538:	81 11       	cpse	r24, r1
 53a:	21 c0       	rjmp	.+66     	; 0x57e <key_press+0x8e>
		key_code = layout[key_id];
 53c:	4c 2f       	mov	r20, r28
 53e:	50 e0       	ldi	r21, 0x00	; 0
 540:	e0 91 0a 01 	lds	r30, 0x010A
 544:	f0 91 0b 01 	lds	r31, 0x010B
 548:	e4 0f       	add	r30, r20
 54a:	f5 1f       	adc	r31, r21
 54c:	80 81       	ld	r24, Z
		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 54e:	99 23       	and	r25, r25
 550:	11 f0       	breq	.+4      	; 0x556 <key_press+0x66>
 552:	92 e0       	ldi	r25, 0x02	; 2
 554:	01 c0       	rjmp	.+2      	; 0x558 <key_press+0x68>
 556:	9f ef       	ldi	r25, 0xFF	; 255
 558:	f9 01       	movw	r30, r18
 55a:	e6 5b       	subi	r30, 0xB6	; 182
 55c:	fd 4f       	sbci	r31, 0xFD	; 253
 55e:	90 83       	st	Z, r25
		if (key_code==NULL && prev_layer && ! mod_keys) {
 560:	81 11       	cpse	r24, r1
 562:	0d c0       	rjmp	.+26     	; 0x57e <key_press+0x8e>
 564:	a0 91 3b 02 	lds	r26, 0x023B
 568:	b0 91 3c 02 	lds	r27, 0x023C
 56c:	10 97       	sbiw	r26, 0x00	; 0
 56e:	39 f0       	breq	.+14     	; 0x57e <key_press+0x8e>
 570:	61 11       	cpse	r22, r1
 572:	05 c0       	rjmp	.+10     	; 0x57e <key_press+0x8e>
			key_code = prev_layer[key_id];
 574:	a4 0f       	add	r26, r20
 576:	b5 1f       	adc	r27, r21
 578:	8c 91       	ld	r24, X
			pressed[key_id] = KEY_PRESSED_PREV;
 57a:	96 e0       	ldi	r25, 0x06	; 6
 57c:	90 83       	st	Z, r25
		}
	}

	if (locked && key_code!=KEY_LOCK) return;
 57e:	90 91 3a 02 	lds	r25, 0x023A
 582:	99 23       	and	r25, r25
 584:	21 f0       	breq	.+8      	; 0x58e <key_press+0x9e>
 586:	8a 3f       	cpi	r24, 0xFA	; 250
 588:	09 f0       	breq	.+2      	; 0x58c <key_press+0x9c>
 58a:	3c c1       	rjmp	.+632    	; 0x804 <key_press+0x314>
 58c:	a0 c0       	rjmp	.+320    	; 0x6ce <key_press+0x1de>
	
	if (key_code>0xF0) { // Catboard keys
 58e:	81 3f       	cpi	r24, 0xF1	; 241
 590:	08 f4       	brcc	.+2      	; 0x594 <key_press+0xa4>
 592:	e2 c0       	rjmp	.+452    	; 0x758 <key_press+0x268>
		if (key_code==KEY_ALT_TAB) { // AltTab press
 594:	8d 3f       	cpi	r24, 0xFD	; 253
 596:	19 f5       	brne	.+70     	; 0x5de <key_press+0xee>
			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 598:	f9 01       	movw	r30, r18
 59a:	e6 5b       	subi	r30, 0xB6	; 182
 59c:	fd 4f       	sbci	r31, 0xFD	; 253
 59e:	80 81       	ld	r24, Z
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	19 f4       	brne	.+6      	; 0x5aa <key_press+0xba>
				usb_keyboard_press(KEY_TAB, KEY_ALT);
 5a4:	64 e0       	ldi	r22, 0x04	; 4
 5a6:	8b e2       	ldi	r24, 0x2B	; 43
 5a8:	65 c0       	rjmp	.+202    	; 0x674 <key_press+0x184>
			} else { // Alt press, Tab press and release
				if (! mod_keys) {
 5aa:	61 11       	cpse	r22, r1
 5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <key_press+0xc6>
					mod_keys |= (KEY_ALT);
 5ae:	84 e0       	ldi	r24, 0x04	; 4
 5b0:	80 93 3d 02 	sts	0x023D, r24
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <key_press+0xca>
				} else {
					pressed[key_id] = KEY_PRESSED_ALT;
 5b6:	83 e0       	ldi	r24, 0x03	; 3
 5b8:	80 83       	st	Z, r24
				}
				keyboard_modifier_keys = mod_keys;
 5ba:	80 91 3d 02 	lds	r24, 0x023D
 5be:	80 93 3f 02 	sts	0x023F, r24
				keyboard_keys[0] = KEY_TAB;
 5c2:	8b e2       	ldi	r24, 0x2B	; 43
 5c4:	80 93 40 02 	sts	0x0240, r24
				usb_keyboard_send();
 5c8:	3f d2       	rcall	.+1150   	; 0xa48 <usb_keyboard_send>
 5ca:	2f ef       	ldi	r18, 0xFF	; 255
 5cc:	80 e7       	ldi	r24, 0x70	; 112
 5ce:	92 e0       	ldi	r25, 0x02	; 2
 5d0:	21 50       	subi	r18, 0x01	; 1
 5d2:	80 40       	sbci	r24, 0x00	; 0
 5d4:	90 40       	sbci	r25, 0x00	; 0
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <key_press+0xe0>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <key_press+0xea>
 5da:	00 00       	nop
 5dc:	f3 c0       	rjmp	.+486    	; 0x7c4 <key_press+0x2d4>
 5de:	8e 3f       	cpi	r24, 0xFE	; 254
				_delay_ms(50);
				send();
			}
		} else if (key_code==KEY_FN_LOCK) { // FnLock
 5e0:	49 f5       	brne	.+82     	; 0x634 <key_press+0x144>
 5e2:	20 91 3b 02 	lds	r18, 0x023B
			if (prev_layer) { // FnLock Off
 5e6:	30 91 3c 02 	lds	r19, 0x023C
 5ea:	21 15       	cp	r18, r1
 5ec:	31 05       	cpc	r19, r1
 5ee:	49 f0       	breq	.+18     	; 0x602 <key_press+0x112>
 5f0:	30 93 0b 01 	sts	0x010B, r19
				layout = prev_layer;
 5f4:	20 93 0a 01 	sts	0x010A, r18
 5f8:	10 92 3c 02 	sts	0x023C, r1
				prev_layer = 0;
 5fc:	10 92 3b 02 	sts	0x023B, r1
 600:	0e c0       	rjmp	.+28     	; 0x61e <key_press+0x12e>
 602:	80 91 0a 01 	lds	r24, 0x010A
			} else { // FnLock On
				prev_layer = layout;
 606:	90 91 0b 01 	lds	r25, 0x010B
 60a:	90 93 3c 02 	sts	0x023C, r25
 60e:	80 93 3b 02 	sts	0x023B, r24
 612:	2e e0       	ldi	r18, 0x0E	; 14
				layout = layer_fnlock;
 614:	31 e0       	ldi	r19, 0x01	; 1
 616:	30 93 0b 01 	sts	0x010B, r19
 61a:	20 93 0a 01 	sts	0x010A, r18
 61e:	20 91 3b 02 	lds	r18, 0x023B
			}
			if (prev_layer || mac_mode) {
 622:	30 91 3c 02 	lds	r19, 0x023C
 626:	23 2b       	or	r18, r19
 628:	f9 f4       	brne	.+62     	; 0x668 <key_press+0x178>
 62a:	80 91 3e 02 	lds	r24, 0x023E
 62e:	88 23       	and	r24, r24
 630:	f1 f0       	breq	.+60     	; 0x66e <key_press+0x17e>
 632:	1a c0       	rjmp	.+52     	; 0x668 <key_press+0x178>
 634:	8c 3f       	cpi	r24, 0xFC	; 252
				if (led) LED_ON;
			} else {
				LED_OFF;
			}
		} else if (key_code==KEY_MAC_MODE) { // Mac mode
 636:	01 f5       	brne	.+64     	; 0x678 <key_press+0x188>
 638:	f9 01       	movw	r30, r18
			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 63a:	e6 5b       	subi	r30, 0xB6	; 182
 63c:	fd 4f       	sbci	r31, 0xFD	; 253
 63e:	80 81       	ld	r24, Z
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	b9 f4       	brne	.+46     	; 0x672 <key_press+0x182>
 644:	86 2f       	mov	r24, r22
 646:	82 72       	andi	r24, 0x22	; 34
 648:	a1 f0       	breq	.+40     	; 0x672 <key_press+0x182>
 64a:	81 e0       	ldi	r24, 0x01	; 1
				mac_mode = ! mac_mode;
 64c:	90 91 3e 02 	lds	r25, 0x023E
 650:	91 11       	cpse	r25, r1
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	80 93 3e 02 	sts	0x023E, r24
 658:	81 11       	cpse	r24, r1
				if (mac_mode || prev_layer) {
 65a:	06 c0       	rjmp	.+12     	; 0x668 <key_press+0x178>
 65c:	20 91 3b 02 	lds	r18, 0x023B
 660:	30 91 3c 02 	lds	r19, 0x023C
 664:	23 2b       	or	r18, r19
 666:	19 f0       	breq	.+6      	; 0x66e <key_press+0x17e>
 668:	80 91 01 01 	lds	r24, 0x0101
					if (led) LED_ON;
 66c:	71 c0       	rjmp	.+226    	; 0x750 <key_press+0x260>
 66e:	5e 9a       	sbi	0x0b, 6	; 11
				} else {
					LED_OFF;
 670:	aa c0       	rjmp	.+340    	; 0x7c6 <key_press+0x2d6>
 672:	8c e2       	ldi	r24, 0x2C	; 44
				}
			} else { // Press Space
				usb_keyboard_press(KEY_SPACE, mod_keys);
 674:	23 d2       	rcall	.+1094   	; 0xabc <usb_keyboard_press>
 676:	a7 c0       	rjmp	.+334    	; 0x7c6 <key_press+0x2d6>
 678:	81 3f       	cpi	r24, 0xF1	; 241
 67a:	91 f4       	brne	.+36     	; 0x6a0 <key_press+0x1b0>
			}
		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 67c:	86 2f       	mov	r24, r22
 67e:	82 72       	andi	r24, 0x22	; 34
			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 680:	39 f0       	breq	.+14     	; 0x690 <key_press+0x1a0>
 682:	f9 01       	movw	r30, r18
 684:	e6 5b       	subi	r30, 0xB6	; 182
				pressed[key_id] = KEY_PRESSED_CTRL;
 686:	fd 4f       	sbci	r31, 0xFD	; 253
 688:	85 e0       	ldi	r24, 0x05	; 5
 68a:	80 83       	st	Z, r24
 68c:	61 60       	ori	r22, 0x01	; 1
 68e:	19 c0       	rjmp	.+50     	; 0x6c2 <key_press+0x1d2>
				mod_keys |= KEY_CTRL;
 690:	66 23       	and	r22, r22
 692:	b1 f0       	breq	.+44     	; 0x6c0 <key_press+0x1d0>
				send();
			} else {
				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 694:	f9 01       	movw	r30, r18
 696:	e6 5b       	subi	r30, 0xB6	; 182
 698:	fd 4f       	sbci	r31, 0xFD	; 253
 69a:	84 e0       	ldi	r24, 0x04	; 4
 69c:	80 83       	st	Z, r24
 69e:	10 c0       	rjmp	.+32     	; 0x6c0 <key_press+0x1d0>
 6a0:	82 3f       	cpi	r24, 0xF2	; 242
 6a2:	11 f4       	brne	.+4      	; 0x6a8 <key_press+0x1b8>
				mod_keys |= KEY_SHIFT;
				send();
			}
		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 6a4:	60 62       	ori	r22, 0x20	; 32
 6a6:	0d c0       	rjmp	.+26     	; 0x6c2 <key_press+0x1d2>
			mod_keys |= KEY_RIGHT_SHIFT;
 6a8:	8b 3f       	cpi	r24, 0xFB	; 251
 6aa:	41 f4       	brne	.+16     	; 0x6bc <key_press+0x1cc>
			send();
		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 91 02 01 	lds	r25, 0x0102
			turbo_repeat = ! turbo_repeat;
 6b2:	91 11       	cpse	r25, r1
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	80 93 02 01 	sts	0x0102, r24
 6ba:	85 c0       	rjmp	.+266    	; 0x7c6 <key_press+0x2d6>
 6bc:	83 3f       	cpi	r24, 0xF3	; 243
 6be:	21 f4       	brne	.+8      	; 0x6c8 <key_press+0x1d8>
		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 6c0:	62 60       	ori	r22, 0x02	; 2
 6c2:	60 93 3d 02 	sts	0x023D, r22
			mod_keys |= KEY_SHIFT;
 6c6:	7e c0       	rjmp	.+252    	; 0x7c4 <key_press+0x2d4>
 6c8:	8a 3f       	cpi	r24, 0xFA	; 250
 6ca:	91 f4       	brne	.+36     	; 0x6f0 <key_press+0x200>
			send();
		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <key_press+0x1ee>
 6ce:	10 92 3a 02 	sts	0x023A, r1
			if (locked) {
				locked = 0;
 6d2:	80 91 01 01 	lds	r24, 0x0101
				if (led) {
 6d6:	88 23       	and	r24, r24
 6d8:	09 f4       	brne	.+2      	; 0x6dc <key_press+0x1ec>
 6da:	75 c0       	rjmp	.+234    	; 0x7c6 <key_press+0x2d6>
 6dc:	19 c0       	rjmp	.+50     	; 0x710 <key_press+0x220>
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	80 93 3a 02 	sts	0x023A, r24
					if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
					if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
					if (prev_layer || mac_mode) LED_ON;
				}
			} else {
				locked = 1;
 6e4:	5e 9a       	sbi	0x0b, 6	; 11
 6e6:	46 9a       	sbi	0x08, 6	; 8
				LED_OFF;
 6e8:	59 98       	cbi	0x0b, 1	; 11
				LED_RED_OFF;
 6ea:	68 e0       	ldi	r22, 0x08	; 8
				LED_BLUE_OFF;
 6ec:	8f e0       	ldi	r24, 0x0F	; 15
				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
 6ee:	c2 cf       	rjmp	.-124    	; 0x674 <key_press+0x184>
 6f0:	89 3f       	cpi	r24, 0xF9	; 249
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <key_press+0x206>
			}
		} else if (key_code==KEY_LED) { // LED On/Off
 6f4:	68 c0       	rjmp	.+208    	; 0x7c6 <key_press+0x2d6>
 6f6:	80 91 01 01 	lds	r24, 0x0101
			if (led) {
 6fa:	88 23       	and	r24, r24
 6fc:	31 f0       	breq	.+12     	; 0x70a <key_press+0x21a>
 6fe:	10 92 01 01 	sts	0x0101, r1
				led = 0;
 702:	5e 9a       	sbi	0x0b, 6	; 11
 704:	46 9a       	sbi	0x08, 6	; 8
				LED_OFF;
 706:	59 98       	cbi	0x0b, 1	; 11
				LED_RED_OFF;
 708:	5e c0       	rjmp	.+188    	; 0x7c6 <key_press+0x2d6>
				LED_BLUE_OFF;
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	80 93 01 01 	sts	0x0101, r24
			} else {
				led = 1;
 710:	40 91 0a 01 	lds	r20, 0x010A
				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 714:	50 91 0b 01 	lds	r21, 0x010B
 718:	20 91 3b 02 	lds	r18, 0x023B
 71c:	30 91 3c 02 	lds	r19, 0x023C
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	46 38       	cpi	r20, 0x86	; 134
 724:	58 07       	cpc	r21, r24
 726:	21 f0       	breq	.+8      	; 0x730 <key_press+0x240>
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	26 38       	cpi	r18, 0x86	; 134
 72c:	39 07       	cpc	r19, r25
 72e:	09 f4       	brne	.+2      	; 0x732 <key_press+0x242>
 730:	59 9a       	sbi	0x0b, 1	; 11
 732:	45 5f       	subi	r20, 0xF5	; 245
 734:	51 40       	sbci	r21, 0x01	; 1
				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 736:	19 f0       	breq	.+6      	; 0x73e <key_press+0x24e>
 738:	25 5f       	subi	r18, 0xF5	; 245
 73a:	31 40       	sbci	r19, 0x01	; 1
 73c:	09 f4       	brne	.+2      	; 0x740 <key_press+0x250>
 73e:	46 98       	cbi	0x08, 6	; 8
 740:	20 91 3b 02 	lds	r18, 0x023B
				if (prev_layer || mac_mode) LED_ON;
 744:	30 91 3c 02 	lds	r19, 0x023C
 748:	23 2b       	or	r18, r19
 74a:	21 f4       	brne	.+8      	; 0x754 <key_press+0x264>
 74c:	80 91 3e 02 	lds	r24, 0x023E
 750:	88 23       	and	r24, r24
 752:	c9 f1       	breq	.+114    	; 0x7c6 <key_press+0x2d6>
 754:	5e 98       	cbi	0x0b, 6	; 11
 756:	37 c0       	rjmp	.+110    	; 0x7c6 <key_press+0x2d6>
 758:	87 ff       	sbrs	r24, 7
 75a:	13 c0       	rjmp	.+38     	; 0x782 <key_press+0x292>
			}
		}
	} else if (key_code>=0x80) { // Mod keys
 75c:	90 91 3e 02 	lds	r25, 0x023E
		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 760:	99 23       	and	r25, r25
 762:	31 f0       	breq	.+12     	; 0x770 <key_press+0x280>
 764:	81 38       	cpi	r24, 0x81	; 129
 766:	11 f4       	brne	.+4      	; 0x76c <key_press+0x27c>
 768:	68 60       	ori	r22, 0x08	; 8
 76a:	ab cf       	rjmp	.-170    	; 0x6c2 <key_press+0x1d2>
			mod_keys |= KEY_GUI;
 76c:	80 39       	cpi	r24, 0x90	; 144
 76e:	11 f0       	breq	.+4      	; 0x774 <key_press+0x284>
		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD)) {
 770:	80 38       	cpi	r24, 0x80	; 128
 772:	11 f4       	brne	.+4      	; 0x778 <key_press+0x288>
 774:	60 68       	ori	r22, 0x80	; 128
 776:	a5 cf       	rjmp	.-182    	; 0x6c2 <key_press+0x1d2>
			mod_keys |= KEY_RIGHT_GUI;
 778:	8f 77       	andi	r24, 0x7F	; 127
 77a:	86 2b       	or	r24, r22
		} else {
			mod_keys |= (key_code & 0x7F);
 77c:	80 93 3d 02 	sts	0x023D, r24
 780:	21 c0       	rjmp	.+66     	; 0x7c4 <key_press+0x2d4>
 782:	80 91 00 01 	lds	r24, 0x0100
		}
		send();
	} else {
		if (! (last_key==key_id && release_time<10)) { // debounce
 786:	8c 13       	cpse	r24, r28
 788:	07 c0       	rjmp	.+14     	; 0x798 <key_press+0x2a8>
 78a:	20 91 34 02 	lds	r18, 0x0234
 78e:	30 91 35 02 	lds	r19, 0x0235
 792:	2a 30       	cpi	r18, 0x0A	; 10
 794:	31 05       	cpc	r19, r1
 796:	b8 f0       	brcs	.+46     	; 0x7c6 <key_press+0x2d6>
 798:	80 91 07 01 	lds	r24, 0x0107
			for (i=5; i>0; i--) queue[i] = queue[i-1];
 79c:	80 93 08 01 	sts	0x0108, r24
 7a0:	80 91 06 01 	lds	r24, 0x0106
 7a4:	80 93 07 01 	sts	0x0107, r24
 7a8:	80 91 05 01 	lds	r24, 0x0105
 7ac:	80 93 06 01 	sts	0x0106, r24
 7b0:	80 91 04 01 	lds	r24, 0x0104
 7b4:	80 93 05 01 	sts	0x0105, r24
 7b8:	80 91 03 01 	lds	r24, 0x0103
 7bc:	80 93 04 01 	sts	0x0104, r24
 7c0:	c0 93 03 01 	sts	0x0103, r28
			queue[0] = key_id;
 7c4:	55 dd       	rcall	.-1366   	; 0x270 <send>
 7c6:	80 91 00 01 	lds	r24, 0x0100
			send();
 7ca:	8c 13       	cpse	r24, r28
		}
	}
	// Autorepeat
	if (last_key==key_id) { // calc press2
 7cc:	07 c0       	rjmp	.+14     	; 0x7dc <key_press+0x2ec>
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	90 93 37 02 	sts	0x0237, r25
		press_time2 = 1;
 7d6:	80 93 36 02 	sts	0x0236, r24
 7da:	10 c0       	rjmp	.+32     	; 0x7fc <key_press+0x30c>
 7dc:	c0 93 00 01 	sts	0x0100, r28
 7e0:	81 e0       	ldi	r24, 0x01	; 1
		repeat_time = 0;
	} else { // calc press1
		last_key = key_id;
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	90 93 39 02 	sts	0x0239, r25
		press_time = 1;
 7e8:	80 93 38 02 	sts	0x0238, r24
 7ec:	10 92 37 02 	sts	0x0237, r1
 7f0:	10 92 36 02 	sts	0x0236, r1
		press_time2 = 0;
 7f4:	10 92 35 02 	sts	0x0235, r1
 7f8:	10 92 34 02 	sts	0x0234, r1
		release_time = 0;
 7fc:	10 92 33 02 	sts	0x0233, r1
 800:	10 92 32 02 	sts	0x0232, r1
		repeat_time = 0;
 804:	cf 91       	pop	r28
 806:	08 95       	ret

00000808 <repeat_tick>:
	}
	repeat_tick();
	_delay_ms(5);
}

void repeat_tick(void) {
 808:	80 91 32 02 	lds	r24, 0x0232
		press_time = 1;
		press_time2 = 0;
		release_time = 0;
		repeat_time = 0;
	}
}
 80c:	90 91 33 02 	lds	r25, 0x0233
 810:	00 97       	sbiw	r24, 0x00	; 0
 812:	39 f1       	breq	.+78     	; 0x862 <repeat_tick+0x5a>
	_delay_ms(5);
}

void repeat_tick(void) {
	if (repeat_time) { // repeat pause
		if (repeat_time<(release_time>>2)) {
 814:	20 91 34 02 	lds	r18, 0x0234
 818:	30 91 35 02 	lds	r19, 0x0235
 81c:	36 95       	lsr	r19
 81e:	27 95       	ror	r18
 820:	36 95       	lsr	r19
 822:	27 95       	ror	r18
 824:	82 17       	cp	r24, r18
 826:	93 07       	cpc	r25, r19
 828:	10 f4       	brcc	.+4      	; 0x82e <repeat_tick+0x26>
			repeat_time++;
 82a:	01 96       	adiw	r24, 0x01	; 1
 82c:	3c c0       	rjmp	.+120    	; 0x8a6 <repeat_tick+0x9e>
		} else { // repeat press
			repeat_time = 1;
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	90 93 33 02 	sts	0x0233, r25
 836:	80 93 32 02 	sts	0x0232, r24
			if (turbo_repeat) {
 83a:	80 91 02 01 	lds	r24, 0x0102
 83e:	88 23       	and	r24, r24
 840:	09 f4       	brne	.+2      	; 0x844 <repeat_tick+0x3c>
 842:	67 c0       	rjmp	.+206    	; 0x912 <repeat_tick+0x10a>
				keyboard_modifier_keys = mod_keys;
 844:	80 91 3d 02 	lds	r24, 0x023D
 848:	80 93 3f 02 	sts	0x023F, r24
				keyboard_keys[0] = get_code(last_key);
 84c:	80 91 00 01 	lds	r24, 0x0100
 850:	e9 dc       	rcall	.-1582   	; 0x224 <get_code>
 852:	80 93 40 02 	sts	0x0240, r24
 856:	f8 d0       	rcall	.+496    	; 0xa48 <usb_keyboard_send>
				if (! usb_keyboard_send()) { // repeat release
 858:	81 11       	cpse	r24, r1
 85a:	5b c0       	rjmp	.+182    	; 0x912 <repeat_tick+0x10a>
 85c:	10 92 40 02 	sts	0x0240, r1
					keyboard_keys[0] = 0;
 860:	f3 c0       	rjmp	.+486    	; 0xa48 <usb_keyboard_send>
 862:	20 91 36 02 	lds	r18, 0x0236
					usb_keyboard_send();
 866:	30 91 37 02 	lds	r19, 0x0237
				}
			}
		}
	} else if (press_time2) { // press2 pause
 86a:	80 91 38 02 	lds	r24, 0x0238
 86e:	90 91 39 02 	lds	r25, 0x0239
 872:	21 15       	cp	r18, r1
 874:	31 05       	cpc	r19, r1
 876:	e1 f0       	breq	.+56     	; 0x8b0 <repeat_tick+0xa8>
 878:	40 91 71 02 	lds	r20, 0x0271
 87c:	44 23       	and	r20, r20
		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 87e:	19 f0       	breq	.+6      	; 0x886 <repeat_tick+0x7e>
 880:	45 e0       	ldi	r20, 0x05	; 5
 882:	50 e0       	ldi	r21, 0x00	; 0
 884:	02 c0       	rjmp	.+4      	; 0x88a <repeat_tick+0x82>
 886:	4e e1       	ldi	r20, 0x1E	; 30
 888:	50 e0       	ldi	r21, 0x00	; 0
 88a:	84 0f       	add	r24, r20
 88c:	95 1f       	adc	r25, r21
 88e:	28 17       	cp	r18, r24
 890:	39 07       	cpc	r19, r25
 892:	38 f4       	brcc	.+14     	; 0x8a2 <repeat_tick+0x9a>
 894:	2f 5f       	subi	r18, 0xFF	; 255
 896:	3f 4f       	sbci	r19, 0xFF	; 255
 898:	30 93 37 02 	sts	0x0237, r19
			press_time2++;
 89c:	20 93 36 02 	sts	0x0236, r18
 8a0:	08 95       	ret
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	90 93 33 02 	sts	0x0233, r25
		} else {
			repeat_time = 1;
 8aa:	80 93 32 02 	sts	0x0232, r24
 8ae:	08 95       	ret
 8b0:	20 91 34 02 	lds	r18, 0x0234
 8b4:	30 91 35 02 	lds	r19, 0x0235
		}
	} else if (release_time) { // release pause
 8b8:	21 15       	cp	r18, r1
 8ba:	31 05       	cpc	r19, r1
 8bc:	d9 f0       	breq	.+54     	; 0x8f4 <repeat_tick+0xec>
 8be:	c2 96       	adiw	r24, 0x32	; 50
 8c0:	28 17       	cp	r18, r24
 8c2:	39 07       	cpc	r19, r25
		if (release_time<(press_time+50)) {
 8c4:	38 f4       	brcc	.+14     	; 0x8d4 <repeat_tick+0xcc>
 8c6:	2f 5f       	subi	r18, 0xFF	; 255
 8c8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ca:	30 93 35 02 	sts	0x0235, r19
			release_time++;
 8ce:	20 93 34 02 	sts	0x0234, r18
 8d2:	08 95       	ret
 8d4:	8f ef       	ldi	r24, 0xFF	; 255
 8d6:	80 93 00 01 	sts	0x0100, r24
		} else {
			last_key = 0xFF;
 8da:	10 92 35 02 	sts	0x0235, r1
 8de:	10 92 34 02 	sts	0x0234, r1
			release_time = 0;
 8e2:	10 92 39 02 	sts	0x0239, r1
 8e6:	10 92 38 02 	sts	0x0238, r1
			press_time = 0;
 8ea:	10 92 37 02 	sts	0x0237, r1
 8ee:	10 92 36 02 	sts	0x0236, r1
			press_time2 = 0;
 8f2:	08 95       	ret
 8f4:	00 97       	sbiw	r24, 0x00	; 0
 8f6:	69 f0       	breq	.+26     	; 0x912 <repeat_tick+0x10a>
 8f8:	8a 3f       	cpi	r24, 0xFA	; 250
			release_time = 0;
		}
	} else if (press_time) { // press1 pause
 8fa:	91 05       	cpc	r25, r1
 8fc:	30 f4       	brcc	.+12     	; 0x90a <repeat_tick+0x102>
		if (press_time<250) {
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	90 93 39 02 	sts	0x0239, r25
			press_time++;
 904:	80 93 38 02 	sts	0x0238, r24
 908:	08 95       	ret
 90a:	10 92 39 02 	sts	0x0239, r1
 90e:	10 92 38 02 	sts	0x0238, r1
		} else {
			press_time = 0;
 912:	08 95       	ret

00000914 <poll>:
	while(!usb_configured());
	LED_OFF;
	if (led) LED_RED_ON;
}

void poll() {
 914:	7f 92       	push	r7
 916:	8f 92       	push	r8
 918:	9f 92       	push	r9
 91a:	af 92       	push	r10
 91c:	bf 92       	push	r11
 91e:	cf 92       	push	r12
 920:	df 92       	push	r13
 922:	ef 92       	push	r14
 924:	ff 92       	push	r15
 926:	0f 93       	push	r16
 928:	1f 93       	push	r17
 92a:	cf 93       	push	r28
 92c:	df 93       	push	r29
 92e:	7b ee       	ldi	r23, 0xEB	; 235
 930:	e7 2e       	mov	r14, r23
 932:	71 e0       	ldi	r23, 0x01	; 1
 934:	f7 2e       	mov	r15, r23
 936:	06 ee       	ldi	r16, 0xE6	; 230
 938:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 93a:	91 2c       	mov	r9, r1
		*row_port[row] &= ~row_bit[row];
 93c:	d7 01       	movw	r26, r14
 93e:	cd 91       	ld	r28, X+
 940:	dd 91       	ld	r29, X+
 942:	7d 01       	movw	r14, r26
 944:	f8 01       	movw	r30, r16
 946:	71 90       	ld	r7, Z+
 948:	8f 01       	movw	r16, r30
 94a:	97 2d       	mov	r25, r7
 94c:	90 95       	com	r25
 94e:	88 81       	ld	r24, Y
 950:	89 23       	and	r24, r25
 952:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 954:	f5 e0       	ldi	r31, 0x05	; 5
 956:	fa 95       	dec	r31
 958:	f1 f7       	brne	.-4      	; 0x956 <poll+0x42>
 95a:	00 00       	nop
 95c:	5e ec       	ldi	r21, 0xCE	; 206
 95e:	c5 2e       	mov	r12, r21
 960:	51 e0       	ldi	r21, 0x01	; 1
 962:	d5 2e       	mov	r13, r21
 964:	62 ec       	ldi	r22, 0xC2	; 194
 966:	a6 2e       	mov	r10, r22
 968:	61 e0       	ldi	r22, 0x01	; 1
 96a:	b6 2e       	mov	r11, r22
 96c:	81 2c       	mov	r8, r1
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
			key_id = col*ROWS+row;
 96e:	88 2d       	mov	r24, r8
 970:	89 0d       	add	r24, r9
			if (! (*col_pin[col] & col_bit[col])) { // press key
 972:	d6 01       	movw	r26, r12
 974:	ed 91       	ld	r30, X+
 976:	fd 91       	ld	r31, X+
 978:	6d 01       	movw	r12, r26
 97a:	d5 01       	movw	r26, r10
 97c:	9d 91       	ld	r25, X+
 97e:	5d 01       	movw	r10, r26
 980:	20 81       	ld	r18, Z
 982:	92 23       	and	r25, r18
 984:	28 2f       	mov	r18, r24
 986:	30 e0       	ldi	r19, 0x00	; 0
				if (! pressed[key_id]) {
 988:	f9 01       	movw	r30, r18
 98a:	e6 5b       	subi	r30, 0xB6	; 182
 98c:	fd 4f       	sbci	r31, 0xFD	; 253
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
			key_id = col*ROWS+row;
			if (! (*col_pin[col] & col_bit[col])) { // press key
 98e:	91 11       	cpse	r25, r1
 990:	05 c0       	rjmp	.+10     	; 0x99c <poll+0x88>
				if (! pressed[key_id]) {
 992:	90 81       	ld	r25, Z
 994:	91 11       	cpse	r25, r1
 996:	05 c0       	rjmp	.+10     	; 0x9a2 <poll+0x8e>
					key_press(key_id);
 998:	ab dd       	rcall	.-1194   	; 0x4f0 <key_press>
 99a:	03 c0       	rjmp	.+6      	; 0x9a2 <poll+0x8e>
 99c:	90 81       	ld	r25, Z
				}
			} else if (pressed[key_id]) { // release key
 99e:	91 11       	cpse	r25, r1
 9a0:	81 dc       	rcall	.-1790   	; 0x2a4 <key_release>
				key_release(key_id);
 9a2:	b5 e0       	ldi	r27, 0x05	; 5
 9a4:	8b 0e       	add	r8, r27
 9a6:	ec e3       	ldi	r30, 0x3C	; 60
 9a8:	8e 12       	cpse	r8, r30
void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
 9aa:	e1 cf       	rjmp	.-62     	; 0x96e <poll+0x5a>
 9ac:	88 81       	ld	r24, Y
 9ae:	87 29       	or	r24, r7
				}
			} else if (pressed[key_id]) { // release key
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
 9b0:	88 83       	st	Y, r24
 9b2:	93 94       	inc	r9
 9b4:	9b 12       	cpse	r9, r27
	if (led) LED_RED_ON;
}

void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 9b6:	c2 cf       	rjmp	.-124    	; 0x93c <poll+0x28>
 9b8:	27 df       	rcall	.-434    	; 0x808 <repeat_tick>
 9ba:	8f e1       	ldi	r24, 0x1F	; 31
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
	}
	repeat_tick();
 9bc:	9e e4       	ldi	r25, 0x4E	; 78
 9be:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9c0:	f1 f7       	brne	.-4      	; 0x9be <poll+0xaa>
 9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <poll+0xb0>
 9c4:	00 00       	nop
 9c6:	df 91       	pop	r29
 9c8:	cf 91       	pop	r28
 9ca:	1f 91       	pop	r17
	_delay_ms(5);
}
 9cc:	0f 91       	pop	r16
 9ce:	ff 90       	pop	r15
 9d0:	ef 90       	pop	r14
 9d2:	df 90       	pop	r13
 9d4:	cf 90       	pop	r12
 9d6:	bf 90       	pop	r11
 9d8:	af 90       	pop	r10
 9da:	9f 90       	pop	r9
 9dc:	8f 90       	pop	r8
 9de:	7f 90       	pop	r7
 9e0:	08 95       	ret

000009e2 <main>:
void repeat_tick(void);
void key_press(uint8_t key_id);
void key_release(uint8_t key_id);
uint8_t get_code(uint8_t key_id);

int main(void) {
 9e2:	84 b7       	in	r24, 0x34	; 52
 9e4:	87 7f       	andi	r24, 0xF7	; 247
 9e6:	84 bf       	out	0x34, r24	; 52
	// Disable watchdog if enabled by bootloader/fuses
	MCUSR &= ~(1 << WDRF);
	wdt_disable();
 9e8:	88 e1       	ldi	r24, 0x18	; 24
 9ea:	0f b6       	in	r0, 0x3f	; 63
 9ec:	f8 94       	cli
 9ee:	80 93 60 00 	sts	0x0060, r24
 9f2:	10 92 60 00 	sts	0x0060, r1
 9f6:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	80 e8       	ldi	r24, 0x80	; 128
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	f8 94       	cli
 a00:	80 93 61 00 	sts	0x0061, r24
 a04:	90 93 61 00 	sts	0x0061, r25
 a08:	0f be       	out	0x3f, r0	; 63

	// Disable clock division
	clock_prescale_set(clock_div_1);

	init();
 a0a:	c4 db       	rcall	.-2168   	; 0x194 <init>
 a0c:	83 df       	rcall	.-250    	; 0x914 <poll>
	for (;;) {
		poll();
 a0e:	fe cf       	rjmp	.-4      	; 0xa0c <main+0x2a>

00000a10 <usb_wait_in_ready>:
 a10:	80 91 e8 00 	lds	r24, 0x00E8
 a14:	80 ff       	sbrs	r24, 0
 a16:	fc cf       	rjmp	.-8      	; 0xa10 <usb_wait_in_ready>
 a18:	08 95       	ret

00000a1a <usb_init>:
 a1a:	80 ea       	ldi	r24, 0xA0	; 160
 a1c:	80 93 d8 00 	sts	0x00D8, r24
 a20:	86 e0       	ldi	r24, 0x06	; 6
 a22:	89 bd       	out	0x29, r24	; 41
 a24:	09 b4       	in	r0, 0x29	; 41
 a26:	00 fe       	sbrs	r0, 0
 a28:	fd cf       	rjmp	.-6      	; 0xa24 <usb_init+0xa>
 a2a:	80 e8       	ldi	r24, 0x80	; 128
 a2c:	80 93 d8 00 	sts	0x00D8, r24
 a30:	10 92 e0 00 	sts	0x00E0, r1
 a34:	10 92 47 02 	sts	0x0247, r1
 a38:	8c e0       	ldi	r24, 0x0C	; 12
 a3a:	80 93 e2 00 	sts	0x00E2, r24
 a3e:	78 94       	sei
 a40:	08 95       	ret

00000a42 <usb_configured>:
 a42:	80 91 47 02 	lds	r24, 0x0247
 a46:	08 95       	ret

00000a48 <usb_keyboard_send>:
 a48:	80 91 47 02 	lds	r24, 0x0247
 a4c:	88 23       	and	r24, r24
 a4e:	91 f1       	breq	.+100    	; 0xab4 <usb_keyboard_send+0x6c>
 a50:	8f b7       	in	r24, 0x3f	; 63
 a52:	f8 94       	cli
 a54:	93 e0       	ldi	r25, 0x03	; 3
 a56:	90 93 e9 00 	sts	0x00E9, r25
 a5a:	90 91 e4 00 	lds	r25, 0x00E4
 a5e:	9e 5c       	subi	r25, 0xCE	; 206
 a60:	23 e0       	ldi	r18, 0x03	; 3
 a62:	30 91 e8 00 	lds	r19, 0x00E8
 a66:	35 fd       	sbrc	r19, 5
 a68:	0e c0       	rjmp	.+28     	; 0xa86 <usb_keyboard_send+0x3e>
 a6a:	8f bf       	out	0x3f, r24	; 63
 a6c:	80 91 47 02 	lds	r24, 0x0247
 a70:	88 23       	and	r24, r24
 a72:	01 f1       	breq	.+64     	; 0xab4 <usb_keyboard_send+0x6c>
 a74:	80 91 e4 00 	lds	r24, 0x00E4
 a78:	89 17       	cp	r24, r25
 a7a:	f1 f0       	breq	.+60     	; 0xab8 <usb_keyboard_send+0x70>
 a7c:	8f b7       	in	r24, 0x3f	; 63
 a7e:	f8 94       	cli
 a80:	20 93 e9 00 	sts	0x00E9, r18
 a84:	ee cf       	rjmp	.-36     	; 0xa62 <usb_keyboard_send+0x1a>
 a86:	90 91 3f 02 	lds	r25, 0x023F
 a8a:	90 93 f1 00 	sts	0x00F1, r25
 a8e:	10 92 f1 00 	sts	0x00F1, r1
 a92:	e0 e4       	ldi	r30, 0x40	; 64
 a94:	f2 e0       	ldi	r31, 0x02	; 2
 a96:	91 91       	ld	r25, Z+
 a98:	90 93 f1 00 	sts	0x00F1, r25
 a9c:	92 e0       	ldi	r25, 0x02	; 2
 a9e:	e6 34       	cpi	r30, 0x46	; 70
 aa0:	f9 07       	cpc	r31, r25
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <usb_keyboard_send+0x4e>
 aa4:	9a e3       	ldi	r25, 0x3A	; 58
 aa6:	90 93 e8 00 	sts	0x00E8, r25
 aaa:	10 92 48 02 	sts	0x0248, r1
 aae:	8f bf       	out	0x3f, r24	; 63
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	08 95       	ret
 ab4:	8f ef       	ldi	r24, 0xFF	; 255
 ab6:	08 95       	ret
 ab8:	8f ef       	ldi	r24, 0xFF	; 255
 aba:	08 95       	ret

00000abc <usb_keyboard_press>:
 abc:	60 93 3f 02 	sts	0x023F, r22
 ac0:	80 93 40 02 	sts	0x0240, r24
 ac4:	c1 df       	rcall	.-126    	; 0xa48 <usb_keyboard_send>
 ac6:	88 23       	and	r24, r24
 ac8:	29 f4       	brne	.+10     	; 0xad4 <usb_keyboard_press+0x18>
 aca:	10 92 3f 02 	sts	0x023F, r1
 ace:	10 92 40 02 	sts	0x0240, r1
 ad2:	ba cf       	rjmp	.-140    	; 0xa48 <usb_keyboard_send>
 ad4:	08 95       	ret

00000ad6 <__vector_11>:
 ad6:	1f 92       	push	r1
 ad8:	0f 92       	push	r0
 ada:	0f b6       	in	r0, 0x3f	; 63
 adc:	0f 92       	push	r0
 ade:	11 24       	eor	r1, r1
 ae0:	2f 93       	push	r18
 ae2:	8f 93       	push	r24
 ae4:	9f 93       	push	r25
 ae6:	ef 93       	push	r30
 ae8:	ff 93       	push	r31
 aea:	80 91 e1 00 	lds	r24, 0x00E1
 aee:	10 92 e1 00 	sts	0x00E1, r1
 af2:	83 ff       	sbrs	r24, 3
 af4:	0f c0       	rjmp	.+30     	; 0xb14 <__vector_11+0x3e>
 af6:	10 92 e9 00 	sts	0x00E9, r1
 afa:	91 e0       	ldi	r25, 0x01	; 1
 afc:	90 93 eb 00 	sts	0x00EB, r25
 b00:	10 92 ec 00 	sts	0x00EC, r1
 b04:	92 e2       	ldi	r25, 0x22	; 34
 b06:	90 93 ed 00 	sts	0x00ED, r25
 b0a:	98 e0       	ldi	r25, 0x08	; 8
 b0c:	90 93 f0 00 	sts	0x00F0, r25
 b10:	10 92 47 02 	sts	0x0247, r1
 b14:	82 ff       	sbrs	r24, 2
 b16:	34 c0       	rjmp	.+104    	; 0xb80 <__vector_11+0xaa>
 b18:	80 91 47 02 	lds	r24, 0x0247
 b1c:	88 23       	and	r24, r24
 b1e:	81 f1       	breq	.+96     	; 0xb80 <__vector_11+0xaa>
 b20:	20 91 0c 01 	lds	r18, 0x010C
 b24:	22 23       	and	r18, r18
 b26:	61 f1       	breq	.+88     	; 0xb80 <__vector_11+0xaa>
 b28:	80 91 49 02 	lds	r24, 0x0249
 b2c:	8f 5f       	subi	r24, 0xFF	; 255
 b2e:	80 93 49 02 	sts	0x0249, r24
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	83 70       	andi	r24, 0x03	; 3
 b36:	90 70       	andi	r25, 0x00	; 0
 b38:	00 97       	sbiw	r24, 0x00	; 0
 b3a:	11 f5       	brne	.+68     	; 0xb80 <__vector_11+0xaa>
 b3c:	83 e0       	ldi	r24, 0x03	; 3
 b3e:	80 93 e9 00 	sts	0x00E9, r24
 b42:	80 91 e8 00 	lds	r24, 0x00E8
 b46:	85 ff       	sbrs	r24, 5
 b48:	1b c0       	rjmp	.+54     	; 0xb80 <__vector_11+0xaa>
 b4a:	80 91 48 02 	lds	r24, 0x0248
 b4e:	8f 5f       	subi	r24, 0xFF	; 255
 b50:	80 93 48 02 	sts	0x0248, r24
 b54:	82 17       	cp	r24, r18
 b56:	a1 f4       	brne	.+40     	; 0xb80 <__vector_11+0xaa>
 b58:	10 92 48 02 	sts	0x0248, r1
 b5c:	80 91 3f 02 	lds	r24, 0x023F
 b60:	80 93 f1 00 	sts	0x00F1, r24
 b64:	10 92 f1 00 	sts	0x00F1, r1
 b68:	e0 e4       	ldi	r30, 0x40	; 64
 b6a:	f2 e0       	ldi	r31, 0x02	; 2
 b6c:	81 91       	ld	r24, Z+
 b6e:	80 93 f1 00 	sts	0x00F1, r24
 b72:	82 e0       	ldi	r24, 0x02	; 2
 b74:	e6 34       	cpi	r30, 0x46	; 70
 b76:	f8 07       	cpc	r31, r24
 b78:	c9 f7       	brne	.-14     	; 0xb6c <__vector_11+0x96>
 b7a:	8a e3       	ldi	r24, 0x3A	; 58
 b7c:	80 93 e8 00 	sts	0x00E8, r24
 b80:	ff 91       	pop	r31
 b82:	ef 91       	pop	r30
 b84:	9f 91       	pop	r25
 b86:	8f 91       	pop	r24
 b88:	2f 91       	pop	r18
 b8a:	0f 90       	pop	r0
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	0f 90       	pop	r0
 b90:	1f 90       	pop	r1
 b92:	18 95       	reti

00000b94 <__vector_12>:
 b94:	1f 92       	push	r1
 b96:	0f 92       	push	r0
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	0f 92       	push	r0
 b9c:	11 24       	eor	r1, r1
 b9e:	cf 92       	push	r12
 ba0:	df 92       	push	r13
 ba2:	ef 92       	push	r14
 ba4:	ff 92       	push	r15
 ba6:	0f 93       	push	r16
 ba8:	1f 93       	push	r17
 baa:	2f 93       	push	r18
 bac:	3f 93       	push	r19
 bae:	4f 93       	push	r20
 bb0:	5f 93       	push	r21
 bb2:	6f 93       	push	r22
 bb4:	7f 93       	push	r23
 bb6:	8f 93       	push	r24
 bb8:	9f 93       	push	r25
 bba:	af 93       	push	r26
 bbc:	bf 93       	push	r27
 bbe:	ef 93       	push	r30
 bc0:	ff 93       	push	r31
 bc2:	df 93       	push	r29
 bc4:	cf 93       	push	r28
 bc6:	0f 92       	push	r0
 bc8:	cd b7       	in	r28, 0x3d	; 61
 bca:	de b7       	in	r29, 0x3e	; 62
 bcc:	10 92 e9 00 	sts	0x00E9, r1
 bd0:	80 91 e8 00 	lds	r24, 0x00E8
 bd4:	83 ff       	sbrs	r24, 3
 bd6:	39 c1       	rjmp	.+626    	; 0xe4a <__vector_12+0x2b6>
 bd8:	20 91 f1 00 	lds	r18, 0x00F1
 bdc:	30 91 f1 00 	lds	r19, 0x00F1
 be0:	80 91 f1 00 	lds	r24, 0x00F1
 be4:	c8 2e       	mov	r12, r24
 be6:	dd 24       	eor	r13, r13
 be8:	40 91 f1 00 	lds	r20, 0x00F1
 bec:	94 2f       	mov	r25, r20
 bee:	80 e0       	ldi	r24, 0x00	; 0
 bf0:	c8 2a       	or	r12, r24
 bf2:	d9 2a       	or	r13, r25
 bf4:	00 91 f1 00 	lds	r16, 0x00F1
 bf8:	10 e0       	ldi	r17, 0x00	; 0
 bfa:	40 91 f1 00 	lds	r20, 0x00F1
 bfe:	94 2f       	mov	r25, r20
 c00:	80 e0       	ldi	r24, 0x00	; 0
 c02:	08 2b       	or	r16, r24
 c04:	19 2b       	or	r17, r25
 c06:	60 91 f1 00 	lds	r22, 0x00F1
 c0a:	a0 91 f1 00 	lds	r26, 0x00F1
 c0e:	82 ef       	ldi	r24, 0xF2	; 242
 c10:	80 93 e8 00 	sts	0x00E8, r24
 c14:	36 30       	cpi	r19, 0x06	; 6
 c16:	09 f0       	breq	.+2      	; 0xc1a <__vector_12+0x86>
 c18:	59 c0       	rjmp	.+178    	; 0xccc <__vector_12+0x138>
 c1a:	8b e7       	ldi	r24, 0x7B	; 123
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	9c 01       	movw	r18, r24
 c20:	25 50       	subi	r18, 0x05	; 5
 c22:	30 40       	sbci	r19, 0x00	; 0
 c24:	fc 01       	movw	r30, r24
 c26:	37 97       	sbiw	r30, 0x07	; 7
 c28:	45 91       	lpm	r20, Z+
 c2a:	54 91       	lpm	r21, Z+
 c2c:	4c 15       	cp	r20, r12
 c2e:	5d 05       	cpc	r21, r13
 c30:	f9 f4       	brne	.+62     	; 0xc70 <__vector_12+0xdc>
 c32:	f9 01       	movw	r30, r18
 c34:	45 91       	lpm	r20, Z+
 c36:	54 91       	lpm	r21, Z+
 c38:	40 17       	cp	r20, r16
 c3a:	51 07       	cpc	r21, r17
 c3c:	c9 f4       	brne	.+50     	; 0xc70 <__vector_12+0xdc>
 c3e:	2e 5f       	subi	r18, 0xFE	; 254
 c40:	3f 4f       	sbci	r19, 0xFF	; 255
 c42:	f9 01       	movw	r30, r18
 c44:	85 91       	lpm	r24, Z+
 c46:	94 91       	lpm	r25, Z+
 c48:	2e 5f       	subi	r18, 0xFE	; 254
 c4a:	3f 4f       	sbci	r19, 0xFF	; 255
 c4c:	f9 01       	movw	r30, r18
 c4e:	24 91       	lpm	r18, Z+
 c50:	46 2f       	mov	r20, r22
 c52:	50 e0       	ldi	r21, 0x00	; 0
 c54:	7a 2f       	mov	r23, r26
 c56:	60 e0       	ldi	r22, 0x00	; 0
 c58:	46 2b       	or	r20, r22
 c5a:	57 2b       	or	r21, r23
 c5c:	4f 3f       	cpi	r20, 0xFF	; 255
 c5e:	51 05       	cpc	r21, r1
 c60:	19 f0       	breq	.+6      	; 0xc68 <__vector_12+0xd4>
 c62:	10 f0       	brcs	.+4      	; 0xc68 <__vector_12+0xd4>
 c64:	4f ef       	ldi	r20, 0xFF	; 255
 c66:	50 e0       	ldi	r21, 0x00	; 0
 c68:	42 17       	cp	r20, r18
 c6a:	50 f4       	brcc	.+20     	; 0xc80 <__vector_12+0xec>
 c6c:	24 2f       	mov	r18, r20
 c6e:	08 c0       	rjmp	.+16     	; 0xc80 <__vector_12+0xec>
 c70:	07 96       	adiw	r24, 0x07	; 7
 c72:	29 5f       	subi	r18, 0xF9	; 249
 c74:	3f 4f       	sbci	r19, 0xFF	; 255
 c76:	f0 e0       	ldi	r31, 0x00	; 0
 c78:	8c 3a       	cpi	r24, 0xAC	; 172
 c7a:	9f 07       	cpc	r25, r31
 c7c:	99 f6       	brne	.-90     	; 0xc24 <__vector_12+0x90>
 c7e:	e5 c0       	rjmp	.+458    	; 0xe4a <__vector_12+0x2b6>
 c80:	ae ef       	ldi	r26, 0xFE	; 254
 c82:	40 91 e8 00 	lds	r20, 0x00E8
 c86:	50 e0       	ldi	r21, 0x00	; 0
 c88:	ba 01       	movw	r22, r20
 c8a:	65 70       	andi	r22, 0x05	; 5
 c8c:	70 70       	andi	r23, 0x00	; 0
 c8e:	61 15       	cp	r22, r1
 c90:	71 05       	cpc	r23, r1
 c92:	b9 f3       	breq	.-18     	; 0xc82 <__vector_12+0xee>
 c94:	42 fd       	sbrc	r20, 2
 c96:	dc c0       	rjmp	.+440    	; 0xe50 <__vector_12+0x2bc>
 c98:	32 2f       	mov	r19, r18
 c9a:	21 32       	cpi	r18, 0x21	; 33
 c9c:	08 f0       	brcs	.+2      	; 0xca0 <__vector_12+0x10c>
 c9e:	30 e2       	ldi	r19, 0x20	; 32
 ca0:	ac 01       	movw	r20, r24
 ca2:	63 2f       	mov	r22, r19
 ca4:	07 c0       	rjmp	.+14     	; 0xcb4 <__vector_12+0x120>
 ca6:	fa 01       	movw	r30, r20
 ca8:	4f 5f       	subi	r20, 0xFF	; 255
 caa:	5f 4f       	sbci	r21, 0xFF	; 255
 cac:	e4 91       	lpm	r30, Z+
 cae:	e0 93 f1 00 	sts	0x00F1, r30
 cb2:	61 50       	subi	r22, 0x01	; 1
 cb4:	66 23       	and	r22, r22
 cb6:	b9 f7       	brne	.-18     	; 0xca6 <__vector_12+0x112>
 cb8:	83 0f       	add	r24, r19
 cba:	91 1d       	adc	r25, r1
 cbc:	23 1b       	sub	r18, r19
 cbe:	a0 93 e8 00 	sts	0x00E8, r26
 cc2:	22 23       	and	r18, r18
 cc4:	f1 f6       	brne	.-68     	; 0xc82 <__vector_12+0xee>
 cc6:	30 32       	cpi	r19, 0x20	; 32
 cc8:	e1 f2       	breq	.-72     	; 0xc82 <__vector_12+0xee>
 cca:	c2 c0       	rjmp	.+388    	; 0xe50 <__vector_12+0x2bc>
 ccc:	35 30       	cpi	r19, 0x05	; 5
 cce:	49 f4       	brne	.+18     	; 0xce2 <__vector_12+0x14e>
 cd0:	8e ef       	ldi	r24, 0xFE	; 254
 cd2:	80 93 e8 00 	sts	0x00E8, r24
 cd6:	9c de       	rcall	.-712    	; 0xa10 <usb_wait_in_ready>
 cd8:	8c 2d       	mov	r24, r12
 cda:	80 68       	ori	r24, 0x80	; 128
 cdc:	80 93 e3 00 	sts	0x00E3, r24
 ce0:	b7 c0       	rjmp	.+366    	; 0xe50 <__vector_12+0x2bc>
 ce2:	39 30       	cpi	r19, 0x09	; 9
 ce4:	31 f5       	brne	.+76     	; 0xd32 <__vector_12+0x19e>
 ce6:	22 23       	and	r18, r18
 ce8:	09 f0       	breq	.+2      	; 0xcec <__vector_12+0x158>
 cea:	69 c0       	rjmp	.+210    	; 0xdbe <__vector_12+0x22a>
 cec:	c0 92 47 02 	sts	0x0247, r12
 cf0:	8e ef       	ldi	r24, 0xFE	; 254
 cf2:	80 93 e8 00 	sts	0x00E8, r24
 cf6:	41 e0       	ldi	r20, 0x01	; 1
 cf8:	85 ea       	ldi	r24, 0xA5	; 165
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	40 93 e9 00 	sts	0x00E9, r20
 d00:	fc 01       	movw	r30, r24
 d02:	01 96       	adiw	r24, 0x01	; 1
 d04:	e4 91       	lpm	r30, Z+
 d06:	e0 93 eb 00 	sts	0x00EB, r30
 d0a:	ee 23       	and	r30, r30
 d0c:	69 f0       	breq	.+26     	; 0xd28 <__vector_12+0x194>
 d0e:	9c 01       	movw	r18, r24
 d10:	2f 5f       	subi	r18, 0xFF	; 255
 d12:	3f 4f       	sbci	r19, 0xFF	; 255
 d14:	fc 01       	movw	r30, r24
 d16:	84 91       	lpm	r24, Z+
 d18:	80 93 ec 00 	sts	0x00EC, r24
 d1c:	c9 01       	movw	r24, r18
 d1e:	01 96       	adiw	r24, 0x01	; 1
 d20:	f9 01       	movw	r30, r18
 d22:	24 91       	lpm	r18, Z+
 d24:	20 93 ed 00 	sts	0x00ED, r18
 d28:	4f 5f       	subi	r20, 0xFF	; 255
 d2a:	45 30       	cpi	r20, 0x05	; 5
 d2c:	39 f7       	brne	.-50     	; 0xcfc <__vector_12+0x168>
 d2e:	8e e1       	ldi	r24, 0x1E	; 30
 d30:	41 c0       	rjmp	.+130    	; 0xdb4 <__vector_12+0x220>
 d32:	38 30       	cpi	r19, 0x08	; 8
 d34:	39 f4       	brne	.+14     	; 0xd44 <__vector_12+0x1b0>
 d36:	20 38       	cpi	r18, 0x80	; 128
 d38:	09 f0       	breq	.+2      	; 0xd3c <__vector_12+0x1a8>
 d3a:	41 c0       	rjmp	.+130    	; 0xdbe <__vector_12+0x22a>
 d3c:	69 de       	rcall	.-814    	; 0xa10 <usb_wait_in_ready>
 d3e:	80 91 47 02 	lds	r24, 0x0247
 d42:	61 c0       	rjmp	.+194    	; 0xe06 <__vector_12+0x272>
 d44:	33 23       	and	r19, r19
 d46:	a9 f4       	brne	.+42     	; 0xd72 <__vector_12+0x1de>
 d48:	29 83       	std	Y+1, r18	; 0x01
 d4a:	62 de       	rcall	.-828    	; 0xa10 <usb_wait_in_ready>
 d4c:	29 81       	ldd	r18, Y+1	; 0x01
 d4e:	22 38       	cpi	r18, 0x82	; 130
 d50:	51 f4       	brne	.+20     	; 0xd66 <__vector_12+0x1d2>
 d52:	00 93 e9 00 	sts	0x00E9, r16
 d56:	90 91 eb 00 	lds	r25, 0x00EB
 d5a:	81 e0       	ldi	r24, 0x01	; 1
 d5c:	95 ff       	sbrs	r25, 5
 d5e:	80 e0       	ldi	r24, 0x00	; 0
 d60:	10 92 e9 00 	sts	0x00E9, r1
 d64:	01 c0       	rjmp	.+2      	; 0xd68 <__vector_12+0x1d4>
 d66:	80 e0       	ldi	r24, 0x00	; 0
 d68:	80 93 f1 00 	sts	0x00F1, r24
 d6c:	10 92 f1 00 	sts	0x00F1, r1
 d70:	68 c0       	rjmp	.+208    	; 0xe42 <__vector_12+0x2ae>
 d72:	31 30       	cpi	r19, 0x01	; 1
 d74:	11 f0       	breq	.+4      	; 0xd7a <__vector_12+0x1e6>
 d76:	33 30       	cpi	r19, 0x03	; 3
 d78:	11 f5       	brne	.+68     	; 0xdbe <__vector_12+0x22a>
 d7a:	22 30       	cpi	r18, 0x02	; 2
 d7c:	01 f5       	brne	.+64     	; 0xdbe <__vector_12+0x22a>
 d7e:	c1 14       	cp	r12, r1
 d80:	d1 04       	cpc	r13, r1
 d82:	e9 f4       	brne	.+58     	; 0xdbe <__vector_12+0x22a>
 d84:	40 2f       	mov	r20, r16
 d86:	4f 77       	andi	r20, 0x7F	; 127
 d88:	84 2f       	mov	r24, r20
 d8a:	81 50       	subi	r24, 0x01	; 1
 d8c:	84 30       	cpi	r24, 0x04	; 4
 d8e:	b8 f4       	brcc	.+46     	; 0xdbe <__vector_12+0x22a>
 d90:	8e ef       	ldi	r24, 0xFE	; 254
 d92:	80 93 e8 00 	sts	0x00E8, r24
 d96:	40 93 e9 00 	sts	0x00E9, r20
 d9a:	33 30       	cpi	r19, 0x03	; 3
 d9c:	09 f4       	brne	.+2      	; 0xda0 <__vector_12+0x20c>
 d9e:	55 c0       	rjmp	.+170    	; 0xe4a <__vector_12+0x2b6>
 da0:	89 e1       	ldi	r24, 0x19	; 25
 da2:	80 93 eb 00 	sts	0x00EB, r24
 da6:	81 e0       	ldi	r24, 0x01	; 1
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	02 c0       	rjmp	.+4      	; 0xdb0 <__vector_12+0x21c>
 dac:	88 0f       	add	r24, r24
 dae:	99 1f       	adc	r25, r25
 db0:	4a 95       	dec	r20
 db2:	e2 f7       	brpl	.-8      	; 0xdac <__vector_12+0x218>
 db4:	80 93 ea 00 	sts	0x00EA, r24
 db8:	10 92 ea 00 	sts	0x00EA, r1
 dbc:	49 c0       	rjmp	.+146    	; 0xe50 <__vector_12+0x2bc>
 dbe:	01 15       	cp	r16, r1
 dc0:	11 05       	cpc	r17, r1
 dc2:	09 f0       	breq	.+2      	; 0xdc6 <__vector_12+0x232>
 dc4:	42 c0       	rjmp	.+132    	; 0xe4a <__vector_12+0x2b6>
 dc6:	21 3a       	cpi	r18, 0xA1	; 161
 dc8:	09 f5       	brne	.+66     	; 0xe0c <__vector_12+0x278>
 dca:	31 30       	cpi	r19, 0x01	; 1
 dcc:	89 f4       	brne	.+34     	; 0xdf0 <__vector_12+0x25c>
 dce:	20 de       	rcall	.-960    	; 0xa10 <usb_wait_in_ready>
 dd0:	80 91 3f 02 	lds	r24, 0x023F
 dd4:	80 93 f1 00 	sts	0x00F1, r24
 dd8:	10 92 f1 00 	sts	0x00F1, r1
 ddc:	e0 e4       	ldi	r30, 0x40	; 64
 dde:	f2 e0       	ldi	r31, 0x02	; 2
 de0:	81 91       	ld	r24, Z+
 de2:	80 93 f1 00 	sts	0x00F1, r24
 de6:	22 e0       	ldi	r18, 0x02	; 2
 de8:	e6 34       	cpi	r30, 0x46	; 70
 dea:	f2 07       	cpc	r31, r18
 dec:	c9 f7       	brne	.-14     	; 0xde0 <__vector_12+0x24c>
 dee:	29 c0       	rjmp	.+82     	; 0xe42 <__vector_12+0x2ae>
 df0:	32 30       	cpi	r19, 0x02	; 2
 df2:	21 f4       	brne	.+8      	; 0xdfc <__vector_12+0x268>
 df4:	0d de       	rcall	.-998    	; 0xa10 <usb_wait_in_ready>
 df6:	80 91 0c 01 	lds	r24, 0x010C
 dfa:	05 c0       	rjmp	.+10     	; 0xe06 <__vector_12+0x272>
 dfc:	33 30       	cpi	r19, 0x03	; 3
 dfe:	29 f5       	brne	.+74     	; 0xe4a <__vector_12+0x2b6>
 e00:	07 de       	rcall	.-1010   	; 0xa10 <usb_wait_in_ready>
 e02:	80 91 0d 01 	lds	r24, 0x010D
 e06:	80 93 f1 00 	sts	0x00F1, r24
 e0a:	1b c0       	rjmp	.+54     	; 0xe42 <__vector_12+0x2ae>
 e0c:	21 32       	cpi	r18, 0x21	; 33
 e0e:	e9 f4       	brne	.+58     	; 0xe4a <__vector_12+0x2b6>
 e10:	39 30       	cpi	r19, 0x09	; 9
 e12:	61 f4       	brne	.+24     	; 0xe2c <__vector_12+0x298>
 e14:	80 91 e8 00 	lds	r24, 0x00E8
 e18:	82 ff       	sbrs	r24, 2
 e1a:	fc cf       	rjmp	.-8      	; 0xe14 <__vector_12+0x280>
 e1c:	80 91 f1 00 	lds	r24, 0x00F1
 e20:	80 93 46 02 	sts	0x0246, r24
 e24:	8b ef       	ldi	r24, 0xFB	; 251
 e26:	80 93 e8 00 	sts	0x00E8, r24
 e2a:	0b c0       	rjmp	.+22     	; 0xe42 <__vector_12+0x2ae>
 e2c:	3a 30       	cpi	r19, 0x0A	; 10
 e2e:	29 f4       	brne	.+10     	; 0xe3a <__vector_12+0x2a6>
 e30:	d0 92 0c 01 	sts	0x010C, r13
 e34:	10 92 48 02 	sts	0x0248, r1
 e38:	04 c0       	rjmp	.+8      	; 0xe42 <__vector_12+0x2ae>
 e3a:	3b 30       	cpi	r19, 0x0B	; 11
 e3c:	31 f4       	brne	.+12     	; 0xe4a <__vector_12+0x2b6>
 e3e:	c0 92 0d 01 	sts	0x010D, r12
 e42:	8e ef       	ldi	r24, 0xFE	; 254
 e44:	80 93 e8 00 	sts	0x00E8, r24
 e48:	03 c0       	rjmp	.+6      	; 0xe50 <__vector_12+0x2bc>
 e4a:	81 e2       	ldi	r24, 0x21	; 33
 e4c:	80 93 eb 00 	sts	0x00EB, r24
 e50:	0f 90       	pop	r0
 e52:	cf 91       	pop	r28
 e54:	df 91       	pop	r29
 e56:	ff 91       	pop	r31
 e58:	ef 91       	pop	r30
 e5a:	bf 91       	pop	r27
 e5c:	af 91       	pop	r26
 e5e:	9f 91       	pop	r25
 e60:	8f 91       	pop	r24
 e62:	7f 91       	pop	r23
 e64:	6f 91       	pop	r22
 e66:	5f 91       	pop	r21
 e68:	4f 91       	pop	r20
 e6a:	3f 91       	pop	r19
 e6c:	2f 91       	pop	r18
 e6e:	1f 91       	pop	r17
 e70:	0f 91       	pop	r16
 e72:	ff 90       	pop	r15
 e74:	ef 90       	pop	r14
 e76:	df 90       	pop	r13
 e78:	cf 90       	pop	r12
 e7a:	0f 90       	pop	r0
 e7c:	0f be       	out	0x3f, r0	; 63
 e7e:	0f 90       	pop	r0
 e80:	1f 90       	pop	r1
 e82:	18 95       	reti

00000e84 <_exit>:
 e84:	f8 94       	cli

00000e86 <__stop_program>:
 e86:	ff cf       	rjmp	.-2      	; 0xe86 <__stop_program>
