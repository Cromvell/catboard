
catboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  00000c50  00000ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  008001f2  008001f2  00000dd6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a8  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020f  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f27  00000000  00000000  000017af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000046b  00000000  00000000  000026d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e50  00000000  00000000  00002b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000110  00000000  00000000  00003994  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000515  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a4c  00000000  00000000  00003fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000d1  00000000  00000000  00004a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  00004ad6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
   2:	00 00       	nop
   4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	00 00       	nop
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	00 00       	nop
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	00 00       	nop
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
  1e:	00 00       	nop
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	00 00       	nop
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	00 00       	nop
  28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c4       	rjmp	.+2160   	; 0x89e <__vector_11>
  2e:	00 00       	nop
  30:	95 c4       	rjmp	.+2346   	; 0x95c <__vector_12>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
  36:	00 00       	nop
  38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
  46:	00 00       	nop
  48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
  4e:	00 00       	nop
  50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
  52:	00 00       	nop
  54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
  56:	00 00       	nop
  58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
  5e:	00 00       	nop
  60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
  62:	00 00       	nop
  64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
  66:	00 00       	nop
  68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
  6e:	00 00       	nop
  70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
  72:	00 00       	nop

00000074 <descriptor_list>:
  74:	00 01 00 00 ab 00 12 00 02 00 00 bd 00 22 00 22     ............."."
  84:	00 00 df 00 3f 00 21 00 00 cf 00 09 00 03 00 00     ....?.!.........
  94:	1e 01 04 01 03 09 04 22 01 0e 02 03 09 04 32 01     ......."......2.
  a4:	12                                                  .

000000a5 <endpoint_config_table>:
  a5:	00 00 01 c1 06 00                                   ......

000000ab <device_descriptor>:
  ab:	12 01 00 02 00 00 00 20 c0 16 7c 04 00 01 01 02     ....... ..|.....
  bb:	00 01                                               ..

000000bd <config1_descriptor>:
  bd:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  cd:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
  dd:	00 01                                               ..

000000df <keyboard_hid_report_desc>:
  df:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
  ef:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
  ff:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 10f:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

0000011e <string0>:
 11e:	04 03 09 04                                         ....

00000122 <string1>:
 122:	0e 03 69 00 62 00 6e 00 54 00 65 00 6f 00 00 00     ..i.b.n.T.e.o...

00000132 <string2>:
 132:	12 03 43 00 61 00 74 00 62 00 6f 00 61 00 72 00     ..C.a.t.b.o.a.r.
 142:	64 00 00 00                                         d...

00000146 <__ctors_end>:
 146:	11 24       	eor	r1, r1
 148:	1f be       	out	0x3f, r1	; 63
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	d2 e0       	ldi	r29, 0x02	; 2
 14e:	de bf       	out	0x3e, r29	; 62
 150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
 152:	11 e0       	ldi	r17, 0x01	; 1
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	b1 e0       	ldi	r27, 0x01	; 1
 158:	e0 e5       	ldi	r30, 0x50	; 80
 15a:	fc e0       	ldi	r31, 0x0C	; 12
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x10>
 15e:	05 90       	lpm	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	a2 3f       	cpi	r26, 0xF2	; 242
 164:	b1 07       	cpc	r27, r17
 166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0xc>

00000168 <__do_clear_bss>:
 168:	12 e0       	ldi	r17, 0x02	; 2
 16a:	a2 ef       	ldi	r26, 0xF2	; 242
 16c:	b1 e0       	ldi	r27, 0x01	; 1
 16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
 170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
 172:	a5 34       	cpi	r26, 0x45	; 69
 174:	b1 07       	cpc	r27, r17
 176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
 178:	18 d3       	rcall	.+1584   	; 0x7aa <main>
 17a:	68 c5       	rjmp	.+2768   	; 0xc4c <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <change_layout>:
		}
	}
}

void change_layout() {
	usb_keyboard_press(0, KEY_ALT);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	64 e0       	ldi	r22, 0x04	; 4
 182:	80 d3       	rcall	.+1792   	; 0x884 <usb_keyboard_press>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	90 e7       	ldi	r25, 0x70	; 112
 188:	a2 e0       	ldi	r26, 0x02	; 2
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	a0 40       	sbci	r26, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <change_layout+0xc>
 192:	00 c0       	rjmp	.+0      	; 0x194 <change_layout+0x16>
 194:	00 00       	nop
	_delay_ms(50);
	usb_keyboard_press(0, KEY_ALT+KEY_SHIFT);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	66 e0       	ldi	r22, 0x06	; 6
 19a:	74 d3       	rcall	.+1768   	; 0x884 <usb_keyboard_press>
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	90 e7       	ldi	r25, 0x70	; 112
 1a0:	a2 e0       	ldi	r26, 0x02	; 2
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	a0 40       	sbci	r26, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <change_layout+0x24>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <change_layout+0x2e>
 1ac:	00 00       	nop
	_delay_ms(50);
	usb_keyboard_press(0, 0);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	60 e0       	ldi	r22, 0x00	; 0
}
 1b2:	68 c3       	rjmp	.+1744   	; 0x884 <usb_keyboard_press>

000001b4 <init>:
	}
}

void init(void) {
	// set for 16 MHz clock
	CLKPR = 0x80; CLKPR = 0;
 1b4:	80 e8       	ldi	r24, 0x80	; 128
 1b6:	80 93 61 00 	sts	0x0061, r24
 1ba:	10 92 61 00 	sts	0x0061, r1

	DDRB	= 0x00; DDRC	= 0b11110100;	DDRD	= 0x00;
 1be:	14 b8       	out	0x04, r1	; 4
 1c0:	94 ef       	ldi	r25, 0xF4	; 244
 1c2:	97 b9       	out	0x07, r25	; 7
 1c4:	1a b8       	out	0x0a, r1	; 10
	PORTB	= 0xFF; PORTC	= 0b11110100; 	PORTD	= 0xFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	85 b9       	out	0x05, r24	; 5
 1ca:	98 b9       	out	0x08, r25	; 8
 1cc:	8b b9       	out	0x0b, r24	; 11

	LED_CONFIG;
 1ce:	54 9a       	sbi	0x0a, 4	; 10
	LED_ON;
 1d0:	5c 9a       	sbi	0x0b, 4	; 11
 1d2:	e9 e0       	ldi	r30, 0x09	; 9
 1d4:	f2 e0       	ldi	r31, 0x02	; 2

	for(uint8_t i=0; i<KEYS; i++) {
		pressed[i] = 0;
 1d6:	11 92       	st	Z+, r1
	PORTB	= 0xFF; PORTC	= 0b11110100; 	PORTD	= 0xFF;

	LED_CONFIG;
	LED_ON;

	for(uint8_t i=0; i<KEYS; i++) {
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	e5 34       	cpi	r30, 0x45	; 69
 1dc:	f8 07       	cpc	r31, r24
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <init+0x22>
		pressed[i] = 0;
	}

	usb_init();
 1e0:	00 d3       	rcall	.+1536   	; 0x7e2 <usb_init>
	LED_OFF;
 1e2:	5c 98       	cbi	0x0b, 4	; 11
	while(!usb_configured());
 1e4:	12 d3       	rcall	.+1572   	; 0x80a <usb_configured>
 1e6:	88 23       	and	r24, r24
 1e8:	e9 f3       	breq	.-6      	; 0x1e4 <init+0x30>
	LED_ON;
 1ea:	5c 9a       	sbi	0x0b, 4	; 11
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	93 ed       	ldi	r25, 0xD3	; 211
 1f0:	a0 e3       	ldi	r26, 0x30	; 48
 1f2:	81 50       	subi	r24, 0x01	; 1
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	a0 40       	sbci	r26, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <init+0x3e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <init+0x48>
 1fc:	00 00       	nop
	_delay_ms(1000);
	LED_OFF;
 1fe:	5c 98       	cbi	0x0b, 4	; 11
}
 200:	08 95       	ret

00000202 <get_code>:
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
	if (key_id<KEYS) { // not 0xFF
 202:	8c 33       	cpi	r24, 0x3C	; 60
 204:	28 f5       	brcc	.+74     	; 0x250 <get_code+0x4e>
		if (pressed[key_id]==1) { // key+Fn key
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	f9 01       	movw	r30, r18
 20c:	e7 5f       	subi	r30, 0xF7	; 247
 20e:	fd 4f       	sbci	r31, 0xFD	; 253
 210:	90 81       	ld	r25, Z
 212:	91 30       	cpi	r25, 0x01	; 1
 214:	41 f4       	brne	.+16     	; 0x226 <get_code+0x24>
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 216:	28 58       	subi	r18, 0x88	; 136
 218:	3e 4f       	sbci	r19, 0xFE	; 254
 21a:	f9 01       	movw	r30, r18
 21c:	80 81       	ld	r24, Z
 21e:	18 16       	cp	r1, r24
 220:	c4 f0       	brlt	.+48     	; 0x252 <get_code+0x50>
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret
	if (key_id<KEYS) { // not 0xFF
		if (pressed[key_id]==1) { // key+Fn key
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
				key_code = layer_fn[key_id];
			}
		} else if (layout!=layer_fn && (mod_keys & (KEY_CTRL+KEY_RIGHT_CTRL+KEY_ALT+KEY_RIGHT_ALT))) { // keyboard shortcuts from layer1
 226:	40 91 b4 01 	lds	r20, 0x01B4
 22a:	50 91 b5 01 	lds	r21, 0x01B5
 22e:	f1 e0       	ldi	r31, 0x01	; 1
 230:	48 37       	cpi	r20, 0x78	; 120
 232:	5f 07       	cpc	r21, r31
 234:	41 f0       	breq	.+16     	; 0x246 <get_code+0x44>
 236:	90 91 f2 01 	lds	r25, 0x01F2
 23a:	95 75       	andi	r25, 0x55	; 85
 23c:	21 f0       	breq	.+8      	; 0x246 <get_code+0x44>
			key_code = layer1[key_id];
 23e:	20 50       	subi	r18, 0x00	; 0
 240:	3f 4f       	sbci	r19, 0xFF	; 255
 242:	f9 01       	movw	r30, r18
 244:	03 c0       	rjmp	.+6      	; 0x24c <get_code+0x4a>
		} else {
			key_code = layout[key_id];
 246:	48 0f       	add	r20, r24
 248:	51 1d       	adc	r21, r1
 24a:	fa 01       	movw	r30, r20
 24c:	80 81       	ld	r24, Z
 24e:	08 95       	ret
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
 250:	80 e0       	ldi	r24, 0x00	; 0
		} else {
			key_code = layout[key_id];
		}
	}
	return key_code;
}
 252:	08 95       	ret

00000254 <send>:
	usb_keyboard_press(0, KEY_ALT+KEY_SHIFT);
	_delay_ms(50);
	usb_keyboard_press(0, 0);
}

void send(void) {
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	c9 ee       	ldi	r28, 0xE9	; 233
 25e:	d1 e0       	ldi	r29, 0x01	; 1
 260:	0f ef       	ldi	r16, 0xFF	; 255
 262:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t i;
	for (i=0; i<6; i++) {
		keyboard_keys[i] = get_code(queue[i]);
 264:	89 91       	ld	r24, Y+
 266:	cd df       	rcall	.-102    	; 0x202 <get_code>
 268:	f8 01       	movw	r30, r16
 26a:	81 93       	st	Z+, r24
 26c:	8f 01       	movw	r16, r30
	usb_keyboard_press(0, 0);
}

void send(void) {
	uint8_t i;
	for (i=0; i<6; i++) {
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	cf 3e       	cpi	r28, 0xEF	; 239
 272:	df 07       	cpc	r29, r31
 274:	b9 f7       	brne	.-18     	; 0x264 <send+0x10>
		keyboard_keys[i] = get_code(queue[i]);
	}
	keyboard_modifier_keys = mod_keys;
 276:	80 91 f2 01 	lds	r24, 0x01F2
 27a:	80 93 fe 01 	sts	0x01FE, r24
	usb_keyboard_send();
 27e:	c8 d2       	rcall	.+1424   	; 0x810 <usb_keyboard_send>
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <key_release>:
			repeat_time = 0;
		}
	}
}

void key_release(uint8_t key_id) {
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	0f 92       	push	r0
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int8_t pressed_key_id = pressed[key_id];
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	f9 01       	movw	r30, r18
 29a:	e7 5f       	subi	r30, 0xF7	; 247
 29c:	fd 4f       	sbci	r31, 0xFD	; 253
 29e:	90 81       	ld	r25, Z
	pressed[key_id] = 0;
 2a0:	10 82       	st	Z, r1
	if(pressed_key_id==1 && layer_fn[key_id]>=0x80) { // Fn+Mod_keys release
 2a2:	91 30       	cpi	r25, 0x01	; 1
 2a4:	81 f4       	brne	.+32     	; 0x2c6 <key_release+0x3c>
 2a6:	f9 01       	movw	r30, r18
 2a8:	e8 58       	subi	r30, 0x88	; 136
 2aa:	fe 4f       	sbci	r31, 0xFE	; 254
 2ac:	40 81       	ld	r20, Z
 2ae:	47 ff       	sbrs	r20, 7
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <key_release+0x2c>
		//mod_keys &= ~((layer_fn[key_id]!=0x80) ? (layer_fn[key_id] & 0x7F) : layer_fn[key_id]);
		mod_keys &= ~(layer_fn[key_id] & 0x7F);
 2b2:	94 2f       	mov	r25, r20
 2b4:	3a c0       	rjmp	.+116    	; 0x32a <__stack+0x2b>
		send();
	} else if((pressed_key_id!=1 || layout==layer_fn) && layout[key_id]>0xF0) { // Catboard keys release
 2b6:	40 91 b4 01 	lds	r20, 0x01B4
 2ba:	50 91 b5 01 	lds	r21, 0x01B5
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	48 37       	cpi	r20, 0x78	; 120
 2c2:	56 07       	cpc	r21, r22
 2c4:	09 f5       	brne	.+66     	; 0x308 <__stack+0x9>
 2c6:	e0 91 b4 01 	lds	r30, 0x01B4
 2ca:	f0 91 b5 01 	lds	r31, 0x01B5
 2ce:	e8 0f       	add	r30, r24
 2d0:	f1 1d       	adc	r31, r1
 2d2:	40 81       	ld	r20, Z
 2d4:	41 3f       	cpi	r20, 0xF1	; 241
 2d6:	50 f0       	brcs	.+20     	; 0x2ec <key_release+0x62>
		if (layout[key_id]==KEY_ALT_TAB && pressed_key_id!=2) { // ALT_TAB release
 2d8:	4d 3f       	cpi	r20, 0xFD	; 253
 2da:	09 f0       	breq	.+2      	; 0x2de <key_release+0x54>
 2dc:	66 c0       	rjmp	.+204    	; 0x3aa <__stack+0xab>
 2de:	92 30       	cpi	r25, 0x02	; 2
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <key_release+0x5a>
 2e2:	63 c0       	rjmp	.+198    	; 0x3aa <__stack+0xab>
			mod_keys &= ~(KEY_ALT);
 2e4:	80 91 f2 01 	lds	r24, 0x01F2
 2e8:	8b 7f       	andi	r24, 0xFB	; 251
 2ea:	24 c0       	rjmp	.+72     	; 0x334 <__stack+0x35>
			send();
		}
	} else if(pressed_key_id==2 && layer_fn[key_id]==(KEY_CTRL+KEY_MOD)) { // Fn+KEY_CTRL release
 2ec:	92 30       	cpi	r25, 0x02	; 2
 2ee:	51 f4       	brne	.+20     	; 0x304 <__stack+0x5>
 2f0:	28 58       	subi	r18, 0x88	; 136
 2f2:	3e 4f       	sbci	r19, 0xFE	; 254
 2f4:	f9 01       	movw	r30, r18
 2f6:	90 81       	ld	r25, Z
 2f8:	91 38       	cpi	r25, 0x81	; 129
 2fa:	71 f4       	brne	.+28     	; 0x318 <__stack+0x19>
		//mod_keys &= ~((layer_fn[key_id]!=0x80) ? (layer_fn[key_id] & 0x7F) : layer_fn[key_id]);
		mod_keys &= ~(KEY_SHIFT);
 2fc:	80 91 f2 01 	lds	r24, 0x01F2
 300:	8d 7f       	andi	r24, 0xFD	; 253
 302:	18 c0       	rjmp	.+48     	; 0x334 <__stack+0x35>
		send();
	} else if((pressed_key_id!=1 || layout==layer_fn) && layout[key_id]>=0x80) { // Mod_keys release
 304:	91 30       	cpi	r25, 0x01	; 1
 306:	41 f4       	brne	.+16     	; 0x318 <__stack+0x19>
 308:	20 91 b4 01 	lds	r18, 0x01B4
 30c:	30 91 b5 01 	lds	r19, 0x01B5
 310:	f1 e0       	ldi	r31, 0x01	; 1
 312:	28 37       	cpi	r18, 0x78	; 120
 314:	3f 07       	cpc	r19, r31
 316:	91 f4       	brne	.+36     	; 0x33c <__stack+0x3d>
 318:	e0 91 b4 01 	lds	r30, 0x01B4
 31c:	f0 91 b5 01 	lds	r31, 0x01B5
 320:	e8 0f       	add	r30, r24
 322:	f1 1d       	adc	r31, r1
 324:	90 81       	ld	r25, Z
 326:	97 ff       	sbrs	r25, 7
 328:	09 c0       	rjmp	.+18     	; 0x33c <__stack+0x3d>
		//mod_keys &= ~((layout[key_id]!=0x80) ? (layout[key_id] & 0x7F) : layout[key_id]);
		mod_keys &= ~(layout[key_id] & 0x7F);
 32a:	9f 77       	andi	r25, 0x7F	; 127
 32c:	90 95       	com	r25
 32e:	80 91 f2 01 	lds	r24, 0x01F2
 332:	89 23       	and	r24, r25
 334:	80 93 f2 01 	sts	0x01F2, r24
		send();
 338:	8d df       	rcall	.-230    	; 0x254 <send>
 33a:	37 c0       	rjmp	.+110    	; 0x3aa <__stack+0xab>
		}
	} else if(pressed_key_id==2 && layer_fn[key_id]==(KEY_CTRL+KEY_MOD)) { // Fn+KEY_CTRL release
		//mod_keys &= ~((layer_fn[key_id]!=0x80) ? (layer_fn[key_id] & 0x7F) : layer_fn[key_id]);
		mod_keys &= ~(KEY_SHIFT);
		send();
	} else if((pressed_key_id!=1 || layout==layer_fn) && layout[key_id]>=0x80) { // Mod_keys release
 33c:	90 e0       	ldi	r25, 0x00	; 0
		//mod_keys &= ~((layout[key_id]!=0x80) ? (layout[key_id] & 0x7F) : layout[key_id]);
		mod_keys &= ~(layout[key_id] & 0x7F);
		send();
	} else {
		for(i=0; i<6; i++) {
			if(queue[i]==key_id) {
 33e:	e9 2f       	mov	r30, r25
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	e7 51       	subi	r30, 0x17	; 23
 344:	fe 4f       	sbci	r31, 0xFE	; 254
 346:	20 81       	ld	r18, Z
 348:	28 17       	cp	r18, r24
 34a:	59 f0       	breq	.+22     	; 0x362 <__stack+0x63>
	} else if((pressed_key_id!=1 || layout==layer_fn) && layout[key_id]>=0x80) { // Mod_keys release
		//mod_keys &= ~((layout[key_id]!=0x80) ? (layout[key_id] & 0x7F) : layout[key_id]);
		mod_keys &= ~(layout[key_id] & 0x7F);
		send();
	} else {
		for(i=0; i<6; i++) {
 34c:	9f 5f       	subi	r25, 0xFF	; 255
 34e:	96 30       	cpi	r25, 0x06	; 6
 350:	b1 f7       	brne	.-20     	; 0x33e <__stack+0x3f>
 352:	07 c0       	rjmp	.+14     	; 0x362 <__stack+0x63>
			if(queue[i]==key_id) {
				break;
			}
		}
		for(; i<6; i++) {
			queue[i] = queue[i+1];
 354:	e9 2f       	mov	r30, r25
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	e7 51       	subi	r30, 0x17	; 23
 35a:	fe 4f       	sbci	r31, 0xFE	; 254
 35c:	21 81       	ldd	r18, Z+1	; 0x01
 35e:	20 83       	st	Z, r18
		for(i=0; i<6; i++) {
			if(queue[i]==key_id) {
				break;
			}
		}
		for(; i<6; i++) {
 360:	9f 5f       	subi	r25, 0xFF	; 255
 362:	96 30       	cpi	r25, 0x06	; 6
 364:	b8 f3       	brcs	.-18     	; 0x354 <__stack+0x55>
			queue[i] = queue[i+1];
		}
		send();
 366:	89 83       	std	Y+1, r24	; 0x01
 368:	75 df       	rcall	.-278    	; 0x254 <send>
		// Autorepeat
		if (last_key==key_id) {
 36a:	90 91 f5 01 	lds	r25, 0x01F5
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	98 17       	cp	r25, r24
 372:	59 f4       	brne	.+22     	; 0x38a <__stack+0x8b>
			if (release_time) {
				press_time2 = 0;
				release_time = 1;
				repeat_time = 0;
			} else {
				press_time2 = 0;
 374:	10 92 f9 01 	sts	0x01F9, r1
 378:	10 92 f8 01 	sts	0x01F8, r1
				release_time = 1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 fb 01 	sts	0x01FB, r25
 384:	80 93 fa 01 	sts	0x01FA, r24
 388:	0c c0       	rjmp	.+24     	; 0x3a2 <__stack+0xa3>
				repeat_time = 0;
			}
		} else {
			press_time = 0;
 38a:	10 92 f7 01 	sts	0x01F7, r1
 38e:	10 92 f6 01 	sts	0x01F6, r1
			press_time2 = 0;
 392:	10 92 f9 01 	sts	0x01F9, r1
 396:	10 92 f8 01 	sts	0x01F8, r1
			release_time = 0;
 39a:	10 92 fb 01 	sts	0x01FB, r1
 39e:	10 92 fa 01 	sts	0x01FA, r1
			repeat_time = 0;
 3a2:	10 92 fd 01 	sts	0x01FD, r1
 3a6:	10 92 fc 01 	sts	0x01FC, r1
		}
	}
}
 3aa:	0f 90       	pop	r0
 3ac:	cf 91       	pop	r28
 3ae:	df 91       	pop	r29
 3b0:	08 95       	ret

000003b2 <key_press>:
			press_time = 0;
		}
	}	
}

void key_press(uint8_t key_id) {
 3b2:	df 93       	push	r29
 3b4:	cf 93       	push	r28
 3b6:	0f 92       	push	r0
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	pressed[key_id] = (pressed[FN_KEY_ID] ? 1 : -1);
 3bc:	48 2f       	mov	r20, r24
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	90 91 2c 02 	lds	r25, 0x022C
 3c4:	99 23       	and	r25, r25
 3c6:	11 f0       	breq	.+4      	; 0x3cc <key_press+0x1a>
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <key_press+0x1c>
 3cc:	9f ef       	ldi	r25, 0xFF	; 255
 3ce:	fa 01       	movw	r30, r20
 3d0:	e7 5f       	subi	r30, 0xF7	; 247
 3d2:	fd 4f       	sbci	r31, 0xFD	; 253
 3d4:	90 83       	st	Z, r25
	if(pressed[FN_KEY_ID] && layer_fn[key_id]>=0x80) {
 3d6:	60 91 2c 02 	lds	r22, 0x022C
 3da:	66 23       	and	r22, r22
 3dc:	b9 f1       	breq	.+110    	; 0x44c <key_press+0x9a>
 3de:	da 01       	movw	r26, r20
 3e0:	a8 58       	subi	r26, 0x88	; 136
 3e2:	be 4f       	sbci	r27, 0xFE	; 254
 3e4:	9c 91       	ld	r25, X
 3e6:	97 ff       	sbrs	r25, 7
 3e8:	28 c0       	rjmp	.+80     	; 0x43a <key_press+0x88>
		if(layer_fn[key_id]>0xF0) { // Fn+ Catboard keys
 3ea:	91 3f       	cpi	r25, 0xF1	; 241
 3ec:	c8 f0       	brcs	.+50     	; 0x420 <key_press+0x6e>
			if(layer_fn[key_id]==KEY_ALT_TAB) { // Fn + ALT_TAB press
 3ee:	9d 3f       	cpi	r25, 0xFD	; 253
 3f0:	21 f4       	brne	.+8      	; 0x3fa <key_press+0x48>
				usb_keyboard_press(KEY_TAB, KEY_ALT);
 3f2:	8b e2       	ldi	r24, 0x2B	; 43
 3f4:	64 e0       	ldi	r22, 0x04	; 4
 3f6:	46 d2       	rcall	.+1164   	; 0x884 <usb_keyboard_press>
 3f8:	e4 c0       	rjmp	.+456    	; 0x5c2 <key_press+0x210>
			} else if (layer_fn[key_id]==KEY_FN_LOCK) { // Fn + FnLock
 3fa:	9e 3f       	cpi	r25, 0xFE	; 254
 3fc:	09 f0       	breq	.+2      	; 0x400 <key_press+0x4e>
 3fe:	e1 c0       	rjmp	.+450    	; 0x5c2 <key_press+0x210>
				if (prev_layer) { // FnLock Off
 400:	80 91 f3 01 	lds	r24, 0x01F3
 404:	90 91 f4 01 	lds	r25, 0x01F4
 408:	00 97       	sbiw	r24, 0x00	; 0
 40a:	09 f0       	breq	.+2      	; 0x40e <key_press+0x5c>
 40c:	70 c0       	rjmp	.+224    	; 0x4ee <key_press+0x13c>
					layout = prev_layer;
					prev_layer = 0;
					LED_OFF;
				} else { // FnLock On
					prev_layer = layout;
 40e:	80 91 b4 01 	lds	r24, 0x01B4
 412:	90 91 b5 01 	lds	r25, 0x01B5
 416:	90 93 f4 01 	sts	0x01F4, r25
 41a:	80 93 f3 01 	sts	0x01F3, r24
 41e:	75 c0       	rjmp	.+234    	; 0x50a <key_press+0x158>
				}
			}
		} else { // Fn+Mod_keys
			// TODO: not work KEY_RIGHT_GUI
			//mod_keys |= ((layer_fn[key_id]!=0x80) ? (layer_fn[key_id] & 0x7F) : layer_fn[key_id]);
			if (layer_fn[key_id]==(KEY_CTRL+KEY_MOD) && (mod_keys & KEY_CTRL)) { // Fn+KEY_CTRL press
 420:	91 38       	cpi	r25, 0x81	; 129
 422:	09 f0       	breq	.+2      	; 0x426 <key_press+0x74>
 424:	ab c0       	rjmp	.+342    	; 0x57c <key_press+0x1ca>
 426:	80 91 f2 01 	lds	r24, 0x01F2
 42a:	80 ff       	sbrs	r24, 0
 42c:	a7 c0       	rjmp	.+334    	; 0x57c <key_press+0x1ca>
				pressed[key_id] = 2;
 42e:	22 e0       	ldi	r18, 0x02	; 2
 430:	20 83       	st	Z, r18
				mod_keys |= KEY_SHIFT;
 432:	82 60       	ori	r24, 0x02	; 2
 434:	80 93 f2 01 	sts	0x01F2, r24
 438:	a1 c0       	rjmp	.+322    	; 0x57c <key_press+0x1ca>
			}
			mod_keys |= (layer_fn[key_id] & 0x7F);
			send();
		}
	} else if(((! pressed[FN_KEY_ID]) || layout==layer_fn) && layout[key_id]>0xF0) { // Catboard keys
 43a:	20 91 b4 01 	lds	r18, 0x01B4
 43e:	30 91 b5 01 	lds	r19, 0x01B5
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	28 37       	cpi	r18, 0x78	; 120
 446:	39 07       	cpc	r19, r25
 448:	09 f0       	breq	.+2      	; 0x44c <key_press+0x9a>
 44a:	69 c0       	rjmp	.+210    	; 0x51e <key_press+0x16c>
 44c:	20 91 b4 01 	lds	r18, 0x01B4
 450:	30 91 b5 01 	lds	r19, 0x01B5
 454:	f9 01       	movw	r30, r18
 456:	e8 0f       	add	r30, r24
 458:	f1 1d       	adc	r31, r1
 45a:	90 81       	ld	r25, Z
 45c:	91 3f       	cpi	r25, 0xF1	; 241
 45e:	08 f4       	brcc	.+2      	; 0x462 <key_press+0xb0>
 460:	5c c0       	rjmp	.+184    	; 0x51a <key_press+0x168>
		if (layout[key_id]==KEY_LAYER1 && layout!=layer1) { // KEY_LAYOUT1
 462:	91 3f       	cpi	r25, 0xF1	; 241
 464:	39 f4       	brne	.+14     	; 0x474 <key_press+0xc2>
 466:	a1 e0       	ldi	r26, 0x01	; 1
 468:	20 30       	cpi	r18, 0x00	; 0
 46a:	3a 07       	cpc	r19, r26
 46c:	99 f1       	breq	.+102    	; 0x4d4 <key_press+0x122>
			layout = layer1;
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	08 c0       	rjmp	.+16     	; 0x484 <key_press+0xd2>
			change_layout();
		} else if (layout[key_id]==KEY_LAYER2 && layout!=layer2) { // KEY_LAYOUT2
 474:	92 3f       	cpi	r25, 0xF2	; 242
 476:	61 f4       	brne	.+24     	; 0x490 <key_press+0xde>
 478:	b1 e0       	ldi	r27, 0x01	; 1
 47a:	2c 33       	cpi	r18, 0x3C	; 60
 47c:	3b 07       	cpc	r19, r27
 47e:	51 f1       	breq	.+84     	; 0x4d4 <key_press+0x122>
			layout = layer2;
 480:	8c e3       	ldi	r24, 0x3C	; 60
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	90 93 b5 01 	sts	0x01B5, r25
 488:	80 93 b4 01 	sts	0x01B4, r24
			change_layout();
 48c:	78 de       	rcall	.-784    	; 0x17e <change_layout>
		}
	} else if(((! pressed[FN_KEY_ID]) || layout==layer_fn) && layout[key_id]>0xF0) { // Catboard keys
		if (layout[key_id]==KEY_LAYER1 && layout!=layer1) { // KEY_LAYOUT1
			layout = layer1;
			change_layout();
		} else if (layout[key_id]==KEY_LAYER2 && layout!=layer2) { // KEY_LAYOUT2
 48e:	99 c0       	rjmp	.+306    	; 0x5c2 <key_press+0x210>
			layout = layer2;
			change_layout();
		} else if (layout[key_id]==KEY_ALT_TAB) { // ALT_TAB press
 490:	9d 3f       	cpi	r25, 0xFD	; 253
 492:	01 f5       	brne	.+64     	; 0x4d4 <key_press+0x122>
			if (!(mod_keys & (KEY_ALT+KEY_RIGHT_ALT))) {
 494:	80 91 f2 01 	lds	r24, 0x01F2
 498:	98 2f       	mov	r25, r24
 49a:	94 74       	andi	r25, 0x44	; 68
 49c:	21 f4       	brne	.+8      	; 0x4a6 <key_press+0xf4>
				mod_keys |= (KEY_ALT);
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	80 93 f2 01 	sts	0x01F2, r24
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <key_press+0xfe>
			} else {
				pressed[key_id] = 2;
 4a6:	47 5f       	subi	r20, 0xF7	; 247
 4a8:	5d 4f       	sbci	r21, 0xFD	; 253
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	fa 01       	movw	r30, r20
 4ae:	80 83       	st	Z, r24
			}
			keyboard_modifier_keys = mod_keys;
 4b0:	80 91 f2 01 	lds	r24, 0x01F2
 4b4:	80 93 fe 01 	sts	0x01FE, r24
			keyboard_keys[0] = KEY_TAB;
 4b8:	8b e2       	ldi	r24, 0x2B	; 43
 4ba:	80 93 ff 01 	sts	0x01FF, r24
			usb_keyboard_send();
 4be:	a8 d1       	rcall	.+848    	; 0x810 <usb_keyboard_send>
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
 4c2:	90 e7       	ldi	r25, 0x70	; 112
 4c4:	a2 e0       	ldi	r26, 0x02	; 2
 4c6:	81 50       	subi	r24, 0x01	; 1
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	a0 40       	sbci	r26, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <key_press+0x114>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <key_press+0x11e>
 4d0:	00 00       	nop
 4d2:	5a c0       	rjmp	.+180    	; 0x588 <key_press+0x1d6>
			_delay_ms(50);
			send();
		} else if (layer_fn[key_id]==KEY_FN_LOCK) { // Fn + FnLock
 4d4:	48 58       	subi	r20, 0x88	; 136
 4d6:	5e 4f       	sbci	r21, 0xFE	; 254
 4d8:	da 01       	movw	r26, r20
 4da:	8c 91       	ld	r24, X
 4dc:	8e 3f       	cpi	r24, 0xFE	; 254
 4de:	09 f0       	breq	.+2      	; 0x4e2 <key_press+0x130>
 4e0:	70 c0       	rjmp	.+224    	; 0x5c2 <key_press+0x210>
			if (prev_layer) { // FnLock Off
 4e2:	80 91 f3 01 	lds	r24, 0x01F3
 4e6:	90 91 f4 01 	lds	r25, 0x01F4
 4ea:	00 97       	sbiw	r24, 0x00	; 0
 4ec:	51 f0       	breq	.+20     	; 0x502 <key_press+0x150>
				layout = prev_layer;
 4ee:	90 93 b5 01 	sts	0x01B5, r25
 4f2:	80 93 b4 01 	sts	0x01B4, r24
				prev_layer = 0;
 4f6:	10 92 f4 01 	sts	0x01F4, r1
 4fa:	10 92 f3 01 	sts	0x01F3, r1
				LED_OFF;
 4fe:	5c 98       	cbi	0x0b, 4	; 11
 500:	60 c0       	rjmp	.+192    	; 0x5c2 <key_press+0x210>
			} else { // FnLock On
				prev_layer = layout;
 502:	30 93 f4 01 	sts	0x01F4, r19
 506:	20 93 f3 01 	sts	0x01F3, r18
				layout = layer_fn;
 50a:	88 e7       	ldi	r24, 0x78	; 120
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	90 93 b5 01 	sts	0x01B5, r25
 512:	80 93 b4 01 	sts	0x01B4, r24
				LED_ON;
 516:	5c 9a       	sbi	0x0b, 4	; 11
 518:	54 c0       	rjmp	.+168    	; 0x5c2 <key_press+0x210>
			}
		}
	} else if(((! pressed[FN_KEY_ID]) || layout==layer_fn) && layout[key_id]>=0x80) { // Mod keys
 51a:	66 23       	and	r22, r22
 51c:	41 f0       	breq	.+16     	; 0x52e <key_press+0x17c>
 51e:	20 91 b4 01 	lds	r18, 0x01B4
 522:	30 91 b5 01 	lds	r19, 0x01B5
 526:	b1 e0       	ldi	r27, 0x01	; 1
 528:	28 37       	cpi	r18, 0x78	; 120
 52a:	3b 07       	cpc	r19, r27
 52c:	49 f4       	brne	.+18     	; 0x540 <key_press+0x18e>
 52e:	e0 91 b4 01 	lds	r30, 0x01B4
 532:	f0 91 b5 01 	lds	r31, 0x01B5
 536:	e8 0f       	add	r30, r24
 538:	f1 1d       	adc	r31, r1
 53a:	90 81       	ld	r25, Z
 53c:	97 fd       	sbrc	r25, 7
 53e:	1e c0       	rjmp	.+60     	; 0x57c <key_press+0x1ca>
		//mod_keys |= ((layer_fn[key_id]!=0x80) ? (layer_fn[key_id] & 0x7F) : layer_fn[key_id]);
		mod_keys |= (layout[key_id] & 0x7F);
		send();
	} else {
		for(i=5; i>0; i--) queue[i] = queue[i-1];
 540:	90 91 ed 01 	lds	r25, 0x01ED
 544:	90 93 ee 01 	sts	0x01EE, r25
 548:	90 91 ec 01 	lds	r25, 0x01EC
 54c:	90 93 ed 01 	sts	0x01ED, r25
 550:	90 91 eb 01 	lds	r25, 0x01EB
 554:	90 93 ec 01 	sts	0x01EC, r25
 558:	90 91 ea 01 	lds	r25, 0x01EA
 55c:	90 93 eb 01 	sts	0x01EB, r25
 560:	90 91 e9 01 	lds	r25, 0x01E9
 564:	90 93 ea 01 	sts	0x01EA, r25
		queue[0] = key_id;
 568:	80 93 e9 01 	sts	0x01E9, r24
		send();
 56c:	89 83       	std	Y+1, r24	; 0x01
 56e:	72 de       	rcall	.-796    	; 0x254 <send>
		// Autorepeat
		if (last_key==key_id) {
 570:	90 91 f5 01 	lds	r25, 0x01F5
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	98 17       	cp	r25, r24
 578:	81 f4       	brne	.+32     	; 0x59a <key_press+0x1e8>
 57a:	08 c0       	rjmp	.+16     	; 0x58c <key_press+0x1da>
				LED_ON;
			}
		}
	} else if(((! pressed[FN_KEY_ID]) || layout==layer_fn) && layout[key_id]>=0x80) { // Mod keys
		//mod_keys |= ((layer_fn[key_id]!=0x80) ? (layer_fn[key_id] & 0x7F) : layer_fn[key_id]);
		mod_keys |= (layout[key_id] & 0x7F);
 57c:	9f 77       	andi	r25, 0x7F	; 127
 57e:	80 91 f2 01 	lds	r24, 0x01F2
 582:	89 2b       	or	r24, r25
 584:	80 93 f2 01 	sts	0x01F2, r24
		send();
 588:	65 de       	rcall	.-822    	; 0x254 <send>
 58a:	1b c0       	rjmp	.+54     	; 0x5c2 <key_press+0x210>
		for(i=5; i>0; i--) queue[i] = queue[i-1];
		queue[0] = key_id;
		send();
		// Autorepeat
		if (last_key==key_id) {
			press_time2 = 1;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	90 93 f9 01 	sts	0x01F9, r25
 594:	80 93 f8 01 	sts	0x01F8, r24
 598:	10 c0       	rjmp	.+32     	; 0x5ba <key_press+0x208>
			repeat_time = 0;
		} else {
			last_key = key_id;
 59a:	80 93 f5 01 	sts	0x01F5, r24
			press_time = 1;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	90 93 f7 01 	sts	0x01F7, r25
 5a6:	80 93 f6 01 	sts	0x01F6, r24
			press_time2 = 0;
 5aa:	10 92 f9 01 	sts	0x01F9, r1
 5ae:	10 92 f8 01 	sts	0x01F8, r1
			release_time = 0;
 5b2:	10 92 fb 01 	sts	0x01FB, r1
 5b6:	10 92 fa 01 	sts	0x01FA, r1
			repeat_time = 0;
 5ba:	10 92 fd 01 	sts	0x01FD, r1
 5be:	10 92 fc 01 	sts	0x01FC, r1
		}
	}
}
 5c2:	0f 90       	pop	r0
 5c4:	cf 91       	pop	r28
 5c6:	df 91       	pop	r29
 5c8:	08 95       	ret

000005ca <poll>:
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 5ca:	8f 92       	push	r8
 5cc:	9f 92       	push	r9
 5ce:	af 92       	push	r10
 5d0:	bf 92       	push	r11
 5d2:	cf 92       	push	r12
 5d4:	df 92       	push	r13
 5d6:	ef 92       	push	r14
 5d8:	ff 92       	push	r15
 5da:	0f 93       	push	r16
 5dc:	1f 93       	push	r17
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
				keyboard_keys[0] = 0;
				usb_keyboard_send();
			}
		}
	} else if (press_time2) {
		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 5e2:	06 eb       	ldi	r16, 0xB6	; 182
 5e4:	11 e0       	ldi	r17, 0x01	; 1
 5e6:	c0 ec       	ldi	r28, 0xC0	; 192
 5e8:	d1 e0       	ldi	r29, 0x01	; 1
	LED_OFF;
}

void poll() {
	uint8_t row, col, key_id;
	for(row=0; row<ROWS; row++) {
 5ea:	99 24       	eor	r9, r9
		*row_port[row] &= ~row_bit[row];
 5ec:	d8 01       	movw	r26, r16
 5ee:	ed 91       	ld	r30, X+
 5f0:	fc 91       	ld	r31, X
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 5f2:	5e 01       	movw	r10, r28
	uint8_t row, col, key_id;
	for(row=0; row<ROWS; row++) {
		*row_port[row] &= ~row_bit[row];
 5f4:	98 81       	ld	r25, Y
 5f6:	90 95       	com	r25
 5f8:	80 81       	ld	r24, Z
 5fa:	89 23       	and	r24, r25
 5fc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fe:	b5 e0       	ldi	r27, 0x05	; 5
 600:	ba 95       	dec	r27
 602:	f1 f7       	brne	.-4      	; 0x600 <poll+0x36>
 604:	00 00       	nop
 606:	65 ec       	ldi	r22, 0xC5	; 197
 608:	e6 2e       	mov	r14, r22
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	f6 2e       	mov	r15, r22
 60e:	5d ed       	ldi	r21, 0xDD	; 221
 610:	c5 2e       	mov	r12, r21
 612:	51 e0       	ldi	r21, 0x01	; 1
 614:	d5 2e       	mov	r13, r21
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 616:	89 2c       	mov	r8, r9
	for(row=0; row<ROWS; row++) {
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for(col=0; col<COLS; col++) {
			key_id = col*ROWS+row;
			if(!(*col_pin[col] & col_bit[col])) {
 618:	d7 01       	movw	r26, r14
 61a:	ed 91       	ld	r30, X+
 61c:	fd 91       	ld	r31, X+
 61e:	7d 01       	movw	r14, r26
 620:	d6 01       	movw	r26, r12
 622:	8d 91       	ld	r24, X+
 624:	6d 01       	movw	r12, r26
 626:	90 81       	ld	r25, Z
 628:	89 23       	and	r24, r25
 62a:	28 2d       	mov	r18, r8
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	49 f4       	brne	.+18     	; 0x642 <poll+0x78>
				if(!pressed[key_id]) {
 630:	27 5f       	subi	r18, 0xF7	; 247
 632:	3d 4f       	sbci	r19, 0xFD	; 253
 634:	f9 01       	movw	r30, r18
 636:	80 81       	ld	r24, Z
 638:	88 23       	and	r24, r24
 63a:	59 f4       	brne	.+22     	; 0x652 <poll+0x88>
					key_press(key_id);
 63c:	88 2d       	mov	r24, r8
 63e:	b9 de       	rcall	.-654    	; 0x3b2 <key_press>
 640:	08 c0       	rjmp	.+16     	; 0x652 <poll+0x88>
				}
			} else if(pressed[key_id]) {
 642:	27 5f       	subi	r18, 0xF7	; 247
 644:	3d 4f       	sbci	r19, 0xFD	; 253
 646:	d9 01       	movw	r26, r18
 648:	8c 91       	ld	r24, X
 64a:	88 23       	and	r24, r24
 64c:	11 f0       	breq	.+4      	; 0x652 <poll+0x88>
				key_release(key_id);
 64e:	88 2d       	mov	r24, r8
 650:	1c de       	rcall	.-968    	; 0x28a <key_release>
 652:	b5 e0       	ldi	r27, 0x05	; 5
 654:	8b 0e       	add	r8, r27
void poll() {
	uint8_t row, col, key_id;
	for(row=0; row<ROWS; row++) {
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for(col=0; col<COLS; col++) {
 656:	ed ed       	ldi	r30, 0xDD	; 221
 658:	ee 16       	cp	r14, r30
 65a:	e1 e0       	ldi	r30, 0x01	; 1
 65c:	fe 06       	cpc	r15, r30
 65e:	e1 f6       	brne	.-72     	; 0x618 <poll+0x4e>
				}
			} else if(pressed[key_id]) {
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
 660:	d8 01       	movw	r26, r16
 662:	ed 91       	ld	r30, X+
 664:	fd 91       	ld	r31, X+
 666:	8d 01       	movw	r16, r26
 668:	21 96       	adiw	r28, 0x01	; 1
 66a:	80 81       	ld	r24, Z
 66c:	d5 01       	movw	r26, r10
 66e:	9c 91       	ld	r25, X
 670:	89 2b       	or	r24, r25
 672:	80 83       	st	Z, r24
	LED_OFF;
}

void poll() {
	uint8_t row, col, key_id;
	for(row=0; row<ROWS; row++) {
 674:	93 94       	inc	r9
 676:	b9 2d       	mov	r27, r9
 678:	b5 30       	cpi	r27, 0x05	; 5
 67a:	09 f0       	breq	.+2      	; 0x67e <poll+0xb4>
 67c:	b7 cf       	rjmp	.-146    	; 0x5ec <poll+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 67e:	ef e1       	ldi	r30, 0x1F	; 31
 680:	fe e4       	ldi	r31, 0x4E	; 78
 682:	31 97       	sbiw	r30, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <poll+0xb8>
 686:	00 c0       	rjmp	.+0      	; 0x688 <poll+0xbe>
 688:	00 00       	nop
		}
		*row_port[row] |= row_bit[row];
	}
	_delay_ms(5);
	// Autorepeat
	if (repeat_time) {
 68a:	80 91 fc 01 	lds	r24, 0x01FC
 68e:	90 91 fd 01 	lds	r25, 0x01FD
 692:	00 97       	sbiw	r24, 0x00	; 0
 694:	21 f1       	breq	.+72     	; 0x6de <poll+0x114>
		if (repeat_time<(release_time/4)) {
 696:	20 91 fa 01 	lds	r18, 0x01FA
 69a:	30 91 fb 01 	lds	r19, 0x01FB
 69e:	36 95       	lsr	r19
 6a0:	27 95       	ror	r18
 6a2:	36 95       	lsr	r19
 6a4:	27 95       	ror	r18
 6a6:	82 17       	cp	r24, r18
 6a8:	93 07       	cpc	r25, r19
 6aa:	10 f4       	brcc	.+4      	; 0x6b0 <poll+0xe6>
			repeat_time++;
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	37 c0       	rjmp	.+110    	; 0x71e <poll+0x154>
		} else {
			repeat_time = 1;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	90 93 fd 01 	sts	0x01FD, r25
 6b8:	80 93 fc 01 	sts	0x01FC, r24

			keyboard_modifier_keys = mod_keys;
 6bc:	80 91 f2 01 	lds	r24, 0x01F2
 6c0:	80 93 fe 01 	sts	0x01FE, r24
			keyboard_keys[0] = get_code(last_key);
 6c4:	80 91 f5 01 	lds	r24, 0x01F5
 6c8:	9c dd       	rcall	.-1224   	; 0x202 <get_code>
 6ca:	80 93 ff 01 	sts	0x01FF, r24
			if (! usb_keyboard_send()) {
 6ce:	a0 d0       	rcall	.+320    	; 0x810 <usb_keyboard_send>
 6d0:	88 23       	and	r24, r24
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <poll+0x10c>
 6d4:	5d c0       	rjmp	.+186    	; 0x790 <poll+0x1c6>
				keyboard_keys[0] = 0;
 6d6:	10 92 ff 01 	sts	0x01FF, r1
				usb_keyboard_send();
 6da:	9a d0       	rcall	.+308    	; 0x810 <usb_keyboard_send>
 6dc:	59 c0       	rjmp	.+178    	; 0x790 <poll+0x1c6>
			}
		}
	} else if (press_time2) {
 6de:	80 91 f8 01 	lds	r24, 0x01F8
 6e2:	90 91 f9 01 	lds	r25, 0x01F9
 6e6:	00 97       	sbiw	r24, 0x00	; 0
 6e8:	f9 f0       	breq	.+62     	; 0x728 <poll+0x15e>
		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 6ea:	40 91 f6 01 	lds	r20, 0x01F6
 6ee:	50 91 f7 01 	lds	r21, 0x01F7
 6f2:	20 91 2c 02 	lds	r18, 0x022C
 6f6:	22 23       	and	r18, r18
 6f8:	19 f0       	breq	.+6      	; 0x700 <poll+0x136>
 6fa:	25 e0       	ldi	r18, 0x05	; 5
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <poll+0x13a>
 700:	2e e1       	ldi	r18, 0x1E	; 30
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	24 0f       	add	r18, r20
 706:	35 1f       	adc	r19, r21
 708:	82 17       	cp	r24, r18
 70a:	93 07       	cpc	r25, r19
 70c:	30 f4       	brcc	.+12     	; 0x71a <poll+0x150>
			press_time2++;
 70e:	01 96       	adiw	r24, 0x01	; 1
 710:	90 93 f9 01 	sts	0x01F9, r25
 714:	80 93 f8 01 	sts	0x01F8, r24
 718:	3b c0       	rjmp	.+118    	; 0x790 <poll+0x1c6>
		} else {
			repeat_time = 1;
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	90 93 fd 01 	sts	0x01FD, r25
 722:	80 93 fc 01 	sts	0x01FC, r24
 726:	34 c0       	rjmp	.+104    	; 0x790 <poll+0x1c6>
		}
	} else if (release_time) {
 728:	20 91 fa 01 	lds	r18, 0x01FA
 72c:	30 91 fb 01 	lds	r19, 0x01FB
 730:	80 91 f6 01 	lds	r24, 0x01F6
 734:	90 91 f7 01 	lds	r25, 0x01F7
 738:	21 15       	cp	r18, r1
 73a:	31 05       	cpc	r19, r1
 73c:	d1 f0       	breq	.+52     	; 0x772 <poll+0x1a8>
		if (release_time<(press_time+50)) {
 73e:	c2 96       	adiw	r24, 0x32	; 50
 740:	28 17       	cp	r18, r24
 742:	39 07       	cpc	r19, r25
 744:	38 f4       	brcc	.+14     	; 0x754 <poll+0x18a>
			release_time++;
 746:	2f 5f       	subi	r18, 0xFF	; 255
 748:	3f 4f       	sbci	r19, 0xFF	; 255
 74a:	30 93 fb 01 	sts	0x01FB, r19
 74e:	20 93 fa 01 	sts	0x01FA, r18
 752:	1e c0       	rjmp	.+60     	; 0x790 <poll+0x1c6>
		} else {
			last_key = 0;
 754:	10 92 f5 01 	sts	0x01F5, r1
			release_time = 0;
 758:	10 92 fb 01 	sts	0x01FB, r1
 75c:	10 92 fa 01 	sts	0x01FA, r1
			press_time = 0;
 760:	10 92 f7 01 	sts	0x01F7, r1
 764:	10 92 f6 01 	sts	0x01F6, r1
			press_time2 = 0;
 768:	10 92 f9 01 	sts	0x01F9, r1
 76c:	10 92 f8 01 	sts	0x01F8, r1
 770:	0f c0       	rjmp	.+30     	; 0x790 <poll+0x1c6>
			release_time = 0;
		}
	} else if (press_time) {
 772:	00 97       	sbiw	r24, 0x00	; 0
 774:	69 f0       	breq	.+26     	; 0x790 <poll+0x1c6>
		if (press_time<50) {
 776:	82 33       	cpi	r24, 0x32	; 50
 778:	91 05       	cpc	r25, r1
 77a:	30 f4       	brcc	.+12     	; 0x788 <poll+0x1be>
			press_time++;
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	90 93 f7 01 	sts	0x01F7, r25
 782:	80 93 f6 01 	sts	0x01F6, r24
 786:	04 c0       	rjmp	.+8      	; 0x790 <poll+0x1c6>
		} else {
			press_time = 0;
 788:	10 92 f7 01 	sts	0x01F7, r1
 78c:	10 92 f6 01 	sts	0x01F6, r1
		}
	}	
}
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	1f 91       	pop	r17
 796:	0f 91       	pop	r16
 798:	ff 90       	pop	r15
 79a:	ef 90       	pop	r14
 79c:	df 90       	pop	r13
 79e:	cf 90       	pop	r12
 7a0:	bf 90       	pop	r11
 7a2:	af 90       	pop	r10
 7a4:	9f 90       	pop	r9
 7a6:	8f 90       	pop	r8
 7a8:	08 95       	ret

000007aa <main>:
void key_release(uint8_t key_id);
uint8_t get_code(uint8_t key_id);

int main(void) {
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 7aa:	84 b7       	in	r24, 0x34	; 52
 7ac:	87 7f       	andi	r24, 0xF7	; 247
 7ae:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 7b0:	88 e1       	ldi	r24, 0x18	; 24
 7b2:	0f b6       	in	r0, 0x3f	; 63
 7b4:	f8 94       	cli
 7b6:	80 93 60 00 	sts	0x0060, r24
 7ba:	10 92 60 00 	sts	0x0060, r1
 7be:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	80 e8       	ldi	r24, 0x80	; 128
 7c4:	0f b6       	in	r0, 0x3f	; 63
 7c6:	f8 94       	cli
 7c8:	80 93 61 00 	sts	0x0061, r24
 7cc:	90 93 61 00 	sts	0x0061, r25
 7d0:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	init();
 7d2:	f0 dc       	rcall	.-1568   	; 0x1b4 <init>
	for(;;) {
		poll();
 7d4:	fa de       	rcall	.-524    	; 0x5ca <poll>
 7d6:	fe cf       	rjmp	.-4      	; 0x7d4 <main+0x2a>

000007d8 <usb_wait_in_ready>:
 7d8:	80 91 e8 00 	lds	r24, 0x00E8
 7dc:	80 ff       	sbrs	r24, 0
 7de:	fc cf       	rjmp	.-8      	; 0x7d8 <usb_wait_in_ready>
 7e0:	08 95       	ret

000007e2 <usb_init>:
 7e2:	80 ea       	ldi	r24, 0xA0	; 160
 7e4:	80 93 d8 00 	sts	0x00D8, r24
 7e8:	86 e0       	ldi	r24, 0x06	; 6
 7ea:	89 bd       	out	0x29, r24	; 41
 7ec:	09 b4       	in	r0, 0x29	; 41
 7ee:	00 fe       	sbrs	r0, 0
 7f0:	fd cf       	rjmp	.-6      	; 0x7ec <usb_init+0xa>
 7f2:	80 e8       	ldi	r24, 0x80	; 128
 7f4:	80 93 d8 00 	sts	0x00D8, r24
 7f8:	10 92 e0 00 	sts	0x00E0, r1
 7fc:	10 92 06 02 	sts	0x0206, r1
 800:	8c e0       	ldi	r24, 0x0C	; 12
 802:	80 93 e2 00 	sts	0x00E2, r24
 806:	78 94       	sei
 808:	08 95       	ret

0000080a <usb_configured>:
 80a:	80 91 06 02 	lds	r24, 0x0206
 80e:	08 95       	ret

00000810 <usb_keyboard_send>:
 810:	80 91 06 02 	lds	r24, 0x0206
 814:	88 23       	and	r24, r24
 816:	91 f1       	breq	.+100    	; 0x87c <usb_keyboard_send+0x6c>
 818:	8f b7       	in	r24, 0x3f	; 63
 81a:	f8 94       	cli
 81c:	93 e0       	ldi	r25, 0x03	; 3
 81e:	90 93 e9 00 	sts	0x00E9, r25
 822:	90 91 e4 00 	lds	r25, 0x00E4
 826:	9e 5c       	subi	r25, 0xCE	; 206
 828:	23 e0       	ldi	r18, 0x03	; 3
 82a:	30 91 e8 00 	lds	r19, 0x00E8
 82e:	35 fd       	sbrc	r19, 5
 830:	0e c0       	rjmp	.+28     	; 0x84e <usb_keyboard_send+0x3e>
 832:	8f bf       	out	0x3f, r24	; 63
 834:	80 91 06 02 	lds	r24, 0x0206
 838:	88 23       	and	r24, r24
 83a:	01 f1       	breq	.+64     	; 0x87c <usb_keyboard_send+0x6c>
 83c:	80 91 e4 00 	lds	r24, 0x00E4
 840:	89 17       	cp	r24, r25
 842:	f1 f0       	breq	.+60     	; 0x880 <usb_keyboard_send+0x70>
 844:	8f b7       	in	r24, 0x3f	; 63
 846:	f8 94       	cli
 848:	20 93 e9 00 	sts	0x00E9, r18
 84c:	ee cf       	rjmp	.-36     	; 0x82a <usb_keyboard_send+0x1a>
 84e:	90 91 fe 01 	lds	r25, 0x01FE
 852:	90 93 f1 00 	sts	0x00F1, r25
 856:	10 92 f1 00 	sts	0x00F1, r1
 85a:	ef ef       	ldi	r30, 0xFF	; 255
 85c:	f1 e0       	ldi	r31, 0x01	; 1
 85e:	91 91       	ld	r25, Z+
 860:	90 93 f1 00 	sts	0x00F1, r25
 864:	92 e0       	ldi	r25, 0x02	; 2
 866:	e5 30       	cpi	r30, 0x05	; 5
 868:	f9 07       	cpc	r31, r25
 86a:	c9 f7       	brne	.-14     	; 0x85e <usb_keyboard_send+0x4e>
 86c:	9a e3       	ldi	r25, 0x3A	; 58
 86e:	90 93 e8 00 	sts	0x00E8, r25
 872:	10 92 07 02 	sts	0x0207, r1
 876:	8f bf       	out	0x3f, r24	; 63
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	08 95       	ret
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	08 95       	ret
 880:	8f ef       	ldi	r24, 0xFF	; 255
 882:	08 95       	ret

00000884 <usb_keyboard_press>:
 884:	60 93 fe 01 	sts	0x01FE, r22
 888:	80 93 ff 01 	sts	0x01FF, r24
 88c:	c1 df       	rcall	.-126    	; 0x810 <usb_keyboard_send>
 88e:	88 23       	and	r24, r24
 890:	29 f4       	brne	.+10     	; 0x89c <usb_keyboard_press+0x18>
 892:	10 92 fe 01 	sts	0x01FE, r1
 896:	10 92 ff 01 	sts	0x01FF, r1
 89a:	ba cf       	rjmp	.-140    	; 0x810 <usb_keyboard_send>
 89c:	08 95       	ret

0000089e <__vector_11>:
 89e:	1f 92       	push	r1
 8a0:	0f 92       	push	r0
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	0f 92       	push	r0
 8a6:	11 24       	eor	r1, r1
 8a8:	2f 93       	push	r18
 8aa:	8f 93       	push	r24
 8ac:	9f 93       	push	r25
 8ae:	ef 93       	push	r30
 8b0:	ff 93       	push	r31
 8b2:	80 91 e1 00 	lds	r24, 0x00E1
 8b6:	10 92 e1 00 	sts	0x00E1, r1
 8ba:	83 ff       	sbrs	r24, 3
 8bc:	0f c0       	rjmp	.+30     	; 0x8dc <__vector_11+0x3e>
 8be:	10 92 e9 00 	sts	0x00E9, r1
 8c2:	91 e0       	ldi	r25, 0x01	; 1
 8c4:	90 93 eb 00 	sts	0x00EB, r25
 8c8:	10 92 ec 00 	sts	0x00EC, r1
 8cc:	92 e2       	ldi	r25, 0x22	; 34
 8ce:	90 93 ed 00 	sts	0x00ED, r25
 8d2:	98 e0       	ldi	r25, 0x08	; 8
 8d4:	90 93 f0 00 	sts	0x00F0, r25
 8d8:	10 92 06 02 	sts	0x0206, r1
 8dc:	82 ff       	sbrs	r24, 2
 8de:	34 c0       	rjmp	.+104    	; 0x948 <__vector_11+0xaa>
 8e0:	80 91 06 02 	lds	r24, 0x0206
 8e4:	88 23       	and	r24, r24
 8e6:	81 f1       	breq	.+96     	; 0x948 <__vector_11+0xaa>
 8e8:	20 91 f0 01 	lds	r18, 0x01F0
 8ec:	22 23       	and	r18, r18
 8ee:	61 f1       	breq	.+88     	; 0x948 <__vector_11+0xaa>
 8f0:	80 91 08 02 	lds	r24, 0x0208
 8f4:	8f 5f       	subi	r24, 0xFF	; 255
 8f6:	80 93 08 02 	sts	0x0208, r24
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	83 70       	andi	r24, 0x03	; 3
 8fe:	90 70       	andi	r25, 0x00	; 0
 900:	00 97       	sbiw	r24, 0x00	; 0
 902:	11 f5       	brne	.+68     	; 0x948 <__vector_11+0xaa>
 904:	83 e0       	ldi	r24, 0x03	; 3
 906:	80 93 e9 00 	sts	0x00E9, r24
 90a:	80 91 e8 00 	lds	r24, 0x00E8
 90e:	85 ff       	sbrs	r24, 5
 910:	1b c0       	rjmp	.+54     	; 0x948 <__vector_11+0xaa>
 912:	80 91 07 02 	lds	r24, 0x0207
 916:	8f 5f       	subi	r24, 0xFF	; 255
 918:	80 93 07 02 	sts	0x0207, r24
 91c:	82 17       	cp	r24, r18
 91e:	a1 f4       	brne	.+40     	; 0x948 <__vector_11+0xaa>
 920:	10 92 07 02 	sts	0x0207, r1
 924:	80 91 fe 01 	lds	r24, 0x01FE
 928:	80 93 f1 00 	sts	0x00F1, r24
 92c:	10 92 f1 00 	sts	0x00F1, r1
 930:	ef ef       	ldi	r30, 0xFF	; 255
 932:	f1 e0       	ldi	r31, 0x01	; 1
 934:	81 91       	ld	r24, Z+
 936:	80 93 f1 00 	sts	0x00F1, r24
 93a:	82 e0       	ldi	r24, 0x02	; 2
 93c:	e5 30       	cpi	r30, 0x05	; 5
 93e:	f8 07       	cpc	r31, r24
 940:	c9 f7       	brne	.-14     	; 0x934 <__vector_11+0x96>
 942:	8a e3       	ldi	r24, 0x3A	; 58
 944:	80 93 e8 00 	sts	0x00E8, r24
 948:	ff 91       	pop	r31
 94a:	ef 91       	pop	r30
 94c:	9f 91       	pop	r25
 94e:	8f 91       	pop	r24
 950:	2f 91       	pop	r18
 952:	0f 90       	pop	r0
 954:	0f be       	out	0x3f, r0	; 63
 956:	0f 90       	pop	r0
 958:	1f 90       	pop	r1
 95a:	18 95       	reti

0000095c <__vector_12>:
 95c:	1f 92       	push	r1
 95e:	0f 92       	push	r0
 960:	0f b6       	in	r0, 0x3f	; 63
 962:	0f 92       	push	r0
 964:	11 24       	eor	r1, r1
 966:	cf 92       	push	r12
 968:	df 92       	push	r13
 96a:	ef 92       	push	r14
 96c:	ff 92       	push	r15
 96e:	0f 93       	push	r16
 970:	1f 93       	push	r17
 972:	2f 93       	push	r18
 974:	3f 93       	push	r19
 976:	4f 93       	push	r20
 978:	5f 93       	push	r21
 97a:	6f 93       	push	r22
 97c:	7f 93       	push	r23
 97e:	8f 93       	push	r24
 980:	9f 93       	push	r25
 982:	af 93       	push	r26
 984:	bf 93       	push	r27
 986:	ef 93       	push	r30
 988:	ff 93       	push	r31
 98a:	df 93       	push	r29
 98c:	cf 93       	push	r28
 98e:	0f 92       	push	r0
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
 994:	10 92 e9 00 	sts	0x00E9, r1
 998:	80 91 e8 00 	lds	r24, 0x00E8
 99c:	83 ff       	sbrs	r24, 3
 99e:	39 c1       	rjmp	.+626    	; 0xc12 <__vector_12+0x2b6>
 9a0:	20 91 f1 00 	lds	r18, 0x00F1
 9a4:	30 91 f1 00 	lds	r19, 0x00F1
 9a8:	80 91 f1 00 	lds	r24, 0x00F1
 9ac:	c8 2e       	mov	r12, r24
 9ae:	dd 24       	eor	r13, r13
 9b0:	40 91 f1 00 	lds	r20, 0x00F1
 9b4:	94 2f       	mov	r25, r20
 9b6:	80 e0       	ldi	r24, 0x00	; 0
 9b8:	c8 2a       	or	r12, r24
 9ba:	d9 2a       	or	r13, r25
 9bc:	00 91 f1 00 	lds	r16, 0x00F1
 9c0:	10 e0       	ldi	r17, 0x00	; 0
 9c2:	40 91 f1 00 	lds	r20, 0x00F1
 9c6:	94 2f       	mov	r25, r20
 9c8:	80 e0       	ldi	r24, 0x00	; 0
 9ca:	08 2b       	or	r16, r24
 9cc:	19 2b       	or	r17, r25
 9ce:	60 91 f1 00 	lds	r22, 0x00F1
 9d2:	a0 91 f1 00 	lds	r26, 0x00F1
 9d6:	82 ef       	ldi	r24, 0xF2	; 242
 9d8:	80 93 e8 00 	sts	0x00E8, r24
 9dc:	36 30       	cpi	r19, 0x06	; 6
 9de:	09 f0       	breq	.+2      	; 0x9e2 <__vector_12+0x86>
 9e0:	59 c0       	rjmp	.+178    	; 0xa94 <__vector_12+0x138>
 9e2:	8b e7       	ldi	r24, 0x7B	; 123
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	9c 01       	movw	r18, r24
 9e8:	25 50       	subi	r18, 0x05	; 5
 9ea:	30 40       	sbci	r19, 0x00	; 0
 9ec:	fc 01       	movw	r30, r24
 9ee:	37 97       	sbiw	r30, 0x07	; 7
 9f0:	45 91       	lpm	r20, Z+
 9f2:	54 91       	lpm	r21, Z+
 9f4:	4c 15       	cp	r20, r12
 9f6:	5d 05       	cpc	r21, r13
 9f8:	f9 f4       	brne	.+62     	; 0xa38 <__vector_12+0xdc>
 9fa:	f9 01       	movw	r30, r18
 9fc:	45 91       	lpm	r20, Z+
 9fe:	54 91       	lpm	r21, Z+
 a00:	40 17       	cp	r20, r16
 a02:	51 07       	cpc	r21, r17
 a04:	c9 f4       	brne	.+50     	; 0xa38 <__vector_12+0xdc>
 a06:	2e 5f       	subi	r18, 0xFE	; 254
 a08:	3f 4f       	sbci	r19, 0xFF	; 255
 a0a:	f9 01       	movw	r30, r18
 a0c:	85 91       	lpm	r24, Z+
 a0e:	94 91       	lpm	r25, Z+
 a10:	2e 5f       	subi	r18, 0xFE	; 254
 a12:	3f 4f       	sbci	r19, 0xFF	; 255
 a14:	f9 01       	movw	r30, r18
 a16:	24 91       	lpm	r18, Z+
 a18:	46 2f       	mov	r20, r22
 a1a:	50 e0       	ldi	r21, 0x00	; 0
 a1c:	7a 2f       	mov	r23, r26
 a1e:	60 e0       	ldi	r22, 0x00	; 0
 a20:	46 2b       	or	r20, r22
 a22:	57 2b       	or	r21, r23
 a24:	4f 3f       	cpi	r20, 0xFF	; 255
 a26:	51 05       	cpc	r21, r1
 a28:	19 f0       	breq	.+6      	; 0xa30 <__vector_12+0xd4>
 a2a:	10 f0       	brcs	.+4      	; 0xa30 <__vector_12+0xd4>
 a2c:	4f ef       	ldi	r20, 0xFF	; 255
 a2e:	50 e0       	ldi	r21, 0x00	; 0
 a30:	42 17       	cp	r20, r18
 a32:	50 f4       	brcc	.+20     	; 0xa48 <__vector_12+0xec>
 a34:	24 2f       	mov	r18, r20
 a36:	08 c0       	rjmp	.+16     	; 0xa48 <__vector_12+0xec>
 a38:	07 96       	adiw	r24, 0x07	; 7
 a3a:	29 5f       	subi	r18, 0xF9	; 249
 a3c:	3f 4f       	sbci	r19, 0xFF	; 255
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	8c 3a       	cpi	r24, 0xAC	; 172
 a42:	9f 07       	cpc	r25, r31
 a44:	99 f6       	brne	.-90     	; 0x9ec <__vector_12+0x90>
 a46:	e5 c0       	rjmp	.+458    	; 0xc12 <__vector_12+0x2b6>
 a48:	ae ef       	ldi	r26, 0xFE	; 254
 a4a:	40 91 e8 00 	lds	r20, 0x00E8
 a4e:	50 e0       	ldi	r21, 0x00	; 0
 a50:	ba 01       	movw	r22, r20
 a52:	65 70       	andi	r22, 0x05	; 5
 a54:	70 70       	andi	r23, 0x00	; 0
 a56:	61 15       	cp	r22, r1
 a58:	71 05       	cpc	r23, r1
 a5a:	b9 f3       	breq	.-18     	; 0xa4a <__vector_12+0xee>
 a5c:	42 fd       	sbrc	r20, 2
 a5e:	dc c0       	rjmp	.+440    	; 0xc18 <__vector_12+0x2bc>
 a60:	32 2f       	mov	r19, r18
 a62:	21 32       	cpi	r18, 0x21	; 33
 a64:	08 f0       	brcs	.+2      	; 0xa68 <__vector_12+0x10c>
 a66:	30 e2       	ldi	r19, 0x20	; 32
 a68:	ac 01       	movw	r20, r24
 a6a:	63 2f       	mov	r22, r19
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <__vector_12+0x120>
 a6e:	fa 01       	movw	r30, r20
 a70:	4f 5f       	subi	r20, 0xFF	; 255
 a72:	5f 4f       	sbci	r21, 0xFF	; 255
 a74:	e4 91       	lpm	r30, Z+
 a76:	e0 93 f1 00 	sts	0x00F1, r30
 a7a:	61 50       	subi	r22, 0x01	; 1
 a7c:	66 23       	and	r22, r22
 a7e:	b9 f7       	brne	.-18     	; 0xa6e <__vector_12+0x112>
 a80:	83 0f       	add	r24, r19
 a82:	91 1d       	adc	r25, r1
 a84:	23 1b       	sub	r18, r19
 a86:	a0 93 e8 00 	sts	0x00E8, r26
 a8a:	22 23       	and	r18, r18
 a8c:	f1 f6       	brne	.-68     	; 0xa4a <__vector_12+0xee>
 a8e:	30 32       	cpi	r19, 0x20	; 32
 a90:	e1 f2       	breq	.-72     	; 0xa4a <__vector_12+0xee>
 a92:	c2 c0       	rjmp	.+388    	; 0xc18 <__vector_12+0x2bc>
 a94:	35 30       	cpi	r19, 0x05	; 5
 a96:	49 f4       	brne	.+18     	; 0xaaa <__vector_12+0x14e>
 a98:	8e ef       	ldi	r24, 0xFE	; 254
 a9a:	80 93 e8 00 	sts	0x00E8, r24
 a9e:	9c de       	rcall	.-712    	; 0x7d8 <usb_wait_in_ready>
 aa0:	8c 2d       	mov	r24, r12
 aa2:	80 68       	ori	r24, 0x80	; 128
 aa4:	80 93 e3 00 	sts	0x00E3, r24
 aa8:	b7 c0       	rjmp	.+366    	; 0xc18 <__vector_12+0x2bc>
 aaa:	39 30       	cpi	r19, 0x09	; 9
 aac:	31 f5       	brne	.+76     	; 0xafa <__vector_12+0x19e>
 aae:	22 23       	and	r18, r18
 ab0:	09 f0       	breq	.+2      	; 0xab4 <__vector_12+0x158>
 ab2:	69 c0       	rjmp	.+210    	; 0xb86 <__vector_12+0x22a>
 ab4:	c0 92 06 02 	sts	0x0206, r12
 ab8:	8e ef       	ldi	r24, 0xFE	; 254
 aba:	80 93 e8 00 	sts	0x00E8, r24
 abe:	41 e0       	ldi	r20, 0x01	; 1
 ac0:	85 ea       	ldi	r24, 0xA5	; 165
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	40 93 e9 00 	sts	0x00E9, r20
 ac8:	fc 01       	movw	r30, r24
 aca:	01 96       	adiw	r24, 0x01	; 1
 acc:	e4 91       	lpm	r30, Z+
 ace:	e0 93 eb 00 	sts	0x00EB, r30
 ad2:	ee 23       	and	r30, r30
 ad4:	69 f0       	breq	.+26     	; 0xaf0 <__vector_12+0x194>
 ad6:	9c 01       	movw	r18, r24
 ad8:	2f 5f       	subi	r18, 0xFF	; 255
 ada:	3f 4f       	sbci	r19, 0xFF	; 255
 adc:	fc 01       	movw	r30, r24
 ade:	84 91       	lpm	r24, Z+
 ae0:	80 93 ec 00 	sts	0x00EC, r24
 ae4:	c9 01       	movw	r24, r18
 ae6:	01 96       	adiw	r24, 0x01	; 1
 ae8:	f9 01       	movw	r30, r18
 aea:	24 91       	lpm	r18, Z+
 aec:	20 93 ed 00 	sts	0x00ED, r18
 af0:	4f 5f       	subi	r20, 0xFF	; 255
 af2:	45 30       	cpi	r20, 0x05	; 5
 af4:	39 f7       	brne	.-50     	; 0xac4 <__vector_12+0x168>
 af6:	8e e1       	ldi	r24, 0x1E	; 30
 af8:	41 c0       	rjmp	.+130    	; 0xb7c <__vector_12+0x220>
 afa:	38 30       	cpi	r19, 0x08	; 8
 afc:	39 f4       	brne	.+14     	; 0xb0c <__vector_12+0x1b0>
 afe:	20 38       	cpi	r18, 0x80	; 128
 b00:	09 f0       	breq	.+2      	; 0xb04 <__vector_12+0x1a8>
 b02:	41 c0       	rjmp	.+130    	; 0xb86 <__vector_12+0x22a>
 b04:	69 de       	rcall	.-814    	; 0x7d8 <usb_wait_in_ready>
 b06:	80 91 06 02 	lds	r24, 0x0206
 b0a:	61 c0       	rjmp	.+194    	; 0xbce <__vector_12+0x272>
 b0c:	33 23       	and	r19, r19
 b0e:	a9 f4       	brne	.+42     	; 0xb3a <__vector_12+0x1de>
 b10:	29 83       	std	Y+1, r18	; 0x01
 b12:	62 de       	rcall	.-828    	; 0x7d8 <usb_wait_in_ready>
 b14:	29 81       	ldd	r18, Y+1	; 0x01
 b16:	22 38       	cpi	r18, 0x82	; 130
 b18:	51 f4       	brne	.+20     	; 0xb2e <__vector_12+0x1d2>
 b1a:	00 93 e9 00 	sts	0x00E9, r16
 b1e:	90 91 eb 00 	lds	r25, 0x00EB
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	95 ff       	sbrs	r25, 5
 b26:	80 e0       	ldi	r24, 0x00	; 0
 b28:	10 92 e9 00 	sts	0x00E9, r1
 b2c:	01 c0       	rjmp	.+2      	; 0xb30 <__vector_12+0x1d4>
 b2e:	80 e0       	ldi	r24, 0x00	; 0
 b30:	80 93 f1 00 	sts	0x00F1, r24
 b34:	10 92 f1 00 	sts	0x00F1, r1
 b38:	68 c0       	rjmp	.+208    	; 0xc0a <__vector_12+0x2ae>
 b3a:	31 30       	cpi	r19, 0x01	; 1
 b3c:	11 f0       	breq	.+4      	; 0xb42 <__vector_12+0x1e6>
 b3e:	33 30       	cpi	r19, 0x03	; 3
 b40:	11 f5       	brne	.+68     	; 0xb86 <__vector_12+0x22a>
 b42:	22 30       	cpi	r18, 0x02	; 2
 b44:	01 f5       	brne	.+64     	; 0xb86 <__vector_12+0x22a>
 b46:	c1 14       	cp	r12, r1
 b48:	d1 04       	cpc	r13, r1
 b4a:	e9 f4       	brne	.+58     	; 0xb86 <__vector_12+0x22a>
 b4c:	40 2f       	mov	r20, r16
 b4e:	4f 77       	andi	r20, 0x7F	; 127
 b50:	84 2f       	mov	r24, r20
 b52:	81 50       	subi	r24, 0x01	; 1
 b54:	84 30       	cpi	r24, 0x04	; 4
 b56:	b8 f4       	brcc	.+46     	; 0xb86 <__vector_12+0x22a>
 b58:	8e ef       	ldi	r24, 0xFE	; 254
 b5a:	80 93 e8 00 	sts	0x00E8, r24
 b5e:	40 93 e9 00 	sts	0x00E9, r20
 b62:	33 30       	cpi	r19, 0x03	; 3
 b64:	09 f4       	brne	.+2      	; 0xb68 <__vector_12+0x20c>
 b66:	55 c0       	rjmp	.+170    	; 0xc12 <__vector_12+0x2b6>
 b68:	89 e1       	ldi	r24, 0x19	; 25
 b6a:	80 93 eb 00 	sts	0x00EB, r24
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <__vector_12+0x21c>
 b74:	88 0f       	add	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	4a 95       	dec	r20
 b7a:	e2 f7       	brpl	.-8      	; 0xb74 <__vector_12+0x218>
 b7c:	80 93 ea 00 	sts	0x00EA, r24
 b80:	10 92 ea 00 	sts	0x00EA, r1
 b84:	49 c0       	rjmp	.+146    	; 0xc18 <__vector_12+0x2bc>
 b86:	01 15       	cp	r16, r1
 b88:	11 05       	cpc	r17, r1
 b8a:	09 f0       	breq	.+2      	; 0xb8e <__vector_12+0x232>
 b8c:	42 c0       	rjmp	.+132    	; 0xc12 <__vector_12+0x2b6>
 b8e:	21 3a       	cpi	r18, 0xA1	; 161
 b90:	09 f5       	brne	.+66     	; 0xbd4 <__vector_12+0x278>
 b92:	31 30       	cpi	r19, 0x01	; 1
 b94:	89 f4       	brne	.+34     	; 0xbb8 <__vector_12+0x25c>
 b96:	20 de       	rcall	.-960    	; 0x7d8 <usb_wait_in_ready>
 b98:	80 91 fe 01 	lds	r24, 0x01FE
 b9c:	80 93 f1 00 	sts	0x00F1, r24
 ba0:	10 92 f1 00 	sts	0x00F1, r1
 ba4:	ef ef       	ldi	r30, 0xFF	; 255
 ba6:	f1 e0       	ldi	r31, 0x01	; 1
 ba8:	81 91       	ld	r24, Z+
 baa:	80 93 f1 00 	sts	0x00F1, r24
 bae:	22 e0       	ldi	r18, 0x02	; 2
 bb0:	e5 30       	cpi	r30, 0x05	; 5
 bb2:	f2 07       	cpc	r31, r18
 bb4:	c9 f7       	brne	.-14     	; 0xba8 <__vector_12+0x24c>
 bb6:	29 c0       	rjmp	.+82     	; 0xc0a <__vector_12+0x2ae>
 bb8:	32 30       	cpi	r19, 0x02	; 2
 bba:	21 f4       	brne	.+8      	; 0xbc4 <__vector_12+0x268>
 bbc:	0d de       	rcall	.-998    	; 0x7d8 <usb_wait_in_ready>
 bbe:	80 91 f0 01 	lds	r24, 0x01F0
 bc2:	05 c0       	rjmp	.+10     	; 0xbce <__vector_12+0x272>
 bc4:	33 30       	cpi	r19, 0x03	; 3
 bc6:	29 f5       	brne	.+74     	; 0xc12 <__vector_12+0x2b6>
 bc8:	07 de       	rcall	.-1010   	; 0x7d8 <usb_wait_in_ready>
 bca:	80 91 f1 01 	lds	r24, 0x01F1
 bce:	80 93 f1 00 	sts	0x00F1, r24
 bd2:	1b c0       	rjmp	.+54     	; 0xc0a <__vector_12+0x2ae>
 bd4:	21 32       	cpi	r18, 0x21	; 33
 bd6:	e9 f4       	brne	.+58     	; 0xc12 <__vector_12+0x2b6>
 bd8:	39 30       	cpi	r19, 0x09	; 9
 bda:	61 f4       	brne	.+24     	; 0xbf4 <__vector_12+0x298>
 bdc:	80 91 e8 00 	lds	r24, 0x00E8
 be0:	82 ff       	sbrs	r24, 2
 be2:	fc cf       	rjmp	.-8      	; 0xbdc <__vector_12+0x280>
 be4:	80 91 f1 00 	lds	r24, 0x00F1
 be8:	80 93 05 02 	sts	0x0205, r24
 bec:	8b ef       	ldi	r24, 0xFB	; 251
 bee:	80 93 e8 00 	sts	0x00E8, r24
 bf2:	0b c0       	rjmp	.+22     	; 0xc0a <__vector_12+0x2ae>
 bf4:	3a 30       	cpi	r19, 0x0A	; 10
 bf6:	29 f4       	brne	.+10     	; 0xc02 <__vector_12+0x2a6>
 bf8:	d0 92 f0 01 	sts	0x01F0, r13
 bfc:	10 92 07 02 	sts	0x0207, r1
 c00:	04 c0       	rjmp	.+8      	; 0xc0a <__vector_12+0x2ae>
 c02:	3b 30       	cpi	r19, 0x0B	; 11
 c04:	31 f4       	brne	.+12     	; 0xc12 <__vector_12+0x2b6>
 c06:	c0 92 f1 01 	sts	0x01F1, r12
 c0a:	8e ef       	ldi	r24, 0xFE	; 254
 c0c:	80 93 e8 00 	sts	0x00E8, r24
 c10:	03 c0       	rjmp	.+6      	; 0xc18 <__vector_12+0x2bc>
 c12:	81 e2       	ldi	r24, 0x21	; 33
 c14:	80 93 eb 00 	sts	0x00EB, r24
 c18:	0f 90       	pop	r0
 c1a:	cf 91       	pop	r28
 c1c:	df 91       	pop	r29
 c1e:	ff 91       	pop	r31
 c20:	ef 91       	pop	r30
 c22:	bf 91       	pop	r27
 c24:	af 91       	pop	r26
 c26:	9f 91       	pop	r25
 c28:	8f 91       	pop	r24
 c2a:	7f 91       	pop	r23
 c2c:	6f 91       	pop	r22
 c2e:	5f 91       	pop	r21
 c30:	4f 91       	pop	r20
 c32:	3f 91       	pop	r19
 c34:	2f 91       	pop	r18
 c36:	1f 91       	pop	r17
 c38:	0f 91       	pop	r16
 c3a:	ff 90       	pop	r15
 c3c:	ef 90       	pop	r14
 c3e:	df 90       	pop	r13
 c40:	cf 90       	pop	r12
 c42:	0f 90       	pop	r0
 c44:	0f be       	out	0x3f, r0	; 63
 c46:	0f 90       	pop	r0
 c48:	1f 90       	pop	r1
 c4a:	18 95       	reti

00000c4c <_exit>:
 c4c:	f8 94       	cli

00000c4e <__stop_program>:
 c4e:	ff cf       	rjmp	.-2      	; 0xc4e <__stop_program>
