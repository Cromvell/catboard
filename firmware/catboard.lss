
catboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  00000d1c  00000db0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  0080022e  0080022e  00000ede  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000b0  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000023d  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fb2  00000000  00000000  000018ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000046b  00000000  00000000  0000289f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f8a  00000000  00000000  00002d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  00003c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000053c  00000000  00000000  00003db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bd7  00000000  00000000  000042f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000d1  00000000  00000000  00004ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  00004f98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
   2:	00 00       	nop
   4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	00 00       	nop
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	00 00       	nop
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	00 00       	nop
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
  1e:	00 00       	nop
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	00 00       	nop
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	00 00       	nop
  28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9e c4       	rjmp	.+2364   	; 0x96a <__vector_11>
  2e:	00 00       	nop
  30:	fb c4       	rjmp	.+2550   	; 0xa28 <__vector_12>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
  36:	00 00       	nop
  38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
  46:	00 00       	nop
  48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
  4e:	00 00       	nop
  50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
  52:	00 00       	nop
  54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
  56:	00 00       	nop
  58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
  5e:	00 00       	nop
  60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
  62:	00 00       	nop
  64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
  66:	00 00       	nop
  68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
  6e:	00 00       	nop
  70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
  72:	00 00       	nop

00000074 <descriptor_list>:
  74:	00 01 00 00 ab 00 12 00 02 00 00 bd 00 22 00 22     ............."."
  84:	00 00 df 00 3f 00 21 00 00 cf 00 09 00 03 00 00     ....?.!.........
  94:	1e 01 04 01 03 09 04 22 01 0e 02 03 09 04 32 01     ......."......2.
  a4:	12                                                  .

000000a5 <endpoint_config_table>:
  a5:	00 00 01 c1 06 00                                   ......

000000ab <device_descriptor>:
  ab:	12 01 00 02 00 00 00 20 c0 16 7c 04 00 01 01 02     ....... ..|.....
  bb:	00 01                                               ..

000000bd <config1_descriptor>:
  bd:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  cd:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
  dd:	00 01                                               ..

000000df <keyboard_hid_report_desc>:
  df:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
  ef:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
  ff:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 10f:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

0000011e <string0>:
 11e:	04 03 09 04                                         ....

00000122 <string1>:
 122:	0e 03 69 00 62 00 6e 00 54 00 65 00 6f 00 00 00     ..i.b.n.T.e.o...

00000132 <string2>:
 132:	12 03 43 00 61 00 74 00 62 00 6f 00 61 00 72 00     ..C.a.t.b.o.a.r.
 142:	64 00 00 00                                         d...

00000146 <__ctors_end>:
 146:	11 24       	eor	r1, r1
 148:	1f be       	out	0x3f, r1	; 63
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	d2 e0       	ldi	r29, 0x02	; 2
 14e:	de bf       	out	0x3e, r29	; 62
 150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
 152:	12 e0       	ldi	r17, 0x02	; 2
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	b1 e0       	ldi	r27, 0x01	; 1
 158:	ec e1       	ldi	r30, 0x1C	; 28
 15a:	fd e0       	ldi	r31, 0x0D	; 13
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x10>
 15e:	05 90       	lpm	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	ae 32       	cpi	r26, 0x2E	; 46
 164:	b1 07       	cpc	r27, r17
 166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0xc>

00000168 <__do_clear_bss>:
 168:	12 e0       	ldi	r17, 0x02	; 2
 16a:	ae e2       	ldi	r26, 0x2E	; 46
 16c:	b2 e0       	ldi	r27, 0x02	; 2
 16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
 170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
 172:	a2 38       	cpi	r26, 0x82	; 130
 174:	b1 07       	cpc	r27, r17
 176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
 178:	7e d3       	rcall	.+1788   	; 0x876 <main>
 17a:	ce c5       	rjmp	.+2972   	; 0xd18 <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <change_layout>:
		}
	}
}

void change_layout(void) {
	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || mac_mode) { // Press Cmd+Space
 17e:	80 91 2e 02 	lds	r24, 0x022E
 182:	88 23       	and	r24, r24
 184:	91 f0       	breq	.+36     	; 0x1aa <change_layout+0x2c>
		keyboard_modifier_keys = KEY_GUI;
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	80 93 3b 02 	sts	0x023B, r24
		keyboard_keys[0] = 0;
 18c:	10 92 3c 02 	sts	0x023C, r1
		usb_keyboard_send();
 190:	a5 d3       	rcall	.+1866   	; 0x8dc <usb_keyboard_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	90 e7       	ldi	r25, 0x70	; 112
 196:	a2 e0       	ldi	r26, 0x02	; 2
 198:	81 50       	subi	r24, 0x01	; 1
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	a0 40       	sbci	r26, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <change_layout+0x1a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <change_layout+0x24>
 1a2:	00 00       	nop
		_delay_ms(50);
		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 1a4:	8c e2       	ldi	r24, 0x2C	; 44
 1a6:	68 e0       	ldi	r22, 0x08	; 8
 1a8:	11 c0       	rjmp	.+34     	; 0x1cc <change_layout+0x4e>
	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
		keyboard_modifier_keys = KEY_ALT;
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	80 93 3b 02 	sts	0x023B, r24
		keyboard_keys[0] = 0;
 1b0:	10 92 3c 02 	sts	0x023C, r1
		usb_keyboard_send();
 1b4:	93 d3       	rcall	.+1830   	; 0x8dc <usb_keyboard_send>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e7       	ldi	r25, 0x70	; 112
 1ba:	a2 e0       	ldi	r26, 0x02	; 2
 1bc:	81 50       	subi	r24, 0x01	; 1
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	a0 40       	sbci	r26, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <change_layout+0x3e>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <change_layout+0x48>
 1c6:	00 00       	nop
		_delay_ms(50);
		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	66 e0       	ldi	r22, 0x06	; 6
 1cc:	c1 c3       	rjmp	.+1922   	; 0x950 <usb_keyboard_press>

000001ce <init>:
	}
}

void init(void) {
	// Set for 16 MHz clock
	CLKPR = 0x80; CLKPR = 0;
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	80 93 61 00 	sts	0x0061, r24
 1d4:	10 92 61 00 	sts	0x0061, r1

	// Init ports
	DDRB	= 0x00; DDRC	= 0b11110100;	DDRD	= 0x00;
 1d8:	14 b8       	out	0x04, r1	; 4
 1da:	94 ef       	ldi	r25, 0xF4	; 244
 1dc:	97 b9       	out	0x07, r25	; 7
 1de:	1a b8       	out	0x0a, r1	; 10
	PORTB	= 0xFF; PORTC	= 0b11110100; 	PORTD	= 0xFF;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	98 b9       	out	0x08, r25	; 8
 1e6:	8b b9       	out	0x0b, r24	; 11

	LED_CONFIG;
 1e8:	54 9a       	sbi	0x0a, 4	; 10
	LED_ON;
 1ea:	5c 9a       	sbi	0x0b, 4	; 11
 1ec:	e6 e4       	ldi	r30, 0x46	; 70
 1ee:	f2 e0       	ldi	r31, 0x02	; 2

	for (uint8_t i=0; i<KEYS; i++) {
		pressed[i] = 0;
 1f0:	11 92       	st	Z+, r1
	PORTB	= 0xFF; PORTC	= 0b11110100; 	PORTD	= 0xFF;

	LED_CONFIG;
	LED_ON;

	for (uint8_t i=0; i<KEYS; i++) {
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	e2 38       	cpi	r30, 0x82	; 130
 1f6:	f8 07       	cpc	r31, r24
 1f8:	d9 f7       	brne	.-10     	; 0x1f0 <init+0x22>
		pressed[i] = 0;
	}

	usb_init();
 1fa:	59 d3       	rcall	.+1714   	; 0x8ae <usb_init>
	LED_OFF;
 1fc:	5c 98       	cbi	0x0b, 4	; 11
	while(!usb_configured());
 1fe:	6b d3       	rcall	.+1750   	; 0x8d6 <usb_configured>
 200:	88 23       	and	r24, r24
 202:	e9 f3       	breq	.-6      	; 0x1fe <init+0x30>
	LED_ON;
 204:	5c 9a       	sbi	0x0b, 4	; 11
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	93 ed       	ldi	r25, 0xD3	; 211
 20a:	a0 e3       	ldi	r26, 0x30	; 48
 20c:	81 50       	subi	r24, 0x01	; 1
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	a0 40       	sbci	r26, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <init+0x3e>
 214:	00 c0       	rjmp	.+0      	; 0x216 <init+0x48>
 216:	00 00       	nop
	_delay_ms(1000);
	LED_OFF;
 218:	5c 98       	cbi	0x0b, 4	; 11
}
 21a:	08 95       	ret

0000021c <get_code>:
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
	if (key_id<KEYS) { // not 0xFF
 21c:	8c 33       	cpi	r24, 0x3C	; 60
 21e:	18 f5       	brcc	.+70     	; 0x266 <get_code+0x4a>
		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	f9 01       	movw	r30, r18
 226:	ea 5b       	subi	r30, 0xBA	; 186
 228:	fd 4f       	sbci	r31, 0xFD	; 253
 22a:	90 81       	ld	r25, Z
 22c:	91 30       	cpi	r25, 0x01	; 1
 22e:	41 f4       	brne	.+16     	; 0x240 <get_code+0x24>
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 230:	26 58       	subi	r18, 0x86	; 134
 232:	3e 4f       	sbci	r19, 0xFE	; 254
 234:	f9 01       	movw	r30, r18
 236:	80 81       	ld	r24, Z
 238:	18 16       	cp	r1, r24
 23a:	b4 f0       	brlt	.+44     	; 0x268 <get_code+0x4c>
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	08 95       	ret
	if (key_id<KEYS) { // not 0xFF
		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
				key_code = layer_fn[key_id];
			}
		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from layer1
 240:	40 91 3c 01 	lds	r20, 0x013C
 244:	50 91 3d 01 	lds	r21, 0x013D
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	4a 37       	cpi	r20, 0x7A	; 122
 24c:	5f 07       	cpc	r21, r31
 24e:	31 f0       	breq	.+12     	; 0x25c <get_code+0x40>
 250:	92 30       	cpi	r25, 0x02	; 2
 252:	21 f4       	brne	.+8      	; 0x25c <get_code+0x40>
			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 254:	22 5c       	subi	r18, 0xC2	; 194
 256:	3e 4f       	sbci	r19, 0xFE	; 254
 258:	f9 01       	movw	r30, r18
 25a:	03 c0       	rjmp	.+6      	; 0x262 <get_code+0x46>
		} else {
			key_code = layout[key_id];
 25c:	48 0f       	add	r20, r24
 25e:	51 1d       	adc	r21, r1
 260:	fa 01       	movw	r30, r20
 262:	80 81       	ld	r24, Z
 264:	08 95       	ret
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
 266:	80 e0       	ldi	r24, 0x00	; 0
		} else {
			key_code = layout[key_id];
		}
	}
	return key_code;
}
 268:	08 95       	ret

0000026a <send>:
		_delay_ms(50);
		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
	}
}

void send(void) {
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	c5 e2       	ldi	r28, 0x25	; 37
 274:	d2 e0       	ldi	r29, 0x02	; 2
 276:	0c e3       	ldi	r16, 0x3C	; 60
 278:	12 e0       	ldi	r17, 0x02	; 2
	uint8_t i;
	for (i=0; i<6; i++) {
		keyboard_keys[i] = get_code(queue[i]);
 27a:	89 91       	ld	r24, Y+
 27c:	cf df       	rcall	.-98     	; 0x21c <get_code>
 27e:	f8 01       	movw	r30, r16
 280:	81 93       	st	Z+, r24
 282:	8f 01       	movw	r16, r30
	}
}

void send(void) {
	uint8_t i;
	for (i=0; i<6; i++) {
 284:	f2 e0       	ldi	r31, 0x02	; 2
 286:	cb 32       	cpi	r28, 0x2B	; 43
 288:	df 07       	cpc	r29, r31
 28a:	b9 f7       	brne	.-18     	; 0x27a <send+0x10>
		keyboard_keys[i] = get_code(queue[i]);
	}
	keyboard_modifier_keys = mod_keys;
 28c:	80 91 2f 02 	lds	r24, 0x022F
 290:	80 93 3b 02 	sts	0x023B, r24
	usb_keyboard_send();
 294:	23 d3       	rcall	.+1606   	; 0x8dc <usb_keyboard_send>
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <key_release>:
			repeat_time = 0;
		}
	}
}

void key_release(uint8_t key_id) {
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	0f 92       	push	r0
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int8_t pressed_key_id = pressed[key_id];
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	f9 01       	movw	r30, r18
 2b0:	ea 5b       	subi	r30, 0xBA	; 186
 2b2:	fd 4f       	sbci	r31, 0xFD	; 253
 2b4:	60 81       	ld	r22, Z
	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 2b6:	61 30       	cpi	r22, 0x01	; 1
 2b8:	21 f4       	brne	.+8      	; 0x2c2 <key_release+0x22>
 2ba:	f9 01       	movw	r30, r18
 2bc:	e6 58       	subi	r30, 0x86	; 134
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	13 c0       	rjmp	.+38     	; 0x2e8 <key_release+0x48>
 2c2:	e0 91 3c 01 	lds	r30, 0x013C
 2c6:	f0 91 3d 01 	lds	r31, 0x013D
 2ca:	e2 0f       	add	r30, r18
 2cc:	f3 1f       	adc	r31, r19
 2ce:	90 81       	ld	r25, Z
	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 2d0:	65 30       	cpi	r22, 0x05	; 5
 2d2:	59 f4       	brne	.+22     	; 0x2ea <key_release+0x4a>
 2d4:	40 91 30 02 	lds	r20, 0x0230
 2d8:	50 91 31 02 	lds	r21, 0x0231
 2dc:	41 15       	cp	r20, r1
 2de:	51 05       	cpc	r21, r1
 2e0:	21 f0       	breq	.+8      	; 0x2ea <key_release+0x4a>
		key_code = prev_layer[key_id];
 2e2:	42 0f       	add	r20, r18
 2e4:	53 1f       	adc	r21, r19
 2e6:	fa 01       	movw	r30, r20
 2e8:	90 81       	ld	r25, Z
	}
	pressed[key_id] = 0;
 2ea:	2a 5b       	subi	r18, 0xBA	; 186
 2ec:	3d 4f       	sbci	r19, 0xFD	; 253
 2ee:	f9 01       	movw	r30, r18
 2f0:	10 82       	st	Z, r1
	if (key_code>0xF0) { // Catboard keys release
 2f2:	91 3f       	cpi	r25, 0xF1	; 241
 2f4:	98 f0       	brcs	.+38     	; 0x31c <__stack+0x1d>
		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 2f6:	9d 3f       	cpi	r25, 0xFD	; 253
 2f8:	31 f4       	brne	.+12     	; 0x306 <__stack+0x7>
 2fa:	63 30       	cpi	r22, 0x03	; 3
 2fc:	21 f0       	breq	.+8      	; 0x306 <__stack+0x7>
			mod_keys &= ~(KEY_ALT);
 2fe:	80 91 2f 02 	lds	r24, 0x022F
 302:	8b 7f       	andi	r24, 0xFB	; 251
 304:	24 c0       	rjmp	.+72     	; 0x34e <__stack+0x4f>
			send();
		} else if ((key_code==KEY_LAYER1 || key_code==KEY_LAYER2) && pressed_key_id==KEY_PRESSED_SHIFT) { // Mod + Layer = Shift
 306:	91 5f       	subi	r25, 0xF1	; 241
 308:	92 30       	cpi	r25, 0x02	; 2
 30a:	08 f0       	brcs	.+2      	; 0x30e <__stack+0xf>
 30c:	59 c0       	rjmp	.+178    	; 0x3c0 <__stack+0xc1>
 30e:	64 30       	cpi	r22, 0x04	; 4
 310:	09 f0       	breq	.+2      	; 0x314 <__stack+0x15>
 312:	56 c0       	rjmp	.+172    	; 0x3c0 <__stack+0xc1>
			mod_keys &= ~(KEY_SHIFT);
 314:	80 91 2f 02 	lds	r24, 0x022F
 318:	8d 7f       	andi	r24, 0xFD	; 253
 31a:	19 c0       	rjmp	.+50     	; 0x34e <__stack+0x4f>
			send();
		}
	} else if (key_code>=0x80) { // Mod keys release
 31c:	97 ff       	sbrs	r25, 7
 31e:	1b c0       	rjmp	.+54     	; 0x356 <__stack+0x57>
		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 320:	80 91 2e 02 	lds	r24, 0x022E
 324:	88 23       	and	r24, r24
 326:	41 f0       	breq	.+16     	; 0x338 <__stack+0x39>
 328:	91 38       	cpi	r25, 0x81	; 129
 32a:	21 f4       	brne	.+8      	; 0x334 <__stack+0x35>
			mod_keys &= ~KEY_GUI;
 32c:	80 91 2f 02 	lds	r24, 0x022F
 330:	87 7f       	andi	r24, 0xF7	; 247
 332:	0d c0       	rjmp	.+26     	; 0x34e <__stack+0x4f>
		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD)) {
 334:	90 39       	cpi	r25, 0x90	; 144
 336:	11 f0       	breq	.+4      	; 0x33c <__stack+0x3d>
 338:	90 38       	cpi	r25, 0x80	; 128
 33a:	21 f4       	brne	.+8      	; 0x344 <__stack+0x45>
			mod_keys &= ~KEY_RIGHT_GUI;
 33c:	80 91 2f 02 	lds	r24, 0x022F
 340:	8f 77       	andi	r24, 0x7F	; 127
 342:	05 c0       	rjmp	.+10     	; 0x34e <__stack+0x4f>
		} else {
			mod_keys &= ~(key_code & 0x7F);
 344:	9f 77       	andi	r25, 0x7F	; 127
 346:	90 95       	com	r25
 348:	80 91 2f 02 	lds	r24, 0x022F
 34c:	89 23       	and	r24, r25
 34e:	80 93 2f 02 	sts	0x022F, r24
		}
		send();
 352:	8b df       	rcall	.-234    	; 0x26a <send>
 354:	35 c0       	rjmp	.+106    	; 0x3c0 <__stack+0xc1>
 356:	e5 e2       	ldi	r30, 0x25	; 37
 358:	f2 e0       	ldi	r31, 0x02	; 2
			send();
		} else if ((key_code==KEY_LAYER1 || key_code==KEY_LAYER2) && pressed_key_id==KEY_PRESSED_SHIFT) { // Mod + Layer = Shift
			mod_keys &= ~(KEY_SHIFT);
			send();
		}
	} else if (key_code>=0x80) { // Mod keys release
 35a:	90 e0       	ldi	r25, 0x00	; 0
			mod_keys &= ~(key_code & 0x7F);
		}
		send();
	} else {
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
 35c:	21 91       	ld	r18, Z+
 35e:	28 17       	cp	r18, r24
 360:	59 f0       	breq	.+22     	; 0x378 <__stack+0x79>
		} else {
			mod_keys &= ~(key_code & 0x7F);
		}
		send();
	} else {
		for (i=0; i<6; i++) {
 362:	9f 5f       	subi	r25, 0xFF	; 255
 364:	96 30       	cpi	r25, 0x06	; 6
 366:	d1 f7       	brne	.-12     	; 0x35c <__stack+0x5d>
 368:	07 c0       	rjmp	.+14     	; 0x378 <__stack+0x79>
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
			queue[i] = queue[i+1];
 36a:	e9 2f       	mov	r30, r25
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	eb 5d       	subi	r30, 0xDB	; 219
 370:	fd 4f       	sbci	r31, 0xFD	; 253
 372:	21 81       	ldd	r18, Z+1	; 0x01
 374:	20 83       	st	Z, r18
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
 376:	9f 5f       	subi	r25, 0xFF	; 255
 378:	96 30       	cpi	r25, 0x06	; 6
 37a:	b8 f3       	brcs	.-18     	; 0x36a <__stack+0x6b>
			queue[i] = queue[i+1];
		}
		send();
 37c:	89 83       	std	Y+1, r24	; 0x01
 37e:	75 df       	rcall	.-278    	; 0x26a <send>
		// Autorepeat
		if (last_key==key_id) { // realise time
 380:	90 91 32 02 	lds	r25, 0x0232
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	98 17       	cp	r25, r24
 388:	59 f4       	brne	.+22     	; 0x3a0 <__stack+0xa1>
			press_time2 = 0;
 38a:	10 92 36 02 	sts	0x0236, r1
 38e:	10 92 35 02 	sts	0x0235, r1
			release_time = 1;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	90 93 38 02 	sts	0x0238, r25
 39a:	80 93 37 02 	sts	0x0237, r24
 39e:	0c c0       	rjmp	.+24     	; 0x3b8 <__stack+0xb9>
			repeat_time = 0;
		} else { // reset
			press_time = 0;
 3a0:	10 92 34 02 	sts	0x0234, r1
 3a4:	10 92 33 02 	sts	0x0233, r1
			press_time2 = 0;
 3a8:	10 92 36 02 	sts	0x0236, r1
 3ac:	10 92 35 02 	sts	0x0235, r1
			release_time = 0;
 3b0:	10 92 38 02 	sts	0x0238, r1
 3b4:	10 92 37 02 	sts	0x0237, r1
			repeat_time = 0;
 3b8:	10 92 3a 02 	sts	0x023A, r1
 3bc:	10 92 39 02 	sts	0x0239, r1
		}
	}
}
 3c0:	0f 90       	pop	r0
 3c2:	cf 91       	pop	r28
 3c4:	df 91       	pop	r29
 3c6:	08 95       	ret

000003c8 <key_press>:
			press_time = 0;
		}
	}	
}

void key_press(uint8_t key_id) {
 3c8:	df 93       	push	r29
 3ca:	cf 93       	push	r28
 3cc:	0f 92       	push	r0
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGHT_GUI));
 3d2:	a0 91 2f 02 	lds	r26, 0x022F
 3d6:	6a 2f       	mov	r22, r26
 3d8:	6d 7d       	andi	r22, 0xDD	; 221
	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 3da:	28 2f       	mov	r18, r24
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	90 91 69 02 	lds	r25, 0x0269
 3e2:	99 23       	and	r25, r25
 3e4:	21 f4       	brne	.+8      	; 0x3ee <key_press+0x26>
 3e6:	66 23       	and	r22, r22
 3e8:	21 f0       	breq	.+8      	; 0x3f2 <key_press+0x2a>
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <key_press+0x2c>
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <key_press+0x2c>
 3f2:	9f ef       	ldi	r25, 0xFF	; 255
 3f4:	f9 01       	movw	r30, r18
 3f6:	ea 5b       	subi	r30, 0xBA	; 186
 3f8:	fd 4f       	sbci	r31, 0xFD	; 253
 3fa:	90 83       	st	Z, r25
	
	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 3fc:	91 30       	cpi	r25, 0x01	; 1
 3fe:	21 f4       	brne	.+8      	; 0x408 <key_press+0x40>
 400:	f9 01       	movw	r30, r18
 402:	e6 58       	subi	r30, 0x86	; 134
 404:	fe 4f       	sbci	r31, 0xFE	; 254
 406:	06 c0       	rjmp	.+12     	; 0x414 <key_press+0x4c>
 408:	e0 91 3c 01 	lds	r30, 0x013C
 40c:	f0 91 3d 01 	lds	r31, 0x013D
 410:	e8 0f       	add	r30, r24
 412:	f1 1d       	adc	r31, r1
 414:	90 81       	ld	r25, Z
	if (key_code==NULL) {
 416:	99 23       	and	r25, r25
 418:	29 f5       	brne	.+74     	; 0x464 <key_press+0x9c>
		key_code = layout[key_id];
 41a:	48 2f       	mov	r20, r24
 41c:	50 e0       	ldi	r21, 0x00	; 0
 41e:	e0 91 3c 01 	lds	r30, 0x013C
 422:	f0 91 3d 01 	lds	r31, 0x013D
 426:	e4 0f       	add	r30, r20
 428:	f5 1f       	adc	r31, r21
 42a:	90 81       	ld	r25, Z
		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 42c:	66 23       	and	r22, r22
 42e:	11 f0       	breq	.+4      	; 0x434 <key_press+0x6c>
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	01 c0       	rjmp	.+2      	; 0x436 <key_press+0x6e>
 434:	6f ef       	ldi	r22, 0xFF	; 255
 436:	f9 01       	movw	r30, r18
 438:	ea 5b       	subi	r30, 0xBA	; 186
 43a:	fd 4f       	sbci	r31, 0xFD	; 253
 43c:	60 83       	st	Z, r22
		if (key_code==NULL && prev_layer && ! mod_keys) {
 43e:	99 23       	and	r25, r25
 440:	89 f4       	brne	.+34     	; 0x464 <key_press+0x9c>
 442:	60 91 30 02 	lds	r22, 0x0230
 446:	70 91 31 02 	lds	r23, 0x0231
 44a:	61 15       	cp	r22, r1
 44c:	71 05       	cpc	r23, r1
 44e:	09 f4       	brne	.+2      	; 0x452 <key_press+0x8a>
 450:	be c0       	rjmp	.+380    	; 0x5ce <key_press+0x206>
 452:	aa 23       	and	r26, r26
 454:	09 f0       	breq	.+2      	; 0x458 <key_press+0x90>
 456:	bb c0       	rjmp	.+374    	; 0x5ce <key_press+0x206>
			key_code = prev_layer[key_id];
 458:	46 0f       	add	r20, r22
 45a:	57 1f       	adc	r21, r23
 45c:	da 01       	movw	r26, r20
 45e:	9c 91       	ld	r25, X
			pressed[key_id] = KEY_PRESSED_PREV;
 460:	45 e0       	ldi	r20, 0x05	; 5
 462:	40 83       	st	Z, r20
		}
	}
	
	if (key_code>0xF0) { // Catboard keys
 464:	91 3f       	cpi	r25, 0xF1	; 241
 466:	08 f4       	brcc	.+2      	; 0x46a <key_press+0xa2>
 468:	b0 c0       	rjmp	.+352    	; 0x5ca <key_press+0x202>
		if (key_code==KEY_ALT_TAB) { // AltTab press
 46a:	9d 3f       	cpi	r25, 0xFD	; 253
 46c:	31 f5       	brne	.+76     	; 0x4ba <key_press+0xf2>
			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 46e:	f9 01       	movw	r30, r18
 470:	ea 5b       	subi	r30, 0xBA	; 186
 472:	fd 4f       	sbci	r31, 0xFD	; 253
 474:	80 81       	ld	r24, Z
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	19 f4       	brne	.+6      	; 0x480 <key_press+0xb8>
				usb_keyboard_press(KEY_TAB, KEY_ALT);
 47a:	8b e2       	ldi	r24, 0x2B	; 43
 47c:	64 e0       	ldi	r22, 0x04	; 4
 47e:	64 c0       	rjmp	.+200    	; 0x548 <key_press+0x180>
			} else { // Alt press, Tab press and release
				if (! (mod_keys & (KEY_ALT|KEY_RIGHT_ALT|KEY_CTRL|KEY_RIGHT_CTRL|KEY_GUI|KEY_RIGHT_GUI))) {
 480:	80 91 2f 02 	lds	r24, 0x022F
 484:	98 2f       	mov	r25, r24
 486:	9d 7d       	andi	r25, 0xDD	; 221
 488:	21 f4       	brne	.+8      	; 0x492 <key_press+0xca>
					mod_keys |= (KEY_ALT);
 48a:	84 60       	ori	r24, 0x04	; 4
 48c:	80 93 2f 02 	sts	0x022F, r24
 490:	02 c0       	rjmp	.+4      	; 0x496 <key_press+0xce>
				} else {
					pressed[key_id] = KEY_PRESSED_ALT;
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	80 83       	st	Z, r24
				}
				keyboard_modifier_keys = mod_keys;
 496:	80 91 2f 02 	lds	r24, 0x022F
 49a:	80 93 3b 02 	sts	0x023B, r24
				keyboard_keys[0] = KEY_TAB;
 49e:	8b e2       	ldi	r24, 0x2B	; 43
 4a0:	80 93 3c 02 	sts	0x023C, r24
				usb_keyboard_send();
 4a4:	1b d2       	rcall	.+1078   	; 0x8dc <usb_keyboard_send>
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	90 e7       	ldi	r25, 0x70	; 112
 4aa:	a2 e0       	ldi	r26, 0x02	; 2
 4ac:	81 50       	subi	r24, 0x01	; 1
 4ae:	90 40       	sbci	r25, 0x00	; 0
 4b0:	a0 40       	sbci	r26, 0x00	; 0
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <key_press+0xe4>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <key_press+0xee>
 4b6:	00 00       	nop
 4b8:	c0 c0       	rjmp	.+384    	; 0x63a <key_press+0x272>
				_delay_ms(50);
				send();
			}
		} else if (key_code==KEY_FN_LOCK) { // FnLock
 4ba:	9e 3f       	cpi	r25, 0xFE	; 254
 4bc:	41 f5       	brne	.+80     	; 0x50e <key_press+0x146>
			if (prev_layer) { // FnLock Off
 4be:	80 91 30 02 	lds	r24, 0x0230
 4c2:	90 91 31 02 	lds	r25, 0x0231
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	49 f0       	breq	.+18     	; 0x4dc <key_press+0x114>
				layout = prev_layer;
 4ca:	90 93 3d 01 	sts	0x013D, r25
 4ce:	80 93 3c 01 	sts	0x013C, r24
				prev_layer = 0;
 4d2:	10 92 31 02 	sts	0x0231, r1
 4d6:	10 92 30 02 	sts	0x0230, r1
 4da:	0e c0       	rjmp	.+28     	; 0x4f8 <key_press+0x130>
			} else { // FnLock On
				prev_layer = layout;
 4dc:	80 91 3c 01 	lds	r24, 0x013C
 4e0:	90 91 3d 01 	lds	r25, 0x013D
 4e4:	90 93 31 02 	sts	0x0231, r25
 4e8:	80 93 30 02 	sts	0x0230, r24
				layout = layer_fnlock;
 4ec:	86 eb       	ldi	r24, 0xB6	; 182
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	90 93 3d 01 	sts	0x013D, r25
 4f4:	80 93 3c 01 	sts	0x013C, r24
			}
			if (prev_layer || mac_mode) {
 4f8:	80 91 30 02 	lds	r24, 0x0230
 4fc:	90 91 31 02 	lds	r25, 0x0231
 500:	00 97       	sbiw	r24, 0x00	; 0
 502:	d9 f4       	brne	.+54     	; 0x53a <key_press+0x172>
 504:	80 91 2e 02 	lds	r24, 0x022E
 508:	88 23       	and	r24, r24
 50a:	c9 f0       	breq	.+50     	; 0x53e <key_press+0x176>
 50c:	16 c0       	rjmp	.+44     	; 0x53a <key_press+0x172>
				LED_ON;
			} else {
				LED_OFF;
			}
		} else if (key_code==KEY_MAC_MODE) { // Mac mode
 50e:	9c 3f       	cpi	r25, 0xFC	; 252
 510:	e9 f4       	brne	.+58     	; 0x54c <key_press+0x184>
			if (pressed[key_id]==KEY_PRESSED_FN) {
 512:	2a 5b       	subi	r18, 0xBA	; 186
 514:	3d 4f       	sbci	r19, 0xFD	; 253
 516:	d9 01       	movw	r26, r18
 518:	8c 91       	ld	r24, X
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	91 f4       	brne	.+36     	; 0x542 <key_press+0x17a>
				mac_mode = ! mac_mode;
 51e:	90 91 2e 02 	lds	r25, 0x022E
 522:	91 11       	cpse	r25, r1
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	80 93 2e 02 	sts	0x022E, r24
				if (mac_mode || prev_layer) {
 52a:	88 23       	and	r24, r24
 52c:	31 f4       	brne	.+12     	; 0x53a <key_press+0x172>
 52e:	80 91 30 02 	lds	r24, 0x0230
 532:	90 91 31 02 	lds	r25, 0x0231
 536:	00 97       	sbiw	r24, 0x00	; 0
 538:	11 f0       	breq	.+4      	; 0x53e <key_press+0x176>
					LED_ON;
 53a:	5c 9a       	sbi	0x0b, 4	; 11
 53c:	9b c0       	rjmp	.+310    	; 0x674 <key_press+0x2ac>
				} else {
					LED_OFF;
 53e:	5c 98       	cbi	0x0b, 4	; 11
 540:	99 c0       	rjmp	.+306    	; 0x674 <key_press+0x2ac>
				}
			} else { // TODO: Exclusion, press Space
				usb_keyboard_press(KEY_SPACE, mod_keys);
 542:	8c e2       	ldi	r24, 0x2C	; 44
 544:	60 91 2f 02 	lds	r22, 0x022F
 548:	03 d2       	rcall	.+1030   	; 0x950 <usb_keyboard_press>
 54a:	94 c0       	rjmp	.+296    	; 0x674 <key_press+0x2ac>
			}
		} else if ((key_code==KEY_LAYER1 || key_code==KEY_LAYER2) && (mod_keys & (KEY_ALT|KEY_RIGHT_ALT|KEY_CTRL|KEY_RIGHT_CTRL|KEY_GUI|KEY_RIGHT_GUI))) { // Mods + Layer = Shift
 54c:	89 2f       	mov	r24, r25
 54e:	81 5f       	subi	r24, 0xF1	; 241
 550:	82 30       	cpi	r24, 0x02	; 2
 552:	08 f0       	brcs	.+2      	; 0x556 <key_press+0x18e>
 554:	8f c0       	rjmp	.+286    	; 0x674 <key_press+0x2ac>
 556:	80 91 2f 02 	lds	r24, 0x022F
 55a:	48 2f       	mov	r20, r24
 55c:	4d 7d       	andi	r20, 0xDD	; 221
 55e:	39 f0       	breq	.+14     	; 0x56e <key_press+0x1a6>
			pressed[key_id] = KEY_PRESSED_SHIFT;
 560:	2a 5b       	subi	r18, 0xBA	; 186
 562:	3d 4f       	sbci	r19, 0xFD	; 253
 564:	94 e0       	ldi	r25, 0x04	; 4
 566:	f9 01       	movw	r30, r18
 568:	90 83       	st	Z, r25
			mod_keys |= KEY_SHIFT;
 56a:	82 60       	ori	r24, 0x02	; 2
 56c:	64 c0       	rjmp	.+200    	; 0x636 <key_press+0x26e>
			send();
		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 56e:	91 3f       	cpi	r25, 0xF1	; 241
 570:	79 f4       	brne	.+30     	; 0x590 <key_press+0x1c8>
			if (layout!=layer1) {
 572:	20 91 3c 01 	lds	r18, 0x013C
 576:	30 91 3d 01 	lds	r19, 0x013D
 57a:	8e e3       	ldi	r24, 0x3E	; 62
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	28 17       	cp	r18, r24
 580:	39 07       	cpc	r19, r25
 582:	09 f4       	brne	.+2      	; 0x586 <key_press+0x1be>
 584:	77 c0       	rjmp	.+238    	; 0x674 <key_press+0x2ac>
				if (layout==layer_fn) {
 586:	41 e0       	ldi	r20, 0x01	; 1
 588:	2a 37       	cpi	r18, 0x7A	; 122
 58a:	34 07       	cpc	r19, r20
 58c:	c1 f4       	brne	.+48     	; 0x5be <key_press+0x1f6>
 58e:	12 c0       	rjmp	.+36     	; 0x5b4 <key_press+0x1ec>
				} else {
					layout = layer1;
				}
				change_layout();
			}
		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 590:	92 3f       	cpi	r25, 0xF2	; 242
 592:	09 f0       	breq	.+2      	; 0x596 <key_press+0x1ce>
 594:	6f c0       	rjmp	.+222    	; 0x674 <key_press+0x2ac>
			if (layout!=layer2) {
 596:	20 91 3c 01 	lds	r18, 0x013C
 59a:	30 91 3d 01 	lds	r19, 0x013D
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	20 30       	cpi	r18, 0x00	; 0
 5a2:	38 07       	cpc	r19, r24
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <key_press+0x1e0>
 5a6:	66 c0       	rjmp	.+204    	; 0x674 <key_press+0x2ac>
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	91 e0       	ldi	r25, 0x01	; 1
				if (layout==layer_fn) {
 5ac:	a1 e0       	ldi	r26, 0x01	; 1
 5ae:	2a 37       	cpi	r18, 0x7A	; 122
 5b0:	3a 07       	cpc	r19, r26
 5b2:	29 f4       	brne	.+10     	; 0x5be <key_press+0x1f6>
					prev_layer = layer2;
 5b4:	90 93 31 02 	sts	0x0231, r25
 5b8:	80 93 30 02 	sts	0x0230, r24
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <key_press+0x1fe>
				} else {
					layout = layer2;	
 5be:	90 93 3d 01 	sts	0x013D, r25
 5c2:	80 93 3c 01 	sts	0x013C, r24
				}
				change_layout();
 5c6:	db dd       	rcall	.-1098   	; 0x17e <change_layout>
 5c8:	55 c0       	rjmp	.+170    	; 0x674 <key_press+0x2ac>
			}
		}
	} else if (key_code>=0x80) { // Mod keys
 5ca:	97 fd       	sbrc	r25, 7
 5cc:	1e c0       	rjmp	.+60     	; 0x60a <key_press+0x242>
		} else {
			mod_keys |= (key_code & 0x7F);
		}
		send();
	} else {
		for (i=5; i>0; i--) queue[i] = queue[i-1];
 5ce:	90 91 29 02 	lds	r25, 0x0229
 5d2:	90 93 2a 02 	sts	0x022A, r25
 5d6:	90 91 28 02 	lds	r25, 0x0228
 5da:	90 93 29 02 	sts	0x0229, r25
 5de:	90 91 27 02 	lds	r25, 0x0227
 5e2:	90 93 28 02 	sts	0x0228, r25
 5e6:	90 91 26 02 	lds	r25, 0x0226
 5ea:	90 93 27 02 	sts	0x0227, r25
 5ee:	90 91 25 02 	lds	r25, 0x0225
 5f2:	90 93 26 02 	sts	0x0226, r25
		queue[0] = key_id;
 5f6:	80 93 25 02 	sts	0x0225, r24
		send();
 5fa:	89 83       	std	Y+1, r24	; 0x01
 5fc:	36 de       	rcall	.-916    	; 0x26a <send>
		// Autorepeat
		if (last_key==key_id) { // calc press2
 5fe:	90 91 32 02 	lds	r25, 0x0232
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	98 17       	cp	r25, r24
 606:	11 f5       	brne	.+68     	; 0x64c <key_press+0x284>
 608:	1a c0       	rjmp	.+52     	; 0x63e <key_press+0x276>
				}
				change_layout();
			}
		}
	} else if (key_code>=0x80) { // Mod keys
		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 60a:	80 91 2e 02 	lds	r24, 0x022E
 60e:	88 23       	and	r24, r24
 610:	41 f0       	breq	.+16     	; 0x622 <key_press+0x25a>
 612:	91 38       	cpi	r25, 0x81	; 129
 614:	21 f4       	brne	.+8      	; 0x61e <key_press+0x256>
			mod_keys |= KEY_GUI;
 616:	80 91 2f 02 	lds	r24, 0x022F
 61a:	88 60       	ori	r24, 0x08	; 8
 61c:	0c c0       	rjmp	.+24     	; 0x636 <key_press+0x26e>
		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD)) {
 61e:	90 39       	cpi	r25, 0x90	; 144
 620:	11 f0       	breq	.+4      	; 0x626 <key_press+0x25e>
 622:	90 38       	cpi	r25, 0x80	; 128
 624:	21 f4       	brne	.+8      	; 0x62e <key_press+0x266>
			mod_keys |= KEY_RIGHT_GUI;
 626:	80 91 2f 02 	lds	r24, 0x022F
 62a:	80 68       	ori	r24, 0x80	; 128
 62c:	04 c0       	rjmp	.+8      	; 0x636 <key_press+0x26e>
		} else {
			mod_keys |= (key_code & 0x7F);
 62e:	9f 77       	andi	r25, 0x7F	; 127
 630:	80 91 2f 02 	lds	r24, 0x022F
 634:	89 2b       	or	r24, r25
 636:	80 93 2f 02 	sts	0x022F, r24
		}
		send();
 63a:	17 de       	rcall	.-978    	; 0x26a <send>
 63c:	1b c0       	rjmp	.+54     	; 0x674 <key_press+0x2ac>
		for (i=5; i>0; i--) queue[i] = queue[i-1];
		queue[0] = key_id;
		send();
		// Autorepeat
		if (last_key==key_id) { // calc press2
			press_time2 = 1;
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	90 93 36 02 	sts	0x0236, r25
 646:	80 93 35 02 	sts	0x0235, r24
 64a:	10 c0       	rjmp	.+32     	; 0x66c <key_press+0x2a4>
			repeat_time = 0;
		} else { // calc press1
			last_key = key_id;
 64c:	80 93 32 02 	sts	0x0232, r24
			press_time = 1;
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	90 93 34 02 	sts	0x0234, r25
 658:	80 93 33 02 	sts	0x0233, r24
			press_time2 = 0;
 65c:	10 92 36 02 	sts	0x0236, r1
 660:	10 92 35 02 	sts	0x0235, r1
			release_time = 0;
 664:	10 92 38 02 	sts	0x0238, r1
 668:	10 92 37 02 	sts	0x0237, r1
			repeat_time = 0;
 66c:	10 92 3a 02 	sts	0x023A, r1
 670:	10 92 39 02 	sts	0x0239, r1
		}
	}
}
 674:	0f 90       	pop	r0
 676:	cf 91       	pop	r28
 678:	df 91       	pop	r29
 67a:	08 95       	ret

0000067c <repeat_tick>:
	if (layout!=layer_fnlock || pressed[FN_KEY_ID]) repeat_tick();
	_delay_ms(5);
}

void repeat_tick(void) {
	if (repeat_time) { // repeat pause
 67c:	80 91 39 02 	lds	r24, 0x0239
 680:	90 91 3a 02 	lds	r25, 0x023A
 684:	00 97       	sbiw	r24, 0x00	; 0
 686:	19 f1       	breq	.+70     	; 0x6ce <repeat_tick+0x52>
		if (repeat_time<(release_time>>2)) {
 688:	20 91 37 02 	lds	r18, 0x0237
 68c:	30 91 38 02 	lds	r19, 0x0238
 690:	36 95       	lsr	r19
 692:	27 95       	ror	r18
 694:	36 95       	lsr	r19
 696:	27 95       	ror	r18
 698:	82 17       	cp	r24, r18
 69a:	93 07       	cpc	r25, r19
 69c:	10 f4       	brcc	.+4      	; 0x6a2 <repeat_tick+0x26>
			repeat_time++;
 69e:	01 96       	adiw	r24, 0x01	; 1
 6a0:	36 c0       	rjmp	.+108    	; 0x70e <repeat_tick+0x92>
		} else { // repeat press
			repeat_time = 1;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	90 93 3a 02 	sts	0x023A, r25
 6aa:	80 93 39 02 	sts	0x0239, r24

			keyboard_modifier_keys = mod_keys;
 6ae:	80 91 2f 02 	lds	r24, 0x022F
 6b2:	80 93 3b 02 	sts	0x023B, r24
			keyboard_keys[0] = get_code(last_key);
 6b6:	80 91 32 02 	lds	r24, 0x0232
 6ba:	b0 dd       	rcall	.-1184   	; 0x21c <get_code>
 6bc:	80 93 3c 02 	sts	0x023C, r24
			if (! usb_keyboard_send()) { // repeat release
 6c0:	0d d1       	rcall	.+538    	; 0x8dc <usb_keyboard_send>
 6c2:	88 23       	and	r24, r24
 6c4:	09 f0       	breq	.+2      	; 0x6c8 <repeat_tick+0x4c>
 6c6:	5c c0       	rjmp	.+184    	; 0x780 <repeat_tick+0x104>
				keyboard_keys[0] = 0;
 6c8:	10 92 3c 02 	sts	0x023C, r1
				usb_keyboard_send();
 6cc:	07 c1       	rjmp	.+526    	; 0x8dc <usb_keyboard_send>
			}
		}
	} else if (press_time2) { // press2 pause
 6ce:	80 91 35 02 	lds	r24, 0x0235
 6d2:	90 91 36 02 	lds	r25, 0x0236
 6d6:	00 97       	sbiw	r24, 0x00	; 0
 6d8:	f9 f0       	breq	.+62     	; 0x718 <repeat_tick+0x9c>
		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 6da:	40 91 33 02 	lds	r20, 0x0233
 6de:	50 91 34 02 	lds	r21, 0x0234
 6e2:	20 91 69 02 	lds	r18, 0x0269
 6e6:	22 23       	and	r18, r18
 6e8:	19 f0       	breq	.+6      	; 0x6f0 <repeat_tick+0x74>
 6ea:	25 e0       	ldi	r18, 0x05	; 5
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <repeat_tick+0x78>
 6f0:	2e e1       	ldi	r18, 0x1E	; 30
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	24 0f       	add	r18, r20
 6f6:	35 1f       	adc	r19, r21
 6f8:	82 17       	cp	r24, r18
 6fa:	93 07       	cpc	r25, r19
 6fc:	30 f4       	brcc	.+12     	; 0x70a <repeat_tick+0x8e>
			press_time2++;
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	90 93 36 02 	sts	0x0236, r25
 704:	80 93 35 02 	sts	0x0235, r24
 708:	08 95       	ret
		} else {
			repeat_time = 1;
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	90 93 3a 02 	sts	0x023A, r25
 712:	80 93 39 02 	sts	0x0239, r24
 716:	08 95       	ret
		}
	} else if (release_time) { // release pause
 718:	20 91 37 02 	lds	r18, 0x0237
 71c:	30 91 38 02 	lds	r19, 0x0238
 720:	80 91 33 02 	lds	r24, 0x0233
 724:	90 91 34 02 	lds	r25, 0x0234
 728:	21 15       	cp	r18, r1
 72a:	31 05       	cpc	r19, r1
 72c:	d1 f0       	breq	.+52     	; 0x762 <repeat_tick+0xe6>
		if (release_time<(press_time+50)) {
 72e:	c2 96       	adiw	r24, 0x32	; 50
 730:	28 17       	cp	r18, r24
 732:	39 07       	cpc	r19, r25
 734:	38 f4       	brcc	.+14     	; 0x744 <repeat_tick+0xc8>
			release_time++;
 736:	2f 5f       	subi	r18, 0xFF	; 255
 738:	3f 4f       	sbci	r19, 0xFF	; 255
 73a:	30 93 38 02 	sts	0x0238, r19
 73e:	20 93 37 02 	sts	0x0237, r18
 742:	08 95       	ret
		} else {
			last_key = 0;
 744:	10 92 32 02 	sts	0x0232, r1
			release_time = 0;
 748:	10 92 38 02 	sts	0x0238, r1
 74c:	10 92 37 02 	sts	0x0237, r1
			press_time = 0;
 750:	10 92 34 02 	sts	0x0234, r1
 754:	10 92 33 02 	sts	0x0233, r1
			press_time2 = 0;
 758:	10 92 36 02 	sts	0x0236, r1
 75c:	10 92 35 02 	sts	0x0235, r1
 760:	08 95       	ret
			release_time = 0;
		}
	} else if (press_time) { // press1 pause
 762:	00 97       	sbiw	r24, 0x00	; 0
 764:	69 f0       	breq	.+26     	; 0x780 <repeat_tick+0x104>
		if (press_time<250) {
 766:	8a 3f       	cpi	r24, 0xFA	; 250
 768:	91 05       	cpc	r25, r1
 76a:	30 f4       	brcc	.+12     	; 0x778 <repeat_tick+0xfc>
			press_time++;
 76c:	01 96       	adiw	r24, 0x01	; 1
 76e:	90 93 34 02 	sts	0x0234, r25
 772:	80 93 33 02 	sts	0x0233, r24
 776:	08 95       	ret
		} else {
			press_time = 0;
 778:	10 92 34 02 	sts	0x0234, r1
 77c:	10 92 33 02 	sts	0x0233, r1
 780:	08 95       	ret

00000782 <poll>:
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 782:	8f 92       	push	r8
 784:	9f 92       	push	r9
 786:	af 92       	push	r10
 788:	bf 92       	push	r11
 78a:	cf 92       	push	r12
 78c:	df 92       	push	r13
 78e:	ef 92       	push	r14
 790:	ff 92       	push	r15
 792:	0f 93       	push	r16
 794:	1f 93       	push	r17
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	02 ef       	ldi	r16, 0xF2	; 242
 79c:	11 e0       	ldi	r17, 0x01	; 1
 79e:	cc ef       	ldi	r28, 0xFC	; 252
 7a0:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 7a2:	99 24       	eor	r9, r9
		*row_port[row] &= ~row_bit[row];
 7a4:	d8 01       	movw	r26, r16
 7a6:	ed 91       	ld	r30, X+
 7a8:	fc 91       	ld	r31, X
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 7aa:	5e 01       	movw	r10, r28
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
 7ac:	98 81       	ld	r25, Y
 7ae:	90 95       	com	r25
 7b0:	80 81       	ld	r24, Z
 7b2:	89 23       	and	r24, r25
 7b4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7b6:	b5 e0       	ldi	r27, 0x05	; 5
 7b8:	ba 95       	dec	r27
 7ba:	f1 f7       	brne	.-4      	; 0x7b8 <poll+0x36>
 7bc:	00 00       	nop
 7be:	61 e0       	ldi	r22, 0x01	; 1
 7c0:	e6 2e       	mov	r14, r22
 7c2:	62 e0       	ldi	r22, 0x02	; 2
 7c4:	f6 2e       	mov	r15, r22
 7c6:	59 e1       	ldi	r21, 0x19	; 25
 7c8:	c5 2e       	mov	r12, r21
 7ca:	52 e0       	ldi	r21, 0x02	; 2
 7cc:	d5 2e       	mov	r13, r21
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 7ce:	89 2c       	mov	r8, r9
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
			key_id = col*ROWS+row;
			if (! (*col_pin[col] & col_bit[col])) { // press key
 7d0:	d7 01       	movw	r26, r14
 7d2:	ed 91       	ld	r30, X+
 7d4:	fd 91       	ld	r31, X+
 7d6:	7d 01       	movw	r14, r26
 7d8:	d6 01       	movw	r26, r12
 7da:	8d 91       	ld	r24, X+
 7dc:	6d 01       	movw	r12, r26
 7de:	90 81       	ld	r25, Z
 7e0:	89 23       	and	r24, r25
 7e2:	28 2d       	mov	r18, r8
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	49 f4       	brne	.+18     	; 0x7fa <poll+0x78>
				if (! pressed[key_id]) {
 7e8:	2a 5b       	subi	r18, 0xBA	; 186
 7ea:	3d 4f       	sbci	r19, 0xFD	; 253
 7ec:	f9 01       	movw	r30, r18
 7ee:	80 81       	ld	r24, Z
 7f0:	88 23       	and	r24, r24
 7f2:	59 f4       	brne	.+22     	; 0x80a <poll+0x88>
					key_press(key_id);
 7f4:	88 2d       	mov	r24, r8
 7f6:	e8 dd       	rcall	.-1072   	; 0x3c8 <key_press>
 7f8:	08 c0       	rjmp	.+16     	; 0x80a <poll+0x88>
				}
			} else if (pressed[key_id]) { // release key
 7fa:	2a 5b       	subi	r18, 0xBA	; 186
 7fc:	3d 4f       	sbci	r19, 0xFD	; 253
 7fe:	d9 01       	movw	r26, r18
 800:	8c 91       	ld	r24, X
 802:	88 23       	and	r24, r24
 804:	11 f0       	breq	.+4      	; 0x80a <poll+0x88>
				key_release(key_id);
 806:	88 2d       	mov	r24, r8
 808:	4b dd       	rcall	.-1386   	; 0x2a0 <key_release>
 80a:	b5 e0       	ldi	r27, 0x05	; 5
 80c:	8b 0e       	add	r8, r27
void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
 80e:	e9 e1       	ldi	r30, 0x19	; 25
 810:	ee 16       	cp	r14, r30
 812:	e2 e0       	ldi	r30, 0x02	; 2
 814:	fe 06       	cpc	r15, r30
 816:	e1 f6       	brne	.-72     	; 0x7d0 <poll+0x4e>
				}
			} else if (pressed[key_id]) { // release key
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
 818:	d8 01       	movw	r26, r16
 81a:	ed 91       	ld	r30, X+
 81c:	fd 91       	ld	r31, X+
 81e:	8d 01       	movw	r16, r26
 820:	21 96       	adiw	r28, 0x01	; 1
 822:	80 81       	ld	r24, Z
 824:	d5 01       	movw	r26, r10
 826:	9c 91       	ld	r25, X
 828:	89 2b       	or	r24, r25
 82a:	80 83       	st	Z, r24
	LED_OFF;
}

void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 82c:	93 94       	inc	r9
 82e:	b9 2d       	mov	r27, r9
 830:	b5 30       	cpi	r27, 0x05	; 5
 832:	09 f0       	breq	.+2      	; 0x836 <poll+0xb4>
 834:	b7 cf       	rjmp	.-146    	; 0x7a4 <poll+0x22>
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
	}
	if (layout!=layer_fnlock || pressed[FN_KEY_ID]) repeat_tick();
 836:	80 91 3c 01 	lds	r24, 0x013C
 83a:	90 91 3d 01 	lds	r25, 0x013D
 83e:	e1 e0       	ldi	r30, 0x01	; 1
 840:	86 3b       	cpi	r24, 0xB6	; 182
 842:	9e 07       	cpc	r25, r30
 844:	21 f4       	brne	.+8      	; 0x84e <poll+0xcc>
 846:	80 91 69 02 	lds	r24, 0x0269
 84a:	88 23       	and	r24, r24
 84c:	09 f0       	breq	.+2      	; 0x850 <poll+0xce>
 84e:	16 df       	rcall	.-468    	; 0x67c <repeat_tick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 850:	8f e1       	ldi	r24, 0x1F	; 31
 852:	9e e4       	ldi	r25, 0x4E	; 78
 854:	01 97       	sbiw	r24, 0x01	; 1
 856:	f1 f7       	brne	.-4      	; 0x854 <poll+0xd2>
 858:	00 c0       	rjmp	.+0      	; 0x85a <poll+0xd8>
 85a:	00 00       	nop
	_delay_ms(5);
}
 85c:	df 91       	pop	r29
 85e:	cf 91       	pop	r28
 860:	1f 91       	pop	r17
 862:	0f 91       	pop	r16
 864:	ff 90       	pop	r15
 866:	ef 90       	pop	r14
 868:	df 90       	pop	r13
 86a:	cf 90       	pop	r12
 86c:	bf 90       	pop	r11
 86e:	af 90       	pop	r10
 870:	9f 90       	pop	r9
 872:	8f 90       	pop	r8
 874:	08 95       	ret

00000876 <main>:
void key_release(uint8_t key_id);
uint8_t get_code(uint8_t key_id);

int main(void) {
	// Disable watchdog if enabled by bootloader/fuses
	MCUSR &= ~(1 << WDRF);
 876:	84 b7       	in	r24, 0x34	; 52
 878:	87 7f       	andi	r24, 0xF7	; 247
 87a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 87c:	88 e1       	ldi	r24, 0x18	; 24
 87e:	0f b6       	in	r0, 0x3f	; 63
 880:	f8 94       	cli
 882:	80 93 60 00 	sts	0x0060, r24
 886:	10 92 60 00 	sts	0x0060, r1
 88a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	80 e8       	ldi	r24, 0x80	; 128
 890:	0f b6       	in	r0, 0x3f	; 63
 892:	f8 94       	cli
 894:	80 93 61 00 	sts	0x0061, r24
 898:	90 93 61 00 	sts	0x0061, r25
 89c:	0f be       	out	0x3f, r0	; 63

	// Disable clock division
	clock_prescale_set(clock_div_1);

	init();
 89e:	97 dc       	rcall	.-1746   	; 0x1ce <init>
	for (;;) {
		poll();
 8a0:	70 df       	rcall	.-288    	; 0x782 <poll>
 8a2:	fe cf       	rjmp	.-4      	; 0x8a0 <main+0x2a>

000008a4 <usb_wait_in_ready>:
 8a4:	80 91 e8 00 	lds	r24, 0x00E8
 8a8:	80 ff       	sbrs	r24, 0
 8aa:	fc cf       	rjmp	.-8      	; 0x8a4 <usb_wait_in_ready>
 8ac:	08 95       	ret

000008ae <usb_init>:
 8ae:	80 ea       	ldi	r24, 0xA0	; 160
 8b0:	80 93 d8 00 	sts	0x00D8, r24
 8b4:	86 e0       	ldi	r24, 0x06	; 6
 8b6:	89 bd       	out	0x29, r24	; 41
 8b8:	09 b4       	in	r0, 0x29	; 41
 8ba:	00 fe       	sbrs	r0, 0
 8bc:	fd cf       	rjmp	.-6      	; 0x8b8 <usb_init+0xa>
 8be:	80 e8       	ldi	r24, 0x80	; 128
 8c0:	80 93 d8 00 	sts	0x00D8, r24
 8c4:	10 92 e0 00 	sts	0x00E0, r1
 8c8:	10 92 43 02 	sts	0x0243, r1
 8cc:	8c e0       	ldi	r24, 0x0C	; 12
 8ce:	80 93 e2 00 	sts	0x00E2, r24
 8d2:	78 94       	sei
 8d4:	08 95       	ret

000008d6 <usb_configured>:
 8d6:	80 91 43 02 	lds	r24, 0x0243
 8da:	08 95       	ret

000008dc <usb_keyboard_send>:
 8dc:	80 91 43 02 	lds	r24, 0x0243
 8e0:	88 23       	and	r24, r24
 8e2:	91 f1       	breq	.+100    	; 0x948 <usb_keyboard_send+0x6c>
 8e4:	8f b7       	in	r24, 0x3f	; 63
 8e6:	f8 94       	cli
 8e8:	93 e0       	ldi	r25, 0x03	; 3
 8ea:	90 93 e9 00 	sts	0x00E9, r25
 8ee:	90 91 e4 00 	lds	r25, 0x00E4
 8f2:	9e 5c       	subi	r25, 0xCE	; 206
 8f4:	23 e0       	ldi	r18, 0x03	; 3
 8f6:	30 91 e8 00 	lds	r19, 0x00E8
 8fa:	35 fd       	sbrc	r19, 5
 8fc:	0e c0       	rjmp	.+28     	; 0x91a <usb_keyboard_send+0x3e>
 8fe:	8f bf       	out	0x3f, r24	; 63
 900:	80 91 43 02 	lds	r24, 0x0243
 904:	88 23       	and	r24, r24
 906:	01 f1       	breq	.+64     	; 0x948 <usb_keyboard_send+0x6c>
 908:	80 91 e4 00 	lds	r24, 0x00E4
 90c:	89 17       	cp	r24, r25
 90e:	f1 f0       	breq	.+60     	; 0x94c <usb_keyboard_send+0x70>
 910:	8f b7       	in	r24, 0x3f	; 63
 912:	f8 94       	cli
 914:	20 93 e9 00 	sts	0x00E9, r18
 918:	ee cf       	rjmp	.-36     	; 0x8f6 <usb_keyboard_send+0x1a>
 91a:	90 91 3b 02 	lds	r25, 0x023B
 91e:	90 93 f1 00 	sts	0x00F1, r25
 922:	10 92 f1 00 	sts	0x00F1, r1
 926:	ec e3       	ldi	r30, 0x3C	; 60
 928:	f2 e0       	ldi	r31, 0x02	; 2
 92a:	91 91       	ld	r25, Z+
 92c:	90 93 f1 00 	sts	0x00F1, r25
 930:	92 e0       	ldi	r25, 0x02	; 2
 932:	e2 34       	cpi	r30, 0x42	; 66
 934:	f9 07       	cpc	r31, r25
 936:	c9 f7       	brne	.-14     	; 0x92a <usb_keyboard_send+0x4e>
 938:	9a e3       	ldi	r25, 0x3A	; 58
 93a:	90 93 e8 00 	sts	0x00E8, r25
 93e:	10 92 44 02 	sts	0x0244, r1
 942:	8f bf       	out	0x3f, r24	; 63
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	08 95       	ret
 948:	8f ef       	ldi	r24, 0xFF	; 255
 94a:	08 95       	ret
 94c:	8f ef       	ldi	r24, 0xFF	; 255
 94e:	08 95       	ret

00000950 <usb_keyboard_press>:
 950:	60 93 3b 02 	sts	0x023B, r22
 954:	80 93 3c 02 	sts	0x023C, r24
 958:	c1 df       	rcall	.-126    	; 0x8dc <usb_keyboard_send>
 95a:	88 23       	and	r24, r24
 95c:	29 f4       	brne	.+10     	; 0x968 <usb_keyboard_press+0x18>
 95e:	10 92 3b 02 	sts	0x023B, r1
 962:	10 92 3c 02 	sts	0x023C, r1
 966:	ba cf       	rjmp	.-140    	; 0x8dc <usb_keyboard_send>
 968:	08 95       	ret

0000096a <__vector_11>:
 96a:	1f 92       	push	r1
 96c:	0f 92       	push	r0
 96e:	0f b6       	in	r0, 0x3f	; 63
 970:	0f 92       	push	r0
 972:	11 24       	eor	r1, r1
 974:	2f 93       	push	r18
 976:	8f 93       	push	r24
 978:	9f 93       	push	r25
 97a:	ef 93       	push	r30
 97c:	ff 93       	push	r31
 97e:	80 91 e1 00 	lds	r24, 0x00E1
 982:	10 92 e1 00 	sts	0x00E1, r1
 986:	83 ff       	sbrs	r24, 3
 988:	0f c0       	rjmp	.+30     	; 0x9a8 <__vector_11+0x3e>
 98a:	10 92 e9 00 	sts	0x00E9, r1
 98e:	91 e0       	ldi	r25, 0x01	; 1
 990:	90 93 eb 00 	sts	0x00EB, r25
 994:	10 92 ec 00 	sts	0x00EC, r1
 998:	92 e2       	ldi	r25, 0x22	; 34
 99a:	90 93 ed 00 	sts	0x00ED, r25
 99e:	98 e0       	ldi	r25, 0x08	; 8
 9a0:	90 93 f0 00 	sts	0x00F0, r25
 9a4:	10 92 43 02 	sts	0x0243, r1
 9a8:	82 ff       	sbrs	r24, 2
 9aa:	34 c0       	rjmp	.+104    	; 0xa14 <__vector_11+0xaa>
 9ac:	80 91 43 02 	lds	r24, 0x0243
 9b0:	88 23       	and	r24, r24
 9b2:	81 f1       	breq	.+96     	; 0xa14 <__vector_11+0xaa>
 9b4:	20 91 2c 02 	lds	r18, 0x022C
 9b8:	22 23       	and	r18, r18
 9ba:	61 f1       	breq	.+88     	; 0xa14 <__vector_11+0xaa>
 9bc:	80 91 45 02 	lds	r24, 0x0245
 9c0:	8f 5f       	subi	r24, 0xFF	; 255
 9c2:	80 93 45 02 	sts	0x0245, r24
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	83 70       	andi	r24, 0x03	; 3
 9ca:	90 70       	andi	r25, 0x00	; 0
 9cc:	00 97       	sbiw	r24, 0x00	; 0
 9ce:	11 f5       	brne	.+68     	; 0xa14 <__vector_11+0xaa>
 9d0:	83 e0       	ldi	r24, 0x03	; 3
 9d2:	80 93 e9 00 	sts	0x00E9, r24
 9d6:	80 91 e8 00 	lds	r24, 0x00E8
 9da:	85 ff       	sbrs	r24, 5
 9dc:	1b c0       	rjmp	.+54     	; 0xa14 <__vector_11+0xaa>
 9de:	80 91 44 02 	lds	r24, 0x0244
 9e2:	8f 5f       	subi	r24, 0xFF	; 255
 9e4:	80 93 44 02 	sts	0x0244, r24
 9e8:	82 17       	cp	r24, r18
 9ea:	a1 f4       	brne	.+40     	; 0xa14 <__vector_11+0xaa>
 9ec:	10 92 44 02 	sts	0x0244, r1
 9f0:	80 91 3b 02 	lds	r24, 0x023B
 9f4:	80 93 f1 00 	sts	0x00F1, r24
 9f8:	10 92 f1 00 	sts	0x00F1, r1
 9fc:	ec e3       	ldi	r30, 0x3C	; 60
 9fe:	f2 e0       	ldi	r31, 0x02	; 2
 a00:	81 91       	ld	r24, Z+
 a02:	80 93 f1 00 	sts	0x00F1, r24
 a06:	82 e0       	ldi	r24, 0x02	; 2
 a08:	e2 34       	cpi	r30, 0x42	; 66
 a0a:	f8 07       	cpc	r31, r24
 a0c:	c9 f7       	brne	.-14     	; 0xa00 <__vector_11+0x96>
 a0e:	8a e3       	ldi	r24, 0x3A	; 58
 a10:	80 93 e8 00 	sts	0x00E8, r24
 a14:	ff 91       	pop	r31
 a16:	ef 91       	pop	r30
 a18:	9f 91       	pop	r25
 a1a:	8f 91       	pop	r24
 a1c:	2f 91       	pop	r18
 a1e:	0f 90       	pop	r0
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	0f 90       	pop	r0
 a24:	1f 90       	pop	r1
 a26:	18 95       	reti

00000a28 <__vector_12>:
 a28:	1f 92       	push	r1
 a2a:	0f 92       	push	r0
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	0f 92       	push	r0
 a30:	11 24       	eor	r1, r1
 a32:	cf 92       	push	r12
 a34:	df 92       	push	r13
 a36:	ef 92       	push	r14
 a38:	ff 92       	push	r15
 a3a:	0f 93       	push	r16
 a3c:	1f 93       	push	r17
 a3e:	2f 93       	push	r18
 a40:	3f 93       	push	r19
 a42:	4f 93       	push	r20
 a44:	5f 93       	push	r21
 a46:	6f 93       	push	r22
 a48:	7f 93       	push	r23
 a4a:	8f 93       	push	r24
 a4c:	9f 93       	push	r25
 a4e:	af 93       	push	r26
 a50:	bf 93       	push	r27
 a52:	ef 93       	push	r30
 a54:	ff 93       	push	r31
 a56:	df 93       	push	r29
 a58:	cf 93       	push	r28
 a5a:	0f 92       	push	r0
 a5c:	cd b7       	in	r28, 0x3d	; 61
 a5e:	de b7       	in	r29, 0x3e	; 62
 a60:	10 92 e9 00 	sts	0x00E9, r1
 a64:	80 91 e8 00 	lds	r24, 0x00E8
 a68:	83 ff       	sbrs	r24, 3
 a6a:	39 c1       	rjmp	.+626    	; 0xcde <__vector_12+0x2b6>
 a6c:	20 91 f1 00 	lds	r18, 0x00F1
 a70:	30 91 f1 00 	lds	r19, 0x00F1
 a74:	80 91 f1 00 	lds	r24, 0x00F1
 a78:	c8 2e       	mov	r12, r24
 a7a:	dd 24       	eor	r13, r13
 a7c:	40 91 f1 00 	lds	r20, 0x00F1
 a80:	94 2f       	mov	r25, r20
 a82:	80 e0       	ldi	r24, 0x00	; 0
 a84:	c8 2a       	or	r12, r24
 a86:	d9 2a       	or	r13, r25
 a88:	00 91 f1 00 	lds	r16, 0x00F1
 a8c:	10 e0       	ldi	r17, 0x00	; 0
 a8e:	40 91 f1 00 	lds	r20, 0x00F1
 a92:	94 2f       	mov	r25, r20
 a94:	80 e0       	ldi	r24, 0x00	; 0
 a96:	08 2b       	or	r16, r24
 a98:	19 2b       	or	r17, r25
 a9a:	60 91 f1 00 	lds	r22, 0x00F1
 a9e:	a0 91 f1 00 	lds	r26, 0x00F1
 aa2:	82 ef       	ldi	r24, 0xF2	; 242
 aa4:	80 93 e8 00 	sts	0x00E8, r24
 aa8:	36 30       	cpi	r19, 0x06	; 6
 aaa:	09 f0       	breq	.+2      	; 0xaae <__vector_12+0x86>
 aac:	59 c0       	rjmp	.+178    	; 0xb60 <__vector_12+0x138>
 aae:	8b e7       	ldi	r24, 0x7B	; 123
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	9c 01       	movw	r18, r24
 ab4:	25 50       	subi	r18, 0x05	; 5
 ab6:	30 40       	sbci	r19, 0x00	; 0
 ab8:	fc 01       	movw	r30, r24
 aba:	37 97       	sbiw	r30, 0x07	; 7
 abc:	45 91       	lpm	r20, Z+
 abe:	54 91       	lpm	r21, Z+
 ac0:	4c 15       	cp	r20, r12
 ac2:	5d 05       	cpc	r21, r13
 ac4:	f9 f4       	brne	.+62     	; 0xb04 <__vector_12+0xdc>
 ac6:	f9 01       	movw	r30, r18
 ac8:	45 91       	lpm	r20, Z+
 aca:	54 91       	lpm	r21, Z+
 acc:	40 17       	cp	r20, r16
 ace:	51 07       	cpc	r21, r17
 ad0:	c9 f4       	brne	.+50     	; 0xb04 <__vector_12+0xdc>
 ad2:	2e 5f       	subi	r18, 0xFE	; 254
 ad4:	3f 4f       	sbci	r19, 0xFF	; 255
 ad6:	f9 01       	movw	r30, r18
 ad8:	85 91       	lpm	r24, Z+
 ada:	94 91       	lpm	r25, Z+
 adc:	2e 5f       	subi	r18, 0xFE	; 254
 ade:	3f 4f       	sbci	r19, 0xFF	; 255
 ae0:	f9 01       	movw	r30, r18
 ae2:	24 91       	lpm	r18, Z+
 ae4:	46 2f       	mov	r20, r22
 ae6:	50 e0       	ldi	r21, 0x00	; 0
 ae8:	7a 2f       	mov	r23, r26
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	46 2b       	or	r20, r22
 aee:	57 2b       	or	r21, r23
 af0:	4f 3f       	cpi	r20, 0xFF	; 255
 af2:	51 05       	cpc	r21, r1
 af4:	19 f0       	breq	.+6      	; 0xafc <__vector_12+0xd4>
 af6:	10 f0       	brcs	.+4      	; 0xafc <__vector_12+0xd4>
 af8:	4f ef       	ldi	r20, 0xFF	; 255
 afa:	50 e0       	ldi	r21, 0x00	; 0
 afc:	42 17       	cp	r20, r18
 afe:	50 f4       	brcc	.+20     	; 0xb14 <__vector_12+0xec>
 b00:	24 2f       	mov	r18, r20
 b02:	08 c0       	rjmp	.+16     	; 0xb14 <__vector_12+0xec>
 b04:	07 96       	adiw	r24, 0x07	; 7
 b06:	29 5f       	subi	r18, 0xF9	; 249
 b08:	3f 4f       	sbci	r19, 0xFF	; 255
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	8c 3a       	cpi	r24, 0xAC	; 172
 b0e:	9f 07       	cpc	r25, r31
 b10:	99 f6       	brne	.-90     	; 0xab8 <__vector_12+0x90>
 b12:	e5 c0       	rjmp	.+458    	; 0xcde <__vector_12+0x2b6>
 b14:	ae ef       	ldi	r26, 0xFE	; 254
 b16:	40 91 e8 00 	lds	r20, 0x00E8
 b1a:	50 e0       	ldi	r21, 0x00	; 0
 b1c:	ba 01       	movw	r22, r20
 b1e:	65 70       	andi	r22, 0x05	; 5
 b20:	70 70       	andi	r23, 0x00	; 0
 b22:	61 15       	cp	r22, r1
 b24:	71 05       	cpc	r23, r1
 b26:	b9 f3       	breq	.-18     	; 0xb16 <__vector_12+0xee>
 b28:	42 fd       	sbrc	r20, 2
 b2a:	dc c0       	rjmp	.+440    	; 0xce4 <__vector_12+0x2bc>
 b2c:	32 2f       	mov	r19, r18
 b2e:	21 32       	cpi	r18, 0x21	; 33
 b30:	08 f0       	brcs	.+2      	; 0xb34 <__vector_12+0x10c>
 b32:	30 e2       	ldi	r19, 0x20	; 32
 b34:	ac 01       	movw	r20, r24
 b36:	63 2f       	mov	r22, r19
 b38:	07 c0       	rjmp	.+14     	; 0xb48 <__vector_12+0x120>
 b3a:	fa 01       	movw	r30, r20
 b3c:	4f 5f       	subi	r20, 0xFF	; 255
 b3e:	5f 4f       	sbci	r21, 0xFF	; 255
 b40:	e4 91       	lpm	r30, Z+
 b42:	e0 93 f1 00 	sts	0x00F1, r30
 b46:	61 50       	subi	r22, 0x01	; 1
 b48:	66 23       	and	r22, r22
 b4a:	b9 f7       	brne	.-18     	; 0xb3a <__vector_12+0x112>
 b4c:	83 0f       	add	r24, r19
 b4e:	91 1d       	adc	r25, r1
 b50:	23 1b       	sub	r18, r19
 b52:	a0 93 e8 00 	sts	0x00E8, r26
 b56:	22 23       	and	r18, r18
 b58:	f1 f6       	brne	.-68     	; 0xb16 <__vector_12+0xee>
 b5a:	30 32       	cpi	r19, 0x20	; 32
 b5c:	e1 f2       	breq	.-72     	; 0xb16 <__vector_12+0xee>
 b5e:	c2 c0       	rjmp	.+388    	; 0xce4 <__vector_12+0x2bc>
 b60:	35 30       	cpi	r19, 0x05	; 5
 b62:	49 f4       	brne	.+18     	; 0xb76 <__vector_12+0x14e>
 b64:	8e ef       	ldi	r24, 0xFE	; 254
 b66:	80 93 e8 00 	sts	0x00E8, r24
 b6a:	9c de       	rcall	.-712    	; 0x8a4 <usb_wait_in_ready>
 b6c:	8c 2d       	mov	r24, r12
 b6e:	80 68       	ori	r24, 0x80	; 128
 b70:	80 93 e3 00 	sts	0x00E3, r24
 b74:	b7 c0       	rjmp	.+366    	; 0xce4 <__vector_12+0x2bc>
 b76:	39 30       	cpi	r19, 0x09	; 9
 b78:	31 f5       	brne	.+76     	; 0xbc6 <__vector_12+0x19e>
 b7a:	22 23       	and	r18, r18
 b7c:	09 f0       	breq	.+2      	; 0xb80 <__vector_12+0x158>
 b7e:	69 c0       	rjmp	.+210    	; 0xc52 <__vector_12+0x22a>
 b80:	c0 92 43 02 	sts	0x0243, r12
 b84:	8e ef       	ldi	r24, 0xFE	; 254
 b86:	80 93 e8 00 	sts	0x00E8, r24
 b8a:	41 e0       	ldi	r20, 0x01	; 1
 b8c:	85 ea       	ldi	r24, 0xA5	; 165
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	40 93 e9 00 	sts	0x00E9, r20
 b94:	fc 01       	movw	r30, r24
 b96:	01 96       	adiw	r24, 0x01	; 1
 b98:	e4 91       	lpm	r30, Z+
 b9a:	e0 93 eb 00 	sts	0x00EB, r30
 b9e:	ee 23       	and	r30, r30
 ba0:	69 f0       	breq	.+26     	; 0xbbc <__vector_12+0x194>
 ba2:	9c 01       	movw	r18, r24
 ba4:	2f 5f       	subi	r18, 0xFF	; 255
 ba6:	3f 4f       	sbci	r19, 0xFF	; 255
 ba8:	fc 01       	movw	r30, r24
 baa:	84 91       	lpm	r24, Z+
 bac:	80 93 ec 00 	sts	0x00EC, r24
 bb0:	c9 01       	movw	r24, r18
 bb2:	01 96       	adiw	r24, 0x01	; 1
 bb4:	f9 01       	movw	r30, r18
 bb6:	24 91       	lpm	r18, Z+
 bb8:	20 93 ed 00 	sts	0x00ED, r18
 bbc:	4f 5f       	subi	r20, 0xFF	; 255
 bbe:	45 30       	cpi	r20, 0x05	; 5
 bc0:	39 f7       	brne	.-50     	; 0xb90 <__vector_12+0x168>
 bc2:	8e e1       	ldi	r24, 0x1E	; 30
 bc4:	41 c0       	rjmp	.+130    	; 0xc48 <__vector_12+0x220>
 bc6:	38 30       	cpi	r19, 0x08	; 8
 bc8:	39 f4       	brne	.+14     	; 0xbd8 <__vector_12+0x1b0>
 bca:	20 38       	cpi	r18, 0x80	; 128
 bcc:	09 f0       	breq	.+2      	; 0xbd0 <__vector_12+0x1a8>
 bce:	41 c0       	rjmp	.+130    	; 0xc52 <__vector_12+0x22a>
 bd0:	69 de       	rcall	.-814    	; 0x8a4 <usb_wait_in_ready>
 bd2:	80 91 43 02 	lds	r24, 0x0243
 bd6:	61 c0       	rjmp	.+194    	; 0xc9a <__vector_12+0x272>
 bd8:	33 23       	and	r19, r19
 bda:	a9 f4       	brne	.+42     	; 0xc06 <__vector_12+0x1de>
 bdc:	29 83       	std	Y+1, r18	; 0x01
 bde:	62 de       	rcall	.-828    	; 0x8a4 <usb_wait_in_ready>
 be0:	29 81       	ldd	r18, Y+1	; 0x01
 be2:	22 38       	cpi	r18, 0x82	; 130
 be4:	51 f4       	brne	.+20     	; 0xbfa <__vector_12+0x1d2>
 be6:	00 93 e9 00 	sts	0x00E9, r16
 bea:	90 91 eb 00 	lds	r25, 0x00EB
 bee:	81 e0       	ldi	r24, 0x01	; 1
 bf0:	95 ff       	sbrs	r25, 5
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	10 92 e9 00 	sts	0x00E9, r1
 bf8:	01 c0       	rjmp	.+2      	; 0xbfc <__vector_12+0x1d4>
 bfa:	80 e0       	ldi	r24, 0x00	; 0
 bfc:	80 93 f1 00 	sts	0x00F1, r24
 c00:	10 92 f1 00 	sts	0x00F1, r1
 c04:	68 c0       	rjmp	.+208    	; 0xcd6 <__vector_12+0x2ae>
 c06:	31 30       	cpi	r19, 0x01	; 1
 c08:	11 f0       	breq	.+4      	; 0xc0e <__vector_12+0x1e6>
 c0a:	33 30       	cpi	r19, 0x03	; 3
 c0c:	11 f5       	brne	.+68     	; 0xc52 <__vector_12+0x22a>
 c0e:	22 30       	cpi	r18, 0x02	; 2
 c10:	01 f5       	brne	.+64     	; 0xc52 <__vector_12+0x22a>
 c12:	c1 14       	cp	r12, r1
 c14:	d1 04       	cpc	r13, r1
 c16:	e9 f4       	brne	.+58     	; 0xc52 <__vector_12+0x22a>
 c18:	40 2f       	mov	r20, r16
 c1a:	4f 77       	andi	r20, 0x7F	; 127
 c1c:	84 2f       	mov	r24, r20
 c1e:	81 50       	subi	r24, 0x01	; 1
 c20:	84 30       	cpi	r24, 0x04	; 4
 c22:	b8 f4       	brcc	.+46     	; 0xc52 <__vector_12+0x22a>
 c24:	8e ef       	ldi	r24, 0xFE	; 254
 c26:	80 93 e8 00 	sts	0x00E8, r24
 c2a:	40 93 e9 00 	sts	0x00E9, r20
 c2e:	33 30       	cpi	r19, 0x03	; 3
 c30:	09 f4       	brne	.+2      	; 0xc34 <__vector_12+0x20c>
 c32:	55 c0       	rjmp	.+170    	; 0xcde <__vector_12+0x2b6>
 c34:	89 e1       	ldi	r24, 0x19	; 25
 c36:	80 93 eb 00 	sts	0x00EB, r24
 c3a:	81 e0       	ldi	r24, 0x01	; 1
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	02 c0       	rjmp	.+4      	; 0xc44 <__vector_12+0x21c>
 c40:	88 0f       	add	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	4a 95       	dec	r20
 c46:	e2 f7       	brpl	.-8      	; 0xc40 <__vector_12+0x218>
 c48:	80 93 ea 00 	sts	0x00EA, r24
 c4c:	10 92 ea 00 	sts	0x00EA, r1
 c50:	49 c0       	rjmp	.+146    	; 0xce4 <__vector_12+0x2bc>
 c52:	01 15       	cp	r16, r1
 c54:	11 05       	cpc	r17, r1
 c56:	09 f0       	breq	.+2      	; 0xc5a <__vector_12+0x232>
 c58:	42 c0       	rjmp	.+132    	; 0xcde <__vector_12+0x2b6>
 c5a:	21 3a       	cpi	r18, 0xA1	; 161
 c5c:	09 f5       	brne	.+66     	; 0xca0 <__vector_12+0x278>
 c5e:	31 30       	cpi	r19, 0x01	; 1
 c60:	89 f4       	brne	.+34     	; 0xc84 <__vector_12+0x25c>
 c62:	20 de       	rcall	.-960    	; 0x8a4 <usb_wait_in_ready>
 c64:	80 91 3b 02 	lds	r24, 0x023B
 c68:	80 93 f1 00 	sts	0x00F1, r24
 c6c:	10 92 f1 00 	sts	0x00F1, r1
 c70:	ec e3       	ldi	r30, 0x3C	; 60
 c72:	f2 e0       	ldi	r31, 0x02	; 2
 c74:	81 91       	ld	r24, Z+
 c76:	80 93 f1 00 	sts	0x00F1, r24
 c7a:	22 e0       	ldi	r18, 0x02	; 2
 c7c:	e2 34       	cpi	r30, 0x42	; 66
 c7e:	f2 07       	cpc	r31, r18
 c80:	c9 f7       	brne	.-14     	; 0xc74 <__vector_12+0x24c>
 c82:	29 c0       	rjmp	.+82     	; 0xcd6 <__vector_12+0x2ae>
 c84:	32 30       	cpi	r19, 0x02	; 2
 c86:	21 f4       	brne	.+8      	; 0xc90 <__vector_12+0x268>
 c88:	0d de       	rcall	.-998    	; 0x8a4 <usb_wait_in_ready>
 c8a:	80 91 2c 02 	lds	r24, 0x022C
 c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__vector_12+0x272>
 c90:	33 30       	cpi	r19, 0x03	; 3
 c92:	29 f5       	brne	.+74     	; 0xcde <__vector_12+0x2b6>
 c94:	07 de       	rcall	.-1010   	; 0x8a4 <usb_wait_in_ready>
 c96:	80 91 2d 02 	lds	r24, 0x022D
 c9a:	80 93 f1 00 	sts	0x00F1, r24
 c9e:	1b c0       	rjmp	.+54     	; 0xcd6 <__vector_12+0x2ae>
 ca0:	21 32       	cpi	r18, 0x21	; 33
 ca2:	e9 f4       	brne	.+58     	; 0xcde <__vector_12+0x2b6>
 ca4:	39 30       	cpi	r19, 0x09	; 9
 ca6:	61 f4       	brne	.+24     	; 0xcc0 <__vector_12+0x298>
 ca8:	80 91 e8 00 	lds	r24, 0x00E8
 cac:	82 ff       	sbrs	r24, 2
 cae:	fc cf       	rjmp	.-8      	; 0xca8 <__vector_12+0x280>
 cb0:	80 91 f1 00 	lds	r24, 0x00F1
 cb4:	80 93 42 02 	sts	0x0242, r24
 cb8:	8b ef       	ldi	r24, 0xFB	; 251
 cba:	80 93 e8 00 	sts	0x00E8, r24
 cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <__vector_12+0x2ae>
 cc0:	3a 30       	cpi	r19, 0x0A	; 10
 cc2:	29 f4       	brne	.+10     	; 0xcce <__vector_12+0x2a6>
 cc4:	d0 92 2c 02 	sts	0x022C, r13
 cc8:	10 92 44 02 	sts	0x0244, r1
 ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <__vector_12+0x2ae>
 cce:	3b 30       	cpi	r19, 0x0B	; 11
 cd0:	31 f4       	brne	.+12     	; 0xcde <__vector_12+0x2b6>
 cd2:	c0 92 2d 02 	sts	0x022D, r12
 cd6:	8e ef       	ldi	r24, 0xFE	; 254
 cd8:	80 93 e8 00 	sts	0x00E8, r24
 cdc:	03 c0       	rjmp	.+6      	; 0xce4 <__vector_12+0x2bc>
 cde:	81 e2       	ldi	r24, 0x21	; 33
 ce0:	80 93 eb 00 	sts	0x00EB, r24
 ce4:	0f 90       	pop	r0
 ce6:	cf 91       	pop	r28
 ce8:	df 91       	pop	r29
 cea:	ff 91       	pop	r31
 cec:	ef 91       	pop	r30
 cee:	bf 91       	pop	r27
 cf0:	af 91       	pop	r26
 cf2:	9f 91       	pop	r25
 cf4:	8f 91       	pop	r24
 cf6:	7f 91       	pop	r23
 cf8:	6f 91       	pop	r22
 cfa:	5f 91       	pop	r21
 cfc:	4f 91       	pop	r20
 cfe:	3f 91       	pop	r19
 d00:	2f 91       	pop	r18
 d02:	1f 91       	pop	r17
 d04:	0f 91       	pop	r16
 d06:	ff 90       	pop	r15
 d08:	ef 90       	pop	r14
 d0a:	df 90       	pop	r13
 d0c:	cf 90       	pop	r12
 d0e:	0f 90       	pop	r0
 d10:	0f be       	out	0x3f, r0	; 63
 d12:	0f 90       	pop	r0
 d14:	1f 90       	pop	r1
 d16:	18 95       	reti

00000d18 <_exit>:
 d18:	f8 94       	cli

00000d1a <__stop_program>:
 d1a:	ff cf       	rjmp	.-2      	; 0xd1a <__stop_program>
