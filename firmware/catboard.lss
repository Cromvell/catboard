
catboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  00000c24  00000cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  008001f2  008001f2  00000daa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000b0  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022c  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f87  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000046b  00000000  00000000  0000272f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ec1  00000000  00000000  00002b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  00003a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000052f  00000000  00000000  00003b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf1  00000000  00000000  000040ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000d1  00000000  00000000  00004c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  00004d6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
   2:	00 00       	nop
   4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	00 00       	nop
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	00 00       	nop
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	00 00       	nop
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
  1e:	00 00       	nop
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	00 00       	nop
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	00 00       	nop
  28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	22 c4       	rjmp	.+2116   	; 0x872 <__vector_11>
  2e:	00 00       	nop
  30:	7f c4       	rjmp	.+2302   	; 0x930 <__vector_12>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
  36:	00 00       	nop
  38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
  46:	00 00       	nop
  48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
  4e:	00 00       	nop
  50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
  52:	00 00       	nop
  54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
  56:	00 00       	nop
  58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
  5e:	00 00       	nop
  60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
  62:	00 00       	nop
  64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
  66:	00 00       	nop
  68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
  6e:	00 00       	nop
  70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
  72:	00 00       	nop

00000074 <descriptor_list>:
  74:	00 01 00 00 ab 00 12 00 02 00 00 bd 00 22 00 22     ............."."
  84:	00 00 df 00 3f 00 21 00 00 cf 00 09 00 03 00 00     ....?.!.........
  94:	1e 01 04 01 03 09 04 22 01 0e 02 03 09 04 32 01     ......."......2.
  a4:	12                                                  .

000000a5 <endpoint_config_table>:
  a5:	00 00 01 c1 06 00                                   ......

000000ab <device_descriptor>:
  ab:	12 01 00 02 00 00 00 20 c0 16 7c 04 00 01 01 02     ....... ..|.....
  bb:	00 01                                               ..

000000bd <config1_descriptor>:
  bd:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  cd:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
  dd:	00 01                                               ..

000000df <keyboard_hid_report_desc>:
  df:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
  ef:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
  ff:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 10f:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

0000011e <string0>:
 11e:	04 03 09 04                                         ....

00000122 <string1>:
 122:	0e 03 69 00 62 00 6e 00 54 00 65 00 6f 00 00 00     ..i.b.n.T.e.o...

00000132 <string2>:
 132:	12 03 43 00 61 00 74 00 62 00 6f 00 61 00 72 00     ..C.a.t.b.o.a.r.
 142:	64 00 00 00                                         d...

00000146 <__ctors_end>:
 146:	11 24       	eor	r1, r1
 148:	1f be       	out	0x3f, r1	; 63
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	d2 e0       	ldi	r29, 0x02	; 2
 14e:	de bf       	out	0x3e, r29	; 62
 150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
 152:	11 e0       	ldi	r17, 0x01	; 1
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	b1 e0       	ldi	r27, 0x01	; 1
 158:	e4 e2       	ldi	r30, 0x24	; 36
 15a:	fc e0       	ldi	r31, 0x0C	; 12
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x10>
 15e:	05 90       	lpm	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	a2 3f       	cpi	r26, 0xF2	; 242
 164:	b1 07       	cpc	r27, r17
 166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0xc>

00000168 <__do_clear_bss>:
 168:	12 e0       	ldi	r17, 0x02	; 2
 16a:	a2 ef       	ldi	r26, 0xF2	; 242
 16c:	b1 e0       	ldi	r27, 0x01	; 1
 16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
 170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
 172:	a6 34       	cpi	r26, 0x46	; 70
 174:	b1 07       	cpc	r27, r17
 176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
 178:	02 d3       	rcall	.+1540   	; 0x77e <main>
 17a:	52 c5       	rjmp	.+2724   	; 0xc20 <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <change_layout>:
		}
	}
}

void change_layout(void) {
	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || mac_mode) { // Press Cmd+Space
 17e:	80 91 f2 01 	lds	r24, 0x01F2
 182:	88 23       	and	r24, r24
 184:	91 f0       	breq	.+36     	; 0x1aa <change_layout+0x2c>
		keyboard_modifier_keys = KEY_GUI;
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	80 93 ff 01 	sts	0x01FF, r24
		keyboard_keys[0] = 0;
 18c:	10 92 00 02 	sts	0x0200, r1
		usb_keyboard_send();
 190:	29 d3       	rcall	.+1618   	; 0x7e4 <usb_keyboard_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	90 e7       	ldi	r25, 0x70	; 112
 196:	a2 e0       	ldi	r26, 0x02	; 2
 198:	81 50       	subi	r24, 0x01	; 1
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	a0 40       	sbci	r26, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <change_layout+0x1a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <change_layout+0x24>
 1a2:	00 00       	nop
		_delay_ms(50);
		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 1a4:	8c e2       	ldi	r24, 0x2C	; 44
 1a6:	68 e0       	ldi	r22, 0x08	; 8
 1a8:	11 c0       	rjmp	.+34     	; 0x1cc <change_layout+0x4e>
	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
		keyboard_modifier_keys = KEY_ALT;
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	80 93 ff 01 	sts	0x01FF, r24
		keyboard_keys[0] = 0;
 1b0:	10 92 00 02 	sts	0x0200, r1
		usb_keyboard_send();
 1b4:	17 d3       	rcall	.+1582   	; 0x7e4 <usb_keyboard_send>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e7       	ldi	r25, 0x70	; 112
 1ba:	a2 e0       	ldi	r26, 0x02	; 2
 1bc:	81 50       	subi	r24, 0x01	; 1
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	a0 40       	sbci	r26, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <change_layout+0x3e>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <change_layout+0x48>
 1c6:	00 00       	nop
		_delay_ms(50);
		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	66 e0       	ldi	r22, 0x06	; 6
 1cc:	45 c3       	rjmp	.+1674   	; 0x858 <usb_keyboard_press>

000001ce <init>:
	}
}

void init(void) {
	// Set for 16 MHz clock
	CLKPR = 0x80; CLKPR = 0;
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	80 93 61 00 	sts	0x0061, r24
 1d4:	10 92 61 00 	sts	0x0061, r1

	// Init ports
	DDRB	= 0x00; DDRC	= 0b11110100;	DDRD	= 0x00;
 1d8:	14 b8       	out	0x04, r1	; 4
 1da:	94 ef       	ldi	r25, 0xF4	; 244
 1dc:	97 b9       	out	0x07, r25	; 7
 1de:	1a b8       	out	0x0a, r1	; 10
	PORTB	= 0xFF; PORTC	= 0b11110100; 	PORTD	= 0xFF;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	98 b9       	out	0x08, r25	; 8
 1e6:	8b b9       	out	0x0b, r24	; 11

	LED_CONFIG;
 1e8:	54 9a       	sbi	0x0a, 4	; 10
	LED_ON;
 1ea:	5c 9a       	sbi	0x0b, 4	; 11
 1ec:	ea e0       	ldi	r30, 0x0A	; 10
 1ee:	f2 e0       	ldi	r31, 0x02	; 2

	for(uint8_t i=0; i<KEYS; i++) {
		pressed[i] = 0;
 1f0:	11 92       	st	Z+, r1
	PORTB	= 0xFF; PORTC	= 0b11110100; 	PORTD	= 0xFF;

	LED_CONFIG;
	LED_ON;

	for(uint8_t i=0; i<KEYS; i++) {
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	e6 34       	cpi	r30, 0x46	; 70
 1f6:	f8 07       	cpc	r31, r24
 1f8:	d9 f7       	brne	.-10     	; 0x1f0 <init+0x22>
		pressed[i] = 0;
	}

	usb_init();
 1fa:	dd d2       	rcall	.+1466   	; 0x7b6 <usb_init>
	LED_OFF;
 1fc:	5c 98       	cbi	0x0b, 4	; 11
	while(!usb_configured());
 1fe:	ef d2       	rcall	.+1502   	; 0x7de <usb_configured>
 200:	88 23       	and	r24, r24
 202:	e9 f3       	breq	.-6      	; 0x1fe <init+0x30>
	LED_ON;
 204:	5c 9a       	sbi	0x0b, 4	; 11
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	93 ed       	ldi	r25, 0xD3	; 211
 20a:	a0 e3       	ldi	r26, 0x30	; 48
 20c:	81 50       	subi	r24, 0x01	; 1
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	a0 40       	sbci	r26, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <init+0x3e>
 214:	00 c0       	rjmp	.+0      	; 0x216 <init+0x48>
 216:	00 00       	nop
	_delay_ms(1000);
	LED_OFF;
 218:	5c 98       	cbi	0x0b, 4	; 11
}
 21a:	08 95       	ret

0000021c <get_code>:
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
	if (key_id<KEYS) { // not 0xFF
 21c:	8c 33       	cpi	r24, 0x3C	; 60
 21e:	18 f5       	brcc	.+70     	; 0x266 <get_code+0x4a>
		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	f9 01       	movw	r30, r18
 226:	e6 5f       	subi	r30, 0xF6	; 246
 228:	fd 4f       	sbci	r31, 0xFD	; 253
 22a:	90 81       	ld	r25, Z
 22c:	91 30       	cpi	r25, 0x01	; 1
 22e:	41 f4       	brne	.+16     	; 0x240 <get_code+0x24>
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 230:	26 58       	subi	r18, 0x86	; 134
 232:	3e 4f       	sbci	r19, 0xFE	; 254
 234:	f9 01       	movw	r30, r18
 236:	80 81       	ld	r24, Z
 238:	18 16       	cp	r1, r24
 23a:	b4 f0       	brlt	.+44     	; 0x268 <get_code+0x4c>
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	08 95       	ret
	if (key_id<KEYS) { // not 0xFF
		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
				key_code = layer_fn[key_id];
			}
		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from layer1
 240:	40 91 3c 01 	lds	r20, 0x013C
 244:	50 91 3d 01 	lds	r21, 0x013D
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	4a 37       	cpi	r20, 0x7A	; 122
 24c:	5f 07       	cpc	r21, r31
 24e:	31 f0       	breq	.+12     	; 0x25c <get_code+0x40>
 250:	92 30       	cpi	r25, 0x02	; 2
 252:	21 f4       	brne	.+8      	; 0x25c <get_code+0x40>
			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 254:	22 5c       	subi	r18, 0xC2	; 194
 256:	3e 4f       	sbci	r19, 0xFE	; 254
 258:	f9 01       	movw	r30, r18
 25a:	03 c0       	rjmp	.+6      	; 0x262 <get_code+0x46>
		} else {
			key_code = layout[key_id];
 25c:	48 0f       	add	r20, r24
 25e:	51 1d       	adc	r21, r1
 260:	fa 01       	movw	r30, r20
 262:	80 81       	ld	r24, Z
 264:	08 95       	ret
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
 266:	80 e0       	ldi	r24, 0x00	; 0
		} else {
			key_code = layout[key_id];
		}
	}
	return key_code;
}
 268:	08 95       	ret

0000026a <send>:
		_delay_ms(50);
		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
	}
}

void send(void) {
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	c9 ee       	ldi	r28, 0xE9	; 233
 274:	d1 e0       	ldi	r29, 0x01	; 1
 276:	00 e0       	ldi	r16, 0x00	; 0
 278:	12 e0       	ldi	r17, 0x02	; 2
	uint8_t i;
	for (i=0; i<6; i++) {
		keyboard_keys[i] = get_code(queue[i]);
 27a:	89 91       	ld	r24, Y+
 27c:	cf df       	rcall	.-98     	; 0x21c <get_code>
 27e:	f8 01       	movw	r30, r16
 280:	81 93       	st	Z+, r24
 282:	8f 01       	movw	r16, r30
	}
}

void send(void) {
	uint8_t i;
	for (i=0; i<6; i++) {
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	cf 3e       	cpi	r28, 0xEF	; 239
 288:	df 07       	cpc	r29, r31
 28a:	b9 f7       	brne	.-18     	; 0x27a <send+0x10>
		keyboard_keys[i] = get_code(queue[i]);
	}
	keyboard_modifier_keys = mod_keys;
 28c:	80 91 f3 01 	lds	r24, 0x01F3
 290:	80 93 ff 01 	sts	0x01FF, r24
	usb_keyboard_send();
 294:	a7 d2       	rcall	.+1358   	; 0x7e4 <usb_keyboard_send>
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <key_release>:
			repeat_time = 0;
		}
	}
}

void key_release(uint8_t key_id) {
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	0f 92       	push	r0
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int8_t pressed_key_id = pressed[key_id];
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	f9 01       	movw	r30, r18
 2b0:	e6 5f       	subi	r30, 0xF6	; 246
 2b2:	fd 4f       	sbci	r31, 0xFD	; 253
 2b4:	40 81       	ld	r20, Z
	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	21 f4       	brne	.+8      	; 0x2c2 <key_release+0x22>
 2ba:	f9 01       	movw	r30, r18
 2bc:	e6 58       	subi	r30, 0x86	; 134
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	06 c0       	rjmp	.+12     	; 0x2ce <key_release+0x2e>
 2c2:	e0 91 3c 01 	lds	r30, 0x013C
 2c6:	f0 91 3d 01 	lds	r31, 0x013D
 2ca:	e2 0f       	add	r30, r18
 2cc:	f3 1f       	adc	r31, r19
 2ce:	90 81       	ld	r25, Z
	pressed[key_id] = 0;
 2d0:	26 5f       	subi	r18, 0xF6	; 246
 2d2:	3d 4f       	sbci	r19, 0xFD	; 253
 2d4:	f9 01       	movw	r30, r18
 2d6:	10 82       	st	Z, r1
	if (key_code>0xF0) { // Catboard keys release
 2d8:	91 3f       	cpi	r25, 0xF1	; 241
 2da:	50 f0       	brcs	.+20     	; 0x2f0 <key_release+0x50>
		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 2dc:	9d 3f       	cpi	r25, 0xFD	; 253
 2de:	09 f0       	breq	.+2      	; 0x2e2 <key_release+0x42>
 2e0:	59 c0       	rjmp	.+178    	; 0x394 <__stack+0x95>
 2e2:	43 30       	cpi	r20, 0x03	; 3
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <key_release+0x48>
 2e6:	56 c0       	rjmp	.+172    	; 0x394 <__stack+0x95>
			mod_keys &= ~(KEY_ALT);
 2e8:	80 91 f3 01 	lds	r24, 0x01F3
 2ec:	8b 7f       	andi	r24, 0xFB	; 251
 2ee:	19 c0       	rjmp	.+50     	; 0x322 <__stack+0x23>
			send();
		}
	} else if (key_code>=0x80) { // Mod keys release
 2f0:	97 ff       	sbrs	r25, 7
 2f2:	1b c0       	rjmp	.+54     	; 0x32a <__stack+0x2b>
		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 2f4:	80 91 f2 01 	lds	r24, 0x01F2
 2f8:	88 23       	and	r24, r24
 2fa:	41 f0       	breq	.+16     	; 0x30c <__stack+0xd>
 2fc:	91 38       	cpi	r25, 0x81	; 129
 2fe:	21 f4       	brne	.+8      	; 0x308 <__stack+0x9>
			mod_keys &= ~KEY_GUI;
 300:	80 91 f3 01 	lds	r24, 0x01F3
 304:	87 7f       	andi	r24, 0xF7	; 247
 306:	0d c0       	rjmp	.+26     	; 0x322 <__stack+0x23>
		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD)) {
 308:	90 39       	cpi	r25, 0x90	; 144
 30a:	11 f0       	breq	.+4      	; 0x310 <__stack+0x11>
 30c:	90 38       	cpi	r25, 0x80	; 128
 30e:	21 f4       	brne	.+8      	; 0x318 <__stack+0x19>
			mod_keys &= ~KEY_RIGHT_GUI;
 310:	80 91 f3 01 	lds	r24, 0x01F3
 314:	8f 77       	andi	r24, 0x7F	; 127
 316:	05 c0       	rjmp	.+10     	; 0x322 <__stack+0x23>
		} else {
			mod_keys &= ~(key_code & 0x7F);
 318:	9f 77       	andi	r25, 0x7F	; 127
 31a:	90 95       	com	r25
 31c:	80 91 f3 01 	lds	r24, 0x01F3
 320:	89 23       	and	r24, r25
 322:	80 93 f3 01 	sts	0x01F3, r24
		}
		send();
 326:	a1 df       	rcall	.-190    	; 0x26a <send>
 328:	35 c0       	rjmp	.+106    	; 0x394 <__stack+0x95>
 32a:	e9 ee       	ldi	r30, 0xE9	; 233
 32c:	f1 e0       	ldi	r31, 0x01	; 1
	if (key_code>0xF0) { // Catboard keys release
		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
			mod_keys &= ~(KEY_ALT);
			send();
		}
	} else if (key_code>=0x80) { // Mod keys release
 32e:	90 e0       	ldi	r25, 0x00	; 0
			mod_keys &= ~(key_code & 0x7F);
		}
		send();
	} else {
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
 330:	21 91       	ld	r18, Z+
 332:	28 17       	cp	r18, r24
 334:	59 f0       	breq	.+22     	; 0x34c <__stack+0x4d>
		} else {
			mod_keys &= ~(key_code & 0x7F);
		}
		send();
	} else {
		for (i=0; i<6; i++) {
 336:	9f 5f       	subi	r25, 0xFF	; 255
 338:	96 30       	cpi	r25, 0x06	; 6
 33a:	d1 f7       	brne	.-12     	; 0x330 <__stack+0x31>
 33c:	07 c0       	rjmp	.+14     	; 0x34c <__stack+0x4d>
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
			queue[i] = queue[i+1];
 33e:	e9 2f       	mov	r30, r25
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	e7 51       	subi	r30, 0x17	; 23
 344:	fe 4f       	sbci	r31, 0xFE	; 254
 346:	21 81       	ldd	r18, Z+1	; 0x01
 348:	20 83       	st	Z, r18
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
 34a:	9f 5f       	subi	r25, 0xFF	; 255
 34c:	96 30       	cpi	r25, 0x06	; 6
 34e:	b8 f3       	brcs	.-18     	; 0x33e <__stack+0x3f>
			queue[i] = queue[i+1];
		}
		send();
 350:	89 83       	std	Y+1, r24	; 0x01
 352:	8b df       	rcall	.-234    	; 0x26a <send>
		// Autorepeat
		if (last_key==key_id) { // realise time
 354:	90 91 f6 01 	lds	r25, 0x01F6
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	98 17       	cp	r25, r24
 35c:	59 f4       	brne	.+22     	; 0x374 <__stack+0x75>
			press_time2 = 0;
 35e:	10 92 fa 01 	sts	0x01FA, r1
 362:	10 92 f9 01 	sts	0x01F9, r1
			release_time = 1;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	90 93 fc 01 	sts	0x01FC, r25
 36e:	80 93 fb 01 	sts	0x01FB, r24
 372:	0c c0       	rjmp	.+24     	; 0x38c <__stack+0x8d>
			repeat_time = 0;
		} else { // reset
			press_time = 0;
 374:	10 92 f8 01 	sts	0x01F8, r1
 378:	10 92 f7 01 	sts	0x01F7, r1
			press_time2 = 0;
 37c:	10 92 fa 01 	sts	0x01FA, r1
 380:	10 92 f9 01 	sts	0x01F9, r1
			release_time = 0;
 384:	10 92 fc 01 	sts	0x01FC, r1
 388:	10 92 fb 01 	sts	0x01FB, r1
			repeat_time = 0;
 38c:	10 92 fe 01 	sts	0x01FE, r1
 390:	10 92 fd 01 	sts	0x01FD, r1
		}
	}
}
 394:	0f 90       	pop	r0
 396:	cf 91       	pop	r28
 398:	df 91       	pop	r29
 39a:	08 95       	ret

0000039c <key_press>:
			press_time = 0;
		}
	}	
}

void key_press(uint8_t key_id) {
 39c:	df 93       	push	r29
 39e:	cf 93       	push	r28
 3a0:	0f 92       	push	r0
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGHT_GUI));
 3a6:	40 91 f3 01 	lds	r20, 0x01F3
	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	90 91 2d 02 	lds	r25, 0x022D
 3b2:	99 23       	and	r25, r25
 3b4:	29 f4       	brne	.+10     	; 0x3c0 <key_press+0x24>
	}	
}

void key_press(uint8_t key_id) {
	uint8_t i;
	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGHT_GUI));
 3b6:	94 2f       	mov	r25, r20
 3b8:	9d 7d       	andi	r25, 0xDD	; 221
	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 3ba:	21 f0       	breq	.+8      	; 0x3c4 <key_press+0x28>
 3bc:	52 e0       	ldi	r21, 0x02	; 2
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <key_press+0x2a>
 3c0:	51 e0       	ldi	r21, 0x01	; 1
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <key_press+0x2a>
 3c4:	5f ef       	ldi	r21, 0xFF	; 255
 3c6:	f9 01       	movw	r30, r18
 3c8:	e6 5f       	subi	r30, 0xF6	; 246
 3ca:	fd 4f       	sbci	r31, 0xFD	; 253
 3cc:	50 83       	st	Z, r21
	
	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 3ce:	51 30       	cpi	r21, 0x01	; 1
 3d0:	21 f4       	brne	.+8      	; 0x3da <key_press+0x3e>
 3d2:	f9 01       	movw	r30, r18
 3d4:	e6 58       	subi	r30, 0x86	; 134
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	06 c0       	rjmp	.+12     	; 0x3e6 <key_press+0x4a>
 3da:	e0 91 3c 01 	lds	r30, 0x013C
 3de:	f0 91 3d 01 	lds	r31, 0x013D
 3e2:	e8 0f       	add	r30, r24
 3e4:	f1 1d       	adc	r31, r1
 3e6:	90 81       	ld	r25, Z
	
	if (key_code>0xF0) { // Catboard keys
 3e8:	91 3f       	cpi	r25, 0xF1	; 241
 3ea:	08 f4       	brcc	.+2      	; 0x3ee <key_press+0x52>
 3ec:	82 c0       	rjmp	.+260    	; 0x4f2 <key_press+0x156>
		if (key_code==KEY_ALT_TAB) { // AltTab press
 3ee:	9d 3f       	cpi	r25, 0xFD	; 253
 3f0:	21 f5       	brne	.+72     	; 0x43a <key_press+0x9e>
			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 3f2:	51 30       	cpi	r21, 0x01	; 1
 3f4:	21 f4       	brne	.+8      	; 0x3fe <key_press+0x62>
				usb_keyboard_press(KEY_TAB, KEY_ALT);
 3f6:	8b e2       	ldi	r24, 0x2B	; 43
 3f8:	64 e0       	ldi	r22, 0x04	; 4
 3fa:	2e d2       	rcall	.+1116   	; 0x858 <usb_keyboard_press>
 3fc:	cb c0       	rjmp	.+406    	; 0x594 <key_press+0x1f8>
			} else { // Alt press, Tab press and release
				if (! (mod_keys & (KEY_ALT|KEY_RIGHT_ALT))) {
 3fe:	84 2f       	mov	r24, r20
 400:	84 74       	andi	r24, 0x44	; 68
 402:	21 f4       	brne	.+8      	; 0x40c <key_press+0x70>
					mod_keys |= (KEY_ALT);
 404:	44 60       	ori	r20, 0x04	; 4
 406:	40 93 f3 01 	sts	0x01F3, r20
 40a:	05 c0       	rjmp	.+10     	; 0x416 <key_press+0x7a>
				} else {
					pressed[key_id] = KEY_PRESSED_ALT;
 40c:	26 5f       	subi	r18, 0xF6	; 246
 40e:	3d 4f       	sbci	r19, 0xFD	; 253
 410:	83 e0       	ldi	r24, 0x03	; 3
 412:	d9 01       	movw	r26, r18
 414:	8c 93       	st	X, r24
				}
				keyboard_modifier_keys = mod_keys;
 416:	80 91 f3 01 	lds	r24, 0x01F3
 41a:	80 93 ff 01 	sts	0x01FF, r24
				keyboard_keys[0] = KEY_TAB;
 41e:	8b e2       	ldi	r24, 0x2B	; 43
 420:	80 93 00 02 	sts	0x0200, r24
				usb_keyboard_send();
 424:	df d1       	rcall	.+958    	; 0x7e4 <usb_keyboard_send>
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	90 e7       	ldi	r25, 0x70	; 112
 42a:	a2 e0       	ldi	r26, 0x02	; 2
 42c:	81 50       	subi	r24, 0x01	; 1
 42e:	90 40       	sbci	r25, 0x00	; 0
 430:	a0 40       	sbci	r26, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <key_press+0x90>
 434:	00 c0       	rjmp	.+0      	; 0x436 <key_press+0x9a>
 436:	00 00       	nop
 438:	90 c0       	rjmp	.+288    	; 0x55a <key_press+0x1be>
				_delay_ms(50);
				send();
			}
		} else if (key_code==KEY_FN_LOCK) { // FnLock
 43a:	9e 3f       	cpi	r25, 0xFE	; 254
 43c:	f1 f4       	brne	.+60     	; 0x47a <key_press+0xde>
			if (prev_layer) { // FnLock Off
 43e:	80 91 f4 01 	lds	r24, 0x01F4
 442:	90 91 f5 01 	lds	r25, 0x01F5
 446:	00 97       	sbiw	r24, 0x00	; 0
 448:	49 f0       	breq	.+18     	; 0x45c <key_press+0xc0>
				layout = prev_layer;
 44a:	90 93 3d 01 	sts	0x013D, r25
 44e:	80 93 3c 01 	sts	0x013C, r24
				prev_layer = 0;
 452:	10 92 f5 01 	sts	0x01F5, r1
 456:	10 92 f4 01 	sts	0x01F4, r1
 45a:	1c c0       	rjmp	.+56     	; 0x494 <key_press+0xf8>
				LED_OFF;
			} else { // FnLock On
				prev_layer = layout;
 45c:	80 91 3c 01 	lds	r24, 0x013C
 460:	90 91 3d 01 	lds	r25, 0x013D
 464:	90 93 f5 01 	sts	0x01F5, r25
 468:	80 93 f4 01 	sts	0x01F4, r24
				layout = layer_fn;
 46c:	8a e7       	ldi	r24, 0x7A	; 122
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	90 93 3d 01 	sts	0x013D, r25
 474:	80 93 3c 01 	sts	0x013C, r24
 478:	0b c0       	rjmp	.+22     	; 0x490 <key_press+0xf4>
				LED_ON;
			}
		} else if (key_code==KEY_MAC_MODE) { // Mac mode
 47a:	9c 3f       	cpi	r25, 0xFC	; 252
 47c:	69 f4       	brne	.+26     	; 0x498 <key_press+0xfc>
			mac_mode = ! mac_mode;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 91 f2 01 	lds	r25, 0x01F2
 484:	91 11       	cpse	r25, r1
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	80 93 f2 01 	sts	0x01F2, r24
			if (mac_mode) {
 48c:	88 23       	and	r24, r24
 48e:	11 f0       	breq	.+4      	; 0x494 <key_press+0xf8>
				LED_ON;
 490:	5c 9a       	sbi	0x0b, 4	; 11
 492:	80 c0       	rjmp	.+256    	; 0x594 <key_press+0x1f8>
			} else {
				LED_OFF;
 494:	5c 98       	cbi	0x0b, 4	; 11
 496:	7e c0       	rjmp	.+252    	; 0x594 <key_press+0x1f8>
			}
		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 498:	91 3f       	cpi	r25, 0xF1	; 241
 49a:	79 f4       	brne	.+30     	; 0x4ba <key_press+0x11e>
			if (layout!=layer1) {
 49c:	20 91 3c 01 	lds	r18, 0x013C
 4a0:	30 91 3d 01 	lds	r19, 0x013D
 4a4:	8e e3       	ldi	r24, 0x3E	; 62
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	28 17       	cp	r18, r24
 4aa:	39 07       	cpc	r19, r25
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <key_press+0x114>
 4ae:	72 c0       	rjmp	.+228    	; 0x594 <key_press+0x1f8>
				if (layout == layer_fn) {
 4b0:	b1 e0       	ldi	r27, 0x01	; 1
 4b2:	2a 37       	cpi	r18, 0x7A	; 122
 4b4:	3b 07       	cpc	r19, r27
 4b6:	b9 f4       	brne	.+46     	; 0x4e6 <key_press+0x14a>
 4b8:	11 c0       	rjmp	.+34     	; 0x4dc <key_press+0x140>
				} else {
					layout = layer1;
				}
				change_layout();
			}
		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 4ba:	92 3f       	cpi	r25, 0xF2	; 242
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <key_press+0x124>
 4be:	6a c0       	rjmp	.+212    	; 0x594 <key_press+0x1f8>
			if (layout!=layer2) {
 4c0:	20 91 3c 01 	lds	r18, 0x013C
 4c4:	30 91 3d 01 	lds	r19, 0x013D
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	28 17       	cp	r18, r24
 4ce:	39 07       	cpc	r19, r25
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <key_press+0x138>
 4d2:	60 c0       	rjmp	.+192    	; 0x594 <key_press+0x1f8>
				if (layout == layer_fn) {
 4d4:	f1 e0       	ldi	r31, 0x01	; 1
 4d6:	2a 37       	cpi	r18, 0x7A	; 122
 4d8:	3f 07       	cpc	r19, r31
 4da:	29 f4       	brne	.+10     	; 0x4e6 <key_press+0x14a>
					prev_layer = layer2;
 4dc:	90 93 f5 01 	sts	0x01F5, r25
 4e0:	80 93 f4 01 	sts	0x01F4, r24
 4e4:	04 c0       	rjmp	.+8      	; 0x4ee <key_press+0x152>
				} else {
					layout = layer2;	
 4e6:	90 93 3d 01 	sts	0x013D, r25
 4ea:	80 93 3c 01 	sts	0x013C, r24
				}
				change_layout();
 4ee:	47 de       	rcall	.-882    	; 0x17e <change_layout>
 4f0:	51 c0       	rjmp	.+162    	; 0x594 <key_press+0x1f8>
			}
		}
	} else if (key_code>=0x80) { // Mod keys
 4f2:	97 fd       	sbrc	r25, 7
 4f4:	1e c0       	rjmp	.+60     	; 0x532 <key_press+0x196>
		} else {
			mod_keys |= (key_code & 0x7F);
		}
		send();
	} else {
		for(i=5; i>0; i--) queue[i] = queue[i-1];
 4f6:	90 91 ed 01 	lds	r25, 0x01ED
 4fa:	90 93 ee 01 	sts	0x01EE, r25
 4fe:	90 91 ec 01 	lds	r25, 0x01EC
 502:	90 93 ed 01 	sts	0x01ED, r25
 506:	90 91 eb 01 	lds	r25, 0x01EB
 50a:	90 93 ec 01 	sts	0x01EC, r25
 50e:	90 91 ea 01 	lds	r25, 0x01EA
 512:	90 93 eb 01 	sts	0x01EB, r25
 516:	90 91 e9 01 	lds	r25, 0x01E9
 51a:	90 93 ea 01 	sts	0x01EA, r25
		queue[0] = key_id;
 51e:	80 93 e9 01 	sts	0x01E9, r24
		send();
 522:	89 83       	std	Y+1, r24	; 0x01
 524:	a2 de       	rcall	.-700    	; 0x26a <send>
		// Autorepeat
		if (last_key==key_id) { // calc press2
 526:	90 91 f6 01 	lds	r25, 0x01F6
 52a:	89 81       	ldd	r24, Y+1	; 0x01
 52c:	98 17       	cp	r25, r24
 52e:	f1 f4       	brne	.+60     	; 0x56c <key_press+0x1d0>
 530:	16 c0       	rjmp	.+44     	; 0x55e <key_press+0x1c2>
				}
				change_layout();
			}
		}
	} else if (key_code>=0x80) { // Mod keys
		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 532:	80 91 f2 01 	lds	r24, 0x01F2
 536:	88 23       	and	r24, r24
 538:	31 f0       	breq	.+12     	; 0x546 <key_press+0x1aa>
 53a:	91 38       	cpi	r25, 0x81	; 129
 53c:	11 f4       	brne	.+4      	; 0x542 <key_press+0x1a6>
			mod_keys |= KEY_GUI;
 53e:	48 60       	ori	r20, 0x08	; 8
 540:	05 c0       	rjmp	.+10     	; 0x54c <key_press+0x1b0>
		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD)) {
 542:	90 39       	cpi	r25, 0x90	; 144
 544:	11 f0       	breq	.+4      	; 0x54a <key_press+0x1ae>
 546:	90 38       	cpi	r25, 0x80	; 128
 548:	21 f4       	brne	.+8      	; 0x552 <key_press+0x1b6>
			mod_keys |= KEY_RIGHT_GUI;
 54a:	40 68       	ori	r20, 0x80	; 128
 54c:	40 93 f3 01 	sts	0x01F3, r20
 550:	04 c0       	rjmp	.+8      	; 0x55a <key_press+0x1be>
		} else {
			mod_keys |= (key_code & 0x7F);
 552:	9f 77       	andi	r25, 0x7F	; 127
 554:	94 2b       	or	r25, r20
 556:	90 93 f3 01 	sts	0x01F3, r25
		}
		send();
 55a:	87 de       	rcall	.-754    	; 0x26a <send>
 55c:	1b c0       	rjmp	.+54     	; 0x594 <key_press+0x1f8>
		for(i=5; i>0; i--) queue[i] = queue[i-1];
		queue[0] = key_id;
		send();
		// Autorepeat
		if (last_key==key_id) { // calc press2
			press_time2 = 1;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	90 93 fa 01 	sts	0x01FA, r25
 566:	80 93 f9 01 	sts	0x01F9, r24
 56a:	10 c0       	rjmp	.+32     	; 0x58c <key_press+0x1f0>
			repeat_time = 0;
		} else { // calc press1
			last_key = key_id;
 56c:	80 93 f6 01 	sts	0x01F6, r24
			press_time = 1;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	90 93 f8 01 	sts	0x01F8, r25
 578:	80 93 f7 01 	sts	0x01F7, r24
			press_time2 = 0;
 57c:	10 92 fa 01 	sts	0x01FA, r1
 580:	10 92 f9 01 	sts	0x01F9, r1
			release_time = 0;
 584:	10 92 fc 01 	sts	0x01FC, r1
 588:	10 92 fb 01 	sts	0x01FB, r1
			repeat_time = 0;
 58c:	10 92 fe 01 	sts	0x01FE, r1
 590:	10 92 fd 01 	sts	0x01FD, r1
		}
	}
}
 594:	0f 90       	pop	r0
 596:	cf 91       	pop	r28
 598:	df 91       	pop	r29
 59a:	08 95       	ret

0000059c <repeat_tick>:
	repeat_tick();
	_delay_ms(5);
}

void repeat_tick(void) {
	if (repeat_time) { // repeat pause
 59c:	80 91 fd 01 	lds	r24, 0x01FD
 5a0:	90 91 fe 01 	lds	r25, 0x01FE
 5a4:	00 97       	sbiw	r24, 0x00	; 0
 5a6:	19 f1       	breq	.+70     	; 0x5ee <repeat_tick+0x52>
		if (repeat_time<(release_time>>2)) {
 5a8:	20 91 fb 01 	lds	r18, 0x01FB
 5ac:	30 91 fc 01 	lds	r19, 0x01FC
 5b0:	36 95       	lsr	r19
 5b2:	27 95       	ror	r18
 5b4:	36 95       	lsr	r19
 5b6:	27 95       	ror	r18
 5b8:	82 17       	cp	r24, r18
 5ba:	93 07       	cpc	r25, r19
 5bc:	10 f4       	brcc	.+4      	; 0x5c2 <repeat_tick+0x26>
			repeat_time++;
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	36 c0       	rjmp	.+108    	; 0x62e <repeat_tick+0x92>
		} else { // repeat press
			repeat_time = 1;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	90 93 fe 01 	sts	0x01FE, r25
 5ca:	80 93 fd 01 	sts	0x01FD, r24

			keyboard_modifier_keys = mod_keys;
 5ce:	80 91 f3 01 	lds	r24, 0x01F3
 5d2:	80 93 ff 01 	sts	0x01FF, r24
			keyboard_keys[0] = get_code(last_key);
 5d6:	80 91 f6 01 	lds	r24, 0x01F6
 5da:	20 de       	rcall	.-960    	; 0x21c <get_code>
 5dc:	80 93 00 02 	sts	0x0200, r24
			if (! usb_keyboard_send()) { // repeat release
 5e0:	01 d1       	rcall	.+514    	; 0x7e4 <usb_keyboard_send>
 5e2:	88 23       	and	r24, r24
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <repeat_tick+0x4c>
 5e6:	5c c0       	rjmp	.+184    	; 0x6a0 <repeat_tick+0x104>
				keyboard_keys[0] = 0;
 5e8:	10 92 00 02 	sts	0x0200, r1
				usb_keyboard_send();
 5ec:	fb c0       	rjmp	.+502    	; 0x7e4 <usb_keyboard_send>
			}
		}
	} else if (press_time2) { // press2 pause
 5ee:	80 91 f9 01 	lds	r24, 0x01F9
 5f2:	90 91 fa 01 	lds	r25, 0x01FA
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	f9 f0       	breq	.+62     	; 0x638 <repeat_tick+0x9c>
		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 5fa:	40 91 f7 01 	lds	r20, 0x01F7
 5fe:	50 91 f8 01 	lds	r21, 0x01F8
 602:	20 91 2d 02 	lds	r18, 0x022D
 606:	22 23       	and	r18, r18
 608:	19 f0       	breq	.+6      	; 0x610 <repeat_tick+0x74>
 60a:	25 e0       	ldi	r18, 0x05	; 5
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <repeat_tick+0x78>
 610:	2e e1       	ldi	r18, 0x1E	; 30
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	24 0f       	add	r18, r20
 616:	35 1f       	adc	r19, r21
 618:	82 17       	cp	r24, r18
 61a:	93 07       	cpc	r25, r19
 61c:	30 f4       	brcc	.+12     	; 0x62a <repeat_tick+0x8e>
			press_time2++;
 61e:	01 96       	adiw	r24, 0x01	; 1
 620:	90 93 fa 01 	sts	0x01FA, r25
 624:	80 93 f9 01 	sts	0x01F9, r24
 628:	08 95       	ret
		} else {
			repeat_time = 1;
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	90 93 fe 01 	sts	0x01FE, r25
 632:	80 93 fd 01 	sts	0x01FD, r24
 636:	08 95       	ret
		}
	} else if (release_time) { // release pause
 638:	20 91 fb 01 	lds	r18, 0x01FB
 63c:	30 91 fc 01 	lds	r19, 0x01FC
 640:	80 91 f7 01 	lds	r24, 0x01F7
 644:	90 91 f8 01 	lds	r25, 0x01F8
 648:	21 15       	cp	r18, r1
 64a:	31 05       	cpc	r19, r1
 64c:	d1 f0       	breq	.+52     	; 0x682 <repeat_tick+0xe6>
		if (release_time<(press_time+50)) {
 64e:	c2 96       	adiw	r24, 0x32	; 50
 650:	28 17       	cp	r18, r24
 652:	39 07       	cpc	r19, r25
 654:	38 f4       	brcc	.+14     	; 0x664 <repeat_tick+0xc8>
			release_time++;
 656:	2f 5f       	subi	r18, 0xFF	; 255
 658:	3f 4f       	sbci	r19, 0xFF	; 255
 65a:	30 93 fc 01 	sts	0x01FC, r19
 65e:	20 93 fb 01 	sts	0x01FB, r18
 662:	08 95       	ret
		} else {
			last_key = 0;
 664:	10 92 f6 01 	sts	0x01F6, r1
			release_time = 0;
 668:	10 92 fc 01 	sts	0x01FC, r1
 66c:	10 92 fb 01 	sts	0x01FB, r1
			press_time = 0;
 670:	10 92 f8 01 	sts	0x01F8, r1
 674:	10 92 f7 01 	sts	0x01F7, r1
			press_time2 = 0;
 678:	10 92 fa 01 	sts	0x01FA, r1
 67c:	10 92 f9 01 	sts	0x01F9, r1
 680:	08 95       	ret
			release_time = 0;
		}
	} else if (press_time) { // press1 pause
 682:	00 97       	sbiw	r24, 0x00	; 0
 684:	69 f0       	breq	.+26     	; 0x6a0 <repeat_tick+0x104>
		if (press_time<250) {
 686:	8a 3f       	cpi	r24, 0xFA	; 250
 688:	91 05       	cpc	r25, r1
 68a:	30 f4       	brcc	.+12     	; 0x698 <repeat_tick+0xfc>
			press_time++;
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	90 93 f8 01 	sts	0x01F8, r25
 692:	80 93 f7 01 	sts	0x01F7, r24
 696:	08 95       	ret
		} else {
			press_time = 0;
 698:	10 92 f8 01 	sts	0x01F8, r1
 69c:	10 92 f7 01 	sts	0x01F7, r1
 6a0:	08 95       	ret

000006a2 <poll>:
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 6a2:	8f 92       	push	r8
 6a4:	9f 92       	push	r9
 6a6:	af 92       	push	r10
 6a8:	bf 92       	push	r11
 6aa:	cf 92       	push	r12
 6ac:	df 92       	push	r13
 6ae:	ef 92       	push	r14
 6b0:	ff 92       	push	r15
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	06 eb       	ldi	r16, 0xB6	; 182
 6bc:	11 e0       	ldi	r17, 0x01	; 1
 6be:	c0 ec       	ldi	r28, 0xC0	; 192
 6c0:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 6c2:	99 24       	eor	r9, r9
		*row_port[row] &= ~row_bit[row];
 6c4:	d8 01       	movw	r26, r16
 6c6:	ed 91       	ld	r30, X+
 6c8:	fc 91       	ld	r31, X
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 6ca:	5e 01       	movw	r10, r28
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
 6cc:	98 81       	ld	r25, Y
 6ce:	90 95       	com	r25
 6d0:	80 81       	ld	r24, Z
 6d2:	89 23       	and	r24, r25
 6d4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d6:	b5 e0       	ldi	r27, 0x05	; 5
 6d8:	ba 95       	dec	r27
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <poll+0x36>
 6dc:	00 00       	nop
 6de:	65 ec       	ldi	r22, 0xC5	; 197
 6e0:	e6 2e       	mov	r14, r22
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	f6 2e       	mov	r15, r22
 6e6:	5d ed       	ldi	r21, 0xDD	; 221
 6e8:	c5 2e       	mov	r12, r21
 6ea:	51 e0       	ldi	r21, 0x01	; 1
 6ec:	d5 2e       	mov	r13, r21
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 6ee:	89 2c       	mov	r8, r9
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
			key_id = col*ROWS+row;
			if (! (*col_pin[col] & col_bit[col])) { // press key
 6f0:	d7 01       	movw	r26, r14
 6f2:	ed 91       	ld	r30, X+
 6f4:	fd 91       	ld	r31, X+
 6f6:	7d 01       	movw	r14, r26
 6f8:	d6 01       	movw	r26, r12
 6fa:	8d 91       	ld	r24, X+
 6fc:	6d 01       	movw	r12, r26
 6fe:	90 81       	ld	r25, Z
 700:	89 23       	and	r24, r25
 702:	28 2d       	mov	r18, r8
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	49 f4       	brne	.+18     	; 0x71a <poll+0x78>
				if (! pressed[key_id]) {
 708:	26 5f       	subi	r18, 0xF6	; 246
 70a:	3d 4f       	sbci	r19, 0xFD	; 253
 70c:	f9 01       	movw	r30, r18
 70e:	80 81       	ld	r24, Z
 710:	88 23       	and	r24, r24
 712:	59 f4       	brne	.+22     	; 0x72a <poll+0x88>
					key_press(key_id);
 714:	88 2d       	mov	r24, r8
 716:	42 de       	rcall	.-892    	; 0x39c <key_press>
 718:	08 c0       	rjmp	.+16     	; 0x72a <poll+0x88>
				}
			} else if (pressed[key_id]) { // release key
 71a:	26 5f       	subi	r18, 0xF6	; 246
 71c:	3d 4f       	sbci	r19, 0xFD	; 253
 71e:	d9 01       	movw	r26, r18
 720:	8c 91       	ld	r24, X
 722:	88 23       	and	r24, r24
 724:	11 f0       	breq	.+4      	; 0x72a <poll+0x88>
				key_release(key_id);
 726:	88 2d       	mov	r24, r8
 728:	bb dd       	rcall	.-1162   	; 0x2a0 <key_release>
 72a:	b5 e0       	ldi	r27, 0x05	; 5
 72c:	8b 0e       	add	r8, r27
void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
 72e:	ed ed       	ldi	r30, 0xDD	; 221
 730:	ee 16       	cp	r14, r30
 732:	e1 e0       	ldi	r30, 0x01	; 1
 734:	fe 06       	cpc	r15, r30
 736:	e1 f6       	brne	.-72     	; 0x6f0 <poll+0x4e>
				}
			} else if (pressed[key_id]) { // release key
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
 738:	d8 01       	movw	r26, r16
 73a:	ed 91       	ld	r30, X+
 73c:	fd 91       	ld	r31, X+
 73e:	8d 01       	movw	r16, r26
 740:	21 96       	adiw	r28, 0x01	; 1
 742:	80 81       	ld	r24, Z
 744:	d5 01       	movw	r26, r10
 746:	9c 91       	ld	r25, X
 748:	89 2b       	or	r24, r25
 74a:	80 83       	st	Z, r24
	LED_OFF;
}

void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 74c:	93 94       	inc	r9
 74e:	b9 2d       	mov	r27, r9
 750:	b5 30       	cpi	r27, 0x05	; 5
 752:	09 f0       	breq	.+2      	; 0x756 <poll+0xb4>
 754:	b7 cf       	rjmp	.-146    	; 0x6c4 <poll+0x22>
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
	}
	repeat_tick();
 756:	22 df       	rcall	.-444    	; 0x59c <repeat_tick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 758:	ef e1       	ldi	r30, 0x1F	; 31
 75a:	fe e4       	ldi	r31, 0x4E	; 78
 75c:	31 97       	sbiw	r30, 0x01	; 1
 75e:	f1 f7       	brne	.-4      	; 0x75c <poll+0xba>
 760:	00 c0       	rjmp	.+0      	; 0x762 <poll+0xc0>
 762:	00 00       	nop
	_delay_ms(5);
}
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	ff 90       	pop	r15
 76e:	ef 90       	pop	r14
 770:	df 90       	pop	r13
 772:	cf 90       	pop	r12
 774:	bf 90       	pop	r11
 776:	af 90       	pop	r10
 778:	9f 90       	pop	r9
 77a:	8f 90       	pop	r8
 77c:	08 95       	ret

0000077e <main>:
void key_release(uint8_t key_id);
uint8_t get_code(uint8_t key_id);

int main(void) {
	// Disable watchdog if enabled by bootloader/fuses
	MCUSR &= ~(1 << WDRF);
 77e:	84 b7       	in	r24, 0x34	; 52
 780:	87 7f       	andi	r24, 0xF7	; 247
 782:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 784:	88 e1       	ldi	r24, 0x18	; 24
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	80 93 60 00 	sts	0x0060, r24
 78e:	10 92 60 00 	sts	0x0060, r1
 792:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	80 e8       	ldi	r24, 0x80	; 128
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	80 93 61 00 	sts	0x0061, r24
 7a0:	90 93 61 00 	sts	0x0061, r25
 7a4:	0f be       	out	0x3f, r0	; 63

	// Disable clock division
	clock_prescale_set(clock_div_1);

	init();
 7a6:	13 dd       	rcall	.-1498   	; 0x1ce <init>
	for(;;) {
		poll();
 7a8:	7c df       	rcall	.-264    	; 0x6a2 <poll>
 7aa:	fe cf       	rjmp	.-4      	; 0x7a8 <main+0x2a>

000007ac <usb_wait_in_ready>:
 7ac:	80 91 e8 00 	lds	r24, 0x00E8
 7b0:	80 ff       	sbrs	r24, 0
 7b2:	fc cf       	rjmp	.-8      	; 0x7ac <usb_wait_in_ready>
 7b4:	08 95       	ret

000007b6 <usb_init>:
 7b6:	80 ea       	ldi	r24, 0xA0	; 160
 7b8:	80 93 d8 00 	sts	0x00D8, r24
 7bc:	86 e0       	ldi	r24, 0x06	; 6
 7be:	89 bd       	out	0x29, r24	; 41
 7c0:	09 b4       	in	r0, 0x29	; 41
 7c2:	00 fe       	sbrs	r0, 0
 7c4:	fd cf       	rjmp	.-6      	; 0x7c0 <usb_init+0xa>
 7c6:	80 e8       	ldi	r24, 0x80	; 128
 7c8:	80 93 d8 00 	sts	0x00D8, r24
 7cc:	10 92 e0 00 	sts	0x00E0, r1
 7d0:	10 92 07 02 	sts	0x0207, r1
 7d4:	8c e0       	ldi	r24, 0x0C	; 12
 7d6:	80 93 e2 00 	sts	0x00E2, r24
 7da:	78 94       	sei
 7dc:	08 95       	ret

000007de <usb_configured>:
 7de:	80 91 07 02 	lds	r24, 0x0207
 7e2:	08 95       	ret

000007e4 <usb_keyboard_send>:
 7e4:	80 91 07 02 	lds	r24, 0x0207
 7e8:	88 23       	and	r24, r24
 7ea:	91 f1       	breq	.+100    	; 0x850 <usb_keyboard_send+0x6c>
 7ec:	8f b7       	in	r24, 0x3f	; 63
 7ee:	f8 94       	cli
 7f0:	93 e0       	ldi	r25, 0x03	; 3
 7f2:	90 93 e9 00 	sts	0x00E9, r25
 7f6:	90 91 e4 00 	lds	r25, 0x00E4
 7fa:	9e 5c       	subi	r25, 0xCE	; 206
 7fc:	23 e0       	ldi	r18, 0x03	; 3
 7fe:	30 91 e8 00 	lds	r19, 0x00E8
 802:	35 fd       	sbrc	r19, 5
 804:	0e c0       	rjmp	.+28     	; 0x822 <usb_keyboard_send+0x3e>
 806:	8f bf       	out	0x3f, r24	; 63
 808:	80 91 07 02 	lds	r24, 0x0207
 80c:	88 23       	and	r24, r24
 80e:	01 f1       	breq	.+64     	; 0x850 <usb_keyboard_send+0x6c>
 810:	80 91 e4 00 	lds	r24, 0x00E4
 814:	89 17       	cp	r24, r25
 816:	f1 f0       	breq	.+60     	; 0x854 <usb_keyboard_send+0x70>
 818:	8f b7       	in	r24, 0x3f	; 63
 81a:	f8 94       	cli
 81c:	20 93 e9 00 	sts	0x00E9, r18
 820:	ee cf       	rjmp	.-36     	; 0x7fe <usb_keyboard_send+0x1a>
 822:	90 91 ff 01 	lds	r25, 0x01FF
 826:	90 93 f1 00 	sts	0x00F1, r25
 82a:	10 92 f1 00 	sts	0x00F1, r1
 82e:	e0 e0       	ldi	r30, 0x00	; 0
 830:	f2 e0       	ldi	r31, 0x02	; 2
 832:	91 91       	ld	r25, Z+
 834:	90 93 f1 00 	sts	0x00F1, r25
 838:	92 e0       	ldi	r25, 0x02	; 2
 83a:	e6 30       	cpi	r30, 0x06	; 6
 83c:	f9 07       	cpc	r31, r25
 83e:	c9 f7       	brne	.-14     	; 0x832 <usb_keyboard_send+0x4e>
 840:	9a e3       	ldi	r25, 0x3A	; 58
 842:	90 93 e8 00 	sts	0x00E8, r25
 846:	10 92 08 02 	sts	0x0208, r1
 84a:	8f bf       	out	0x3f, r24	; 63
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	08 95       	ret
 850:	8f ef       	ldi	r24, 0xFF	; 255
 852:	08 95       	ret
 854:	8f ef       	ldi	r24, 0xFF	; 255
 856:	08 95       	ret

00000858 <usb_keyboard_press>:
 858:	60 93 ff 01 	sts	0x01FF, r22
 85c:	80 93 00 02 	sts	0x0200, r24
 860:	c1 df       	rcall	.-126    	; 0x7e4 <usb_keyboard_send>
 862:	88 23       	and	r24, r24
 864:	29 f4       	brne	.+10     	; 0x870 <usb_keyboard_press+0x18>
 866:	10 92 ff 01 	sts	0x01FF, r1
 86a:	10 92 00 02 	sts	0x0200, r1
 86e:	ba cf       	rjmp	.-140    	; 0x7e4 <usb_keyboard_send>
 870:	08 95       	ret

00000872 <__vector_11>:
 872:	1f 92       	push	r1
 874:	0f 92       	push	r0
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	0f 92       	push	r0
 87a:	11 24       	eor	r1, r1
 87c:	2f 93       	push	r18
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	ef 93       	push	r30
 884:	ff 93       	push	r31
 886:	80 91 e1 00 	lds	r24, 0x00E1
 88a:	10 92 e1 00 	sts	0x00E1, r1
 88e:	83 ff       	sbrs	r24, 3
 890:	0f c0       	rjmp	.+30     	; 0x8b0 <__vector_11+0x3e>
 892:	10 92 e9 00 	sts	0x00E9, r1
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	90 93 eb 00 	sts	0x00EB, r25
 89c:	10 92 ec 00 	sts	0x00EC, r1
 8a0:	92 e2       	ldi	r25, 0x22	; 34
 8a2:	90 93 ed 00 	sts	0x00ED, r25
 8a6:	98 e0       	ldi	r25, 0x08	; 8
 8a8:	90 93 f0 00 	sts	0x00F0, r25
 8ac:	10 92 07 02 	sts	0x0207, r1
 8b0:	82 ff       	sbrs	r24, 2
 8b2:	34 c0       	rjmp	.+104    	; 0x91c <__vector_11+0xaa>
 8b4:	80 91 07 02 	lds	r24, 0x0207
 8b8:	88 23       	and	r24, r24
 8ba:	81 f1       	breq	.+96     	; 0x91c <__vector_11+0xaa>
 8bc:	20 91 f0 01 	lds	r18, 0x01F0
 8c0:	22 23       	and	r18, r18
 8c2:	61 f1       	breq	.+88     	; 0x91c <__vector_11+0xaa>
 8c4:	80 91 09 02 	lds	r24, 0x0209
 8c8:	8f 5f       	subi	r24, 0xFF	; 255
 8ca:	80 93 09 02 	sts	0x0209, r24
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	83 70       	andi	r24, 0x03	; 3
 8d2:	90 70       	andi	r25, 0x00	; 0
 8d4:	00 97       	sbiw	r24, 0x00	; 0
 8d6:	11 f5       	brne	.+68     	; 0x91c <__vector_11+0xaa>
 8d8:	83 e0       	ldi	r24, 0x03	; 3
 8da:	80 93 e9 00 	sts	0x00E9, r24
 8de:	80 91 e8 00 	lds	r24, 0x00E8
 8e2:	85 ff       	sbrs	r24, 5
 8e4:	1b c0       	rjmp	.+54     	; 0x91c <__vector_11+0xaa>
 8e6:	80 91 08 02 	lds	r24, 0x0208
 8ea:	8f 5f       	subi	r24, 0xFF	; 255
 8ec:	80 93 08 02 	sts	0x0208, r24
 8f0:	82 17       	cp	r24, r18
 8f2:	a1 f4       	brne	.+40     	; 0x91c <__vector_11+0xaa>
 8f4:	10 92 08 02 	sts	0x0208, r1
 8f8:	80 91 ff 01 	lds	r24, 0x01FF
 8fc:	80 93 f1 00 	sts	0x00F1, r24
 900:	10 92 f1 00 	sts	0x00F1, r1
 904:	e0 e0       	ldi	r30, 0x00	; 0
 906:	f2 e0       	ldi	r31, 0x02	; 2
 908:	81 91       	ld	r24, Z+
 90a:	80 93 f1 00 	sts	0x00F1, r24
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	e6 30       	cpi	r30, 0x06	; 6
 912:	f8 07       	cpc	r31, r24
 914:	c9 f7       	brne	.-14     	; 0x908 <__vector_11+0x96>
 916:	8a e3       	ldi	r24, 0x3A	; 58
 918:	80 93 e8 00 	sts	0x00E8, r24
 91c:	ff 91       	pop	r31
 91e:	ef 91       	pop	r30
 920:	9f 91       	pop	r25
 922:	8f 91       	pop	r24
 924:	2f 91       	pop	r18
 926:	0f 90       	pop	r0
 928:	0f be       	out	0x3f, r0	; 63
 92a:	0f 90       	pop	r0
 92c:	1f 90       	pop	r1
 92e:	18 95       	reti

00000930 <__vector_12>:
 930:	1f 92       	push	r1
 932:	0f 92       	push	r0
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	0f 92       	push	r0
 938:	11 24       	eor	r1, r1
 93a:	cf 92       	push	r12
 93c:	df 92       	push	r13
 93e:	ef 92       	push	r14
 940:	ff 92       	push	r15
 942:	0f 93       	push	r16
 944:	1f 93       	push	r17
 946:	2f 93       	push	r18
 948:	3f 93       	push	r19
 94a:	4f 93       	push	r20
 94c:	5f 93       	push	r21
 94e:	6f 93       	push	r22
 950:	7f 93       	push	r23
 952:	8f 93       	push	r24
 954:	9f 93       	push	r25
 956:	af 93       	push	r26
 958:	bf 93       	push	r27
 95a:	ef 93       	push	r30
 95c:	ff 93       	push	r31
 95e:	df 93       	push	r29
 960:	cf 93       	push	r28
 962:	0f 92       	push	r0
 964:	cd b7       	in	r28, 0x3d	; 61
 966:	de b7       	in	r29, 0x3e	; 62
 968:	10 92 e9 00 	sts	0x00E9, r1
 96c:	80 91 e8 00 	lds	r24, 0x00E8
 970:	83 ff       	sbrs	r24, 3
 972:	39 c1       	rjmp	.+626    	; 0xbe6 <__vector_12+0x2b6>
 974:	20 91 f1 00 	lds	r18, 0x00F1
 978:	30 91 f1 00 	lds	r19, 0x00F1
 97c:	80 91 f1 00 	lds	r24, 0x00F1
 980:	c8 2e       	mov	r12, r24
 982:	dd 24       	eor	r13, r13
 984:	40 91 f1 00 	lds	r20, 0x00F1
 988:	94 2f       	mov	r25, r20
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	c8 2a       	or	r12, r24
 98e:	d9 2a       	or	r13, r25
 990:	00 91 f1 00 	lds	r16, 0x00F1
 994:	10 e0       	ldi	r17, 0x00	; 0
 996:	40 91 f1 00 	lds	r20, 0x00F1
 99a:	94 2f       	mov	r25, r20
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	08 2b       	or	r16, r24
 9a0:	19 2b       	or	r17, r25
 9a2:	60 91 f1 00 	lds	r22, 0x00F1
 9a6:	a0 91 f1 00 	lds	r26, 0x00F1
 9aa:	82 ef       	ldi	r24, 0xF2	; 242
 9ac:	80 93 e8 00 	sts	0x00E8, r24
 9b0:	36 30       	cpi	r19, 0x06	; 6
 9b2:	09 f0       	breq	.+2      	; 0x9b6 <__vector_12+0x86>
 9b4:	59 c0       	rjmp	.+178    	; 0xa68 <__vector_12+0x138>
 9b6:	8b e7       	ldi	r24, 0x7B	; 123
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	9c 01       	movw	r18, r24
 9bc:	25 50       	subi	r18, 0x05	; 5
 9be:	30 40       	sbci	r19, 0x00	; 0
 9c0:	fc 01       	movw	r30, r24
 9c2:	37 97       	sbiw	r30, 0x07	; 7
 9c4:	45 91       	lpm	r20, Z+
 9c6:	54 91       	lpm	r21, Z+
 9c8:	4c 15       	cp	r20, r12
 9ca:	5d 05       	cpc	r21, r13
 9cc:	f9 f4       	brne	.+62     	; 0xa0c <__vector_12+0xdc>
 9ce:	f9 01       	movw	r30, r18
 9d0:	45 91       	lpm	r20, Z+
 9d2:	54 91       	lpm	r21, Z+
 9d4:	40 17       	cp	r20, r16
 9d6:	51 07       	cpc	r21, r17
 9d8:	c9 f4       	brne	.+50     	; 0xa0c <__vector_12+0xdc>
 9da:	2e 5f       	subi	r18, 0xFE	; 254
 9dc:	3f 4f       	sbci	r19, 0xFF	; 255
 9de:	f9 01       	movw	r30, r18
 9e0:	85 91       	lpm	r24, Z+
 9e2:	94 91       	lpm	r25, Z+
 9e4:	2e 5f       	subi	r18, 0xFE	; 254
 9e6:	3f 4f       	sbci	r19, 0xFF	; 255
 9e8:	f9 01       	movw	r30, r18
 9ea:	24 91       	lpm	r18, Z+
 9ec:	46 2f       	mov	r20, r22
 9ee:	50 e0       	ldi	r21, 0x00	; 0
 9f0:	7a 2f       	mov	r23, r26
 9f2:	60 e0       	ldi	r22, 0x00	; 0
 9f4:	46 2b       	or	r20, r22
 9f6:	57 2b       	or	r21, r23
 9f8:	4f 3f       	cpi	r20, 0xFF	; 255
 9fa:	51 05       	cpc	r21, r1
 9fc:	19 f0       	breq	.+6      	; 0xa04 <__vector_12+0xd4>
 9fe:	10 f0       	brcs	.+4      	; 0xa04 <__vector_12+0xd4>
 a00:	4f ef       	ldi	r20, 0xFF	; 255
 a02:	50 e0       	ldi	r21, 0x00	; 0
 a04:	42 17       	cp	r20, r18
 a06:	50 f4       	brcc	.+20     	; 0xa1c <__vector_12+0xec>
 a08:	24 2f       	mov	r18, r20
 a0a:	08 c0       	rjmp	.+16     	; 0xa1c <__vector_12+0xec>
 a0c:	07 96       	adiw	r24, 0x07	; 7
 a0e:	29 5f       	subi	r18, 0xF9	; 249
 a10:	3f 4f       	sbci	r19, 0xFF	; 255
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	8c 3a       	cpi	r24, 0xAC	; 172
 a16:	9f 07       	cpc	r25, r31
 a18:	99 f6       	brne	.-90     	; 0x9c0 <__vector_12+0x90>
 a1a:	e5 c0       	rjmp	.+458    	; 0xbe6 <__vector_12+0x2b6>
 a1c:	ae ef       	ldi	r26, 0xFE	; 254
 a1e:	40 91 e8 00 	lds	r20, 0x00E8
 a22:	50 e0       	ldi	r21, 0x00	; 0
 a24:	ba 01       	movw	r22, r20
 a26:	65 70       	andi	r22, 0x05	; 5
 a28:	70 70       	andi	r23, 0x00	; 0
 a2a:	61 15       	cp	r22, r1
 a2c:	71 05       	cpc	r23, r1
 a2e:	b9 f3       	breq	.-18     	; 0xa1e <__vector_12+0xee>
 a30:	42 fd       	sbrc	r20, 2
 a32:	dc c0       	rjmp	.+440    	; 0xbec <__vector_12+0x2bc>
 a34:	32 2f       	mov	r19, r18
 a36:	21 32       	cpi	r18, 0x21	; 33
 a38:	08 f0       	brcs	.+2      	; 0xa3c <__vector_12+0x10c>
 a3a:	30 e2       	ldi	r19, 0x20	; 32
 a3c:	ac 01       	movw	r20, r24
 a3e:	63 2f       	mov	r22, r19
 a40:	07 c0       	rjmp	.+14     	; 0xa50 <__vector_12+0x120>
 a42:	fa 01       	movw	r30, r20
 a44:	4f 5f       	subi	r20, 0xFF	; 255
 a46:	5f 4f       	sbci	r21, 0xFF	; 255
 a48:	e4 91       	lpm	r30, Z+
 a4a:	e0 93 f1 00 	sts	0x00F1, r30
 a4e:	61 50       	subi	r22, 0x01	; 1
 a50:	66 23       	and	r22, r22
 a52:	b9 f7       	brne	.-18     	; 0xa42 <__vector_12+0x112>
 a54:	83 0f       	add	r24, r19
 a56:	91 1d       	adc	r25, r1
 a58:	23 1b       	sub	r18, r19
 a5a:	a0 93 e8 00 	sts	0x00E8, r26
 a5e:	22 23       	and	r18, r18
 a60:	f1 f6       	brne	.-68     	; 0xa1e <__vector_12+0xee>
 a62:	30 32       	cpi	r19, 0x20	; 32
 a64:	e1 f2       	breq	.-72     	; 0xa1e <__vector_12+0xee>
 a66:	c2 c0       	rjmp	.+388    	; 0xbec <__vector_12+0x2bc>
 a68:	35 30       	cpi	r19, 0x05	; 5
 a6a:	49 f4       	brne	.+18     	; 0xa7e <__vector_12+0x14e>
 a6c:	8e ef       	ldi	r24, 0xFE	; 254
 a6e:	80 93 e8 00 	sts	0x00E8, r24
 a72:	9c de       	rcall	.-712    	; 0x7ac <usb_wait_in_ready>
 a74:	8c 2d       	mov	r24, r12
 a76:	80 68       	ori	r24, 0x80	; 128
 a78:	80 93 e3 00 	sts	0x00E3, r24
 a7c:	b7 c0       	rjmp	.+366    	; 0xbec <__vector_12+0x2bc>
 a7e:	39 30       	cpi	r19, 0x09	; 9
 a80:	31 f5       	brne	.+76     	; 0xace <__vector_12+0x19e>
 a82:	22 23       	and	r18, r18
 a84:	09 f0       	breq	.+2      	; 0xa88 <__vector_12+0x158>
 a86:	69 c0       	rjmp	.+210    	; 0xb5a <__vector_12+0x22a>
 a88:	c0 92 07 02 	sts	0x0207, r12
 a8c:	8e ef       	ldi	r24, 0xFE	; 254
 a8e:	80 93 e8 00 	sts	0x00E8, r24
 a92:	41 e0       	ldi	r20, 0x01	; 1
 a94:	85 ea       	ldi	r24, 0xA5	; 165
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	40 93 e9 00 	sts	0x00E9, r20
 a9c:	fc 01       	movw	r30, r24
 a9e:	01 96       	adiw	r24, 0x01	; 1
 aa0:	e4 91       	lpm	r30, Z+
 aa2:	e0 93 eb 00 	sts	0x00EB, r30
 aa6:	ee 23       	and	r30, r30
 aa8:	69 f0       	breq	.+26     	; 0xac4 <__vector_12+0x194>
 aaa:	9c 01       	movw	r18, r24
 aac:	2f 5f       	subi	r18, 0xFF	; 255
 aae:	3f 4f       	sbci	r19, 0xFF	; 255
 ab0:	fc 01       	movw	r30, r24
 ab2:	84 91       	lpm	r24, Z+
 ab4:	80 93 ec 00 	sts	0x00EC, r24
 ab8:	c9 01       	movw	r24, r18
 aba:	01 96       	adiw	r24, 0x01	; 1
 abc:	f9 01       	movw	r30, r18
 abe:	24 91       	lpm	r18, Z+
 ac0:	20 93 ed 00 	sts	0x00ED, r18
 ac4:	4f 5f       	subi	r20, 0xFF	; 255
 ac6:	45 30       	cpi	r20, 0x05	; 5
 ac8:	39 f7       	brne	.-50     	; 0xa98 <__vector_12+0x168>
 aca:	8e e1       	ldi	r24, 0x1E	; 30
 acc:	41 c0       	rjmp	.+130    	; 0xb50 <__vector_12+0x220>
 ace:	38 30       	cpi	r19, 0x08	; 8
 ad0:	39 f4       	brne	.+14     	; 0xae0 <__vector_12+0x1b0>
 ad2:	20 38       	cpi	r18, 0x80	; 128
 ad4:	09 f0       	breq	.+2      	; 0xad8 <__vector_12+0x1a8>
 ad6:	41 c0       	rjmp	.+130    	; 0xb5a <__vector_12+0x22a>
 ad8:	69 de       	rcall	.-814    	; 0x7ac <usb_wait_in_ready>
 ada:	80 91 07 02 	lds	r24, 0x0207
 ade:	61 c0       	rjmp	.+194    	; 0xba2 <__vector_12+0x272>
 ae0:	33 23       	and	r19, r19
 ae2:	a9 f4       	brne	.+42     	; 0xb0e <__vector_12+0x1de>
 ae4:	29 83       	std	Y+1, r18	; 0x01
 ae6:	62 de       	rcall	.-828    	; 0x7ac <usb_wait_in_ready>
 ae8:	29 81       	ldd	r18, Y+1	; 0x01
 aea:	22 38       	cpi	r18, 0x82	; 130
 aec:	51 f4       	brne	.+20     	; 0xb02 <__vector_12+0x1d2>
 aee:	00 93 e9 00 	sts	0x00E9, r16
 af2:	90 91 eb 00 	lds	r25, 0x00EB
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	95 ff       	sbrs	r25, 5
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	10 92 e9 00 	sts	0x00E9, r1
 b00:	01 c0       	rjmp	.+2      	; 0xb04 <__vector_12+0x1d4>
 b02:	80 e0       	ldi	r24, 0x00	; 0
 b04:	80 93 f1 00 	sts	0x00F1, r24
 b08:	10 92 f1 00 	sts	0x00F1, r1
 b0c:	68 c0       	rjmp	.+208    	; 0xbde <__vector_12+0x2ae>
 b0e:	31 30       	cpi	r19, 0x01	; 1
 b10:	11 f0       	breq	.+4      	; 0xb16 <__vector_12+0x1e6>
 b12:	33 30       	cpi	r19, 0x03	; 3
 b14:	11 f5       	brne	.+68     	; 0xb5a <__vector_12+0x22a>
 b16:	22 30       	cpi	r18, 0x02	; 2
 b18:	01 f5       	brne	.+64     	; 0xb5a <__vector_12+0x22a>
 b1a:	c1 14       	cp	r12, r1
 b1c:	d1 04       	cpc	r13, r1
 b1e:	e9 f4       	brne	.+58     	; 0xb5a <__vector_12+0x22a>
 b20:	40 2f       	mov	r20, r16
 b22:	4f 77       	andi	r20, 0x7F	; 127
 b24:	84 2f       	mov	r24, r20
 b26:	81 50       	subi	r24, 0x01	; 1
 b28:	84 30       	cpi	r24, 0x04	; 4
 b2a:	b8 f4       	brcc	.+46     	; 0xb5a <__vector_12+0x22a>
 b2c:	8e ef       	ldi	r24, 0xFE	; 254
 b2e:	80 93 e8 00 	sts	0x00E8, r24
 b32:	40 93 e9 00 	sts	0x00E9, r20
 b36:	33 30       	cpi	r19, 0x03	; 3
 b38:	09 f4       	brne	.+2      	; 0xb3c <__vector_12+0x20c>
 b3a:	55 c0       	rjmp	.+170    	; 0xbe6 <__vector_12+0x2b6>
 b3c:	89 e1       	ldi	r24, 0x19	; 25
 b3e:	80 93 eb 00 	sts	0x00EB, r24
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <__vector_12+0x21c>
 b48:	88 0f       	add	r24, r24
 b4a:	99 1f       	adc	r25, r25
 b4c:	4a 95       	dec	r20
 b4e:	e2 f7       	brpl	.-8      	; 0xb48 <__vector_12+0x218>
 b50:	80 93 ea 00 	sts	0x00EA, r24
 b54:	10 92 ea 00 	sts	0x00EA, r1
 b58:	49 c0       	rjmp	.+146    	; 0xbec <__vector_12+0x2bc>
 b5a:	01 15       	cp	r16, r1
 b5c:	11 05       	cpc	r17, r1
 b5e:	09 f0       	breq	.+2      	; 0xb62 <__vector_12+0x232>
 b60:	42 c0       	rjmp	.+132    	; 0xbe6 <__vector_12+0x2b6>
 b62:	21 3a       	cpi	r18, 0xA1	; 161
 b64:	09 f5       	brne	.+66     	; 0xba8 <__vector_12+0x278>
 b66:	31 30       	cpi	r19, 0x01	; 1
 b68:	89 f4       	brne	.+34     	; 0xb8c <__vector_12+0x25c>
 b6a:	20 de       	rcall	.-960    	; 0x7ac <usb_wait_in_ready>
 b6c:	80 91 ff 01 	lds	r24, 0x01FF
 b70:	80 93 f1 00 	sts	0x00F1, r24
 b74:	10 92 f1 00 	sts	0x00F1, r1
 b78:	e0 e0       	ldi	r30, 0x00	; 0
 b7a:	f2 e0       	ldi	r31, 0x02	; 2
 b7c:	81 91       	ld	r24, Z+
 b7e:	80 93 f1 00 	sts	0x00F1, r24
 b82:	22 e0       	ldi	r18, 0x02	; 2
 b84:	e6 30       	cpi	r30, 0x06	; 6
 b86:	f2 07       	cpc	r31, r18
 b88:	c9 f7       	brne	.-14     	; 0xb7c <__vector_12+0x24c>
 b8a:	29 c0       	rjmp	.+82     	; 0xbde <__vector_12+0x2ae>
 b8c:	32 30       	cpi	r19, 0x02	; 2
 b8e:	21 f4       	brne	.+8      	; 0xb98 <__vector_12+0x268>
 b90:	0d de       	rcall	.-998    	; 0x7ac <usb_wait_in_ready>
 b92:	80 91 f0 01 	lds	r24, 0x01F0
 b96:	05 c0       	rjmp	.+10     	; 0xba2 <__vector_12+0x272>
 b98:	33 30       	cpi	r19, 0x03	; 3
 b9a:	29 f5       	brne	.+74     	; 0xbe6 <__vector_12+0x2b6>
 b9c:	07 de       	rcall	.-1010   	; 0x7ac <usb_wait_in_ready>
 b9e:	80 91 f1 01 	lds	r24, 0x01F1
 ba2:	80 93 f1 00 	sts	0x00F1, r24
 ba6:	1b c0       	rjmp	.+54     	; 0xbde <__vector_12+0x2ae>
 ba8:	21 32       	cpi	r18, 0x21	; 33
 baa:	e9 f4       	brne	.+58     	; 0xbe6 <__vector_12+0x2b6>
 bac:	39 30       	cpi	r19, 0x09	; 9
 bae:	61 f4       	brne	.+24     	; 0xbc8 <__vector_12+0x298>
 bb0:	80 91 e8 00 	lds	r24, 0x00E8
 bb4:	82 ff       	sbrs	r24, 2
 bb6:	fc cf       	rjmp	.-8      	; 0xbb0 <__vector_12+0x280>
 bb8:	80 91 f1 00 	lds	r24, 0x00F1
 bbc:	80 93 06 02 	sts	0x0206, r24
 bc0:	8b ef       	ldi	r24, 0xFB	; 251
 bc2:	80 93 e8 00 	sts	0x00E8, r24
 bc6:	0b c0       	rjmp	.+22     	; 0xbde <__vector_12+0x2ae>
 bc8:	3a 30       	cpi	r19, 0x0A	; 10
 bca:	29 f4       	brne	.+10     	; 0xbd6 <__vector_12+0x2a6>
 bcc:	d0 92 f0 01 	sts	0x01F0, r13
 bd0:	10 92 08 02 	sts	0x0208, r1
 bd4:	04 c0       	rjmp	.+8      	; 0xbde <__vector_12+0x2ae>
 bd6:	3b 30       	cpi	r19, 0x0B	; 11
 bd8:	31 f4       	brne	.+12     	; 0xbe6 <__vector_12+0x2b6>
 bda:	c0 92 f1 01 	sts	0x01F1, r12
 bde:	8e ef       	ldi	r24, 0xFE	; 254
 be0:	80 93 e8 00 	sts	0x00E8, r24
 be4:	03 c0       	rjmp	.+6      	; 0xbec <__vector_12+0x2bc>
 be6:	81 e2       	ldi	r24, 0x21	; 33
 be8:	80 93 eb 00 	sts	0x00EB, r24
 bec:	0f 90       	pop	r0
 bee:	cf 91       	pop	r28
 bf0:	df 91       	pop	r29
 bf2:	ff 91       	pop	r31
 bf4:	ef 91       	pop	r30
 bf6:	bf 91       	pop	r27
 bf8:	af 91       	pop	r26
 bfa:	9f 91       	pop	r25
 bfc:	8f 91       	pop	r24
 bfe:	7f 91       	pop	r23
 c00:	6f 91       	pop	r22
 c02:	5f 91       	pop	r21
 c04:	4f 91       	pop	r20
 c06:	3f 91       	pop	r19
 c08:	2f 91       	pop	r18
 c0a:	1f 91       	pop	r17
 c0c:	0f 91       	pop	r16
 c0e:	ff 90       	pop	r15
 c10:	ef 90       	pop	r14
 c12:	df 90       	pop	r13
 c14:	cf 90       	pop	r12
 c16:	0f 90       	pop	r0
 c18:	0f be       	out	0x3f, r0	; 63
 c1a:	0f 90       	pop	r0
 c1c:	1f 90       	pop	r1
 c1e:	18 95       	reti

00000c20 <_exit>:
 c20:	f8 94       	cli

00000c22 <__stop_program>:
 c22:	ff cf       	rjmp	.-2      	; 0xc22 <__stop_program>
