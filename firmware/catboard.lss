
catboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  00000d9e  00000e32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800230  00800230  00000f62  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000b0  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000024e  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fd1  00000000  00000000  00001982  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000045c  00000000  00000000  00002953  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001038  00000000  00000000  00002daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  00003de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000549  00000000  00000000  00003f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b70  00000000  00000000  00004451  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000d1  00000000  00000000  00004fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  00005092  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
   2:	00 00       	nop
   4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	00 00       	nop
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	00 00       	nop
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	00 00       	nop
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
  1e:	00 00       	nop
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	00 00       	nop
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	00 00       	nop
  28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	df c4       	rjmp	.+2494   	; 0x9ec <__vector_11>
  2e:	00 00       	nop
  30:	3c c5       	rjmp	.+2680   	; 0xaaa <__vector_12>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
  36:	00 00       	nop
  38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
  46:	00 00       	nop
  48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
  4e:	00 00       	nop
  50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
  52:	00 00       	nop
  54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
  56:	00 00       	nop
  58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
  5e:	00 00       	nop
  60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
  62:	00 00       	nop
  64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
  66:	00 00       	nop
  68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
  6e:	00 00       	nop
  70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
  72:	00 00       	nop

00000074 <descriptor_list>:
  74:	00 01 00 00 ab 00 12 00 02 00 00 bd 00 22 00 22     ............."."
  84:	00 00 df 00 3f 00 21 00 00 cf 00 09 00 03 00 00     ....?.!.........
  94:	1e 01 04 01 03 09 04 22 01 0e 02 03 09 04 32 01     ......."......2.
  a4:	12                                                  .

000000a5 <endpoint_config_table>:
  a5:	00 00 01 c1 06 00                                   ......

000000ab <device_descriptor>:
  ab:	12 01 00 02 00 00 00 20 c0 16 7c 04 00 01 01 02     ....... ..|.....
  bb:	00 01                                               ..

000000bd <config1_descriptor>:
  bd:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  cd:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
  dd:	00 01                                               ..

000000df <keyboard_hid_report_desc>:
  df:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
  ef:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
  ff:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 10f:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

0000011e <string0>:
 11e:	04 03 09 04                                         ....

00000122 <string1>:
 122:	0e 03 69 00 62 00 6e 00 54 00 65 00 6f 00 00 00     ..i.b.n.T.e.o...

00000132 <string2>:
 132:	12 03 43 00 61 00 74 00 62 00 6f 00 61 00 72 00     ..C.a.t.b.o.a.r.
 142:	64 00 00 00                                         d...

00000146 <__ctors_end>:
 146:	11 24       	eor	r1, r1
 148:	1f be       	out	0x3f, r1	; 63
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	d2 e0       	ldi	r29, 0x02	; 2
 14e:	de bf       	out	0x3e, r29	; 62
 150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
 152:	12 e0       	ldi	r17, 0x02	; 2
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	b1 e0       	ldi	r27, 0x01	; 1
 158:	ee e9       	ldi	r30, 0x9E	; 158
 15a:	fd e0       	ldi	r31, 0x0D	; 13
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x10>
 15e:	05 90       	lpm	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	a0 33       	cpi	r26, 0x30	; 48
 164:	b1 07       	cpc	r27, r17
 166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0xc>

00000168 <__do_clear_bss>:
 168:	12 e0       	ldi	r17, 0x02	; 2
 16a:	a0 e3       	ldi	r26, 0x30	; 48
 16c:	b2 e0       	ldi	r27, 0x02	; 2
 16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
 170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
 172:	a4 38       	cpi	r26, 0x84	; 132
 174:	b1 07       	cpc	r27, r17
 176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
 178:	bf d3       	rcall	.+1918   	; 0x8f8 <main>
 17a:	0f c6       	rjmp	.+3102   	; 0xd9a <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <change_layout>:
		}
	}
}

void change_layout(void) {
	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || mac_mode) { // Press Cmd+Space
 17e:	80 91 30 02 	lds	r24, 0x0230
 182:	88 23       	and	r24, r24
 184:	91 f0       	breq	.+36     	; 0x1aa <change_layout+0x2c>
		keyboard_modifier_keys = KEY_GUI;
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	80 93 3d 02 	sts	0x023D, r24
		keyboard_keys[0] = 0;
 18c:	10 92 3e 02 	sts	0x023E, r1
		usb_keyboard_send();
 190:	e6 d3       	rcall	.+1996   	; 0x95e <usb_keyboard_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	90 e7       	ldi	r25, 0x70	; 112
 196:	a2 e0       	ldi	r26, 0x02	; 2
 198:	81 50       	subi	r24, 0x01	; 1
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	a0 40       	sbci	r26, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <change_layout+0x1a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <change_layout+0x24>
 1a2:	00 00       	nop
		_delay_ms(50);
		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 1a4:	8c e2       	ldi	r24, 0x2C	; 44
 1a6:	68 e0       	ldi	r22, 0x08	; 8
 1a8:	11 c0       	rjmp	.+34     	; 0x1cc <change_layout+0x4e>
	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
		keyboard_modifier_keys = KEY_ALT;
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	80 93 3d 02 	sts	0x023D, r24
		keyboard_keys[0] = 0;
 1b0:	10 92 3e 02 	sts	0x023E, r1
		usb_keyboard_send();
 1b4:	d4 d3       	rcall	.+1960   	; 0x95e <usb_keyboard_send>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e7       	ldi	r25, 0x70	; 112
 1ba:	a2 e0       	ldi	r26, 0x02	; 2
 1bc:	81 50       	subi	r24, 0x01	; 1
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	a0 40       	sbci	r26, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <change_layout+0x3e>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <change_layout+0x48>
 1c6:	00 00       	nop
		_delay_ms(50);
		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	66 e0       	ldi	r22, 0x06	; 6
 1cc:	02 c4       	rjmp	.+2052   	; 0x9d2 <usb_keyboard_press>

000001ce <init>:
	}
}

void init(void) {
	// Set for 16 MHz clock
	CLKPR = 0x80; CLKPR = 0;
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	80 93 61 00 	sts	0x0061, r24
 1d4:	10 92 61 00 	sts	0x0061, r1

	// Init ports
	DDRB	= 0x00; DDRC	= 0b11110100;	DDRD	= 0x00;
 1d8:	14 b8       	out	0x04, r1	; 4
 1da:	94 ef       	ldi	r25, 0xF4	; 244
 1dc:	97 b9       	out	0x07, r25	; 7
 1de:	1a b8       	out	0x0a, r1	; 10
	PORTB	= 0xFF; PORTC	= 0b11110100; 	PORTD	= 0xFF;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	98 b9       	out	0x08, r25	; 8
 1e6:	8b b9       	out	0x0b, r24	; 11

	LED_CONFIG;
 1e8:	54 9a       	sbi	0x0a, 4	; 10
	LED_ON;
 1ea:	5c 9a       	sbi	0x0b, 4	; 11
 1ec:	e8 e4       	ldi	r30, 0x48	; 72
 1ee:	f2 e0       	ldi	r31, 0x02	; 2

	for (uint8_t i=0; i<KEYS; i++) {
		pressed[i] = 0;
 1f0:	11 92       	st	Z+, r1
	PORTB	= 0xFF; PORTC	= 0b11110100; 	PORTD	= 0xFF;

	LED_CONFIG;
	LED_ON;

	for (uint8_t i=0; i<KEYS; i++) {
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	e4 38       	cpi	r30, 0x84	; 132
 1f6:	f8 07       	cpc	r31, r24
 1f8:	d9 f7       	brne	.-10     	; 0x1f0 <init+0x22>
		pressed[i] = 0;
	}

	usb_init();
 1fa:	9a d3       	rcall	.+1844   	; 0x930 <usb_init>
	LED_OFF;
 1fc:	5c 98       	cbi	0x0b, 4	; 11
	while(!usb_configured());
 1fe:	ac d3       	rcall	.+1880   	; 0x958 <usb_configured>
 200:	88 23       	and	r24, r24
 202:	e9 f3       	breq	.-6      	; 0x1fe <init+0x30>
	LED_ON;
 204:	5c 9a       	sbi	0x0b, 4	; 11
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	93 ed       	ldi	r25, 0xD3	; 211
 20a:	a0 e3       	ldi	r26, 0x30	; 48
 20c:	81 50       	subi	r24, 0x01	; 1
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	a0 40       	sbci	r26, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <init+0x3e>
 214:	00 c0       	rjmp	.+0      	; 0x216 <init+0x48>
 216:	00 00       	nop
	_delay_ms(1000);
	LED_OFF;
 218:	5c 98       	cbi	0x0b, 4	; 11
}
 21a:	08 95       	ret

0000021c <get_code>:
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
	if (key_id<KEYS) { // not 0xFF
 21c:	8c 33       	cpi	r24, 0x3C	; 60
 21e:	18 f5       	brcc	.+70     	; 0x266 <get_code+0x4a>
		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	f9 01       	movw	r30, r18
 226:	e8 5b       	subi	r30, 0xB8	; 184
 228:	fd 4f       	sbci	r31, 0xFD	; 253
 22a:	90 81       	ld	r25, Z
 22c:	91 30       	cpi	r25, 0x01	; 1
 22e:	41 f4       	brne	.+16     	; 0x240 <get_code+0x24>
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 230:	26 58       	subi	r18, 0x86	; 134
 232:	3e 4f       	sbci	r19, 0xFE	; 254
 234:	f9 01       	movw	r30, r18
 236:	80 81       	ld	r24, Z
 238:	18 16       	cp	r1, r24
 23a:	b4 f0       	brlt	.+44     	; 0x268 <get_code+0x4c>
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	08 95       	ret
	if (key_id<KEYS) { // not 0xFF
		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
				key_code = layer_fn[key_id];
			}
		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from layer1
 240:	40 91 3c 01 	lds	r20, 0x013C
 244:	50 91 3d 01 	lds	r21, 0x013D
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	4a 37       	cpi	r20, 0x7A	; 122
 24c:	5f 07       	cpc	r21, r31
 24e:	31 f0       	breq	.+12     	; 0x25c <get_code+0x40>
 250:	92 30       	cpi	r25, 0x02	; 2
 252:	21 f4       	brne	.+8      	; 0x25c <get_code+0x40>
			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 254:	22 5c       	subi	r18, 0xC2	; 194
 256:	3e 4f       	sbci	r19, 0xFE	; 254
 258:	f9 01       	movw	r30, r18
 25a:	03 c0       	rjmp	.+6      	; 0x262 <get_code+0x46>
		} else {
			key_code = layout[key_id];
 25c:	48 0f       	add	r20, r24
 25e:	51 1d       	adc	r21, r1
 260:	fa 01       	movw	r30, r20
 262:	80 81       	ld	r24, Z
 264:	08 95       	ret
	keyboard_modifier_keys = mod_keys;
	usb_keyboard_send();
}

uint8_t get_code(uint8_t key_id) {
	uint8_t key_code = 0;
 266:	80 e0       	ldi	r24, 0x00	; 0
		} else {
			key_code = layout[key_id];
		}
	}
	return key_code;
}
 268:	08 95       	ret

0000026a <send>:
		_delay_ms(50);
		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
	}
}

void send(void) {
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	c5 e2       	ldi	r28, 0x25	; 37
 274:	d2 e0       	ldi	r29, 0x02	; 2
 276:	0e e3       	ldi	r16, 0x3E	; 62
 278:	12 e0       	ldi	r17, 0x02	; 2
	uint8_t i;
	for (i=0; i<6; i++) {
		keyboard_keys[i] = get_code(queue[i]);
 27a:	89 91       	ld	r24, Y+
 27c:	cf df       	rcall	.-98     	; 0x21c <get_code>
 27e:	f8 01       	movw	r30, r16
 280:	81 93       	st	Z+, r24
 282:	8f 01       	movw	r16, r30
	}
}

void send(void) {
	uint8_t i;
	for (i=0; i<6; i++) {
 284:	f2 e0       	ldi	r31, 0x02	; 2
 286:	cb 32       	cpi	r28, 0x2B	; 43
 288:	df 07       	cpc	r29, r31
 28a:	b9 f7       	brne	.-18     	; 0x27a <send+0x10>
		keyboard_keys[i] = get_code(queue[i]);
	}
	keyboard_modifier_keys = mod_keys;
 28c:	80 91 31 02 	lds	r24, 0x0231
 290:	80 93 3d 02 	sts	0x023D, r24
	usb_keyboard_send();
 294:	64 d3       	rcall	.+1736   	; 0x95e <usb_keyboard_send>
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <key_release>:
		release_time = 0;
		repeat_time = 0;
	}
}

void key_release(uint8_t key_id) {
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	08 2f       	mov	r16, r24
	uint8_t i;
	int8_t pressed_key_id = pressed[key_id];
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	f9 01       	movw	r30, r18
 2ac:	e8 5b       	subi	r30, 0xB8	; 184
 2ae:	fd 4f       	sbci	r31, 0xFD	; 253
 2b0:	10 81       	ld	r17, Z
	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 2b2:	11 30       	cpi	r17, 0x01	; 1
 2b4:	21 f4       	brne	.+8      	; 0x2be <key_release+0x1e>
 2b6:	f9 01       	movw	r30, r18
 2b8:	e6 58       	subi	r30, 0x86	; 134
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	13 c0       	rjmp	.+38     	; 0x2e4 <key_release+0x44>
 2be:	e0 91 3c 01 	lds	r30, 0x013C
 2c2:	f0 91 3d 01 	lds	r31, 0x013D
 2c6:	e2 0f       	add	r30, r18
 2c8:	f3 1f       	adc	r31, r19
 2ca:	80 81       	ld	r24, Z
	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 2cc:	16 30       	cpi	r17, 0x06	; 6
 2ce:	59 f4       	brne	.+22     	; 0x2e6 <key_release+0x46>
 2d0:	40 91 32 02 	lds	r20, 0x0232
 2d4:	50 91 33 02 	lds	r21, 0x0233
 2d8:	41 15       	cp	r20, r1
 2da:	51 05       	cpc	r21, r1
 2dc:	21 f0       	breq	.+8      	; 0x2e6 <key_release+0x46>
		key_code = prev_layer[key_id];
 2de:	42 0f       	add	r20, r18
 2e0:	53 1f       	adc	r21, r19
 2e2:	fa 01       	movw	r30, r20
 2e4:	80 81       	ld	r24, Z
	}
	pressed[key_id] = 0;
 2e6:	28 5b       	subi	r18, 0xB8	; 184
 2e8:	3d 4f       	sbci	r19, 0xFD	; 253
 2ea:	f9 01       	movw	r30, r18
 2ec:	10 82       	st	Z, r1
	if (key_code>0xF0) { // Catboard keys release
 2ee:	81 3f       	cpi	r24, 0xF1	; 241
 2f0:	08 f4       	brcc	.+2      	; 0x2f4 <key_release+0x54>
 2f2:	5a c0       	rjmp	.+180    	; 0x3a8 <__stack+0xa9>
		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 2f4:	8d 3f       	cpi	r24, 0xFD	; 253
 2f6:	39 f4       	brne	.+14     	; 0x306 <__stack+0x7>
 2f8:	13 30       	cpi	r17, 0x03	; 3
 2fa:	09 f4       	brne	.+2      	; 0x2fe <key_release+0x5e>
 2fc:	a7 c0       	rjmp	.+334    	; 0x44c <__stack+0x14d>
			mod_keys &= ~(KEY_ALT);
 2fe:	80 91 31 02 	lds	r24, 0x0231
 302:	8b 7f       	andi	r24, 0xFB	; 251
 304:	64 c0       	rjmp	.+200    	; 0x3ce <__stack+0xcf>
			send();
		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) {
 306:	81 3f       	cpi	r24, 0xF1	; 241
 308:	09 f5       	brne	.+66     	; 0x34c <__stack+0x4d>
 30a:	80 91 31 02 	lds	r24, 0x0231
 30e:	15 30       	cpi	r17, 0x05	; 5
 310:	11 f4       	brne	.+4      	; 0x316 <__stack+0x17>
			mod_keys &= ~(KEY_CTRL);
 312:	8e 7f       	andi	r24, 0xFE	; 254
 314:	5c c0       	rjmp	.+184    	; 0x3ce <__stack+0xcf>
			send();
		} else if (key_code==KEY_LAYER1) {
			mod_keys &= ~(KEY_SHIFT);
 316:	8d 7f       	andi	r24, 0xFD	; 253
 318:	80 93 31 02 	sts	0x0231, r24
			send();
 31c:	a6 df       	rcall	.-180    	; 0x26a <send>
			if (last_key==key_id && pressed_key_id!=KEY_PRESSED_SHIFT) {
 31e:	80 91 34 02 	lds	r24, 0x0234
 322:	80 17       	cp	r24, r16
 324:	09 f0       	breq	.+2      	; 0x328 <__stack+0x29>
 326:	92 c0       	rjmp	.+292    	; 0x44c <__stack+0x14d>
 328:	14 30       	cpi	r17, 0x04	; 4
 32a:	09 f4       	brne	.+2      	; 0x32e <__stack+0x2f>
 32c:	8f c0       	rjmp	.+286    	; 0x44c <__stack+0x14d>
				if (layout!=layer1) {
 32e:	20 91 3c 01 	lds	r18, 0x013C
 332:	30 91 3d 01 	lds	r19, 0x013D
 336:	8e e3       	ldi	r24, 0x3E	; 62
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	28 17       	cp	r18, r24
 33c:	39 07       	cpc	r19, r25
 33e:	09 f4       	brne	.+2      	; 0x342 <__stack+0x43>
 340:	85 c0       	rjmp	.+266    	; 0x44c <__stack+0x14d>
					if (layout==layer_fn) {
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	2a 37       	cpi	r18, 0x7A	; 122
 346:	34 07       	cpc	r19, r20
 348:	49 f5       	brne	.+82     	; 0x39c <__stack+0x9d>
 34a:	23 c0       	rjmp	.+70     	; 0x392 <__stack+0x93>
						layout = layer1;
					}
					change_layout();
				}
			}
		} else if (key_code==KEY_LAYER2 && pressed_key_id==KEY_PRESSED_CTRL) {
 34c:	82 3f       	cpi	r24, 0xF2	; 242
 34e:	09 f0       	breq	.+2      	; 0x352 <__stack+0x53>
 350:	7d c0       	rjmp	.+250    	; 0x44c <__stack+0x14d>
 352:	80 91 31 02 	lds	r24, 0x0231
 356:	15 30       	cpi	r17, 0x05	; 5
 358:	11 f4       	brne	.+4      	; 0x35e <__stack+0x5f>
			mod_keys &= ~(KEY_RIGHT_CTRL);
 35a:	8f 7e       	andi	r24, 0xEF	; 239
 35c:	38 c0       	rjmp	.+112    	; 0x3ce <__stack+0xcf>
			send();
		} else if (key_code==KEY_LAYER2) {
			mod_keys &= ~(KEY_RIGHT_SHIFT);
 35e:	8f 7d       	andi	r24, 0xDF	; 223
 360:	80 93 31 02 	sts	0x0231, r24
			send();
 364:	82 df       	rcall	.-252    	; 0x26a <send>
			if (last_key==key_id && pressed_key_id!=KEY_PRESSED_SHIFT) {
 366:	80 91 34 02 	lds	r24, 0x0234
 36a:	80 17       	cp	r24, r16
 36c:	09 f0       	breq	.+2      	; 0x370 <__stack+0x71>
 36e:	6e c0       	rjmp	.+220    	; 0x44c <__stack+0x14d>
 370:	14 30       	cpi	r17, 0x04	; 4
 372:	09 f4       	brne	.+2      	; 0x376 <__stack+0x77>
 374:	6b c0       	rjmp	.+214    	; 0x44c <__stack+0x14d>
				if (layout!=layer2) {
 376:	20 91 3c 01 	lds	r18, 0x013C
 37a:	30 91 3d 01 	lds	r19, 0x013D
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	28 17       	cp	r18, r24
 384:	39 07       	cpc	r19, r25
 386:	09 f4       	brne	.+2      	; 0x38a <__stack+0x8b>
 388:	61 c0       	rjmp	.+194    	; 0x44c <__stack+0x14d>
					if (layout==layer_fn) {
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	2a 37       	cpi	r18, 0x7A	; 122
 38e:	3f 07       	cpc	r19, r31
 390:	29 f4       	brne	.+10     	; 0x39c <__stack+0x9d>
						prev_layer = layer2;
 392:	90 93 33 02 	sts	0x0233, r25
 396:	80 93 32 02 	sts	0x0232, r24
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <__stack+0xa5>
					} else {
						layout = layer2;
 39c:	90 93 3d 01 	sts	0x013D, r25
 3a0:	80 93 3c 01 	sts	0x013C, r24
					}
					change_layout();
 3a4:	ec de       	rcall	.-552    	; 0x17e <change_layout>
 3a6:	52 c0       	rjmp	.+164    	; 0x44c <__stack+0x14d>
			}
		/*} else if ((key_code==KEY_LAYER1 || key_code==KEY_LAYER2) && pressed_key_id==KEY_PRESSED_SHIFT) { // Mod + Layer = Shift
			mod_keys &= ~(KEY_SHIFT);
			send();*/
		}
	} else if (key_code>=0x80) { // Mod keys release
 3a8:	87 ff       	sbrs	r24, 7
 3aa:	1d c0       	rjmp	.+58     	; 0x3e6 <__stack+0xe7>
		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 3ac:	90 91 30 02 	lds	r25, 0x0230
 3b0:	99 23       	and	r25, r25
 3b2:	41 f0       	breq	.+16     	; 0x3c4 <__stack+0xc5>
 3b4:	81 38       	cpi	r24, 0x81	; 129
 3b6:	21 f4       	brne	.+8      	; 0x3c0 <__stack+0xc1>
			mod_keys &= ~KEY_GUI;
 3b8:	80 91 31 02 	lds	r24, 0x0231
 3bc:	87 7f       	andi	r24, 0xF7	; 247
 3be:	07 c0       	rjmp	.+14     	; 0x3ce <__stack+0xcf>
		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD)) {
 3c0:	80 39       	cpi	r24, 0x90	; 144
 3c2:	11 f0       	breq	.+4      	; 0x3c8 <__stack+0xc9>
 3c4:	80 38       	cpi	r24, 0x80	; 128
 3c6:	31 f4       	brne	.+12     	; 0x3d4 <__stack+0xd5>
			mod_keys &= ~KEY_RIGHT_GUI;
 3c8:	80 91 31 02 	lds	r24, 0x0231
 3cc:	8f 77       	andi	r24, 0x7F	; 127
 3ce:	80 93 31 02 	sts	0x0231, r24
 3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <__stack+0xe3>
		} else {
			mod_keys &= ~(key_code & 0x7F);
 3d4:	8f 77       	andi	r24, 0x7F	; 127
 3d6:	80 95       	com	r24
 3d8:	90 91 31 02 	lds	r25, 0x0231
 3dc:	98 23       	and	r25, r24
 3de:	90 93 31 02 	sts	0x0231, r25
		}
		send();
 3e2:	43 df       	rcall	.-378    	; 0x26a <send>
 3e4:	33 c0       	rjmp	.+102    	; 0x44c <__stack+0x14d>
 3e6:	e5 e2       	ldi	r30, 0x25	; 37
 3e8:	f2 e0       	ldi	r31, 0x02	; 2
			}
		/*} else if ((key_code==KEY_LAYER1 || key_code==KEY_LAYER2) && pressed_key_id==KEY_PRESSED_SHIFT) { // Mod + Layer = Shift
			mod_keys &= ~(KEY_SHIFT);
			send();*/
		}
	} else if (key_code>=0x80) { // Mod keys release
 3ea:	80 e0       	ldi	r24, 0x00	; 0
			mod_keys &= ~(key_code & 0x7F);
		}
		send();
	} else {
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
 3ec:	91 91       	ld	r25, Z+
 3ee:	90 17       	cp	r25, r16
 3f0:	59 f0       	breq	.+22     	; 0x408 <__stack+0x109>
		} else {
			mod_keys &= ~(key_code & 0x7F);
		}
		send();
	} else {
		for (i=0; i<6; i++) {
 3f2:	8f 5f       	subi	r24, 0xFF	; 255
 3f4:	86 30       	cpi	r24, 0x06	; 6
 3f6:	d1 f7       	brne	.-12     	; 0x3ec <__stack+0xed>
 3f8:	07 c0       	rjmp	.+14     	; 0x408 <__stack+0x109>
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
			queue[i] = queue[i+1];
 3fa:	e8 2f       	mov	r30, r24
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	eb 5d       	subi	r30, 0xDB	; 219
 400:	fd 4f       	sbci	r31, 0xFD	; 253
 402:	91 81       	ldd	r25, Z+1	; 0x01
 404:	90 83       	st	Z, r25
		for (i=0; i<6; i++) {
			if (queue[i]==key_id) {
				break;
			}
		}
		for (; i<6; i++) {
 406:	8f 5f       	subi	r24, 0xFF	; 255
 408:	86 30       	cpi	r24, 0x06	; 6
 40a:	b8 f3       	brcs	.-18     	; 0x3fa <__stack+0xfb>
			queue[i] = queue[i+1];
		}
		send();
 40c:	2e df       	rcall	.-420    	; 0x26a <send>
		// Autorepeat
		if (last_key==key_id) { // realise time
 40e:	80 91 34 02 	lds	r24, 0x0234
 412:	80 17       	cp	r24, r16
 414:	59 f4       	brne	.+22     	; 0x42c <__stack+0x12d>
			press_time2 = 0;
 416:	10 92 38 02 	sts	0x0238, r1
 41a:	10 92 37 02 	sts	0x0237, r1
			release_time = 1;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	90 93 3a 02 	sts	0x023A, r25
 426:	80 93 39 02 	sts	0x0239, r24
 42a:	0c c0       	rjmp	.+24     	; 0x444 <__stack+0x145>
			repeat_time = 0;
		} else { // reset
			press_time = 0;
 42c:	10 92 36 02 	sts	0x0236, r1
 430:	10 92 35 02 	sts	0x0235, r1
			press_time2 = 0;
 434:	10 92 38 02 	sts	0x0238, r1
 438:	10 92 37 02 	sts	0x0237, r1
			release_time = 0;
 43c:	10 92 3a 02 	sts	0x023A, r1
 440:	10 92 39 02 	sts	0x0239, r1
			repeat_time = 0;
 444:	10 92 3c 02 	sts	0x023C, r1
 448:	10 92 3b 02 	sts	0x023B, r1
		}
	}
}
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	08 95       	ret

00000452 <key_press>:
			press_time = 0;
		}
	}	
}

void key_press(uint8_t key_id) {
 452:	1f 93       	push	r17
 454:	18 2f       	mov	r17, r24
	uint8_t i;
	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGHT_GUI));
 456:	60 91 31 02 	lds	r22, 0x0231
 45a:	96 2f       	mov	r25, r22
 45c:	9d 7d       	andi	r25, 0xDD	; 221
	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 45e:	28 2f       	mov	r18, r24
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	80 91 6b 02 	lds	r24, 0x026B
 466:	88 23       	and	r24, r24
 468:	21 f4       	brne	.+8      	; 0x472 <key_press+0x20>
 46a:	99 23       	and	r25, r25
 46c:	21 f0       	breq	.+8      	; 0x476 <key_press+0x24>
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	03 c0       	rjmp	.+6      	; 0x478 <key_press+0x26>
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	01 c0       	rjmp	.+2      	; 0x478 <key_press+0x26>
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	f9 01       	movw	r30, r18
 47a:	e8 5b       	subi	r30, 0xB8	; 184
 47c:	fd 4f       	sbci	r31, 0xFD	; 253
 47e:	80 83       	st	Z, r24
	
	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	21 f4       	brne	.+8      	; 0x48c <key_press+0x3a>
 484:	f9 01       	movw	r30, r18
 486:	e6 58       	subi	r30, 0x86	; 134
 488:	fe 4f       	sbci	r31, 0xFE	; 254
 48a:	06 c0       	rjmp	.+12     	; 0x498 <key_press+0x46>
 48c:	e0 91 3c 01 	lds	r30, 0x013C
 490:	f0 91 3d 01 	lds	r31, 0x013D
 494:	e1 0f       	add	r30, r17
 496:	f1 1d       	adc	r31, r1
 498:	80 81       	ld	r24, Z
	if (key_code==NULL) {
 49a:	88 23       	and	r24, r24
 49c:	21 f5       	brne	.+72     	; 0x4e6 <key_press+0x94>
		key_code = layout[key_id];
 49e:	41 2f       	mov	r20, r17
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	e0 91 3c 01 	lds	r30, 0x013C
 4a6:	f0 91 3d 01 	lds	r31, 0x013D
 4aa:	e4 0f       	add	r30, r20
 4ac:	f5 1f       	adc	r31, r21
 4ae:	80 81       	ld	r24, Z
		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 4b0:	99 23       	and	r25, r25
 4b2:	11 f0       	breq	.+4      	; 0x4b8 <key_press+0x66>
 4b4:	92 e0       	ldi	r25, 0x02	; 2
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <key_press+0x68>
 4b8:	9f ef       	ldi	r25, 0xFF	; 255
 4ba:	f9 01       	movw	r30, r18
 4bc:	e8 5b       	subi	r30, 0xB8	; 184
 4be:	fd 4f       	sbci	r31, 0xFD	; 253
 4c0:	90 83       	st	Z, r25
		if (key_code==NULL && prev_layer && ! mod_keys) {
 4c2:	88 23       	and	r24, r24
 4c4:	81 f4       	brne	.+32     	; 0x4e6 <key_press+0x94>
 4c6:	80 91 32 02 	lds	r24, 0x0232
 4ca:	90 91 33 02 	lds	r25, 0x0233
 4ce:	00 97       	sbiw	r24, 0x00	; 0
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <key_press+0x82>
 4d2:	d9 c0       	rjmp	.+434    	; 0x686 <key_press+0x234>
 4d4:	66 23       	and	r22, r22
 4d6:	09 f0       	breq	.+2      	; 0x4da <key_press+0x88>
 4d8:	d6 c0       	rjmp	.+428    	; 0x686 <key_press+0x234>
			key_code = prev_layer[key_id];
 4da:	48 0f       	add	r20, r24
 4dc:	59 1f       	adc	r21, r25
 4de:	da 01       	movw	r26, r20
 4e0:	8c 91       	ld	r24, X
			pressed[key_id] = KEY_PRESSED_PREV;
 4e2:	96 e0       	ldi	r25, 0x06	; 6
 4e4:	90 83       	st	Z, r25
		}
	}
	
	if (key_code>0xF0) { // Catboard keys
 4e6:	81 3f       	cpi	r24, 0xF1	; 241
 4e8:	08 f4       	brcc	.+2      	; 0x4ec <key_press+0x9a>
 4ea:	b2 c0       	rjmp	.+356    	; 0x650 <key_press+0x1fe>
		if (key_code==KEY_ALT_TAB) { // AltTab press
 4ec:	8d 3f       	cpi	r24, 0xFD	; 253
 4ee:	31 f5       	brne	.+76     	; 0x53c <key_press+0xea>
			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 4f0:	f9 01       	movw	r30, r18
 4f2:	e8 5b       	subi	r30, 0xB8	; 184
 4f4:	fd 4f       	sbci	r31, 0xFD	; 253
 4f6:	80 81       	ld	r24, Z
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	19 f4       	brne	.+6      	; 0x502 <key_press+0xb0>
				usb_keyboard_press(KEY_TAB, KEY_ALT);
 4fc:	8b e2       	ldi	r24, 0x2B	; 43
 4fe:	64 e0       	ldi	r22, 0x04	; 4
 500:	6a c0       	rjmp	.+212    	; 0x5d6 <key_press+0x184>
			} else { // Alt press, Tab press and release
				if (! (mod_keys & (KEY_ALT|KEY_RIGHT_ALT|KEY_CTRL|KEY_RIGHT_CTRL|KEY_GUI|KEY_RIGHT_GUI))) {
 502:	80 91 31 02 	lds	r24, 0x0231
 506:	98 2f       	mov	r25, r24
 508:	9d 7d       	andi	r25, 0xDD	; 221
 50a:	21 f4       	brne	.+8      	; 0x514 <key_press+0xc2>
					mod_keys |= (KEY_ALT);
 50c:	84 60       	ori	r24, 0x04	; 4
 50e:	80 93 31 02 	sts	0x0231, r24
 512:	02 c0       	rjmp	.+4      	; 0x518 <key_press+0xc6>
				} else {
					pressed[key_id] = KEY_PRESSED_ALT;
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	80 83       	st	Z, r24
				}
				keyboard_modifier_keys = mod_keys;
 518:	80 91 31 02 	lds	r24, 0x0231
 51c:	80 93 3d 02 	sts	0x023D, r24
				keyboard_keys[0] = KEY_TAB;
 520:	8b e2       	ldi	r24, 0x2B	; 43
 522:	80 93 3e 02 	sts	0x023E, r24
				usb_keyboard_send();
 526:	1b d2       	rcall	.+1078   	; 0x95e <usb_keyboard_send>
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	90 e7       	ldi	r25, 0x70	; 112
 52c:	a2 e0       	ldi	r26, 0x02	; 2
 52e:	81 50       	subi	r24, 0x01	; 1
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	a0 40       	sbci	r26, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <key_press+0xdc>
 536:	00 c0       	rjmp	.+0      	; 0x538 <key_press+0xe6>
 538:	00 00       	nop
 53a:	c6 c0       	rjmp	.+396    	; 0x6c8 <key_press+0x276>
				_delay_ms(50);
				send();
			}
		} else if (key_code==KEY_FN_LOCK) { // FnLock
 53c:	8e 3f       	cpi	r24, 0xFE	; 254
 53e:	49 f5       	brne	.+82     	; 0x592 <key_press+0x140>
			if (prev_layer) { // FnLock Off
 540:	20 91 32 02 	lds	r18, 0x0232
 544:	30 91 33 02 	lds	r19, 0x0233
 548:	21 15       	cp	r18, r1
 54a:	31 05       	cpc	r19, r1
 54c:	49 f0       	breq	.+18     	; 0x560 <key_press+0x10e>
				layout = prev_layer;
 54e:	30 93 3d 01 	sts	0x013D, r19
 552:	20 93 3c 01 	sts	0x013C, r18
				prev_layer = 0;
 556:	10 92 33 02 	sts	0x0233, r1
 55a:	10 92 32 02 	sts	0x0232, r1
 55e:	0e c0       	rjmp	.+28     	; 0x57c <key_press+0x12a>
			} else { // FnLock On
				prev_layer = layout;
 560:	80 91 3c 01 	lds	r24, 0x013C
 564:	90 91 3d 01 	lds	r25, 0x013D
 568:	90 93 33 02 	sts	0x0233, r25
 56c:	80 93 32 02 	sts	0x0232, r24
				layout = layer_fnlock;
 570:	86 eb       	ldi	r24, 0xB6	; 182
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	90 93 3d 01 	sts	0x013D, r25
 578:	80 93 3c 01 	sts	0x013C, r24
			}
			if (prev_layer || mac_mode) {
 57c:	80 91 32 02 	lds	r24, 0x0232
 580:	90 91 33 02 	lds	r25, 0x0233
 584:	00 97       	sbiw	r24, 0x00	; 0
 586:	01 f5       	brne	.+64     	; 0x5c8 <key_press+0x176>
 588:	80 91 30 02 	lds	r24, 0x0230
 58c:	88 23       	and	r24, r24
 58e:	f1 f0       	breq	.+60     	; 0x5cc <key_press+0x17a>
 590:	1b c0       	rjmp	.+54     	; 0x5c8 <key_press+0x176>
				LED_ON;
			} else {
				LED_OFF;
			}
		} else if (key_code==KEY_MAC_MODE) { // Mac mode
 592:	8c 3f       	cpi	r24, 0xFC	; 252
 594:	11 f5       	brne	.+68     	; 0x5da <key_press+0x188>
			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 596:	28 5b       	subi	r18, 0xB8	; 184
 598:	3d 4f       	sbci	r19, 0xFD	; 253
 59a:	d9 01       	movw	r26, r18
 59c:	8c 91       	ld	r24, X
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	b9 f4       	brne	.+46     	; 0x5d0 <key_press+0x17e>
 5a2:	80 91 31 02 	lds	r24, 0x0231
 5a6:	82 72       	andi	r24, 0x22	; 34
 5a8:	99 f0       	breq	.+38     	; 0x5d0 <key_press+0x17e>
				mac_mode = ! mac_mode;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 91 30 02 	lds	r25, 0x0230
 5b0:	91 11       	cpse	r25, r1
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	80 93 30 02 	sts	0x0230, r24
				if (mac_mode || prev_layer) {
 5b8:	88 23       	and	r24, r24
 5ba:	31 f4       	brne	.+12     	; 0x5c8 <key_press+0x176>
 5bc:	80 91 32 02 	lds	r24, 0x0232
 5c0:	90 91 33 02 	lds	r25, 0x0233
 5c4:	00 97       	sbiw	r24, 0x00	; 0
 5c6:	11 f0       	breq	.+4      	; 0x5cc <key_press+0x17a>
					LED_ON;
 5c8:	5c 9a       	sbi	0x0b, 4	; 11
 5ca:	7f c0       	rjmp	.+254    	; 0x6ca <key_press+0x278>
				} else {
					LED_OFF;
 5cc:	5c 98       	cbi	0x0b, 4	; 11
 5ce:	7d c0       	rjmp	.+250    	; 0x6ca <key_press+0x278>
				}
			} else { // TODO: Exclusion, press Space
				usb_keyboard_press(KEY_SPACE, mod_keys);
 5d0:	8c e2       	ldi	r24, 0x2C	; 44
 5d2:	60 91 31 02 	lds	r22, 0x0231
 5d6:	fd d1       	rcall	.+1018   	; 0x9d2 <usb_keyboard_press>
 5d8:	78 c0       	rjmp	.+240    	; 0x6ca <key_press+0x278>
			}
		/*} else if ((key_code==KEY_LAYER1 || key_code==KEY_LAYER2) && (mod_keys & (KEY_ALT|KEY_RIGHT_ALT|KEY_CTRL|KEY_RIGHT_CTRL|KEY_GUI|KEY_RIGHT_GUI))) { // Mods + Layer = Shift
			pressed[key_id] = KEY_PRESSED_SHIFT;
			mod_keys |= KEY_SHIFT;
			send();*/
		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 5da:	81 3f       	cpi	r24, 0xF1	; 241
 5dc:	a9 f4       	brne	.+42     	; 0x608 <key_press+0x1b6>
			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 5de:	80 91 31 02 	lds	r24, 0x0231
 5e2:	98 2f       	mov	r25, r24
 5e4:	92 72       	andi	r25, 0x22	; 34
 5e6:	39 f0       	breq	.+14     	; 0x5f6 <key_press+0x1a4>
				pressed[key_id] = KEY_PRESSED_CTRL;
 5e8:	28 5b       	subi	r18, 0xB8	; 184
 5ea:	3d 4f       	sbci	r19, 0xFD	; 253
 5ec:	95 e0       	ldi	r25, 0x05	; 5
 5ee:	f9 01       	movw	r30, r18
 5f0:	90 83       	st	Z, r25
				mod_keys |= KEY_CTRL;
 5f2:	81 60       	ori	r24, 0x01	; 1
 5f4:	16 c0       	rjmp	.+44     	; 0x622 <key_press+0x1d0>
				send();
			} else {
				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 5f6:	88 23       	and	r24, r24
 5f8:	29 f0       	breq	.+10     	; 0x604 <key_press+0x1b2>
 5fa:	28 5b       	subi	r18, 0xB8	; 184
 5fc:	3d 4f       	sbci	r19, 0xFD	; 253
 5fe:	94 e0       	ldi	r25, 0x04	; 4
 600:	d9 01       	movw	r26, r18
 602:	9c 93       	st	X, r25
				mod_keys |= KEY_SHIFT;
 604:	82 60       	ori	r24, 0x02	; 2
 606:	0d c0       	rjmp	.+26     	; 0x622 <key_press+0x1d0>
				} else {
					layout = layer1;
				}
				change_layout();
			}*/
		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 608:	82 3f       	cpi	r24, 0xF2	; 242
 60a:	b9 f4       	brne	.+46     	; 0x63a <key_press+0x1e8>
			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 60c:	80 91 31 02 	lds	r24, 0x0231
 610:	98 2f       	mov	r25, r24
 612:	92 72       	andi	r25, 0x22	; 34
 614:	49 f0       	breq	.+18     	; 0x628 <key_press+0x1d6>
				pressed[key_id] = KEY_PRESSED_CTRL;
 616:	28 5b       	subi	r18, 0xB8	; 184
 618:	3d 4f       	sbci	r19, 0xFD	; 253
 61a:	95 e0       	ldi	r25, 0x05	; 5
 61c:	f9 01       	movw	r30, r18
 61e:	90 83       	st	Z, r25
				mod_keys |= KEY_RIGHT_CTRL;
 620:	80 61       	ori	r24, 0x10	; 16
 622:	80 93 31 02 	sts	0x0231, r24
 626:	50 c0       	rjmp	.+160    	; 0x6c8 <key_press+0x276>
				send();
			} else {
				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 628:	88 23       	and	r24, r24
 62a:	29 f0       	breq	.+10     	; 0x636 <key_press+0x1e4>
 62c:	28 5b       	subi	r18, 0xB8	; 184
 62e:	3d 4f       	sbci	r19, 0xFD	; 253
 630:	94 e0       	ldi	r25, 0x04	; 4
 632:	d9 01       	movw	r26, r18
 634:	9c 93       	st	X, r25
				mod_keys |= KEY_RIGHT_SHIFT;
 636:	80 62       	ori	r24, 0x20	; 32
 638:	f4 cf       	rjmp	.-24     	; 0x622 <key_press+0x1d0>
				} else {
					layout = layer2;	
				}
				change_layout();
			}*/
		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 63a:	8b 3f       	cpi	r24, 0xFB	; 251
 63c:	09 f0       	breq	.+2      	; 0x640 <key_press+0x1ee>
 63e:	45 c0       	rjmp	.+138    	; 0x6ca <key_press+0x278>
			turbo_repeat = ! turbo_repeat;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 91 2c 02 	lds	r25, 0x022C
 646:	91 11       	cpse	r25, r1
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	80 93 2c 02 	sts	0x022C, r24
 64e:	3d c0       	rjmp	.+122    	; 0x6ca <key_press+0x278>
		}
	} else if (key_code>=0x80) { // Mod keys
 650:	87 ff       	sbrs	r24, 7
 652:	19 c0       	rjmp	.+50     	; 0x686 <key_press+0x234>
		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 654:	90 91 30 02 	lds	r25, 0x0230
 658:	99 23       	and	r25, r25
 65a:	41 f0       	breq	.+16     	; 0x66c <key_press+0x21a>
 65c:	81 38       	cpi	r24, 0x81	; 129
 65e:	21 f4       	brne	.+8      	; 0x668 <key_press+0x216>
			mod_keys |= KEY_GUI;
 660:	80 91 31 02 	lds	r24, 0x0231
 664:	88 60       	ori	r24, 0x08	; 8
 666:	dd cf       	rjmp	.-70     	; 0x622 <key_press+0x1d0>
		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD)) {
 668:	80 39       	cpi	r24, 0x90	; 144
 66a:	11 f0       	breq	.+4      	; 0x670 <key_press+0x21e>
 66c:	80 38       	cpi	r24, 0x80	; 128
 66e:	21 f4       	brne	.+8      	; 0x678 <key_press+0x226>
			mod_keys |= KEY_RIGHT_GUI;
 670:	80 91 31 02 	lds	r24, 0x0231
 674:	80 68       	ori	r24, 0x80	; 128
 676:	d5 cf       	rjmp	.-86     	; 0x622 <key_press+0x1d0>
		} else {
			mod_keys |= (key_code & 0x7F);
 678:	8f 77       	andi	r24, 0x7F	; 127
 67a:	90 91 31 02 	lds	r25, 0x0231
 67e:	98 2b       	or	r25, r24
 680:	90 93 31 02 	sts	0x0231, r25
 684:	21 c0       	rjmp	.+66     	; 0x6c8 <key_press+0x276>
		}
		send();
	} else {
		if (! (last_key==key_id && release_time<10)) { // debounce
 686:	80 91 34 02 	lds	r24, 0x0234
 68a:	81 17       	cp	r24, r17
 68c:	39 f4       	brne	.+14     	; 0x69c <key_press+0x24a>
 68e:	80 91 39 02 	lds	r24, 0x0239
 692:	90 91 3a 02 	lds	r25, 0x023A
 696:	8a 30       	cpi	r24, 0x0A	; 10
 698:	91 05       	cpc	r25, r1
 69a:	b8 f0       	brcs	.+46     	; 0x6ca <key_press+0x278>
			for (i=5; i>0; i--) queue[i] = queue[i-1];
 69c:	80 91 29 02 	lds	r24, 0x0229
 6a0:	80 93 2a 02 	sts	0x022A, r24
 6a4:	80 91 28 02 	lds	r24, 0x0228
 6a8:	80 93 29 02 	sts	0x0229, r24
 6ac:	80 91 27 02 	lds	r24, 0x0227
 6b0:	80 93 28 02 	sts	0x0228, r24
 6b4:	80 91 26 02 	lds	r24, 0x0226
 6b8:	80 93 27 02 	sts	0x0227, r24
 6bc:	80 91 25 02 	lds	r24, 0x0225
 6c0:	80 93 26 02 	sts	0x0226, r24
			queue[0] = key_id;
 6c4:	10 93 25 02 	sts	0x0225, r17
			send();
 6c8:	d0 dd       	rcall	.-1120   	; 0x26a <send>
		}
	}
	// Autorepeat
	if (last_key==key_id) { // calc press2
 6ca:	80 91 34 02 	lds	r24, 0x0234
 6ce:	81 17       	cp	r24, r17
 6d0:	39 f4       	brne	.+14     	; 0x6e0 <key_press+0x28e>
		press_time2 = 1;
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	90 93 38 02 	sts	0x0238, r25
 6da:	80 93 37 02 	sts	0x0237, r24
 6de:	10 c0       	rjmp	.+32     	; 0x700 <key_press+0x2ae>
		repeat_time = 0;
	} else { // calc press1
		last_key = key_id;
 6e0:	10 93 34 02 	sts	0x0234, r17
		press_time = 1;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	90 93 36 02 	sts	0x0236, r25
 6ec:	80 93 35 02 	sts	0x0235, r24
		press_time2 = 0;
 6f0:	10 92 38 02 	sts	0x0238, r1
 6f4:	10 92 37 02 	sts	0x0237, r1
		release_time = 0;
 6f8:	10 92 3a 02 	sts	0x023A, r1
 6fc:	10 92 39 02 	sts	0x0239, r1
		repeat_time = 0;
 700:	10 92 3c 02 	sts	0x023C, r1
 704:	10 92 3b 02 	sts	0x023B, r1
	}
}
 708:	1f 91       	pop	r17
 70a:	08 95       	ret

0000070c <repeat_tick>:
	repeat_tick();
	_delay_ms(5);
}

void repeat_tick(void) {
	if (repeat_time) { // repeat pause
 70c:	80 91 3b 02 	lds	r24, 0x023B
 710:	90 91 3c 02 	lds	r25, 0x023C
 714:	00 97       	sbiw	r24, 0x00	; 0
 716:	41 f1       	breq	.+80     	; 0x768 <repeat_tick+0x5c>
		if (repeat_time<(release_time>>2)) {
 718:	20 91 39 02 	lds	r18, 0x0239
 71c:	30 91 3a 02 	lds	r19, 0x023A
 720:	36 95       	lsr	r19
 722:	27 95       	ror	r18
 724:	36 95       	lsr	r19
 726:	27 95       	ror	r18
 728:	82 17       	cp	r24, r18
 72a:	93 07       	cpc	r25, r19
 72c:	10 f4       	brcc	.+4      	; 0x732 <repeat_tick+0x26>
			repeat_time++;
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	3b c0       	rjmp	.+118    	; 0x7a8 <repeat_tick+0x9c>
		} else { // repeat press
			repeat_time = 1;
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	90 93 3c 02 	sts	0x023C, r25
 73a:	80 93 3b 02 	sts	0x023B, r24
			if (turbo_repeat) {
 73e:	80 91 2c 02 	lds	r24, 0x022C
 742:	88 23       	and	r24, r24
 744:	09 f4       	brne	.+2      	; 0x748 <repeat_tick+0x3c>
 746:	69 c0       	rjmp	.+210    	; 0x81a <repeat_tick+0x10e>
				keyboard_modifier_keys = mod_keys;
 748:	80 91 31 02 	lds	r24, 0x0231
 74c:	80 93 3d 02 	sts	0x023D, r24
				keyboard_keys[0] = get_code(last_key);
 750:	80 91 34 02 	lds	r24, 0x0234
 754:	63 dd       	rcall	.-1338   	; 0x21c <get_code>
 756:	80 93 3e 02 	sts	0x023E, r24
				if (! usb_keyboard_send()) { // repeat release
 75a:	01 d1       	rcall	.+514    	; 0x95e <usb_keyboard_send>
 75c:	88 23       	and	r24, r24
 75e:	09 f0       	breq	.+2      	; 0x762 <repeat_tick+0x56>
 760:	5c c0       	rjmp	.+184    	; 0x81a <repeat_tick+0x10e>
					keyboard_keys[0] = 0;
 762:	10 92 3e 02 	sts	0x023E, r1
					usb_keyboard_send();
 766:	fb c0       	rjmp	.+502    	; 0x95e <usb_keyboard_send>
				}
			}
		}
	} else if (press_time2) { // press2 pause
 768:	80 91 37 02 	lds	r24, 0x0237
 76c:	90 91 38 02 	lds	r25, 0x0238
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	f9 f0       	breq	.+62     	; 0x7b2 <repeat_tick+0xa6>
		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 774:	40 91 35 02 	lds	r20, 0x0235
 778:	50 91 36 02 	lds	r21, 0x0236
 77c:	20 91 6b 02 	lds	r18, 0x026B
 780:	22 23       	and	r18, r18
 782:	19 f0       	breq	.+6      	; 0x78a <repeat_tick+0x7e>
 784:	25 e0       	ldi	r18, 0x05	; 5
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	02 c0       	rjmp	.+4      	; 0x78e <repeat_tick+0x82>
 78a:	2e e1       	ldi	r18, 0x1E	; 30
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	24 0f       	add	r18, r20
 790:	35 1f       	adc	r19, r21
 792:	82 17       	cp	r24, r18
 794:	93 07       	cpc	r25, r19
 796:	30 f4       	brcc	.+12     	; 0x7a4 <repeat_tick+0x98>
			press_time2++;
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	90 93 38 02 	sts	0x0238, r25
 79e:	80 93 37 02 	sts	0x0237, r24
 7a2:	08 95       	ret
		} else {
			repeat_time = 1;
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	90 93 3c 02 	sts	0x023C, r25
 7ac:	80 93 3b 02 	sts	0x023B, r24
 7b0:	08 95       	ret
		}
	} else if (release_time) { // release pause
 7b2:	20 91 39 02 	lds	r18, 0x0239
 7b6:	30 91 3a 02 	lds	r19, 0x023A
 7ba:	80 91 35 02 	lds	r24, 0x0235
 7be:	90 91 36 02 	lds	r25, 0x0236
 7c2:	21 15       	cp	r18, r1
 7c4:	31 05       	cpc	r19, r1
 7c6:	d1 f0       	breq	.+52     	; 0x7fc <repeat_tick+0xf0>
		if (release_time<(press_time+50)) {
 7c8:	c2 96       	adiw	r24, 0x32	; 50
 7ca:	28 17       	cp	r18, r24
 7cc:	39 07       	cpc	r19, r25
 7ce:	38 f4       	brcc	.+14     	; 0x7de <repeat_tick+0xd2>
			release_time++;
 7d0:	2f 5f       	subi	r18, 0xFF	; 255
 7d2:	3f 4f       	sbci	r19, 0xFF	; 255
 7d4:	30 93 3a 02 	sts	0x023A, r19
 7d8:	20 93 39 02 	sts	0x0239, r18
 7dc:	08 95       	ret
		} else {
			last_key = 0;
 7de:	10 92 34 02 	sts	0x0234, r1
			release_time = 0;
 7e2:	10 92 3a 02 	sts	0x023A, r1
 7e6:	10 92 39 02 	sts	0x0239, r1
			press_time = 0;
 7ea:	10 92 36 02 	sts	0x0236, r1
 7ee:	10 92 35 02 	sts	0x0235, r1
			press_time2 = 0;
 7f2:	10 92 38 02 	sts	0x0238, r1
 7f6:	10 92 37 02 	sts	0x0237, r1
 7fa:	08 95       	ret
			release_time = 0;
		}
	} else if (press_time) { // press1 pause
 7fc:	00 97       	sbiw	r24, 0x00	; 0
 7fe:	69 f0       	breq	.+26     	; 0x81a <repeat_tick+0x10e>
		if (press_time<250) {
 800:	8a 3f       	cpi	r24, 0xFA	; 250
 802:	91 05       	cpc	r25, r1
 804:	30 f4       	brcc	.+12     	; 0x812 <repeat_tick+0x106>
			press_time++;
 806:	01 96       	adiw	r24, 0x01	; 1
 808:	90 93 36 02 	sts	0x0236, r25
 80c:	80 93 35 02 	sts	0x0235, r24
 810:	08 95       	ret
		} else {
			press_time = 0;
 812:	10 92 36 02 	sts	0x0236, r1
 816:	10 92 35 02 	sts	0x0235, r1
 81a:	08 95       	ret

0000081c <poll>:
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 81c:	8f 92       	push	r8
 81e:	9f 92       	push	r9
 820:	af 92       	push	r10
 822:	bf 92       	push	r11
 824:	cf 92       	push	r12
 826:	df 92       	push	r13
 828:	ef 92       	push	r14
 82a:	ff 92       	push	r15
 82c:	0f 93       	push	r16
 82e:	1f 93       	push	r17
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
 834:	02 ef       	ldi	r16, 0xF2	; 242
 836:	11 e0       	ldi	r17, 0x01	; 1
 838:	cc ef       	ldi	r28, 0xFC	; 252
 83a:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 83c:	99 24       	eor	r9, r9
		*row_port[row] &= ~row_bit[row];
 83e:	d8 01       	movw	r26, r16
 840:	ed 91       	ld	r30, X+
 842:	fc 91       	ld	r31, X
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 844:	5e 01       	movw	r10, r28
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
 846:	98 81       	ld	r25, Y
 848:	90 95       	com	r25
 84a:	80 81       	ld	r24, Z
 84c:	89 23       	and	r24, r25
 84e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 850:	b5 e0       	ldi	r27, 0x05	; 5
 852:	ba 95       	dec	r27
 854:	f1 f7       	brne	.-4      	; 0x852 <poll+0x36>
 856:	00 00       	nop
 858:	61 e0       	ldi	r22, 0x01	; 1
 85a:	e6 2e       	mov	r14, r22
 85c:	62 e0       	ldi	r22, 0x02	; 2
 85e:	f6 2e       	mov	r15, r22
 860:	59 e1       	ldi	r21, 0x19	; 25
 862:	c5 2e       	mov	r12, r21
 864:	52 e0       	ldi	r21, 0x02	; 2
 866:	d5 2e       	mov	r13, r21
	LED_ON;
	_delay_ms(1000);
	LED_OFF;
}

void poll() {
 868:	89 2c       	mov	r8, r9
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
			key_id = col*ROWS+row;
			if (! (*col_pin[col] & col_bit[col])) { // press key
 86a:	d7 01       	movw	r26, r14
 86c:	ed 91       	ld	r30, X+
 86e:	fd 91       	ld	r31, X+
 870:	7d 01       	movw	r14, r26
 872:	d6 01       	movw	r26, r12
 874:	8d 91       	ld	r24, X+
 876:	6d 01       	movw	r12, r26
 878:	90 81       	ld	r25, Z
 87a:	89 23       	and	r24, r25
 87c:	28 2d       	mov	r18, r8
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	49 f4       	brne	.+18     	; 0x894 <poll+0x78>
				if (! pressed[key_id]) {
 882:	28 5b       	subi	r18, 0xB8	; 184
 884:	3d 4f       	sbci	r19, 0xFD	; 253
 886:	f9 01       	movw	r30, r18
 888:	80 81       	ld	r24, Z
 88a:	88 23       	and	r24, r24
 88c:	59 f4       	brne	.+22     	; 0x8a4 <poll+0x88>
					key_press(key_id);
 88e:	88 2d       	mov	r24, r8
 890:	e0 dd       	rcall	.-1088   	; 0x452 <key_press>
 892:	08 c0       	rjmp	.+16     	; 0x8a4 <poll+0x88>
				}
			} else if (pressed[key_id]) { // release key
 894:	28 5b       	subi	r18, 0xB8	; 184
 896:	3d 4f       	sbci	r19, 0xFD	; 253
 898:	d9 01       	movw	r26, r18
 89a:	8c 91       	ld	r24, X
 89c:	88 23       	and	r24, r24
 89e:	11 f0       	breq	.+4      	; 0x8a4 <poll+0x88>
				key_release(key_id);
 8a0:	88 2d       	mov	r24, r8
 8a2:	fe dc       	rcall	.-1540   	; 0x2a0 <key_release>
 8a4:	b5 e0       	ldi	r27, 0x05	; 5
 8a6:	8b 0e       	add	r8, r27
void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
		*row_port[row] &= ~row_bit[row];
		_delay_us(1);
		for (col=0; col<COLS; col++) { // read columns
 8a8:	e9 e1       	ldi	r30, 0x19	; 25
 8aa:	ee 16       	cp	r14, r30
 8ac:	e2 e0       	ldi	r30, 0x02	; 2
 8ae:	fe 06       	cpc	r15, r30
 8b0:	e1 f6       	brne	.-72     	; 0x86a <poll+0x4e>
				}
			} else if (pressed[key_id]) { // release key
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
 8b2:	d8 01       	movw	r26, r16
 8b4:	ed 91       	ld	r30, X+
 8b6:	fd 91       	ld	r31, X+
 8b8:	8d 01       	movw	r16, r26
 8ba:	21 96       	adiw	r28, 0x01	; 1
 8bc:	80 81       	ld	r24, Z
 8be:	d5 01       	movw	r26, r10
 8c0:	9c 91       	ld	r25, X
 8c2:	89 2b       	or	r24, r25
 8c4:	80 83       	st	Z, r24
	LED_OFF;
}

void poll() {
	uint8_t row, col, key_id;
	for (row=0; row<ROWS; row++) { // scan rows
 8c6:	93 94       	inc	r9
 8c8:	b9 2d       	mov	r27, r9
 8ca:	b5 30       	cpi	r27, 0x05	; 5
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <poll+0xb4>
 8ce:	b7 cf       	rjmp	.-146    	; 0x83e <poll+0x22>
				key_release(key_id);
			}
		}
		*row_port[row] |= row_bit[row];
	}
	repeat_tick();
 8d0:	1d df       	rcall	.-454    	; 0x70c <repeat_tick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8d2:	ef e1       	ldi	r30, 0x1F	; 31
 8d4:	fe e4       	ldi	r31, 0x4E	; 78
 8d6:	31 97       	sbiw	r30, 0x01	; 1
 8d8:	f1 f7       	brne	.-4      	; 0x8d6 <poll+0xba>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <poll+0xc0>
 8dc:	00 00       	nop
	_delay_ms(5);
}
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	1f 91       	pop	r17
 8e4:	0f 91       	pop	r16
 8e6:	ff 90       	pop	r15
 8e8:	ef 90       	pop	r14
 8ea:	df 90       	pop	r13
 8ec:	cf 90       	pop	r12
 8ee:	bf 90       	pop	r11
 8f0:	af 90       	pop	r10
 8f2:	9f 90       	pop	r9
 8f4:	8f 90       	pop	r8
 8f6:	08 95       	ret

000008f8 <main>:
void key_release(uint8_t key_id);
uint8_t get_code(uint8_t key_id);

int main(void) {
	// Disable watchdog if enabled by bootloader/fuses
	MCUSR &= ~(1 << WDRF);
 8f8:	84 b7       	in	r24, 0x34	; 52
 8fa:	87 7f       	andi	r24, 0xF7	; 247
 8fc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 8fe:	88 e1       	ldi	r24, 0x18	; 24
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	f8 94       	cli
 904:	80 93 60 00 	sts	0x0060, r24
 908:	10 92 60 00 	sts	0x0060, r1
 90c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	80 e8       	ldi	r24, 0x80	; 128
 912:	0f b6       	in	r0, 0x3f	; 63
 914:	f8 94       	cli
 916:	80 93 61 00 	sts	0x0061, r24
 91a:	90 93 61 00 	sts	0x0061, r25
 91e:	0f be       	out	0x3f, r0	; 63

	// Disable clock division
	clock_prescale_set(clock_div_1);

	init();
 920:	56 dc       	rcall	.-1876   	; 0x1ce <init>
	for (;;) {
		poll();
 922:	7c df       	rcall	.-264    	; 0x81c <poll>
 924:	fe cf       	rjmp	.-4      	; 0x922 <main+0x2a>

00000926 <usb_wait_in_ready>:
 926:	80 91 e8 00 	lds	r24, 0x00E8
 92a:	80 ff       	sbrs	r24, 0
 92c:	fc cf       	rjmp	.-8      	; 0x926 <usb_wait_in_ready>
 92e:	08 95       	ret

00000930 <usb_init>:
 930:	80 ea       	ldi	r24, 0xA0	; 160
 932:	80 93 d8 00 	sts	0x00D8, r24
 936:	86 e0       	ldi	r24, 0x06	; 6
 938:	89 bd       	out	0x29, r24	; 41
 93a:	09 b4       	in	r0, 0x29	; 41
 93c:	00 fe       	sbrs	r0, 0
 93e:	fd cf       	rjmp	.-6      	; 0x93a <usb_init+0xa>
 940:	80 e8       	ldi	r24, 0x80	; 128
 942:	80 93 d8 00 	sts	0x00D8, r24
 946:	10 92 e0 00 	sts	0x00E0, r1
 94a:	10 92 45 02 	sts	0x0245, r1
 94e:	8c e0       	ldi	r24, 0x0C	; 12
 950:	80 93 e2 00 	sts	0x00E2, r24
 954:	78 94       	sei
 956:	08 95       	ret

00000958 <usb_configured>:
 958:	80 91 45 02 	lds	r24, 0x0245
 95c:	08 95       	ret

0000095e <usb_keyboard_send>:
 95e:	80 91 45 02 	lds	r24, 0x0245
 962:	88 23       	and	r24, r24
 964:	91 f1       	breq	.+100    	; 0x9ca <usb_keyboard_send+0x6c>
 966:	8f b7       	in	r24, 0x3f	; 63
 968:	f8 94       	cli
 96a:	93 e0       	ldi	r25, 0x03	; 3
 96c:	90 93 e9 00 	sts	0x00E9, r25
 970:	90 91 e4 00 	lds	r25, 0x00E4
 974:	9e 5c       	subi	r25, 0xCE	; 206
 976:	23 e0       	ldi	r18, 0x03	; 3
 978:	30 91 e8 00 	lds	r19, 0x00E8
 97c:	35 fd       	sbrc	r19, 5
 97e:	0e c0       	rjmp	.+28     	; 0x99c <usb_keyboard_send+0x3e>
 980:	8f bf       	out	0x3f, r24	; 63
 982:	80 91 45 02 	lds	r24, 0x0245
 986:	88 23       	and	r24, r24
 988:	01 f1       	breq	.+64     	; 0x9ca <usb_keyboard_send+0x6c>
 98a:	80 91 e4 00 	lds	r24, 0x00E4
 98e:	89 17       	cp	r24, r25
 990:	f1 f0       	breq	.+60     	; 0x9ce <usb_keyboard_send+0x70>
 992:	8f b7       	in	r24, 0x3f	; 63
 994:	f8 94       	cli
 996:	20 93 e9 00 	sts	0x00E9, r18
 99a:	ee cf       	rjmp	.-36     	; 0x978 <usb_keyboard_send+0x1a>
 99c:	90 91 3d 02 	lds	r25, 0x023D
 9a0:	90 93 f1 00 	sts	0x00F1, r25
 9a4:	10 92 f1 00 	sts	0x00F1, r1
 9a8:	ee e3       	ldi	r30, 0x3E	; 62
 9aa:	f2 e0       	ldi	r31, 0x02	; 2
 9ac:	91 91       	ld	r25, Z+
 9ae:	90 93 f1 00 	sts	0x00F1, r25
 9b2:	92 e0       	ldi	r25, 0x02	; 2
 9b4:	e4 34       	cpi	r30, 0x44	; 68
 9b6:	f9 07       	cpc	r31, r25
 9b8:	c9 f7       	brne	.-14     	; 0x9ac <usb_keyboard_send+0x4e>
 9ba:	9a e3       	ldi	r25, 0x3A	; 58
 9bc:	90 93 e8 00 	sts	0x00E8, r25
 9c0:	10 92 46 02 	sts	0x0246, r1
 9c4:	8f bf       	out	0x3f, r24	; 63
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	08 95       	ret
 9ca:	8f ef       	ldi	r24, 0xFF	; 255
 9cc:	08 95       	ret
 9ce:	8f ef       	ldi	r24, 0xFF	; 255
 9d0:	08 95       	ret

000009d2 <usb_keyboard_press>:
 9d2:	60 93 3d 02 	sts	0x023D, r22
 9d6:	80 93 3e 02 	sts	0x023E, r24
 9da:	c1 df       	rcall	.-126    	; 0x95e <usb_keyboard_send>
 9dc:	88 23       	and	r24, r24
 9de:	29 f4       	brne	.+10     	; 0x9ea <usb_keyboard_press+0x18>
 9e0:	10 92 3d 02 	sts	0x023D, r1
 9e4:	10 92 3e 02 	sts	0x023E, r1
 9e8:	ba cf       	rjmp	.-140    	; 0x95e <usb_keyboard_send>
 9ea:	08 95       	ret

000009ec <__vector_11>:
 9ec:	1f 92       	push	r1
 9ee:	0f 92       	push	r0
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	0f 92       	push	r0
 9f4:	11 24       	eor	r1, r1
 9f6:	2f 93       	push	r18
 9f8:	8f 93       	push	r24
 9fa:	9f 93       	push	r25
 9fc:	ef 93       	push	r30
 9fe:	ff 93       	push	r31
 a00:	80 91 e1 00 	lds	r24, 0x00E1
 a04:	10 92 e1 00 	sts	0x00E1, r1
 a08:	83 ff       	sbrs	r24, 3
 a0a:	0f c0       	rjmp	.+30     	; 0xa2a <__vector_11+0x3e>
 a0c:	10 92 e9 00 	sts	0x00E9, r1
 a10:	91 e0       	ldi	r25, 0x01	; 1
 a12:	90 93 eb 00 	sts	0x00EB, r25
 a16:	10 92 ec 00 	sts	0x00EC, r1
 a1a:	92 e2       	ldi	r25, 0x22	; 34
 a1c:	90 93 ed 00 	sts	0x00ED, r25
 a20:	98 e0       	ldi	r25, 0x08	; 8
 a22:	90 93 f0 00 	sts	0x00F0, r25
 a26:	10 92 45 02 	sts	0x0245, r1
 a2a:	82 ff       	sbrs	r24, 2
 a2c:	34 c0       	rjmp	.+104    	; 0xa96 <__vector_11+0xaa>
 a2e:	80 91 45 02 	lds	r24, 0x0245
 a32:	88 23       	and	r24, r24
 a34:	81 f1       	breq	.+96     	; 0xa96 <__vector_11+0xaa>
 a36:	20 91 2d 02 	lds	r18, 0x022D
 a3a:	22 23       	and	r18, r18
 a3c:	61 f1       	breq	.+88     	; 0xa96 <__vector_11+0xaa>
 a3e:	80 91 47 02 	lds	r24, 0x0247
 a42:	8f 5f       	subi	r24, 0xFF	; 255
 a44:	80 93 47 02 	sts	0x0247, r24
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	83 70       	andi	r24, 0x03	; 3
 a4c:	90 70       	andi	r25, 0x00	; 0
 a4e:	00 97       	sbiw	r24, 0x00	; 0
 a50:	11 f5       	brne	.+68     	; 0xa96 <__vector_11+0xaa>
 a52:	83 e0       	ldi	r24, 0x03	; 3
 a54:	80 93 e9 00 	sts	0x00E9, r24
 a58:	80 91 e8 00 	lds	r24, 0x00E8
 a5c:	85 ff       	sbrs	r24, 5
 a5e:	1b c0       	rjmp	.+54     	; 0xa96 <__vector_11+0xaa>
 a60:	80 91 46 02 	lds	r24, 0x0246
 a64:	8f 5f       	subi	r24, 0xFF	; 255
 a66:	80 93 46 02 	sts	0x0246, r24
 a6a:	82 17       	cp	r24, r18
 a6c:	a1 f4       	brne	.+40     	; 0xa96 <__vector_11+0xaa>
 a6e:	10 92 46 02 	sts	0x0246, r1
 a72:	80 91 3d 02 	lds	r24, 0x023D
 a76:	80 93 f1 00 	sts	0x00F1, r24
 a7a:	10 92 f1 00 	sts	0x00F1, r1
 a7e:	ee e3       	ldi	r30, 0x3E	; 62
 a80:	f2 e0       	ldi	r31, 0x02	; 2
 a82:	81 91       	ld	r24, Z+
 a84:	80 93 f1 00 	sts	0x00F1, r24
 a88:	82 e0       	ldi	r24, 0x02	; 2
 a8a:	e4 34       	cpi	r30, 0x44	; 68
 a8c:	f8 07       	cpc	r31, r24
 a8e:	c9 f7       	brne	.-14     	; 0xa82 <__vector_11+0x96>
 a90:	8a e3       	ldi	r24, 0x3A	; 58
 a92:	80 93 e8 00 	sts	0x00E8, r24
 a96:	ff 91       	pop	r31
 a98:	ef 91       	pop	r30
 a9a:	9f 91       	pop	r25
 a9c:	8f 91       	pop	r24
 a9e:	2f 91       	pop	r18
 aa0:	0f 90       	pop	r0
 aa2:	0f be       	out	0x3f, r0	; 63
 aa4:	0f 90       	pop	r0
 aa6:	1f 90       	pop	r1
 aa8:	18 95       	reti

00000aaa <__vector_12>:
 aaa:	1f 92       	push	r1
 aac:	0f 92       	push	r0
 aae:	0f b6       	in	r0, 0x3f	; 63
 ab0:	0f 92       	push	r0
 ab2:	11 24       	eor	r1, r1
 ab4:	cf 92       	push	r12
 ab6:	df 92       	push	r13
 ab8:	ef 92       	push	r14
 aba:	ff 92       	push	r15
 abc:	0f 93       	push	r16
 abe:	1f 93       	push	r17
 ac0:	2f 93       	push	r18
 ac2:	3f 93       	push	r19
 ac4:	4f 93       	push	r20
 ac6:	5f 93       	push	r21
 ac8:	6f 93       	push	r22
 aca:	7f 93       	push	r23
 acc:	8f 93       	push	r24
 ace:	9f 93       	push	r25
 ad0:	af 93       	push	r26
 ad2:	bf 93       	push	r27
 ad4:	ef 93       	push	r30
 ad6:	ff 93       	push	r31
 ad8:	df 93       	push	r29
 ada:	cf 93       	push	r28
 adc:	0f 92       	push	r0
 ade:	cd b7       	in	r28, 0x3d	; 61
 ae0:	de b7       	in	r29, 0x3e	; 62
 ae2:	10 92 e9 00 	sts	0x00E9, r1
 ae6:	80 91 e8 00 	lds	r24, 0x00E8
 aea:	83 ff       	sbrs	r24, 3
 aec:	39 c1       	rjmp	.+626    	; 0xd60 <__vector_12+0x2b6>
 aee:	20 91 f1 00 	lds	r18, 0x00F1
 af2:	30 91 f1 00 	lds	r19, 0x00F1
 af6:	80 91 f1 00 	lds	r24, 0x00F1
 afa:	c8 2e       	mov	r12, r24
 afc:	dd 24       	eor	r13, r13
 afe:	40 91 f1 00 	lds	r20, 0x00F1
 b02:	94 2f       	mov	r25, r20
 b04:	80 e0       	ldi	r24, 0x00	; 0
 b06:	c8 2a       	or	r12, r24
 b08:	d9 2a       	or	r13, r25
 b0a:	00 91 f1 00 	lds	r16, 0x00F1
 b0e:	10 e0       	ldi	r17, 0x00	; 0
 b10:	40 91 f1 00 	lds	r20, 0x00F1
 b14:	94 2f       	mov	r25, r20
 b16:	80 e0       	ldi	r24, 0x00	; 0
 b18:	08 2b       	or	r16, r24
 b1a:	19 2b       	or	r17, r25
 b1c:	60 91 f1 00 	lds	r22, 0x00F1
 b20:	a0 91 f1 00 	lds	r26, 0x00F1
 b24:	82 ef       	ldi	r24, 0xF2	; 242
 b26:	80 93 e8 00 	sts	0x00E8, r24
 b2a:	36 30       	cpi	r19, 0x06	; 6
 b2c:	09 f0       	breq	.+2      	; 0xb30 <__vector_12+0x86>
 b2e:	59 c0       	rjmp	.+178    	; 0xbe2 <__vector_12+0x138>
 b30:	8b e7       	ldi	r24, 0x7B	; 123
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	9c 01       	movw	r18, r24
 b36:	25 50       	subi	r18, 0x05	; 5
 b38:	30 40       	sbci	r19, 0x00	; 0
 b3a:	fc 01       	movw	r30, r24
 b3c:	37 97       	sbiw	r30, 0x07	; 7
 b3e:	45 91       	lpm	r20, Z+
 b40:	54 91       	lpm	r21, Z+
 b42:	4c 15       	cp	r20, r12
 b44:	5d 05       	cpc	r21, r13
 b46:	f9 f4       	brne	.+62     	; 0xb86 <__vector_12+0xdc>
 b48:	f9 01       	movw	r30, r18
 b4a:	45 91       	lpm	r20, Z+
 b4c:	54 91       	lpm	r21, Z+
 b4e:	40 17       	cp	r20, r16
 b50:	51 07       	cpc	r21, r17
 b52:	c9 f4       	brne	.+50     	; 0xb86 <__vector_12+0xdc>
 b54:	2e 5f       	subi	r18, 0xFE	; 254
 b56:	3f 4f       	sbci	r19, 0xFF	; 255
 b58:	f9 01       	movw	r30, r18
 b5a:	85 91       	lpm	r24, Z+
 b5c:	94 91       	lpm	r25, Z+
 b5e:	2e 5f       	subi	r18, 0xFE	; 254
 b60:	3f 4f       	sbci	r19, 0xFF	; 255
 b62:	f9 01       	movw	r30, r18
 b64:	24 91       	lpm	r18, Z+
 b66:	46 2f       	mov	r20, r22
 b68:	50 e0       	ldi	r21, 0x00	; 0
 b6a:	7a 2f       	mov	r23, r26
 b6c:	60 e0       	ldi	r22, 0x00	; 0
 b6e:	46 2b       	or	r20, r22
 b70:	57 2b       	or	r21, r23
 b72:	4f 3f       	cpi	r20, 0xFF	; 255
 b74:	51 05       	cpc	r21, r1
 b76:	19 f0       	breq	.+6      	; 0xb7e <__vector_12+0xd4>
 b78:	10 f0       	brcs	.+4      	; 0xb7e <__vector_12+0xd4>
 b7a:	4f ef       	ldi	r20, 0xFF	; 255
 b7c:	50 e0       	ldi	r21, 0x00	; 0
 b7e:	42 17       	cp	r20, r18
 b80:	50 f4       	brcc	.+20     	; 0xb96 <__vector_12+0xec>
 b82:	24 2f       	mov	r18, r20
 b84:	08 c0       	rjmp	.+16     	; 0xb96 <__vector_12+0xec>
 b86:	07 96       	adiw	r24, 0x07	; 7
 b88:	29 5f       	subi	r18, 0xF9	; 249
 b8a:	3f 4f       	sbci	r19, 0xFF	; 255
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	8c 3a       	cpi	r24, 0xAC	; 172
 b90:	9f 07       	cpc	r25, r31
 b92:	99 f6       	brne	.-90     	; 0xb3a <__vector_12+0x90>
 b94:	e5 c0       	rjmp	.+458    	; 0xd60 <__vector_12+0x2b6>
 b96:	ae ef       	ldi	r26, 0xFE	; 254
 b98:	40 91 e8 00 	lds	r20, 0x00E8
 b9c:	50 e0       	ldi	r21, 0x00	; 0
 b9e:	ba 01       	movw	r22, r20
 ba0:	65 70       	andi	r22, 0x05	; 5
 ba2:	70 70       	andi	r23, 0x00	; 0
 ba4:	61 15       	cp	r22, r1
 ba6:	71 05       	cpc	r23, r1
 ba8:	b9 f3       	breq	.-18     	; 0xb98 <__vector_12+0xee>
 baa:	42 fd       	sbrc	r20, 2
 bac:	dc c0       	rjmp	.+440    	; 0xd66 <__vector_12+0x2bc>
 bae:	32 2f       	mov	r19, r18
 bb0:	21 32       	cpi	r18, 0x21	; 33
 bb2:	08 f0       	brcs	.+2      	; 0xbb6 <__vector_12+0x10c>
 bb4:	30 e2       	ldi	r19, 0x20	; 32
 bb6:	ac 01       	movw	r20, r24
 bb8:	63 2f       	mov	r22, r19
 bba:	07 c0       	rjmp	.+14     	; 0xbca <__vector_12+0x120>
 bbc:	fa 01       	movw	r30, r20
 bbe:	4f 5f       	subi	r20, 0xFF	; 255
 bc0:	5f 4f       	sbci	r21, 0xFF	; 255
 bc2:	e4 91       	lpm	r30, Z+
 bc4:	e0 93 f1 00 	sts	0x00F1, r30
 bc8:	61 50       	subi	r22, 0x01	; 1
 bca:	66 23       	and	r22, r22
 bcc:	b9 f7       	brne	.-18     	; 0xbbc <__vector_12+0x112>
 bce:	83 0f       	add	r24, r19
 bd0:	91 1d       	adc	r25, r1
 bd2:	23 1b       	sub	r18, r19
 bd4:	a0 93 e8 00 	sts	0x00E8, r26
 bd8:	22 23       	and	r18, r18
 bda:	f1 f6       	brne	.-68     	; 0xb98 <__vector_12+0xee>
 bdc:	30 32       	cpi	r19, 0x20	; 32
 bde:	e1 f2       	breq	.-72     	; 0xb98 <__vector_12+0xee>
 be0:	c2 c0       	rjmp	.+388    	; 0xd66 <__vector_12+0x2bc>
 be2:	35 30       	cpi	r19, 0x05	; 5
 be4:	49 f4       	brne	.+18     	; 0xbf8 <__vector_12+0x14e>
 be6:	8e ef       	ldi	r24, 0xFE	; 254
 be8:	80 93 e8 00 	sts	0x00E8, r24
 bec:	9c de       	rcall	.-712    	; 0x926 <usb_wait_in_ready>
 bee:	8c 2d       	mov	r24, r12
 bf0:	80 68       	ori	r24, 0x80	; 128
 bf2:	80 93 e3 00 	sts	0x00E3, r24
 bf6:	b7 c0       	rjmp	.+366    	; 0xd66 <__vector_12+0x2bc>
 bf8:	39 30       	cpi	r19, 0x09	; 9
 bfa:	31 f5       	brne	.+76     	; 0xc48 <__vector_12+0x19e>
 bfc:	22 23       	and	r18, r18
 bfe:	09 f0       	breq	.+2      	; 0xc02 <__vector_12+0x158>
 c00:	69 c0       	rjmp	.+210    	; 0xcd4 <__vector_12+0x22a>
 c02:	c0 92 45 02 	sts	0x0245, r12
 c06:	8e ef       	ldi	r24, 0xFE	; 254
 c08:	80 93 e8 00 	sts	0x00E8, r24
 c0c:	41 e0       	ldi	r20, 0x01	; 1
 c0e:	85 ea       	ldi	r24, 0xA5	; 165
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	40 93 e9 00 	sts	0x00E9, r20
 c16:	fc 01       	movw	r30, r24
 c18:	01 96       	adiw	r24, 0x01	; 1
 c1a:	e4 91       	lpm	r30, Z+
 c1c:	e0 93 eb 00 	sts	0x00EB, r30
 c20:	ee 23       	and	r30, r30
 c22:	69 f0       	breq	.+26     	; 0xc3e <__vector_12+0x194>
 c24:	9c 01       	movw	r18, r24
 c26:	2f 5f       	subi	r18, 0xFF	; 255
 c28:	3f 4f       	sbci	r19, 0xFF	; 255
 c2a:	fc 01       	movw	r30, r24
 c2c:	84 91       	lpm	r24, Z+
 c2e:	80 93 ec 00 	sts	0x00EC, r24
 c32:	c9 01       	movw	r24, r18
 c34:	01 96       	adiw	r24, 0x01	; 1
 c36:	f9 01       	movw	r30, r18
 c38:	24 91       	lpm	r18, Z+
 c3a:	20 93 ed 00 	sts	0x00ED, r18
 c3e:	4f 5f       	subi	r20, 0xFF	; 255
 c40:	45 30       	cpi	r20, 0x05	; 5
 c42:	39 f7       	brne	.-50     	; 0xc12 <__vector_12+0x168>
 c44:	8e e1       	ldi	r24, 0x1E	; 30
 c46:	41 c0       	rjmp	.+130    	; 0xcca <__vector_12+0x220>
 c48:	38 30       	cpi	r19, 0x08	; 8
 c4a:	39 f4       	brne	.+14     	; 0xc5a <__vector_12+0x1b0>
 c4c:	20 38       	cpi	r18, 0x80	; 128
 c4e:	09 f0       	breq	.+2      	; 0xc52 <__vector_12+0x1a8>
 c50:	41 c0       	rjmp	.+130    	; 0xcd4 <__vector_12+0x22a>
 c52:	69 de       	rcall	.-814    	; 0x926 <usb_wait_in_ready>
 c54:	80 91 45 02 	lds	r24, 0x0245
 c58:	61 c0       	rjmp	.+194    	; 0xd1c <__vector_12+0x272>
 c5a:	33 23       	and	r19, r19
 c5c:	a9 f4       	brne	.+42     	; 0xc88 <__vector_12+0x1de>
 c5e:	29 83       	std	Y+1, r18	; 0x01
 c60:	62 de       	rcall	.-828    	; 0x926 <usb_wait_in_ready>
 c62:	29 81       	ldd	r18, Y+1	; 0x01
 c64:	22 38       	cpi	r18, 0x82	; 130
 c66:	51 f4       	brne	.+20     	; 0xc7c <__vector_12+0x1d2>
 c68:	00 93 e9 00 	sts	0x00E9, r16
 c6c:	90 91 eb 00 	lds	r25, 0x00EB
 c70:	81 e0       	ldi	r24, 0x01	; 1
 c72:	95 ff       	sbrs	r25, 5
 c74:	80 e0       	ldi	r24, 0x00	; 0
 c76:	10 92 e9 00 	sts	0x00E9, r1
 c7a:	01 c0       	rjmp	.+2      	; 0xc7e <__vector_12+0x1d4>
 c7c:	80 e0       	ldi	r24, 0x00	; 0
 c7e:	80 93 f1 00 	sts	0x00F1, r24
 c82:	10 92 f1 00 	sts	0x00F1, r1
 c86:	68 c0       	rjmp	.+208    	; 0xd58 <__vector_12+0x2ae>
 c88:	31 30       	cpi	r19, 0x01	; 1
 c8a:	11 f0       	breq	.+4      	; 0xc90 <__vector_12+0x1e6>
 c8c:	33 30       	cpi	r19, 0x03	; 3
 c8e:	11 f5       	brne	.+68     	; 0xcd4 <__vector_12+0x22a>
 c90:	22 30       	cpi	r18, 0x02	; 2
 c92:	01 f5       	brne	.+64     	; 0xcd4 <__vector_12+0x22a>
 c94:	c1 14       	cp	r12, r1
 c96:	d1 04       	cpc	r13, r1
 c98:	e9 f4       	brne	.+58     	; 0xcd4 <__vector_12+0x22a>
 c9a:	40 2f       	mov	r20, r16
 c9c:	4f 77       	andi	r20, 0x7F	; 127
 c9e:	84 2f       	mov	r24, r20
 ca0:	81 50       	subi	r24, 0x01	; 1
 ca2:	84 30       	cpi	r24, 0x04	; 4
 ca4:	b8 f4       	brcc	.+46     	; 0xcd4 <__vector_12+0x22a>
 ca6:	8e ef       	ldi	r24, 0xFE	; 254
 ca8:	80 93 e8 00 	sts	0x00E8, r24
 cac:	40 93 e9 00 	sts	0x00E9, r20
 cb0:	33 30       	cpi	r19, 0x03	; 3
 cb2:	09 f4       	brne	.+2      	; 0xcb6 <__vector_12+0x20c>
 cb4:	55 c0       	rjmp	.+170    	; 0xd60 <__vector_12+0x2b6>
 cb6:	89 e1       	ldi	r24, 0x19	; 25
 cb8:	80 93 eb 00 	sts	0x00EB, r24
 cbc:	81 e0       	ldi	r24, 0x01	; 1
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <__vector_12+0x21c>
 cc2:	88 0f       	add	r24, r24
 cc4:	99 1f       	adc	r25, r25
 cc6:	4a 95       	dec	r20
 cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <__vector_12+0x218>
 cca:	80 93 ea 00 	sts	0x00EA, r24
 cce:	10 92 ea 00 	sts	0x00EA, r1
 cd2:	49 c0       	rjmp	.+146    	; 0xd66 <__vector_12+0x2bc>
 cd4:	01 15       	cp	r16, r1
 cd6:	11 05       	cpc	r17, r1
 cd8:	09 f0       	breq	.+2      	; 0xcdc <__vector_12+0x232>
 cda:	42 c0       	rjmp	.+132    	; 0xd60 <__vector_12+0x2b6>
 cdc:	21 3a       	cpi	r18, 0xA1	; 161
 cde:	09 f5       	brne	.+66     	; 0xd22 <__vector_12+0x278>
 ce0:	31 30       	cpi	r19, 0x01	; 1
 ce2:	89 f4       	brne	.+34     	; 0xd06 <__vector_12+0x25c>
 ce4:	20 de       	rcall	.-960    	; 0x926 <usb_wait_in_ready>
 ce6:	80 91 3d 02 	lds	r24, 0x023D
 cea:	80 93 f1 00 	sts	0x00F1, r24
 cee:	10 92 f1 00 	sts	0x00F1, r1
 cf2:	ee e3       	ldi	r30, 0x3E	; 62
 cf4:	f2 e0       	ldi	r31, 0x02	; 2
 cf6:	81 91       	ld	r24, Z+
 cf8:	80 93 f1 00 	sts	0x00F1, r24
 cfc:	22 e0       	ldi	r18, 0x02	; 2
 cfe:	e4 34       	cpi	r30, 0x44	; 68
 d00:	f2 07       	cpc	r31, r18
 d02:	c9 f7       	brne	.-14     	; 0xcf6 <__vector_12+0x24c>
 d04:	29 c0       	rjmp	.+82     	; 0xd58 <__vector_12+0x2ae>
 d06:	32 30       	cpi	r19, 0x02	; 2
 d08:	21 f4       	brne	.+8      	; 0xd12 <__vector_12+0x268>
 d0a:	0d de       	rcall	.-998    	; 0x926 <usb_wait_in_ready>
 d0c:	80 91 2d 02 	lds	r24, 0x022D
 d10:	05 c0       	rjmp	.+10     	; 0xd1c <__vector_12+0x272>
 d12:	33 30       	cpi	r19, 0x03	; 3
 d14:	29 f5       	brne	.+74     	; 0xd60 <__vector_12+0x2b6>
 d16:	07 de       	rcall	.-1010   	; 0x926 <usb_wait_in_ready>
 d18:	80 91 2e 02 	lds	r24, 0x022E
 d1c:	80 93 f1 00 	sts	0x00F1, r24
 d20:	1b c0       	rjmp	.+54     	; 0xd58 <__vector_12+0x2ae>
 d22:	21 32       	cpi	r18, 0x21	; 33
 d24:	e9 f4       	brne	.+58     	; 0xd60 <__vector_12+0x2b6>
 d26:	39 30       	cpi	r19, 0x09	; 9
 d28:	61 f4       	brne	.+24     	; 0xd42 <__vector_12+0x298>
 d2a:	80 91 e8 00 	lds	r24, 0x00E8
 d2e:	82 ff       	sbrs	r24, 2
 d30:	fc cf       	rjmp	.-8      	; 0xd2a <__vector_12+0x280>
 d32:	80 91 f1 00 	lds	r24, 0x00F1
 d36:	80 93 44 02 	sts	0x0244, r24
 d3a:	8b ef       	ldi	r24, 0xFB	; 251
 d3c:	80 93 e8 00 	sts	0x00E8, r24
 d40:	0b c0       	rjmp	.+22     	; 0xd58 <__vector_12+0x2ae>
 d42:	3a 30       	cpi	r19, 0x0A	; 10
 d44:	29 f4       	brne	.+10     	; 0xd50 <__vector_12+0x2a6>
 d46:	d0 92 2d 02 	sts	0x022D, r13
 d4a:	10 92 46 02 	sts	0x0246, r1
 d4e:	04 c0       	rjmp	.+8      	; 0xd58 <__vector_12+0x2ae>
 d50:	3b 30       	cpi	r19, 0x0B	; 11
 d52:	31 f4       	brne	.+12     	; 0xd60 <__vector_12+0x2b6>
 d54:	c0 92 2e 02 	sts	0x022E, r12
 d58:	8e ef       	ldi	r24, 0xFE	; 254
 d5a:	80 93 e8 00 	sts	0x00E8, r24
 d5e:	03 c0       	rjmp	.+6      	; 0xd66 <__vector_12+0x2bc>
 d60:	81 e2       	ldi	r24, 0x21	; 33
 d62:	80 93 eb 00 	sts	0x00EB, r24
 d66:	0f 90       	pop	r0
 d68:	cf 91       	pop	r28
 d6a:	df 91       	pop	r29
 d6c:	ff 91       	pop	r31
 d6e:	ef 91       	pop	r30
 d70:	bf 91       	pop	r27
 d72:	af 91       	pop	r26
 d74:	9f 91       	pop	r25
 d76:	8f 91       	pop	r24
 d78:	7f 91       	pop	r23
 d7a:	6f 91       	pop	r22
 d7c:	5f 91       	pop	r21
 d7e:	4f 91       	pop	r20
 d80:	3f 91       	pop	r19
 d82:	2f 91       	pop	r18
 d84:	1f 91       	pop	r17
 d86:	0f 91       	pop	r16
 d88:	ff 90       	pop	r15
 d8a:	ef 90       	pop	r14
 d8c:	df 90       	pop	r13
 d8e:	cf 90       	pop	r12
 d90:	0f 90       	pop	r0
 d92:	0f be       	out	0x3f, r0	; 63
 d94:	0f 90       	pop	r0
 d96:	1f 90       	pop	r1
 d98:	18 95       	reti

00000d9a <_exit>:
 d9a:	f8 94       	cli

00000d9c <__stop_program>:
 d9c:	ff cf       	rjmp	.-2      	; 0xd9c <__stop_program>
