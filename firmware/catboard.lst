   1               		.file	"catboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.section	.text.init,"ax",@progbits
  10               	.global	init
  12               	init:
  13               	.LFB9:
  14               		.file 1 "catboard.c"
   1:catboard.c    **** /*
   2:catboard.c    **** * Project: CatBoard (http://ibnteo.klava.org/tag/catboard)
   3:catboard.c    **** * Version: 1.1
   4:catboard.c    **** * Date: 2013-03-23
   5:catboard.c    **** * Author: Vladimir Romanovich <ibnteo@gmail.com>
   6:catboard.c    **** * License: GPL2
   7:catboard.c    **** * 
   8:catboard.c    **** * Based on: http://geekhack.org/index.php?topic=15542.0
   9:catboard.c    **** * 
  10:catboard.c    **** * Board: AVR-USB162 (http://microsin.ru/content/view/685/44/) analogue Teensy
  11:catboard.c    **** */
  12:catboard.c    **** 
  13:catboard.c    **** #include <avr/io.h>
  14:catboard.c    **** #include <avr/pgmspace.h>
  15:catboard.c    **** #include <avr/interrupt.h>
  16:catboard.c    **** #include <avr/wdt.h>
  17:catboard.c    **** #include <avr/power.h>
  18:catboard.c    **** #include <util/delay.h>
  19:catboard.c    **** #include "usb_keyboard.h"
  20:catboard.c    **** 
  21:catboard.c    **** #define STR_MANUFACTURER	L"ibnTeo"
  22:catboard.c    **** #define STR_PRODUCT		L"Catboard"
  23:catboard.c    **** 
  24:catboard.c    **** #define LED_CONFIG	(DDRD	|= (1<<4))
  25:catboard.c    **** #define LED_OFF		(PORTD	&= ~(1<<4))
  26:catboard.c    **** #define LED_ON		(PORTD	|= (1<<4))
  27:catboard.c    **** 
  28:catboard.c    **** #define _PINC		(uint8_t *const)&PINC
  29:catboard.c    **** #define _PORTC		(uint8_t *const)&PORTC
  30:catboard.c    **** #define _PIND		(uint8_t *const)&PIND
  31:catboard.c    **** #define _PORTD		(uint8_t *const)&PORTD
  32:catboard.c    **** #define _PORTB		(uint8_t *const)&PORTB
  33:catboard.c    **** #define _PINB		(uint8_t *const)&PINB
  34:catboard.c    **** 
  35:catboard.c    **** #define ROWS	5
  36:catboard.c    **** #define COLS	12
  37:catboard.c    **** #define KEYS	COLS*ROWS
  38:catboard.c    **** 
  39:catboard.c    **** #define NULL				0
  40:catboard.c    **** #define NA					0
  41:catboard.c    **** #define KEY_LAYER1			0xF1
  42:catboard.c    **** #define KEY_LAYER2			0xF2
  43:catboard.c    **** #define KEY_MY_SHIFT		0xF3
  44:catboard.c    **** #define KEY_TURBO_REPEAT	0xFB
  45:catboard.c    **** #define KEY_MAC_MODE		0xFC // (+Shift)
  46:catboard.c    **** #define KEY_ALT_TAB			0xFD
  47:catboard.c    **** #define KEY_FN_LOCK			0xFE
  48:catboard.c    **** #define KEY_FN				0xFF
  49:catboard.c    **** #define FN_KEY_ID			7*5
  50:catboard.c    **** #define KEY_MOD				0x80
  51:catboard.c    **** #define KEY_NULL			0
  52:catboard.c    **** 
  53:catboard.c    **** #define KEY_PRESSED_FN		1
  54:catboard.c    **** #define KEY_PRESSED_MODS	2
  55:catboard.c    **** #define KEY_PRESSED_ALT		3
  56:catboard.c    **** #define KEY_PRESSED_SHIFT	4
  57:catboard.c    **** #define KEY_PRESSED_CTRL	5
  58:catboard.c    **** #define KEY_PRESSED_PREV	6
  59:catboard.c    **** 
  60:catboard.c    **** // 0 - shorcuts my layout; 1 - shorcuts qwerty layout
  61:catboard.c    **** #define KEY_SHORTCUTS_LAYER1	1
  62:catboard.c    **** 
  63:catboard.c    **** // Nonstandart hardware layout
  64:catboard.c    **** #define KEY_LAYOUT_ALT_SHIFT	1
  65:catboard.c    **** #define KEY_LAYOUT_CTRL_SHIFT	2
  66:catboard.c    **** #define KEY_LAYOUT_GUI_SPACE	3
  67:catboard.c    **** 
  68:catboard.c    **** //#define KEY_LAYOUT		0
  69:catboard.c    **** #define KEY_LAYOUT		KEY_LAYOUT_ALT_SHIFT
  70:catboard.c    **** 
  71:catboard.c    **** #include "jcuken.h"
  72:catboard.c    **** //#include "dvorak.h"
  73:catboard.c    **** 
  74:catboard.c    **** // Start layout
  75:catboard.c    **** //uint8_t *layout = layer1;
  76:catboard.c    **** uint8_t *layout = layer2;
  77:catboard.c    **** 
  78:catboard.c    **** // Mac mode off
  79:catboard.c    **** uint8_t mac_mode = 0;
  80:catboard.c    **** 
  81:catboard.c    **** // 0x00-0x7F - normal keys
  82:catboard.c    **** // 0x80-0xF0 - mod_keys | 0x80
  83:catboard.c    **** // 0xF1-0xFF - catboard keys
  84:catboard.c    **** 
  85:catboard.c    **** const uint8_t layer1[KEYS] = {
  86:catboard.c    **** 	//ROW0				ROW1				ROW2			ROW3			ROW4
  87:catboard.c    **** 	KEY_ESC,			KEY_LAYER1,			KEY_RIGHT_CTRL|KEY_MOD,KEY_TAB,	KEY_TILDE,		// COL0
  88:catboard.c    **** 	KEY_ALT_TAB,		KEY_Z,				KEY_A,			KEY_Q,			KEY_1,			// COL1
  89:catboard.c    **** 	KEY_ALT|KEY_MOD,	KEY_X,				KEY_S,			KEY_W,			KEY_2,			// COL2
  90:catboard.c    **** 	KEY_ALT|KEY_MOD,	KEY_C,				KEY_D,			KEY_E,			KEY_3,			// COL3
  91:catboard.c    **** 	KEY_CTRL|KEY_MOD,	KEY_V,				KEY_F,			KEY_R,			KEY_4,			// COL4
  92:catboard.c    **** 	KEY_MY_SHIFT,		KEY_B,				KEY_G,			KEY_T,			KEY_5,			// COL5
  93:catboard.c    **** 	KEY_SPACE,			KEY_N,				KEY_H,			KEY_Y,			KEY_6,			// COL6 
  94:catboard.c    **** 	KEY_FN,				KEY_M,				KEY_J,			KEY_U,			KEY_7,			// COL7
  95:catboard.c    **** 	KEY_RIGHT_ALT|KEY_MOD,KEY_COMMA,		KEY_K,			KEY_I,			KEY_8,			// COL8
  96:catboard.c    **** 	KEY_BACKSLASH,		KEY_PERIOD,			KEY_L,			KEY_O,			KEY_9,			// COL9
  97:catboard.c    **** 	KEY_RIGHT_BRACE,	KEY_SLASH,			KEY_SEMICOLON,	KEY_P,			KEY_0,			// COL10
  98:catboard.c    **** 	KEY_EQUAL,			KEY_LAYER2,			KEY_QUOTE,		KEY_LEFT_BRACE,	KEY_MINUS		// COL11
  99:catboard.c    **** };
 100:catboard.c    **** 
 101:catboard.c    **** 
 102:catboard.c    **** const uint8_t layer_fn[KEYS] = {
 103:catboard.c    **** 	//ROW0				ROW1				ROW2			ROW3			ROW4
 104:catboard.c    **** 	KEY_TURBO_REPEAT,	KEY_LAYER1,			KEY_RIGHT_CTRL|KEY_MOD,KEY_TAB,	KEY_PRINTSCREEN,// COL0
 105:catboard.c    **** 	KEY_TAB,			NULL,				NULL,			NULL,			KEY_F1,			// COL1
 106:catboard.c    **** 	KEY_ALT|KEY_MOD,	NULL,				NULL,			NULL,			KEY_F2,			// COL2
 107:catboard.c    **** 	KEY_ALT|KEY_MOD,	NULL,				NULL,			NULL,			KEY_F3,			// COL3
 108:catboard.c    **** 	KEY_CTRL|KEY_MOD,	NULL,				NULL,			NULL,			KEY_F4,			// COL4
 109:catboard.c    **** 	KEY_MY_SHIFT,		NULL,				NULL,			KEY_TILDE,		KEY_F5,			// COL5
 110:catboard.c    **** 	KEY_MAC_MODE,		KEY_BACKSPACE,		KEY_ENTER,		KEY_ENTER,		KEY_F6,			// COL6 
 111:catboard.c    **** 	KEY_FN,				KEY_DELETE,			KEY_LEFT,		KEY_HOME,		KEY_F7,			// COL7
 112:catboard.c    **** 	KEY_FN_LOCK,		KEY_INSERT,			KEY_DOWN,		KEY_UP,			KEY_F8,			// COL8
 113:catboard.c    **** 	NULL,				NULL,				KEY_RIGHT,		KEY_END,		KEY_F9,			// COL9
 114:catboard.c    **** 	KEY_SCROLL_LOCK,	NULL,				KEY_PAGE_DOWN,	KEY_PAGE_UP,	KEY_F10,		// COL10
 115:catboard.c    **** 	KEY_F12,			KEY_LAYER2,			KEY_PAUSE,	KEY_ESC,		KEY_F11			// COL11
 116:catboard.c    **** };
 117:catboard.c    **** 
 118:catboard.c    **** const uint8_t layer_fnlock[KEYS] = {
 119:catboard.c    **** 	//ROW0				ROW1				ROW2			ROW3			ROW4
 120:catboard.c    **** 	KEY_ESC,			KEY_SHIFT|KEY_MOD,	KEY_RIGHT_CTRL|KEY_MOD,KEY_TAB,	KEY_TILDE,		// COL0
 121:catboard.c    **** 	KEY_ALT_TAB,		NULL,				KEY_PAGE_DOWN,	KEY_PAGE_UP,	KEY_1,			// COL1
 122:catboard.c    **** 	KEY_ALT|KEY_MOD,	NULL,				KEY_LEFT,		KEY_HOME,		KEY_2,			// COL2
 123:catboard.c    **** 	KEY_ALT|KEY_MOD,	NULL,				KEY_DOWN,		KEY_UP,			KEY_3,			// COL3
 124:catboard.c    **** 	KEY_CTRL|KEY_MOD,	NULL,				KEY_RIGHT,		KEY_END,		KEY_4,			// COL4
 125:catboard.c    **** 	KEY_SPACE,			NULL,				KEY_ENTER,		KEY_TILDE,		KEY_5,			// COL5
 126:catboard.c    **** 	KEY_SPACE,			KEYPAD_0,			KEYPAD_ASTERIX,	KEYPAD_SLASH,	KEY_6,			// COL6 
 127:catboard.c    **** 	KEY_FN,				KEYPAD_1,			KEYPAD_4,		KEYPAD_7,		KEY_7,			// COL7
 128:catboard.c    **** 	KEY_RIGHT_ALT|KEY_MOD,KEYPAD_2,			KEYPAD_5,		KEYPAD_8,		KEY_8,			// COL8
 129:catboard.c    **** 	KEY_ENTER,			KEYPAD_3,			KEYPAD_6,		KEYPAD_9,		KEY_9,			// COL9
 130:catboard.c    **** 	KEY_NUM_LOCK,		KEYPAD_PERIOD,		KEYPAD_PLUS,	KEYPAD_MINUS,	KEY_0,			// COL10
 131:catboard.c    **** 	KEY_EQUAL,			KEY_RIGHT_SHIFT|KEY_MOD,KEY_ENTER,	KEY_ESC,		KEY_MINUS		// COL11
 132:catboard.c    **** };
 133:catboard.c    **** 
 134:catboard.c    **** // Pins keyboard matrix (have to properly initialize ports)
 135:catboard.c    **** uint8_t *const	row_port[ROWS]	= { _PORTC,	_PORTC,	_PORTC,	_PORTC,	_PORTC};
 136:catboard.c    **** const uint8_t	row_bit[ROWS]	= { (1<<7),	(1<<6),	(1<<5),	(1<<4),	(1<<2)};
 137:catboard.c    **** uint8_t *const	col_pin[COLS]	= {_PIND, _PIND, _PIND, _PIND, _PIND, _PIND, _PINB,	_PINB,	_PINB, _PIN
 138:catboard.c    **** const uint8_t	col_bit[COLS]	= { (1<<6),	(1<<5),	(1<<3),	(1<<2),	(1<<1),	(1<<0),	(1<<7),	(1<<6),	(1<
 139:catboard.c    **** 
 140:catboard.c    **** uint8_t *const col_pin_sw2 = _PIND;
 141:catboard.c    **** const uint8_t col_bit_sw2 = (1<<7);
 142:catboard.c    **** 
 143:catboard.c    **** int8_t pressed[KEYS];
 144:catboard.c    **** int8_t pressed_sw2 = 0;
 145:catboard.c    **** uint8_t queue[7] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 146:catboard.c    **** uint8_t mod_keys = 0;
 147:catboard.c    **** uint8_t *prev_layer = 0;
 148:catboard.c    **** 
 149:catboard.c    **** uint8_t turbo_repeat = 1;
 150:catboard.c    **** 
 151:catboard.c    **** uint8_t last_key = 0xFF;
 152:catboard.c    **** uint16_t press_time = 0;
 153:catboard.c    **** uint16_t press_time2 = 0;
 154:catboard.c    **** uint16_t release_time = 0;
 155:catboard.c    **** uint16_t repeat_time = 0;
 156:catboard.c    **** 
 157:catboard.c    **** void init(void);
 158:catboard.c    **** void send(void);
 159:catboard.c    **** void poll(void);
 160:catboard.c    **** void repeat_tick(void);
 161:catboard.c    **** void key_press(uint8_t key_id);
 162:catboard.c    **** void key_release(uint8_t key_id);
 163:catboard.c    **** void key_press_sw2(void);
 164:catboard.c    **** void key_release_sw2(void);
 165:catboard.c    **** uint8_t get_code(uint8_t key_id);
 166:catboard.c    **** 
 167:catboard.c    **** int main(void) {
 168:catboard.c    **** 	// Disable watchdog if enabled by bootloader/fuses
 169:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 170:catboard.c    **** 	wdt_disable();
 171:catboard.c    **** 
 172:catboard.c    **** 	// Disable clock division
 173:catboard.c    **** 	clock_prescale_set(clock_div_1);
 174:catboard.c    **** 
 175:catboard.c    **** 	init();
 176:catboard.c    **** 	for (;;) {
 177:catboard.c    **** 		poll();
 178:catboard.c    **** 	}
 179:catboard.c    **** }
 180:catboard.c    **** 
 181:catboard.c    **** void init(void) {
  15               		.loc 1 181 0
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
 182:catboard.c    **** 	// Set for 16 MHz clock
 183:catboard.c    **** 	CLKPR = 0x80; CLKPR = 0;
  20               		.loc 1 183 0
  21 0000 80E8      		ldi r24,lo8(-128)
  22 0002 8093 6100 		sts 97,r24
  23 0006 1092 6100 		sts 97,__zero_reg__
 184:catboard.c    **** 
 185:catboard.c    **** 	// Init ports
 186:catboard.c    **** 	DDRB	= 0x00; DDRC	= 0b11110100;	DDRD	= 0x80;
  24               		.loc 1 186 0
  25 000a 14B8      		out 0x4,__zero_reg__
  26 000c 94EF      		ldi r25,lo8(-12)
  27 000e 97B9      		out 0x7,r25
  28 0010 8AB9      		out 0xa,r24
 187:catboard.c    **** 	PORTB	= 0xFF; PORTC	= 0b11110100; 	PORTD	= 0xFF;
  29               		.loc 1 187 0
  30 0012 8FEF      		ldi r24,lo8(-1)
  31 0014 85B9      		out 0x5,r24
  32 0016 98B9      		out 0x8,r25
  33 0018 8BB9      		out 0xb,r24
 188:catboard.c    **** 
 189:catboard.c    **** 	LED_CONFIG;
  34               		.loc 1 189 0
  35 001a 549A      		sbi 0xa,4
 190:catboard.c    **** 	LED_ON;
  36               		.loc 1 190 0
  37 001c 5C9A      		sbi 0xb,4
  38               	.LVL0:
  39 001e E0E0      		ldi r30,lo8(pressed)
  40 0020 F0E0      		ldi r31,hi8(pressed)
  41               	.LVL1:
  42               	.L2:
  43               	.LBB21:
 191:catboard.c    **** 
 192:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
 193:catboard.c    **** 		pressed[i] = 0;
  44               		.loc 1 193 0 discriminator 2
  45 0022 1192      		st Z+,__zero_reg__
 192:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
  46               		.loc 1 192 0 discriminator 2
  47 0024 20E0      		ldi r18,hi8(pressed+60)
  48 0026 E030      		cpi r30,lo8(pressed+60)
  49 0028 F207      		cpc r31,r18
  50 002a 01F4      		brne .L2
  51               	.LBE21:
 194:catboard.c    **** 	}
 195:catboard.c    **** 
 196:catboard.c    **** 	usb_init();
  52               		.loc 1 196 0
  53 002c 0E94 0000 		call usb_init
  54               	.LVL2:
 197:catboard.c    **** 	LED_OFF;
  55               		.loc 1 197 0
  56 0030 5C98      		cbi 0xb,4
  57               	.L3:
 198:catboard.c    **** 	while(!usb_configured());
  58               		.loc 1 198 0 discriminator 1
  59 0032 0E94 0000 		call usb_configured
  60               	.LVL3:
  61 0036 8823      		tst r24
  62 0038 01F0      		breq .L3
 199:catboard.c    **** 	LED_ON;
  63               		.loc 1 199 0
  64 003a 5C9A      		sbi 0xb,4
  65               	.LVL4:
  66               	.LBB22:
  67               	.LBB23:
  68               		.file 2 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h"
   1:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  69               		.loc 2 164 0
  70 003c 8FEF      		ldi r24,lo8(3199999)
  71 003e 93ED      		ldi r25,hi8(3199999)
  72 0040 20E3      		ldi r18,hlo8(3199999)
  73 0042 8150      		1: subi r24,1
  74 0044 9040      		sbci r25,0
  75 0046 2040      		sbci r18,0
  76 0048 01F4      		brne 1b
  77 004a 00C0      		rjmp .
  78 004c 0000      		nop
  79               	.LBE23:
  80               	.LBE22:
 200:catboard.c    **** 	_delay_ms(1000);
 201:catboard.c    **** 	LED_OFF;
  81               		.loc 1 201 0
  82 004e 5C98      		cbi 0xb,4
  83 0050 0895      		ret
  84               	.LFE9:
  86               		.section	.text.key_press_sw2,"ax",@progbits
  87               	.global	key_press_sw2
  89               	key_press_sw2:
  90               	.LFB12:
 202:catboard.c    **** }
 203:catboard.c    **** 
 204:catboard.c    **** void poll() {
 205:catboard.c    **** 	uint8_t row, col, key_id;
 206:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 207:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 208:catboard.c    **** 		_delay_us(1);
 209:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 210:catboard.c    **** 			key_id = col*ROWS+row;
 211:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 212:catboard.c    **** 				if (! pressed[key_id]) {
 213:catboard.c    **** 					key_press(key_id);
 214:catboard.c    **** 				}
 215:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 216:catboard.c    **** 				key_release(key_id);
 217:catboard.c    **** 			}
 218:catboard.c    **** 		}
 219:catboard.c    **** 		*row_port[row] |= row_bit[row];
 220:catboard.c    **** 	}
 221:catboard.c    **** 	if (! (*col_pin_sw2 & col_bit_sw2)) { // press SW2
 222:catboard.c    **** 		if (! pressed_sw2) {
 223:catboard.c    **** 			key_press_sw2();
 224:catboard.c    **** 		}
 225:catboard.c    **** 	} else if (pressed_sw2) { // release SW2
 226:catboard.c    **** 		key_release_sw2();
 227:catboard.c    **** 	}
 228:catboard.c    **** 	repeat_tick();
 229:catboard.c    **** 	_delay_ms(5);
 230:catboard.c    **** }
 231:catboard.c    **** 
 232:catboard.c    **** void repeat_tick(void) {
 233:catboard.c    **** 	if (repeat_time) { // repeat pause
 234:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 235:catboard.c    **** 			repeat_time++;
 236:catboard.c    **** 		} else { // repeat press
 237:catboard.c    **** 			repeat_time = 1;
 238:catboard.c    **** 			if (turbo_repeat) {
 239:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 240:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 241:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 242:catboard.c    **** 					keyboard_keys[0] = 0;
 243:catboard.c    **** 					usb_keyboard_send();
 244:catboard.c    **** 				}
 245:catboard.c    **** 			}
 246:catboard.c    **** 		}
 247:catboard.c    **** 	} else if (press_time2) { // press2 pause
 248:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 249:catboard.c    **** 			press_time2++;
 250:catboard.c    **** 		} else {
 251:catboard.c    **** 			repeat_time = 1;
 252:catboard.c    **** 		}
 253:catboard.c    **** 	} else if (release_time) { // release pause
 254:catboard.c    **** 		if (release_time<(press_time+50)) {
 255:catboard.c    **** 			release_time++;
 256:catboard.c    **** 		} else {
 257:catboard.c    **** 			last_key = 0xFF;
 258:catboard.c    **** 			release_time = 0;
 259:catboard.c    **** 			press_time = 0;
 260:catboard.c    **** 			press_time2 = 0;
 261:catboard.c    **** 			release_time = 0;
 262:catboard.c    **** 		}
 263:catboard.c    **** 	} else if (press_time) { // press1 pause
 264:catboard.c    **** 		if (press_time<250) {
 265:catboard.c    **** 			press_time++;
 266:catboard.c    **** 		} else {
 267:catboard.c    **** 			press_time = 0;
 268:catboard.c    **** 		}
 269:catboard.c    **** 	}	
 270:catboard.c    **** }
 271:catboard.c    **** 
 272:catboard.c    **** void key_press_sw2(void) {
  91               		.loc 1 272 0
  92               	/* prologue: function */
  93               	/* frame size = 0 */
  94               	/* stack size = 0 */
  95               	.L__stack_usage = 0
 273:catboard.c    **** 	pressed_sw2 = 1;
  96               		.loc 1 273 0
  97 0000 81E0      		ldi r24,lo8(1)
  98 0002 8093 0000 		sts pressed_sw2,r24
 274:catboard.c    **** 	usb_keyboard_press(KEY_C, KEY_SHIFT);
  99               		.loc 1 274 0
 100 0006 62E0      		ldi r22,lo8(2)
 101 0008 86E0      		ldi r24,lo8(6)
 102 000a 0E94 0000 		call usb_keyboard_press
 103               	.LVL5:
 275:catboard.c    **** 	usb_keyboard_press(KEY_A, 0);
 104               		.loc 1 275 0
 105 000e 60E0      		ldi r22,0
 106 0010 84E0      		ldi r24,lo8(4)
 107 0012 0E94 0000 		call usb_keyboard_press
 108               	.LVL6:
 276:catboard.c    **** 	usb_keyboard_press(KEY_T, 0);
 109               		.loc 1 276 0
 110 0016 60E0      		ldi r22,0
 111 0018 87E1      		ldi r24,lo8(23)
 112 001a 0E94 0000 		call usb_keyboard_press
 113               	.LVL7:
 277:catboard.c    **** 	usb_keyboard_press(KEY_B, KEY_SHIFT);
 114               		.loc 1 277 0
 115 001e 62E0      		ldi r22,lo8(2)
 116 0020 85E0      		ldi r24,lo8(5)
 117 0022 0E94 0000 		call usb_keyboard_press
 118               	.LVL8:
 278:catboard.c    **** 	usb_keyboard_press(KEY_O, 0);
 119               		.loc 1 278 0
 120 0026 60E0      		ldi r22,0
 121 0028 82E1      		ldi r24,lo8(18)
 122 002a 0E94 0000 		call usb_keyboard_press
 123               	.LVL9:
 279:catboard.c    **** 	usb_keyboard_press(KEY_A, 0);
 124               		.loc 1 279 0
 125 002e 60E0      		ldi r22,0
 126 0030 84E0      		ldi r24,lo8(4)
 127 0032 0E94 0000 		call usb_keyboard_press
 128               	.LVL10:
 280:catboard.c    **** 	usb_keyboard_press(KEY_R, 0);
 129               		.loc 1 280 0
 130 0036 60E0      		ldi r22,0
 131 0038 85E1      		ldi r24,lo8(21)
 132 003a 0E94 0000 		call usb_keyboard_press
 133               	.LVL11:
 281:catboard.c    **** 	usb_keyboard_press(KEY_D, 0);
 134               		.loc 1 281 0
 135 003e 60E0      		ldi r22,0
 136 0040 87E0      		ldi r24,lo8(7)
 137 0042 0C94 0000 		jmp usb_keyboard_press
 138               	.LVL12:
 139               	.LFE12:
 141               		.section	.text.key_release_sw2,"ax",@progbits
 142               	.global	key_release_sw2
 144               	key_release_sw2:
 145               	.LFB13:
 282:catboard.c    **** }
 283:catboard.c    **** void key_release_sw2(void) {
 146               		.loc 1 283 0
 147 0000 CF93      		push r28
 148               	.LCFI0:
 149               	/* prologue: function */
 150               	/* frame size = 0 */
 151               	/* stack size = 1 */
 152               	.L__stack_usage = 1
 284:catboard.c    **** 	pressed_sw2 = 0;
 153               		.loc 1 284 0
 154 0002 1092 0000 		sts pressed_sw2,__zero_reg__
 155               	.LVL13:
 156 0006 C8E0      		ldi r28,lo8(8)
 157               	.LVL14:
 158               	.L11:
 159               	.LBB24:
 285:catboard.c    **** 	for (uint8_t i=0; i<8; i++) {
 286:catboard.c    **** 		usb_keyboard_press(KEY_BACKSPACE, 0);
 160               		.loc 1 286 0 discriminator 2
 161 0008 60E0      		ldi r22,0
 162 000a 8AE2      		ldi r24,lo8(42)
 163 000c 0E94 0000 		call usb_keyboard_press
 164               	.LVL15:
 165 0010 C150      		subi r28,lo8(-(-1))
 285:catboard.c    **** 	for (uint8_t i=0; i<8; i++) {
 166               		.loc 1 285 0 discriminator 2
 167 0012 01F4      		brne .L11
 168               	/* epilogue start */
 169               	.LBE24:
 287:catboard.c    **** 	}
 288:catboard.c    **** }
 170               		.loc 1 288 0
 171 0014 CF91      		pop r28
 172 0016 0895      		ret
 173               	.LFE13:
 175               		.section	.text.change_layout,"ax",@progbits
 176               	.global	change_layout
 178               	change_layout:
 179               	.LFB16:
 289:catboard.c    **** 
 290:catboard.c    **** void key_press(uint8_t key_id) {
 291:catboard.c    **** 	uint8_t i;
 292:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 293:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 294:catboard.c    **** 	
 295:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 296:catboard.c    **** 	if (key_code==NULL) {
 297:catboard.c    **** 		key_code = layout[key_id];
 298:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 299:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 300:catboard.c    **** 			key_code = prev_layer[key_id];
 301:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 302:catboard.c    **** 		}
 303:catboard.c    **** 	}
 304:catboard.c    **** 	
 305:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys
 306:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 307:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 308:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 309:catboard.c    **** 			} else { // Alt press, Tab press and release
 310:catboard.c    **** 				//if (! (mod_keys & (KEY_ALT|KEY_RIGHT_ALT|KEY_CTRL|KEY_RIGHT_CTRL|KEY_GUI|KEY_RIGHT_GUI))) {
 311:catboard.c    **** 				if (! mod_keys) {
 312:catboard.c    **** 					mod_keys |= (KEY_ALT);
 313:catboard.c    **** 				} else {
 314:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 315:catboard.c    **** 				}
 316:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 317:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 318:catboard.c    **** 				usb_keyboard_send();
 319:catboard.c    **** 				_delay_ms(50);
 320:catboard.c    **** 				send();
 321:catboard.c    **** 			}
 322:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 323:catboard.c    **** 			if (prev_layer) { // FnLock Off
 324:catboard.c    **** 				layout = prev_layer;
 325:catboard.c    **** 				prev_layer = 0;
 326:catboard.c    **** 			} else { // FnLock On
 327:catboard.c    **** 				prev_layer = layout;
 328:catboard.c    **** 				layout = layer_fnlock;
 329:catboard.c    **** 			}
 330:catboard.c    **** 			if (prev_layer || mac_mode) {
 331:catboard.c    **** 				LED_ON;
 332:catboard.c    **** 			} else {
 333:catboard.c    **** 				LED_OFF;
 334:catboard.c    **** 			}
 335:catboard.c    **** 		} else if (key_code==KEY_MAC_MODE) { // Mac mode
 336:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 337:catboard.c    **** 				mac_mode = ! mac_mode;
 338:catboard.c    **** 				if (mac_mode || prev_layer) {
 339:catboard.c    **** 					LED_ON;
 340:catboard.c    **** 				} else {
 341:catboard.c    **** 					LED_OFF;
 342:catboard.c    **** 				}
 343:catboard.c    **** 			} else { // Press Space
 344:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 345:catboard.c    **** 			}
 346:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 347:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 348:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 349:catboard.c    **** 				mod_keys |= KEY_CTRL;
 350:catboard.c    **** 				send();
 351:catboard.c    **** 			} else {
 352:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 353:catboard.c    **** 				mod_keys |= KEY_SHIFT;
 354:catboard.c    **** 				send();
 355:catboard.c    **** 			}
 356:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 357:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 358:catboard.c    **** 			send();
 359:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 360:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 361:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 362:catboard.c    **** 			/*if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) { // Ctrl key
 363:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 364:catboard.c    **** 				mod_keys |= KEY_CTRL;
 365:catboard.c    **** 			} else { // Shift key*/
 366:catboard.c    **** 				//if (mod_keys) pressed[key_id] = KEY_PRESSED_MODS;
 367:catboard.c    **** 				mod_keys |= KEY_SHIFT;
 368:catboard.c    **** 			//}
 369:catboard.c    **** 			send();
 370:catboard.c    **** 		}
 371:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys
 372:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 373:catboard.c    **** 			mod_keys |= KEY_GUI;
 374:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 375:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 376:catboard.c    **** 		} else {
 377:catboard.c    **** 			mod_keys |= (key_code & 0x7F);
 378:catboard.c    **** 		}
 379:catboard.c    **** 		send();
 380:catboard.c    **** 	} else {
 381:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 382:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 383:catboard.c    **** 			queue[0] = key_id;
 384:catboard.c    **** 			send();
 385:catboard.c    **** 		}
 386:catboard.c    **** 	}
 387:catboard.c    **** 	// Autorepeat
 388:catboard.c    **** 	if (last_key==key_id) { // calc press2
 389:catboard.c    **** 		press_time2 = 1;
 390:catboard.c    **** 		repeat_time = 0;
 391:catboard.c    **** 	} else { // calc press1
 392:catboard.c    **** 		last_key = key_id;
 393:catboard.c    **** 		press_time = 1;
 394:catboard.c    **** 		press_time2 = 0;
 395:catboard.c    **** 		release_time = 0;
 396:catboard.c    **** 		repeat_time = 0;
 397:catboard.c    **** 	}
 398:catboard.c    **** }
 399:catboard.c    **** 
 400:catboard.c    **** void key_release(uint8_t key_id) {
 401:catboard.c    **** 	uint8_t i;
 402:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 403:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 404:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 405:catboard.c    **** 		key_code = prev_layer[key_id];
 406:catboard.c    **** 	}
 407:catboard.c    **** 	pressed[key_id] = 0;
 408:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys release
 409:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 410:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 411:catboard.c    **** 			send();
 412:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) {
 413:catboard.c    **** 			mod_keys &= ~(KEY_CTRL);
 414:catboard.c    **** 			send();
 415:catboard.c    **** 		} else if (key_code==KEY_LAYER1) {
 416:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 417:catboard.c    **** 			send();
 418:catboard.c    **** 
 419:catboard.c    **** 			if (last_key==key_id && press_time && pressed_key_id!=KEY_PRESSED_SHIFT && ! mod_keys) {
 420:catboard.c    **** 			//if (last_key==key_id && pressed_key_id!=KEY_PRESSED_SHIFT) {
 421:catboard.c    **** 				if (layout!=layer1) {
 422:catboard.c    **** 					if (layout==layer_fn) {
 423:catboard.c    **** 						prev_layer = layer1;
 424:catboard.c    **** 					} else {
 425:catboard.c    **** 						layout = layer1;
 426:catboard.c    **** 					}
 427:catboard.c    **** 					change_layout();
 428:catboard.c    **** 				}
 429:catboard.c    **** 			}
 430:catboard.c    **** 			last_key = 0xFF;
 431:catboard.c    **** 			press_time = 0;
 432:catboard.c    **** 			press_time2 = 0;
 433:catboard.c    **** 			release_time = 0;
 434:catboard.c    **** 			repeat_time = 0;
 435:catboard.c    **** 		} else if (key_code==KEY_LAYER2 && pressed_key_id==KEY_PRESSED_CTRL) {
 436:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_CTRL);
 437:catboard.c    **** 			send();
 438:catboard.c    **** 		} else if (key_code==KEY_LAYER2) {
 439:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 440:catboard.c    **** 			send();
 441:catboard.c    **** 			if (last_key==key_id && press_time && pressed_key_id!=KEY_PRESSED_SHIFT && ! mod_keys) {
 442:catboard.c    **** 			//if (last_key==key_id && pressed_key_id!=KEY_PRESSED_SHIFT) {
 443:catboard.c    **** 				if (layout!=layer2) {
 444:catboard.c    **** 					if (layout==layer_fn) {
 445:catboard.c    **** 						prev_layer = layer2;
 446:catboard.c    **** 					} else {
 447:catboard.c    **** 						layout = layer2;
 448:catboard.c    **** 					}
 449:catboard.c    **** 					change_layout();
 450:catboard.c    **** 				}
 451:catboard.c    **** 			}
 452:catboard.c    **** 			last_key = 0xFF;
 453:catboard.c    **** 			press_time = 0;
 454:catboard.c    **** 			press_time2 = 0;
 455:catboard.c    **** 			release_time = 0;
 456:catboard.c    **** 			repeat_time = 0;
 457:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 458:catboard.c    **** 			/*if (pressed_key_id==KEY_PRESSED_CTRL) { // Ctrl key
 459:catboard.c    **** 				mod_keys &= ~KEY_CTRL;
 460:catboard.c    **** 			} else { // Shift key*/
 461:catboard.c    **** 				mod_keys &= ~KEY_SHIFT;
 462:catboard.c    **** 			//}
 463:catboard.c    **** 			send();
 464:catboard.c    **** 			if (last_key==key_id && press_time && pressed_key_id!=KEY_PRESSED_MODS && ! mod_keys) {
 465:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 466:catboard.c    **** 			}
 467:catboard.c    **** 			last_key = 0xFF;
 468:catboard.c    **** 			press_time = 0;
 469:catboard.c    **** 			press_time2 = 0;
 470:catboard.c    **** 			release_time = 0;
 471:catboard.c    **** 			repeat_time = 0;
 472:catboard.c    **** 		}
 473:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys release
 474:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 475:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 476:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 477:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 478:catboard.c    **** 		} else {
 479:catboard.c    **** 			mod_keys &= ~(key_code & 0x7F);
 480:catboard.c    **** 		}
 481:catboard.c    **** 		send();
 482:catboard.c    **** 	} else {
 483:catboard.c    **** 		for (i=0; i<6; i++) {
 484:catboard.c    **** 			if (queue[i]==key_id) {
 485:catboard.c    **** 				break;
 486:catboard.c    **** 			}
 487:catboard.c    **** 		}
 488:catboard.c    **** 		for (; i<6; i++) {
 489:catboard.c    **** 			queue[i] = queue[i+1];
 490:catboard.c    **** 		}
 491:catboard.c    **** 		send();
 492:catboard.c    **** 		// Autorepeat
 493:catboard.c    **** 		if (last_key==key_id) { // realise time
 494:catboard.c    **** 			press_time2 = 0;
 495:catboard.c    **** 			release_time = 1;
 496:catboard.c    **** 			repeat_time = 0;
 497:catboard.c    **** 		} else { // reset
 498:catboard.c    **** 			press_time = 0;
 499:catboard.c    **** 			press_time2 = 0;
 500:catboard.c    **** 			release_time = 0;
 501:catboard.c    **** 			repeat_time = 0;
 502:catboard.c    **** 		}
 503:catboard.c    **** 	}
 504:catboard.c    **** }
 505:catboard.c    **** 
 506:catboard.c    **** void change_layout(void) {
 180               		.loc 1 506 0
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 0 */
 184               	.L__stack_usage = 0
 507:catboard.c    **** 	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || mac_mode) { // Press Cmd+Space
 185               		.loc 1 507 0
 186 0000 8091 0000 		lds r24,mac_mode
 187 0004 8823      		tst r24
 188 0006 01F0      		breq .L14
 189               	.LBB35:
 190               	.LBB36:
 508:catboard.c    **** 		keyboard_modifier_keys = KEY_GUI;
 191               		.loc 1 508 0
 192 0008 88E0      		ldi r24,lo8(8)
 193 000a 8093 0000 		sts keyboard_modifier_keys,r24
 509:catboard.c    **** 		keyboard_keys[0] = 0;
 194               		.loc 1 509 0
 195 000e 1092 0000 		sts keyboard_keys,__zero_reg__
 510:catboard.c    **** 		usb_keyboard_send();
 196               		.loc 1 510 0
 197 0012 0E94 0000 		call usb_keyboard_send
 198               	.LVL16:
 199               	.LBB37:
 200               	.LBB38:
 201               		.loc 2 164 0
 202 0016 2FEF      		ldi r18,lo8(159999)
 203 0018 80E7      		ldi r24,hi8(159999)
 204 001a 92E0      		ldi r25,hlo8(159999)
 205 001c 2150      		1: subi r18,1
 206 001e 8040      		sbci r24,0
 207 0020 9040      		sbci r25,0
 208 0022 01F4      		brne 1b
 209 0024 00C0      		rjmp .
 210 0026 0000      		nop
 211               	.LBE38:
 212               	.LBE37:
 511:catboard.c    **** 		_delay_ms(50);
 512:catboard.c    **** 		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 213               		.loc 1 512 0
 214 0028 68E0      		ldi r22,lo8(8)
 215 002a 8CE2      		ldi r24,lo8(44)
 216 002c 00C0      		rjmp .L15
 217               	.LVL17:
 218               	.L14:
 219               	.LBE36:
 220               	.LBE35:
 513:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
 514:catboard.c    **** 		keyboard_modifier_keys = KEY_ALT;
 221               		.loc 1 514 0
 222 002e 84E0      		ldi r24,lo8(4)
 223 0030 8093 0000 		sts keyboard_modifier_keys,r24
 515:catboard.c    **** 		keyboard_keys[0] = 0;
 224               		.loc 1 515 0
 225 0034 1092 0000 		sts keyboard_keys,__zero_reg__
 516:catboard.c    **** 		usb_keyboard_send();
 226               		.loc 1 516 0
 227 0038 0E94 0000 		call usb_keyboard_send
 228               	.LVL18:
 229               	.LBB39:
 230               	.LBB40:
 231               		.loc 2 164 0
 232 003c 2FEF      		ldi r18,lo8(159999)
 233 003e 80E7      		ldi r24,hi8(159999)
 234 0040 92E0      		ldi r25,hlo8(159999)
 235 0042 2150      		1: subi r18,1
 236 0044 8040      		sbci r24,0
 237 0046 9040      		sbci r25,0
 238 0048 01F4      		brne 1b
 239 004a 00C0      		rjmp .
 240 004c 0000      		nop
 241               	.LBE40:
 242               	.LBE39:
 517:catboard.c    **** 		_delay_ms(50);
 518:catboard.c    **** 		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 243               		.loc 1 518 0
 244 004e 66E0      		ldi r22,lo8(6)
 245 0050 80E0      		ldi r24,0
 246               	.LVL19:
 247               	.L15:
 248 0052 0C94 0000 		jmp usb_keyboard_press
 249               	.LVL20:
 250               	.LFE16:
 252               		.section	.text.get_code,"ax",@progbits
 253               	.global	get_code
 255               	get_code:
 256               	.LFB18:
 519:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_CTRL_SHIFT) { // Press Ctrl+Shift
 520:catboard.c    **** 		keyboard_modifier_keys = KEY_CTRL;
 521:catboard.c    **** 		keyboard_keys[0] = 0;
 522:catboard.c    **** 		usb_keyboard_send();
 523:catboard.c    **** 		_delay_ms(50);
 524:catboard.c    **** 		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
 525:catboard.c    **** 	}
 526:catboard.c    **** }
 527:catboard.c    **** 
 528:catboard.c    **** void send(void) {
 529:catboard.c    **** 	uint8_t i;
 530:catboard.c    **** 	for (i=0; i<6; i++) {
 531:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 532:catboard.c    **** 	}
 533:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 534:catboard.c    **** 	usb_keyboard_send();
 535:catboard.c    **** }
 536:catboard.c    **** 
 537:catboard.c    **** uint8_t get_code(uint8_t key_id) {
 257               		.loc 1 537 0
 258               	.LVL21:
 259               	/* prologue: function */
 260               	/* frame size = 0 */
 261               	/* stack size = 0 */
 262               	.L__stack_usage = 0
 538:catboard.c    **** 	uint8_t key_code = 0;
 539:catboard.c    **** 	if (key_id<KEYS) { // not 0xFF
 263               		.loc 1 539 0
 264 0000 8C33      		cpi r24,lo8(60)
 265 0002 00F4      		brsh .L21
 266               	.LVL22:
 267               	.LBB43:
 268               	.LBB44:
 540:catboard.c    **** 		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 269               		.loc 1 540 0
 270 0004 282F      		mov r18,r24
 271 0006 30E0      		ldi r19,0
 272 0008 F901      		movw r30,r18
 273 000a E050      		subi r30,lo8(-(pressed))
 274 000c F040      		sbci r31,hi8(-(pressed))
 275 000e 9081      		ld r25,Z
 276 0010 9130      		cpi r25,lo8(1)
 277 0012 01F4      		brne .L18
 541:catboard.c    **** 			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 278               		.loc 1 541 0
 279 0014 F901      		movw r30,r18
 280 0016 E050      		subi r30,lo8(-(layer_fn))
 281 0018 F040      		sbci r31,hi8(-(layer_fn))
 282 001a 8081      		ld r24,Z
 283               	.LVL23:
 284 001c 1816      		cp __zero_reg__,r24
 285 001e 04F0      		brlt .L17
 286 0020 00C0      		rjmp .L21
 287               	.L18:
 542:catboard.c    **** 				key_code = layer_fn[key_id];
 543:catboard.c    **** 			}
 544:catboard.c    **** 		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from la
 288               		.loc 1 544 0
 289 0022 4091 0000 		lds r20,layout
 290 0026 5091 0000 		lds r21,layout+1
 291 002a 60E0      		ldi r22,hi8(layer_fn)
 292 002c 4030      		cpi r20,lo8(layer_fn)
 293 002e 5607      		cpc r21,r22
 294 0030 01F0      		breq .L20
 295 0032 9230      		cpi r25,lo8(2)
 296 0034 01F4      		brne .L20
 545:catboard.c    **** 			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 297               		.loc 1 545 0
 298 0036 F901      		movw r30,r18
 299 0038 E050      		subi r30,lo8(-(layer1))
 300 003a F040      		sbci r31,hi8(-(layer1))
 301 003c 00C0      		rjmp .L25
 302               	.L20:
 546:catboard.c    **** 		} else {
 547:catboard.c    **** 			key_code = layout[key_id];
 303               		.loc 1 547 0
 304 003e FA01      		movw r30,r20
 305 0040 E80F      		add r30,r24
 306 0042 F11D      		adc r31,__zero_reg__
 307               	.L25:
 308 0044 8081      		ld r24,Z
 309               	.LVL24:
 310 0046 0895      		ret
 311               	.LVL25:
 312               	.L21:
 313               	.LBE44:
 314               	.LBE43:
 538:catboard.c    **** 	uint8_t key_code = 0;
 315               		.loc 1 538 0
 316 0048 80E0      		ldi r24,0
 317               	.L17:
 318               	.LVL26:
 548:catboard.c    **** 		}
 549:catboard.c    **** 	}
 550:catboard.c    **** 	return key_code;
 551:catboard.c    **** }
 319               		.loc 1 551 0
 320 004a 0895      		ret
 321               	.LFE18:
 323               		.section	.text.send,"ax",@progbits
 324               	.global	send
 326               	send:
 327               	.LFB17:
 528:catboard.c    **** void send(void) {
 328               		.loc 1 528 0
 329 0000 0F93      		push r16
 330               	.LCFI1:
 331 0002 1F93      		push r17
 332               	.LCFI2:
 333 0004 CF93      		push r28
 334               	.LCFI3:
 335 0006 DF93      		push r29
 336               	.LCFI4:
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 4 */
 340               	.L__stack_usage = 4
 341               	.LVL27:
 342 0008 C0E0      		ldi r28,lo8(queue)
 343 000a D0E0      		ldi r29,hi8(queue)
 344 000c 00E0      		ldi r16,lo8(keyboard_keys)
 345 000e 10E0      		ldi r17,hi8(keyboard_keys)
 346               	.LVL28:
 347               	.L27:
 531:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 348               		.loc 1 531 0 discriminator 2
 349 0010 8991      		ld r24,Y+
 350 0012 0E94 0000 		call get_code
 351               	.LVL29:
 352 0016 F801      		movw r30,r16
 353 0018 8193      		st Z+,r24
 354 001a 8F01      		movw r16,r30
 530:catboard.c    **** 	for (i=0; i<6; i++) {
 355               		.loc 1 530 0 discriminator 2
 356 001c F0E0      		ldi r31,hi8(queue+6)
 357 001e C030      		cpi r28,lo8(queue+6)
 358 0020 DF07      		cpc r29,r31
 359 0022 01F4      		brne .L27
 533:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 360               		.loc 1 533 0
 361 0024 8091 0000 		lds r24,mod_keys
 362 0028 8093 0000 		sts keyboard_modifier_keys,r24
 363               	/* epilogue start */
 535:catboard.c    **** }
 364               		.loc 1 535 0
 365 002c DF91      		pop r29
 366 002e CF91      		pop r28
 367 0030 1F91      		pop r17
 368 0032 0F91      		pop r16
 534:catboard.c    **** 	usb_keyboard_send();
 369               		.loc 1 534 0
 370 0034 0C94 0000 		jmp usb_keyboard_send
 371               	.LVL30:
 372               	.LFE17:
 374               		.section	.text.key_release,"ax",@progbits
 375               	.global	key_release
 377               	key_release:
 378               	.LFB15:
 400:catboard.c    **** void key_release(uint8_t key_id) {
 379               		.loc 1 400 0
 380               	.LVL31:
 381 0000 CF93      		push r28
 382               	.LCFI5:
 383 0002 DF93      		push r29
 384               	.LCFI6:
 385               	/* prologue: function */
 386               	/* frame size = 0 */
 387               	/* stack size = 2 */
 388               	.L__stack_usage = 2
 389 0004 D82F      		mov r29,r24
 402:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 390               		.loc 1 402 0
 391 0006 282F      		mov r18,r24
 392 0008 30E0      		ldi r19,0
 393 000a F901      		movw r30,r18
 394 000c E050      		subi r30,lo8(-(pressed))
 395 000e F040      		sbci r31,hi8(-(pressed))
 396 0010 C081      		ld r28,Z
 397               	.LVL32:
 403:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 398               		.loc 1 403 0
 399 0012 C130      		cpi r28,lo8(1)
 400 0014 01F4      		brne .L30
 403:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 401               		.loc 1 403 0 is_stmt 0 discriminator 1
 402 0016 F901      		movw r30,r18
 403 0018 E050      		subi r30,lo8(-(layer_fn))
 404 001a F040      		sbci r31,hi8(-(layer_fn))
 405 001c 00C0      		rjmp .L96
 406               	.L30:
 403:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 407               		.loc 1 403 0 discriminator 2
 408 001e E091 0000 		lds r30,layout
 409 0022 F091 0000 		lds r31,layout+1
 410 0026 E20F      		add r30,r18
 411 0028 F31F      		adc r31,r19
 412 002a 9081      		ld r25,Z
 413               	.LVL33:
 404:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 414               		.loc 1 404 0 is_stmt 1 discriminator 2
 415 002c C630      		cpi r28,lo8(6)
 416 002e 01F4      		brne .L31
 404:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 417               		.loc 1 404 0 is_stmt 0 discriminator 1
 418 0030 4091 0000 		lds r20,prev_layer
 419 0034 5091 0000 		lds r21,prev_layer+1
 420 0038 4115      		cp r20,__zero_reg__
 421 003a 5105      		cpc r21,__zero_reg__
 422 003c 01F0      		breq .L31
 405:catboard.c    **** 		key_code = prev_layer[key_id];
 423               		.loc 1 405 0 is_stmt 1
 424 003e FA01      		movw r30,r20
 425 0040 E20F      		add r30,r18
 426 0042 F31F      		adc r31,r19
 427               	.LVL34:
 428               	.L96:
 429 0044 9081      		ld r25,Z
 430               	.LVL35:
 431               	.L31:
 407:catboard.c    **** 	pressed[key_id] = 0;
 432               		.loc 1 407 0
 433 0046 F901      		movw r30,r18
 434 0048 E050      		subi r30,lo8(-(pressed))
 435 004a F040      		sbci r31,hi8(-(pressed))
 436 004c 1082      		st Z,__zero_reg__
 408:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys release
 437               		.loc 1 408 0
 438 004e 913F      		cpi r25,lo8(-15)
 439 0050 00F4      		brsh .+2
 440 0052 00C0      		rjmp .L32
 409:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 441               		.loc 1 409 0
 442 0054 9D3F      		cpi r25,lo8(-3)
 443 0056 01F4      		brne .L33
 409:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 444               		.loc 1 409 0 is_stmt 0 discriminator 1
 445 0058 C330      		cpi r28,lo8(3)
 446 005a 01F4      		brne .+2
 447 005c 00C0      		rjmp .L29
 410:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 448               		.loc 1 410 0 is_stmt 1
 449 005e 8091 0000 		lds r24,mod_keys
 450               	.LVL36:
 451 0062 8B7F      		andi r24,lo8(-5)
 452 0064 00C0      		rjmp .L97
 453               	.L33:
 412:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) {
 454               		.loc 1 412 0
 455 0066 913F      		cpi r25,lo8(-15)
 456 0068 01F4      		brne .L35
 457 006a 8091 0000 		lds r24,mod_keys
 412:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) {
 458               		.loc 1 412 0 is_stmt 0 discriminator 1
 459 006e C530      		cpi r28,lo8(5)
 460 0070 01F4      		brne .L36
 413:catboard.c    **** 			mod_keys &= ~(KEY_CTRL);
 461               		.loc 1 413 0 is_stmt 1
 462 0072 8E7F      		andi r24,lo8(-2)
 463 0074 00C0      		rjmp .L97
 464               	.L36:
 416:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 465               		.loc 1 416 0
 466 0076 8D7F      		andi r24,lo8(-3)
 467 0078 8093 0000 		sts mod_keys,r24
 417:catboard.c    **** 			send();
 468               		.loc 1 417 0
 469 007c 0E94 0000 		call send
 470               	.LVL37:
 419:catboard.c    **** 			if (last_key==key_id && press_time && pressed_key_id!=KEY_PRESSED_SHIFT && ! mod_keys) {
 471               		.loc 1 419 0
 472 0080 8091 0000 		lds r24,last_key
 473 0084 8D13      		cpse r24,r29
 474 0086 00C0      		rjmp .L45
 419:catboard.c    **** 			if (last_key==key_id && press_time && pressed_key_id!=KEY_PRESSED_SHIFT && ! mod_keys) {
 475               		.loc 1 419 0 is_stmt 0 discriminator 1
 476 0088 8091 0000 		lds r24,press_time
 477 008c 9091 0000 		lds r25,press_time+1
 478 0090 892B      		or r24,r25
 479 0092 01F4      		brne .+2
 480 0094 00C0      		rjmp .L45
 481 0096 C430      		cpi r28,lo8(4)
 482 0098 01F4      		brne .+2
 483 009a 00C0      		rjmp .L45
 484 009c 8091 0000 		lds r24,mod_keys
 485 00a0 8111      		cpse r24,__zero_reg__
 486 00a2 00C0      		rjmp .L45
 421:catboard.c    **** 				if (layout!=layer1) {
 487               		.loc 1 421 0 is_stmt 1
 488 00a4 8091 0000 		lds r24,layout
 489 00a8 9091 0000 		lds r25,layout+1
 490 00ac 20E0      		ldi r18,hi8(layer1)
 491 00ae 8030      		cpi r24,lo8(layer1)
 492 00b0 9207      		cpc r25,r18
 493 00b2 01F4      		brne .+2
 494 00b4 00C0      		rjmp .L45
 495               	.LBB45:
 422:catboard.c    **** 					if (layout==layer_fn) {
 496               		.loc 1 422 0
 497 00b6 8050      		subi r24,lo8(layer_fn)
 498 00b8 9040      		sbci r25,hi8(layer_fn)
 499 00ba 01F4      		brne .L38
 423:catboard.c    **** 						prev_layer = layer1;
 500               		.loc 1 423 0
 501 00bc 80E0      		ldi r24,lo8(layer1)
 502 00be 90E0      		ldi r25,hi8(layer1)
 503 00c0 00C0      		rjmp .L100
 504               	.L38:
 425:catboard.c    **** 						layout = layer1;
 505               		.loc 1 425 0
 506 00c2 80E0      		ldi r24,lo8(layer1)
 507 00c4 90E0      		ldi r25,hi8(layer1)
 508 00c6 00C0      		rjmp .L99
 509               	.LVL38:
 510               	.L35:
 511               	.LBE45:
 435:catboard.c    **** 		} else if (key_code==KEY_LAYER2 && pressed_key_id==KEY_PRESSED_CTRL) {
 512               		.loc 1 435 0
 513 00c8 923F      		cpi r25,lo8(-14)
 514 00ca 01F4      		brne .L40
 515 00cc 8091 0000 		lds r24,mod_keys
 435:catboard.c    **** 		} else if (key_code==KEY_LAYER2 && pressed_key_id==KEY_PRESSED_CTRL) {
 516               		.loc 1 435 0 is_stmt 0 discriminator 1
 517 00d0 C530      		cpi r28,lo8(5)
 518 00d2 01F4      		brne .L41
 436:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_CTRL);
 519               		.loc 1 436 0 is_stmt 1
 520 00d4 8F7E      		andi r24,lo8(-17)
 521 00d6 00C0      		rjmp .L97
 522               	.L41:
 439:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 523               		.loc 1 439 0
 524 00d8 8F7D      		andi r24,lo8(-33)
 525 00da 8093 0000 		sts mod_keys,r24
 440:catboard.c    **** 			send();
 526               		.loc 1 440 0
 527 00de 0E94 0000 		call send
 528               	.LVL39:
 441:catboard.c    **** 			if (last_key==key_id && press_time && pressed_key_id!=KEY_PRESSED_SHIFT && ! mod_keys) {
 529               		.loc 1 441 0
 530 00e2 8091 0000 		lds r24,last_key
 531 00e6 8D13      		cpse r24,r29
 532 00e8 00C0      		rjmp .L45
 441:catboard.c    **** 			if (last_key==key_id && press_time && pressed_key_id!=KEY_PRESSED_SHIFT && ! mod_keys) {
 533               		.loc 1 441 0 is_stmt 0 discriminator 1
 534 00ea 8091 0000 		lds r24,press_time
 535 00ee 9091 0000 		lds r25,press_time+1
 536 00f2 892B      		or r24,r25
 537 00f4 01F4      		brne .+2
 538 00f6 00C0      		rjmp .L45
 539 00f8 C430      		cpi r28,lo8(4)
 540 00fa 01F0      		breq .L45
 541 00fc 8091 0000 		lds r24,mod_keys
 542 0100 8111      		cpse r24,__zero_reg__
 543 0102 00C0      		rjmp .L45
 443:catboard.c    **** 				if (layout!=layer2) {
 544               		.loc 1 443 0 is_stmt 1
 545 0104 8091 0000 		lds r24,layout
 546 0108 9091 0000 		lds r25,layout+1
 547 010c 20E0      		ldi r18,hi8(layer2)
 548 010e 8030      		cpi r24,lo8(layer2)
 549 0110 9207      		cpc r25,r18
 550 0112 01F0      		breq .L45
 551               	.LBB46:
 444:catboard.c    **** 					if (layout==layer_fn) {
 552               		.loc 1 444 0
 553 0114 8050      		subi r24,lo8(layer_fn)
 554 0116 9040      		sbci r25,hi8(layer_fn)
 555 0118 01F4      		brne .L43
 445:catboard.c    **** 						prev_layer = layer2;
 556               		.loc 1 445 0
 557 011a 80E0      		ldi r24,lo8(layer2)
 558 011c 90E0      		ldi r25,hi8(layer2)
 559               	.L100:
 560 011e 9093 0000 		sts prev_layer+1,r25
 561 0122 8093 0000 		sts prev_layer,r24
 562 0126 00C0      		rjmp .L44
 563               	.L43:
 447:catboard.c    **** 						layout = layer2;
 564               		.loc 1 447 0
 565 0128 80E0      		ldi r24,lo8(layer2)
 566 012a 90E0      		ldi r25,hi8(layer2)
 567               	.L99:
 568 012c 9093 0000 		sts layout+1,r25
 569 0130 8093 0000 		sts layout,r24
 570               	.L44:
 449:catboard.c    **** 					change_layout();
 571               		.loc 1 449 0
 572 0134 0E94 0000 		call change_layout
 573               	.LVL40:
 574 0138 00C0      		rjmp .L45
 575               	.LVL41:
 576               	.L40:
 577               	.LBE46:
 457:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 578               		.loc 1 457 0
 579 013a 933F      		cpi r25,lo8(-13)
 580 013c 01F0      		breq .+2
 581 013e 00C0      		rjmp .L29
 461:catboard.c    **** 				mod_keys &= ~KEY_SHIFT;
 582               		.loc 1 461 0
 583 0140 8091 0000 		lds r24,mod_keys
 584 0144 8D7F      		andi r24,lo8(-3)
 585 0146 8093 0000 		sts mod_keys,r24
 463:catboard.c    **** 			send();
 586               		.loc 1 463 0
 587 014a 0E94 0000 		call send
 588               	.LVL42:
 464:catboard.c    **** 			if (last_key==key_id && press_time && pressed_key_id!=KEY_PRESSED_MODS && ! mod_keys) {
 589               		.loc 1 464 0
 590 014e 8091 0000 		lds r24,last_key
 591 0152 8D13      		cpse r24,r29
 592 0154 00C0      		rjmp .L45
 464:catboard.c    **** 			if (last_key==key_id && press_time && pressed_key_id!=KEY_PRESSED_MODS && ! mod_keys) {
 593               		.loc 1 464 0 is_stmt 0 discriminator 1
 594 0156 8091 0000 		lds r24,press_time
 595 015a 9091 0000 		lds r25,press_time+1
 596 015e 892B      		or r24,r25
 597 0160 01F0      		breq .L45
 598 0162 C230      		cpi r28,lo8(2)
 599 0164 01F0      		breq .L45
 600 0166 8091 0000 		lds r24,mod_keys
 601 016a 8111      		cpse r24,__zero_reg__
 602 016c 00C0      		rjmp .L45
 465:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 603               		.loc 1 465 0 is_stmt 1
 604 016e 60E0      		ldi r22,0
 605 0170 8CE2      		ldi r24,lo8(44)
 606 0172 0E94 0000 		call usb_keyboard_press
 607               	.LVL43:
 608               	.L45:
 467:catboard.c    **** 			last_key = 0xFF;
 609               		.loc 1 467 0
 610 0176 8FEF      		ldi r24,lo8(-1)
 611 0178 8093 0000 		sts last_key,r24
 612 017c 00C0      		rjmp .L57
 613               	.LVL44:
 614               	.L32:
 473:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys release
 615               		.loc 1 473 0
 616 017e 97FF      		sbrs r25,7
 617 0180 00C0      		rjmp .L46
 474:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 618               		.loc 1 474 0
 619 0182 8091 0000 		lds r24,mac_mode
 620 0186 8823      		tst r24
 621 0188 01F0      		breq .L47
 474:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 622               		.loc 1 474 0 is_stmt 0 discriminator 1
 623 018a 9138      		cpi r25,lo8(-127)
 624 018c 01F4      		brne .L48
 475:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 625               		.loc 1 475 0 is_stmt 1
 626 018e 8091 0000 		lds r24,mod_keys
 627 0192 877F      		andi r24,lo8(-9)
 628 0194 00C0      		rjmp .L97
 629               	.L48:
 476:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 630               		.loc 1 476 0 discriminator 1
 631 0196 9039      		cpi r25,lo8(-112)
 632 0198 01F0      		breq .L50
 633               	.L47:
 476:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 634               		.loc 1 476 0 is_stmt 0 discriminator 2
 635 019a 9038      		cpi r25,lo8(-128)
 636 019c 01F4      		brne .L51
 637               	.L50:
 477:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 638               		.loc 1 477 0 is_stmt 1
 639 019e 8091 0000 		lds r24,mod_keys
 640 01a2 8F77      		andi r24,lo8(127)
 641 01a4 00C0      		rjmp .L97
 642               	.L51:
 479:catboard.c    **** 			mod_keys &= ~(key_code & 0x7F);
 643               		.loc 1 479 0
 644 01a6 9F77      		andi r25,lo8(127)
 645               	.LVL45:
 646 01a8 9095      		com r25
 647 01aa 8091 0000 		lds r24,mod_keys
 648 01ae 8923      		and r24,r25
 649               	.L97:
 650 01b0 8093 0000 		sts mod_keys,r24
 651               	/* epilogue start */
 504:catboard.c    **** }
 652               		.loc 1 504 0
 653 01b4 DF91      		pop r29
 654 01b6 CF91      		pop r28
 655               	.LVL46:
 481:catboard.c    **** 		send();
 656               		.loc 1 481 0
 657 01b8 0C94 0000 		jmp send
 658               	.LVL47:
 659               	.L46:
 660 01bc E0E0      		ldi r30,lo8(queue)
 661 01be F0E0      		ldi r31,hi8(queue)
 473:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys release
 662               		.loc 1 473 0
 663 01c0 90E0      		ldi r25,0
 664               	.LVL48:
 665               	.L54:
 484:catboard.c    **** 			if (queue[i]==key_id) {
 666               		.loc 1 484 0
 667 01c2 8191      		ld r24,Z+
 668 01c4 8D17      		cp r24,r29
 669 01c6 01F0      		breq .L95
 483:catboard.c    **** 		for (i=0; i<6; i++) {
 670               		.loc 1 483 0
 671 01c8 9F5F      		subi r25,lo8(-(1))
 672               	.LVL49:
 673 01ca 9630      		cpi r25,lo8(6)
 674 01cc 01F4      		brne .L54
 675 01ce 00C0      		rjmp .L95
 676               	.L56:
 489:catboard.c    **** 			queue[i] = queue[i+1];
 677               		.loc 1 489 0 discriminator 2
 678 01d0 E92F      		mov r30,r25
 679 01d2 F0E0      		ldi r31,0
 680 01d4 E050      		subi r30,lo8(-(queue))
 681 01d6 F040      		sbci r31,hi8(-(queue))
 682 01d8 8181      		ldd r24,Z+1
 683 01da 8083      		st Z,r24
 488:catboard.c    **** 		for (; i<6; i++) {
 684               		.loc 1 488 0 discriminator 2
 685 01dc 9F5F      		subi r25,lo8(-(1))
 686               	.LVL50:
 687               	.L95:
 488:catboard.c    **** 		for (; i<6; i++) {
 688               		.loc 1 488 0 is_stmt 0 discriminator 1
 689 01de 9630      		cpi r25,lo8(6)
 690 01e0 01F4      		brne .L56
 491:catboard.c    **** 		send();
 691               		.loc 1 491 0 is_stmt 1
 692 01e2 0E94 0000 		call send
 693               	.LVL51:
 493:catboard.c    **** 		if (last_key==key_id) { // realise time
 694               		.loc 1 493 0
 695 01e6 8091 0000 		lds r24,last_key
 696 01ea 8D13      		cpse r24,r29
 697 01ec 00C0      		rjmp .L57
 494:catboard.c    **** 			press_time2 = 0;
 698               		.loc 1 494 0
 699 01ee 1092 0000 		sts press_time2+1,__zero_reg__
 700 01f2 1092 0000 		sts press_time2,__zero_reg__
 495:catboard.c    **** 			release_time = 1;
 701               		.loc 1 495 0
 702 01f6 81E0      		ldi r24,lo8(1)
 703 01f8 90E0      		ldi r25,0
 704 01fa 9093 0000 		sts release_time+1,r25
 705 01fe 8093 0000 		sts release_time,r24
 706 0202 00C0      		rjmp .L98
 707               	.L57:
 498:catboard.c    **** 			press_time = 0;
 708               		.loc 1 498 0
 709 0204 1092 0000 		sts press_time+1,__zero_reg__
 710 0208 1092 0000 		sts press_time,__zero_reg__
 499:catboard.c    **** 			press_time2 = 0;
 711               		.loc 1 499 0
 712 020c 1092 0000 		sts press_time2+1,__zero_reg__
 713 0210 1092 0000 		sts press_time2,__zero_reg__
 500:catboard.c    **** 			release_time = 0;
 714               		.loc 1 500 0
 715 0214 1092 0000 		sts release_time+1,__zero_reg__
 716 0218 1092 0000 		sts release_time,__zero_reg__
 717               	.L98:
 501:catboard.c    **** 			repeat_time = 0;
 718               		.loc 1 501 0
 719 021c 1092 0000 		sts repeat_time+1,__zero_reg__
 720 0220 1092 0000 		sts repeat_time,__zero_reg__
 721               	.L29:
 722               	/* epilogue start */
 504:catboard.c    **** }
 723               		.loc 1 504 0
 724 0224 DF91      		pop r29
 725               	.LVL52:
 726 0226 CF91      		pop r28
 727               	.LVL53:
 728 0228 0895      		ret
 729               	.LFE15:
 731               		.section	.text.key_press,"ax",@progbits
 732               	.global	key_press
 734               	key_press:
 735               	.LFB14:
 290:catboard.c    **** void key_press(uint8_t key_id) {
 736               		.loc 1 290 0
 737               	.LVL54:
 738 0000 CF93      		push r28
 739               	.LCFI7:
 740               	/* prologue: function */
 741               	/* frame size = 0 */
 742               	/* stack size = 1 */
 743               	.L__stack_usage = 1
 744 0002 C82F      		mov r28,r24
 292:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 745               		.loc 1 292 0
 746 0004 6091 0000 		lds r22,mod_keys
 747 0008 962F      		mov r25,r22
 748 000a 9D7D      		andi r25,lo8(-35)
 749               	.LVL55:
 293:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 750               		.loc 1 293 0
 751 000c 282F      		mov r18,r24
 752 000e 30E0      		ldi r19,0
 753 0010 8091 0000 		lds r24,pressed+35
 754               	.LVL56:
 755 0014 8111      		cpse r24,__zero_reg__
 756 0016 00C0      		rjmp .L140
 293:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 757               		.loc 1 293 0 is_stmt 0 discriminator 1
 758 0018 9923      		tst r25
 759 001a 01F0      		breq .L141
 293:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 760               		.loc 1 293 0
 761 001c 82E0      		ldi r24,lo8(2)
 762 001e 00C0      		rjmp .L102
 763               	.L140:
 764 0020 81E0      		ldi r24,lo8(1)
 765 0022 00C0      		rjmp .L102
 766               	.L141:
 767 0024 8FEF      		ldi r24,lo8(-1)
 768               	.L102:
 293:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 769               		.loc 1 293 0 discriminator 6
 770 0026 F901      		movw r30,r18
 771 0028 E050      		subi r30,lo8(-(pressed))
 772 002a F040      		sbci r31,hi8(-(pressed))
 773 002c 8083      		st Z,r24
 295:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 774               		.loc 1 295 0 is_stmt 1 discriminator 6
 775 002e 8130      		cpi r24,lo8(1)
 776 0030 01F4      		brne .L103
 295:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 777               		.loc 1 295 0 is_stmt 0 discriminator 1
 778 0032 F901      		movw r30,r18
 779 0034 E050      		subi r30,lo8(-(layer_fn))
 780 0036 F040      		sbci r31,hi8(-(layer_fn))
 781 0038 00C0      		rjmp .L164
 782               	.L103:
 295:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 783               		.loc 1 295 0 discriminator 2
 784 003a E091 0000 		lds r30,layout
 785 003e F091 0000 		lds r31,layout+1
 786 0042 EC0F      		add r30,r28
 787 0044 F11D      		adc r31,__zero_reg__
 788               	.L164:
 789 0046 8081      		ld r24,Z
 790               	.LVL57:
 296:catboard.c    **** 	if (key_code==NULL) {
 791               		.loc 1 296 0 is_stmt 1 discriminator 2
 792 0048 8111      		cpse r24,__zero_reg__
 793 004a 00C0      		rjmp .L105
 297:catboard.c    **** 		key_code = layout[key_id];
 794               		.loc 1 297 0
 795 004c 4C2F      		mov r20,r28
 796 004e 50E0      		ldi r21,0
 797 0050 E091 0000 		lds r30,layout
 798 0054 F091 0000 		lds r31,layout+1
 799 0058 E40F      		add r30,r20
 800 005a F51F      		adc r31,r21
 801 005c 8081      		ld r24,Z
 802               	.LVL58:
 298:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 803               		.loc 1 298 0
 804 005e 9923      		tst r25
 805 0060 01F0      		breq .L142
 806 0062 92E0      		ldi r25,lo8(2)
 807               	.LVL59:
 808 0064 00C0      		rjmp .L106
 809               	.LVL60:
 810               	.L142:
 811 0066 9FEF      		ldi r25,lo8(-1)
 812               	.LVL61:
 813               	.L106:
 298:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 814               		.loc 1 298 0 is_stmt 0 discriminator 3
 815 0068 F901      		movw r30,r18
 816 006a E050      		subi r30,lo8(-(pressed))
 817 006c F040      		sbci r31,hi8(-(pressed))
 818 006e 9083      		st Z,r25
 299:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 819               		.loc 1 299 0 is_stmt 1 discriminator 3
 820 0070 8111      		cpse r24,__zero_reg__
 821 0072 00C0      		rjmp .L105
 299:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 822               		.loc 1 299 0 is_stmt 0 discriminator 1
 823 0074 A091 0000 		lds r26,prev_layer
 824 0078 B091 0000 		lds r27,prev_layer+1
 825 007c 1097      		sbiw r26,0
 826 007e 01F4      		brne .+2
 827 0080 00C0      		rjmp .L130
 828 0082 6111      		cpse r22,__zero_reg__
 829 0084 00C0      		rjmp .L130
 300:catboard.c    **** 			key_code = prev_layer[key_id];
 830               		.loc 1 300 0 is_stmt 1
 831 0086 A40F      		add r26,r20
 832 0088 B51F      		adc r27,r21
 833 008a 8C91      		ld r24,X
 834               	.LVL62:
 301:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 835               		.loc 1 301 0
 836 008c 96E0      		ldi r25,lo8(6)
 837 008e 9083      		st Z,r25
 838               	.L105:
 305:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys
 839               		.loc 1 305 0
 840 0090 813F      		cpi r24,lo8(-15)
 841 0092 00F4      		brsh .+2
 842 0094 00C0      		rjmp .L107
 306:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 843               		.loc 1 306 0
 844 0096 8D3F      		cpi r24,lo8(-3)
 845 0098 01F4      		brne .L108
 307:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 846               		.loc 1 307 0
 847 009a F901      		movw r30,r18
 848 009c E050      		subi r30,lo8(-(pressed))
 849 009e F040      		sbci r31,hi8(-(pressed))
 850 00a0 8081      		ld r24,Z
 851               	.LVL63:
 852 00a2 8130      		cpi r24,lo8(1)
 853 00a4 01F4      		brne .L109
 308:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 854               		.loc 1 308 0
 855 00a6 64E0      		ldi r22,lo8(4)
 856               	.LVL64:
 857 00a8 8BE2      		ldi r24,lo8(43)
 858 00aa 00C0      		rjmp .L167
 859               	.LVL65:
 860               	.L109:
 311:catboard.c    **** 				if (! mod_keys) {
 861               		.loc 1 311 0
 862 00ac 6111      		cpse r22,__zero_reg__
 863 00ae 00C0      		rjmp .L111
 312:catboard.c    **** 					mod_keys |= (KEY_ALT);
 864               		.loc 1 312 0
 865 00b0 84E0      		ldi r24,lo8(4)
 866 00b2 8093 0000 		sts mod_keys,r24
 867 00b6 00C0      		rjmp .L112
 868               	.L111:
 314:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 869               		.loc 1 314 0
 870 00b8 83E0      		ldi r24,lo8(3)
 871 00ba 8083      		st Z,r24
 872               	.L112:
 316:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 873               		.loc 1 316 0
 874 00bc 8091 0000 		lds r24,mod_keys
 875 00c0 8093 0000 		sts keyboard_modifier_keys,r24
 317:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 876               		.loc 1 317 0
 877 00c4 8BE2      		ldi r24,lo8(43)
 878 00c6 8093 0000 		sts keyboard_keys,r24
 318:catboard.c    **** 				usb_keyboard_send();
 879               		.loc 1 318 0
 880 00ca 0E94 0000 		call usb_keyboard_send
 881               	.LVL66:
 882               	.LBB47:
 883               	.LBB48:
 884               		.loc 2 164 0
 885 00ce 2FEF      		ldi r18,lo8(159999)
 886 00d0 80E7      		ldi r24,hi8(159999)
 887 00d2 92E0      		ldi r25,hlo8(159999)
 888 00d4 2150      		1: subi r18,1
 889 00d6 8040      		sbci r24,0
 890 00d8 9040      		sbci r25,0
 891 00da 01F4      		brne 1b
 892 00dc 00C0      		rjmp .
 893 00de 0000      		nop
 894 00e0 00C0      		rjmp .L166
 895               	.LVL67:
 896               	.L108:
 897               	.LBE48:
 898               	.LBE47:
 322:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 899               		.loc 1 322 0
 900 00e2 8E3F      		cpi r24,lo8(-2)
 901 00e4 01F4      		brne .L113
 323:catboard.c    **** 			if (prev_layer) { // FnLock Off
 902               		.loc 1 323 0
 903 00e6 2091 0000 		lds r18,prev_layer
 904 00ea 3091 0000 		lds r19,prev_layer+1
 905               	.LVL68:
 906 00ee 2115      		cp r18,__zero_reg__
 907 00f0 3105      		cpc r19,__zero_reg__
 908 00f2 01F0      		breq .L114
 324:catboard.c    **** 				layout = prev_layer;
 909               		.loc 1 324 0
 910 00f4 3093 0000 		sts layout+1,r19
 911 00f8 2093 0000 		sts layout,r18
 325:catboard.c    **** 				prev_layer = 0;
 912               		.loc 1 325 0
 913 00fc 1092 0000 		sts prev_layer+1,__zero_reg__
 914 0100 1092 0000 		sts prev_layer,__zero_reg__
 915 0104 00C0      		rjmp .L115
 916               	.L114:
 327:catboard.c    **** 				prev_layer = layout;
 917               		.loc 1 327 0
 918 0106 2091 0000 		lds r18,layout
 919 010a 3091 0000 		lds r19,layout+1
 920 010e 3093 0000 		sts prev_layer+1,r19
 921 0112 2093 0000 		sts prev_layer,r18
 328:catboard.c    **** 				layout = layer_fnlock;
 922               		.loc 1 328 0
 923 0116 20E0      		ldi r18,lo8(layer_fnlock)
 924 0118 30E0      		ldi r19,hi8(layer_fnlock)
 925 011a 3093 0000 		sts layout+1,r19
 926 011e 2093 0000 		sts layout,r18
 927               	.L115:
 330:catboard.c    **** 			if (prev_layer || mac_mode) {
 928               		.loc 1 330 0
 929 0122 2091 0000 		lds r18,prev_layer
 930 0126 3091 0000 		lds r19,prev_layer+1
 931 012a 232B      		or r18,r19
 932 012c 01F4      		brne .L121
 330:catboard.c    **** 			if (prev_layer || mac_mode) {
 933               		.loc 1 330 0 is_stmt 0 discriminator 1
 934 012e 8091 0000 		lds r24,mac_mode
 935               	.LVL69:
 936 0132 8823      		tst r24
 937 0134 01F0      		breq .L122
 938 0136 00C0      		rjmp .L121
 939               	.LVL70:
 940               	.L113:
 335:catboard.c    **** 		} else if (key_code==KEY_MAC_MODE) { // Mac mode
 941               		.loc 1 335 0 is_stmt 1
 942 0138 8C3F      		cpi r24,lo8(-4)
 943 013a 01F4      		brne .L118
 336:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 944               		.loc 1 336 0
 945 013c F901      		movw r30,r18
 946 013e E050      		subi r30,lo8(-(pressed))
 947 0140 F040      		sbci r31,hi8(-(pressed))
 948 0142 8081      		ld r24,Z
 949               	.LVL71:
 950 0144 8130      		cpi r24,lo8(1)
 951 0146 01F4      		brne .L119
 336:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 952               		.loc 1 336 0 is_stmt 0 discriminator 1
 953 0148 862F      		mov r24,r22
 954 014a 8272      		andi r24,lo8(34)
 955 014c 01F0      		breq .L119
 337:catboard.c    **** 				mac_mode = ! mac_mode;
 956               		.loc 1 337 0 is_stmt 1
 957 014e 81E0      		ldi r24,lo8(1)
 958 0150 9091 0000 		lds r25,mac_mode
 959 0154 9111      		cpse r25,__zero_reg__
 960 0156 80E0      		ldi r24,0
 961               	.L120:
 962 0158 8093 0000 		sts mac_mode,r24
 338:catboard.c    **** 				if (mac_mode || prev_layer) {
 963               		.loc 1 338 0
 964 015c 8111      		cpse r24,__zero_reg__
 965 015e 00C0      		rjmp .L121
 338:catboard.c    **** 				if (mac_mode || prev_layer) {
 966               		.loc 1 338 0 is_stmt 0 discriminator 1
 967 0160 2091 0000 		lds r18,prev_layer
 968 0164 3091 0000 		lds r19,prev_layer+1
 969               	.LVL72:
 970 0168 232B      		or r18,r19
 971 016a 01F0      		breq .L122
 972               	.L121:
 339:catboard.c    **** 					LED_ON;
 973               		.loc 1 339 0 is_stmt 1
 974 016c 5C9A      		sbi 0xb,4
 975 016e 00C0      		rjmp .L110
 976               	.L122:
 341:catboard.c    **** 					LED_OFF;
 977               		.loc 1 341 0
 978 0170 5C98      		cbi 0xb,4
 979 0172 00C0      		rjmp .L110
 980               	.LVL73:
 981               	.L119:
 344:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 982               		.loc 1 344 0
 983 0174 8CE2      		ldi r24,lo8(44)
 984               	.LVL74:
 985               	.L167:
 986 0176 0E94 0000 		call usb_keyboard_press
 987               	.LVL75:
 988 017a 00C0      		rjmp .L110
 989               	.LVL76:
 990               	.L118:
 346:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 991               		.loc 1 346 0
 992 017c 813F      		cpi r24,lo8(-15)
 993 017e 01F4      		brne .L123
 347:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 994               		.loc 1 347 0
 995 0180 862F      		mov r24,r22
 996               	.LVL77:
 997 0182 8272      		andi r24,lo8(34)
 998 0184 01F0      		breq .L124
 348:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 999               		.loc 1 348 0
 1000 0186 F901      		movw r30,r18
 1001 0188 E050      		subi r30,lo8(-(pressed))
 1002 018a F040      		sbci r31,hi8(-(pressed))
 1003 018c 85E0      		ldi r24,lo8(5)
 1004 018e 8083      		st Z,r24
 349:catboard.c    **** 				mod_keys |= KEY_CTRL;
 1005               		.loc 1 349 0
 1006 0190 6160      		ori r22,lo8(1)
 1007               	.LVL78:
 1008 0192 00C0      		rjmp .L169
 1009               	.LVL79:
 1010               	.L124:
 352:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 1011               		.loc 1 352 0
 1012 0194 6623      		tst r22
 1013 0196 01F0      		breq .L125
 352:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 1014               		.loc 1 352 0 is_stmt 0 discriminator 1
 1015 0198 F901      		movw r30,r18
 1016 019a E050      		subi r30,lo8(-(pressed))
 1017 019c F040      		sbci r31,hi8(-(pressed))
 1018 019e 84E0      		ldi r24,lo8(4)
 1019 01a0 8083      		st Z,r24
 1020               	.L125:
 353:catboard.c    **** 				mod_keys |= KEY_SHIFT;
 1021               		.loc 1 353 0 is_stmt 1
 1022 01a2 6260      		ori r22,lo8(2)
 1023               	.LVL80:
 1024               	.L169:
 1025 01a4 6093 0000 		sts mod_keys,r22
 1026 01a8 00C0      		rjmp .L166
 1027               	.LVL81:
 1028               	.L123:
 356:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 1029               		.loc 1 356 0
 1030 01aa 823F      		cpi r24,lo8(-14)
 1031 01ac 01F4      		brne .L126
 357:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 1032               		.loc 1 357 0
 1033 01ae 6062      		ori r22,lo8(32)
 1034               	.LVL82:
 1035 01b0 00C0      		rjmp .L169
 1036               	.LVL83:
 1037               	.L126:
 359:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 1038               		.loc 1 359 0
 1039 01b2 8B3F      		cpi r24,lo8(-5)
 1040 01b4 01F4      		brne .L127
 360:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 1041               		.loc 1 360 0
 1042 01b6 81E0      		ldi r24,lo8(1)
 1043               	.LVL84:
 1044 01b8 9091 0000 		lds r25,turbo_repeat
 1045 01bc 9111      		cpse r25,__zero_reg__
 1046 01be 80E0      		ldi r24,0
 1047               	.L128:
 1048 01c0 8093 0000 		sts turbo_repeat,r24
 1049 01c4 00C0      		rjmp .L110
 1050               	.LVL85:
 1051               	.L127:
 361:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 1052               		.loc 1 361 0
 1053 01c6 833F      		cpi r24,lo8(-13)
 1054 01c8 01F4      		brne .L110
 1055 01ca 00C0      		rjmp .L125
 1056               	.L107:
 371:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys
 1057               		.loc 1 371 0
 1058 01cc 87FF      		sbrs r24,7
 1059 01ce 00C0      		rjmp .L130
 372:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 1060               		.loc 1 372 0
 1061 01d0 9091 0000 		lds r25,mac_mode
 1062 01d4 9923      		tst r25
 1063 01d6 01F0      		breq .L131
 372:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 1064               		.loc 1 372 0 is_stmt 0 discriminator 1
 1065 01d8 8138      		cpi r24,lo8(-127)
 1066 01da 01F4      		brne .L132
 373:catboard.c    **** 			mod_keys |= KEY_GUI;
 1067               		.loc 1 373 0 is_stmt 1
 1068 01dc 6860      		ori r22,lo8(8)
 1069               	.LVL86:
 1070 01de 00C0      		rjmp .L169
 1071               	.LVL87:
 1072               	.L132:
 374:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 1073               		.loc 1 374 0 discriminator 1
 1074 01e0 8039      		cpi r24,lo8(-112)
 1075 01e2 01F0      		breq .L134
 1076               	.L131:
 374:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 1077               		.loc 1 374 0 is_stmt 0 discriminator 2
 1078 01e4 8038      		cpi r24,lo8(-128)
 1079 01e6 01F4      		brne .L135
 1080               	.L134:
 375:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 1081               		.loc 1 375 0 is_stmt 1
 1082 01e8 6068      		ori r22,lo8(-128)
 1083               	.LVL88:
 1084 01ea 00C0      		rjmp .L169
 1085               	.LVL89:
 1086               	.L135:
 377:catboard.c    **** 			mod_keys |= (key_code & 0x7F);
 1087               		.loc 1 377 0
 1088 01ec 8F77      		andi r24,lo8(127)
 1089               	.LVL90:
 1090 01ee 862B      		or r24,r22
 1091 01f0 8093 0000 		sts mod_keys,r24
 1092 01f4 00C0      		rjmp .L166
 1093               	.LVL91:
 1094               	.L130:
 381:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 1095               		.loc 1 381 0
 1096 01f6 8091 0000 		lds r24,last_key
 1097               	.LVL92:
 1098 01fa 8C13      		cpse r24,r28
 1099 01fc 00C0      		rjmp .L136
 381:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 1100               		.loc 1 381 0 is_stmt 0 discriminator 1
 1101 01fe 2091 0000 		lds r18,release_time
 1102 0202 3091 0000 		lds r19,release_time+1
 1103               	.LVL93:
 1104 0206 2A30      		cpi r18,10
 1105 0208 3105      		cpc r19,__zero_reg__
 1106 020a 00F0      		brlo .L110
 1107               	.L136:
 1108               	.LVL94:
 382:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 1109               		.loc 1 382 0 is_stmt 1 discriminator 1
 1110 020c 8091 0000 		lds r24,queue+4
 1111 0210 8093 0000 		sts queue+5,r24
 1112               	.LVL95:
 1113 0214 8091 0000 		lds r24,queue+3
 1114 0218 8093 0000 		sts queue+4,r24
 1115               	.LVL96:
 1116 021c 8091 0000 		lds r24,queue+2
 1117 0220 8093 0000 		sts queue+3,r24
 1118               	.LVL97:
 1119 0224 8091 0000 		lds r24,queue+1
 1120 0228 8093 0000 		sts queue+2,r24
 1121               	.LVL98:
 1122 022c 8091 0000 		lds r24,queue
 1123 0230 8093 0000 		sts queue+1,r24
 1124               	.LVL99:
 383:catboard.c    **** 			queue[0] = key_id;
 1125               		.loc 1 383 0 discriminator 1
 1126 0234 C093 0000 		sts queue,r28
 1127               	.LVL100:
 1128               	.L166:
 384:catboard.c    **** 			send();
 1129               		.loc 1 384 0 discriminator 1
 1130 0238 0E94 0000 		call send
 1131               	.LVL101:
 1132               	.L110:
 388:catboard.c    **** 	if (last_key==key_id) { // calc press2
 1133               		.loc 1 388 0
 1134 023c 8091 0000 		lds r24,last_key
 1135 0240 8C13      		cpse r24,r28
 1136 0242 00C0      		rjmp .L138
 389:catboard.c    **** 		press_time2 = 1;
 1137               		.loc 1 389 0
 1138 0244 81E0      		ldi r24,lo8(1)
 1139 0246 90E0      		ldi r25,0
 1140 0248 9093 0000 		sts press_time2+1,r25
 1141 024c 8093 0000 		sts press_time2,r24
 1142 0250 00C0      		rjmp .L168
 1143               	.L138:
 392:catboard.c    **** 		last_key = key_id;
 1144               		.loc 1 392 0
 1145 0252 C093 0000 		sts last_key,r28
 393:catboard.c    **** 		press_time = 1;
 1146               		.loc 1 393 0
 1147 0256 81E0      		ldi r24,lo8(1)
 1148 0258 90E0      		ldi r25,0
 1149 025a 9093 0000 		sts press_time+1,r25
 1150 025e 8093 0000 		sts press_time,r24
 394:catboard.c    **** 		press_time2 = 0;
 1151               		.loc 1 394 0
 1152 0262 1092 0000 		sts press_time2+1,__zero_reg__
 1153 0266 1092 0000 		sts press_time2,__zero_reg__
 395:catboard.c    **** 		release_time = 0;
 1154               		.loc 1 395 0
 1155 026a 1092 0000 		sts release_time+1,__zero_reg__
 1156 026e 1092 0000 		sts release_time,__zero_reg__
 1157               	.L168:
 396:catboard.c    **** 		repeat_time = 0;
 1158               		.loc 1 396 0
 1159 0272 1092 0000 		sts repeat_time+1,__zero_reg__
 1160 0276 1092 0000 		sts repeat_time,__zero_reg__
 1161               	/* epilogue start */
 398:catboard.c    **** }
 1162               		.loc 1 398 0
 1163 027a CF91      		pop r28
 1164               	.LVL102:
 1165 027c 0895      		ret
 1166               	.LFE14:
 1168               		.section	.text.repeat_tick,"ax",@progbits
 1169               	.global	repeat_tick
 1171               	repeat_tick:
 1172               	.LFB11:
 232:catboard.c    **** void repeat_tick(void) {
 1173               		.loc 1 232 0
 1174               	/* prologue: function */
 1175               	/* frame size = 0 */
 1176               	/* stack size = 0 */
 1177               	.L__stack_usage = 0
 233:catboard.c    **** 	if (repeat_time) { // repeat pause
 1178               		.loc 1 233 0
 1179 0000 8091 0000 		lds r24,repeat_time
 1180 0004 9091 0000 		lds r25,repeat_time+1
 1181 0008 0097      		sbiw r24,0
 1182 000a 01F0      		breq .L171
 234:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 1183               		.loc 1 234 0
 1184 000c 2091 0000 		lds r18,release_time
 1185 0010 3091 0000 		lds r19,release_time+1
 1186 0014 3695      		lsr r19
 1187 0016 2795      		ror r18
 1188 0018 3695      		lsr r19
 1189 001a 2795      		ror r18
 1190 001c 8217      		cp r24,r18
 1191 001e 9307      		cpc r25,r19
 1192 0020 00F4      		brsh .L172
 235:catboard.c    **** 			repeat_time++;
 1193               		.loc 1 235 0
 1194 0022 0196      		adiw r24,1
 1195 0024 00C0      		rjmp .L186
 1196               	.L172:
 237:catboard.c    **** 			repeat_time = 1;
 1197               		.loc 1 237 0
 1198 0026 81E0      		ldi r24,lo8(1)
 1199 0028 90E0      		ldi r25,0
 1200 002a 9093 0000 		sts repeat_time+1,r25
 1201 002e 8093 0000 		sts repeat_time,r24
 238:catboard.c    **** 			if (turbo_repeat) {
 1202               		.loc 1 238 0
 1203 0032 8091 0000 		lds r24,turbo_repeat
 1204 0036 8823      		tst r24
 1205 0038 01F4      		brne .+2
 1206 003a 00C0      		rjmp .L170
 239:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 1207               		.loc 1 239 0
 1208 003c 8091 0000 		lds r24,mod_keys
 1209 0040 8093 0000 		sts keyboard_modifier_keys,r24
 240:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 1210               		.loc 1 240 0
 1211 0044 8091 0000 		lds r24,last_key
 1212 0048 0E94 0000 		call get_code
 1213               	.LVL103:
 1214 004c 8093 0000 		sts keyboard_keys,r24
 241:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 1215               		.loc 1 241 0
 1216 0050 0E94 0000 		call usb_keyboard_send
 1217               	.LVL104:
 1218 0054 8111      		cpse r24,__zero_reg__
 1219 0056 00C0      		rjmp .L170
 242:catboard.c    **** 					keyboard_keys[0] = 0;
 1220               		.loc 1 242 0
 1221 0058 1092 0000 		sts keyboard_keys,__zero_reg__
 243:catboard.c    **** 					usb_keyboard_send();
 1222               		.loc 1 243 0
 1223 005c 0C94 0000 		jmp usb_keyboard_send
 1224               	.LVL105:
 1225               	.L171:
 247:catboard.c    **** 	} else if (press_time2) { // press2 pause
 1226               		.loc 1 247 0
 1227 0060 2091 0000 		lds r18,press_time2
 1228 0064 3091 0000 		lds r19,press_time2+1
 1229 0068 8091 0000 		lds r24,press_time
 1230 006c 9091 0000 		lds r25,press_time+1
 1231 0070 2115      		cp r18,__zero_reg__
 1232 0072 3105      		cpc r19,__zero_reg__
 1233 0074 01F0      		breq .L176
 248:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 1234               		.loc 1 248 0
 1235 0076 4091 0000 		lds r20,pressed+35
 1236 007a 4423      		tst r20
 1237 007c 01F0      		breq .L182
 1238 007e 45E0      		ldi r20,lo8(5)
 1239 0080 50E0      		ldi r21,0
 1240 0082 00C0      		rjmp .L177
 1241               	.L182:
 1242 0084 4EE1      		ldi r20,lo8(30)
 1243 0086 50E0      		ldi r21,0
 1244               	.L177:
 248:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 1245               		.loc 1 248 0 is_stmt 0 discriminator 3
 1246 0088 840F      		add r24,r20
 1247 008a 951F      		adc r25,r21
 1248 008c 2817      		cp r18,r24
 1249 008e 3907      		cpc r19,r25
 1250 0090 00F4      		brsh .L178
 249:catboard.c    **** 			press_time2++;
 1251               		.loc 1 249 0 is_stmt 1
 1252 0092 2F5F      		subi r18,-1
 1253 0094 3F4F      		sbci r19,-1
 1254 0096 3093 0000 		sts press_time2+1,r19
 1255 009a 2093 0000 		sts press_time2,r18
 1256 009e 0895      		ret
 1257               	.L178:
 251:catboard.c    **** 			repeat_time = 1;
 1258               		.loc 1 251 0
 1259 00a0 81E0      		ldi r24,lo8(1)
 1260 00a2 90E0      		ldi r25,0
 1261               	.L186:
 1262 00a4 9093 0000 		sts repeat_time+1,r25
 1263 00a8 8093 0000 		sts repeat_time,r24
 1264 00ac 0895      		ret
 1265               	.L176:
 253:catboard.c    **** 	} else if (release_time) { // release pause
 1266               		.loc 1 253 0
 1267 00ae 2091 0000 		lds r18,release_time
 1268 00b2 3091 0000 		lds r19,release_time+1
 1269 00b6 2115      		cp r18,__zero_reg__
 1270 00b8 3105      		cpc r19,__zero_reg__
 1271 00ba 01F0      		breq .L179
 254:catboard.c    **** 		if (release_time<(press_time+50)) {
 1272               		.loc 1 254 0
 1273 00bc C296      		adiw r24,50
 1274 00be 2817      		cp r18,r24
 1275 00c0 3907      		cpc r19,r25
 1276 00c2 00F4      		brsh .L180
 255:catboard.c    **** 			release_time++;
 1277               		.loc 1 255 0
 1278 00c4 2F5F      		subi r18,-1
 1279 00c6 3F4F      		sbci r19,-1
 1280 00c8 3093 0000 		sts release_time+1,r19
 1281 00cc 2093 0000 		sts release_time,r18
 1282 00d0 0895      		ret
 1283               	.L180:
 257:catboard.c    **** 			last_key = 0xFF;
 1284               		.loc 1 257 0
 1285 00d2 8FEF      		ldi r24,lo8(-1)
 1286 00d4 8093 0000 		sts last_key,r24
 258:catboard.c    **** 			release_time = 0;
 1287               		.loc 1 258 0
 1288 00d8 1092 0000 		sts release_time+1,__zero_reg__
 1289 00dc 1092 0000 		sts release_time,__zero_reg__
 259:catboard.c    **** 			press_time = 0;
 1290               		.loc 1 259 0
 1291 00e0 1092 0000 		sts press_time+1,__zero_reg__
 1292 00e4 1092 0000 		sts press_time,__zero_reg__
 260:catboard.c    **** 			press_time2 = 0;
 1293               		.loc 1 260 0
 1294 00e8 1092 0000 		sts press_time2+1,__zero_reg__
 1295 00ec 1092 0000 		sts press_time2,__zero_reg__
 1296 00f0 0895      		ret
 1297               	.L179:
 263:catboard.c    **** 	} else if (press_time) { // press1 pause
 1298               		.loc 1 263 0
 1299 00f2 0097      		sbiw r24,0
 1300 00f4 01F0      		breq .L170
 264:catboard.c    **** 		if (press_time<250) {
 1301               		.loc 1 264 0
 1302 00f6 8A3F      		cpi r24,-6
 1303 00f8 9105      		cpc r25,__zero_reg__
 1304 00fa 00F4      		brsh .L181
 265:catboard.c    **** 			press_time++;
 1305               		.loc 1 265 0
 1306 00fc 0196      		adiw r24,1
 1307 00fe 9093 0000 		sts press_time+1,r25
 1308 0102 8093 0000 		sts press_time,r24
 1309 0106 0895      		ret
 1310               	.L181:
 267:catboard.c    **** 			press_time = 0;
 1311               		.loc 1 267 0
 1312 0108 1092 0000 		sts press_time+1,__zero_reg__
 1313 010c 1092 0000 		sts press_time,__zero_reg__
 1314               	.L170:
 1315 0110 0895      		ret
 1316               	.LFE11:
 1318               		.section	.text.poll,"ax",@progbits
 1319               	.global	poll
 1321               	poll:
 1322               	.LFB10:
 204:catboard.c    **** void poll() {
 1323               		.loc 1 204 0
 1324 0000 7F92      		push r7
 1325               	.LCFI8:
 1326 0002 8F92      		push r8
 1327               	.LCFI9:
 1328 0004 9F92      		push r9
 1329               	.LCFI10:
 1330 0006 AF92      		push r10
 1331               	.LCFI11:
 1332 0008 BF92      		push r11
 1333               	.LCFI12:
 1334 000a CF92      		push r12
 1335               	.LCFI13:
 1336 000c DF92      		push r13
 1337               	.LCFI14:
 1338 000e EF92      		push r14
 1339               	.LCFI15:
 1340 0010 FF92      		push r15
 1341               	.LCFI16:
 1342 0012 0F93      		push r16
 1343               	.LCFI17:
 1344 0014 1F93      		push r17
 1345               	.LCFI18:
 1346 0016 CF93      		push r28
 1347               	.LCFI19:
 1348 0018 DF93      		push r29
 1349               	.LCFI20:
 1350               	/* prologue: function */
 1351               	/* frame size = 0 */
 1352               	/* stack size = 13 */
 1353               	.L__stack_usage = 13
 1354               	.LVL106:
 1355 001a 70E0      		ldi r23,lo8(row_port)
 1356 001c E72E      		mov r14,r23
 1357 001e 70E0      		ldi r23,hi8(row_port)
 1358 0020 F72E      		mov r15,r23
 1359 0022 00E0      		ldi r16,lo8(row_bit)
 1360 0024 10E0      		ldi r17,hi8(row_bit)
 206:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1361               		.loc 1 206 0
 1362 0026 912C      		mov r9,__zero_reg__
 1363               	.LVL107:
 1364               	.L191:
 207:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 1365               		.loc 1 207 0
 1366 0028 D701      		movw r26,r14
 1367 002a CD91      		ld r28,X+
 1368 002c DD91      		ld r29,X+
 1369 002e 7D01      		movw r14,r26
 1370 0030 F801      		movw r30,r16
 1371 0032 7190      		ld r7,Z+
 1372 0034 8F01      		movw r16,r30
 1373 0036 972D      		mov r25,r7
 1374 0038 9095      		com r25
 1375 003a 8881      		ld r24,Y
 1376 003c 8923      		and r24,r25
 1377 003e 8883      		st Y,r24
 1378               	.LVL108:
 1379               	.LBB49:
 1380               	.LBB50:
 165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #else
 167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	{
 172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		{
 176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		}
 180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		return;
 181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	}
 182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	else
 183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
 186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** }
 187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /**
 189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   
 207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  
 214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  */
 223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** void
 224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** {
 226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#else
 242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//round up by default
 243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#endif
 245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1381               		.loc 2 246 0
 1382 0040 F5E0      		ldi r31,lo8(5)
 1383 0042 FA95      		1: dec r31
 1384 0044 01F4      		brne 1b
 1385 0046 0000      		nop
 1386               	.LVL109:
 1387 0048 50E0      		ldi r21,lo8(col_pin)
 1388 004a C52E      		mov r12,r21
 1389 004c 50E0      		ldi r21,hi8(col_pin)
 1390 004e D52E      		mov r13,r21
 1391 0050 60E0      		ldi r22,lo8(col_bit)
 1392 0052 A62E      		mov r10,r22
 1393 0054 60E0      		ldi r22,hi8(col_bit)
 1394 0056 B62E      		mov r11,r22
 1395 0058 812C      		mov r8,__zero_reg__
 1396               	.LVL110:
 1397               	.L190:
 1398               	.LBE50:
 1399               	.LBE49:
 210:catboard.c    **** 			key_id = col*ROWS+row;
 1400               		.loc 1 210 0
 1401 005a 882D      		mov r24,r8
 1402 005c 890D      		add r24,r9
 1403               	.LVL111:
 211:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1404               		.loc 1 211 0
 1405 005e D601      		movw r26,r12
 1406 0060 ED91      		ld r30,X+
 1407 0062 FD91      		ld r31,X+
 1408 0064 6D01      		movw r12,r26
 1409 0066 D501      		movw r26,r10
 1410 0068 9D91      		ld r25,X+
 1411 006a 5D01      		movw r10,r26
 1412 006c 2081      		ld r18,Z
 1413 006e 9223      		and r25,r18
 1414 0070 282F      		mov r18,r24
 1415 0072 30E0      		ldi r19,0
 212:catboard.c    **** 				if (! pressed[key_id]) {
 1416               		.loc 1 212 0
 1417 0074 F901      		movw r30,r18
 1418 0076 E050      		subi r30,lo8(-(pressed))
 1419 0078 F040      		sbci r31,hi8(-(pressed))
 211:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1420               		.loc 1 211 0
 1421 007a 9111      		cpse r25,__zero_reg__
 1422 007c 00C0      		rjmp .L188
 212:catboard.c    **** 				if (! pressed[key_id]) {
 1423               		.loc 1 212 0
 1424 007e 9081      		ld r25,Z
 1425 0080 9111      		cpse r25,__zero_reg__
 1426 0082 00C0      		rjmp .L189
 213:catboard.c    **** 					key_press(key_id);
 1427               		.loc 1 213 0
 1428 0084 0E94 0000 		call key_press
 1429               	.LVL112:
 1430 0088 00C0      		rjmp .L189
 1431               	.LVL113:
 1432               	.L188:
 215:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 1433               		.loc 1 215 0
 1434 008a 9081      		ld r25,Z
 1435 008c 9111      		cpse r25,__zero_reg__
 216:catboard.c    **** 				key_release(key_id);
 1436               		.loc 1 216 0
 1437 008e 0E94 0000 		call key_release
 1438               	.LVL114:
 1439               	.L189:
 1440 0092 B5E0      		ldi r27,lo8(5)
 1441 0094 8B0E      		add r8,r27
 1442               	.LVL115:
 209:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 1443               		.loc 1 209 0
 1444 0096 ECE3      		ldi r30,lo8(60)
 1445 0098 8E12      		cpse r8,r30
 1446 009a 00C0      		rjmp .L190
 219:catboard.c    **** 		*row_port[row] |= row_bit[row];
 1447               		.loc 1 219 0
 1448 009c 8881      		ld r24,Y
 1449 009e 8729      		or r24,r7
 1450 00a0 8883      		st Y,r24
 206:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1451               		.loc 1 206 0
 1452 00a2 9394      		inc r9
 1453               	.LVL116:
 1454 00a4 9B12      		cpse r9,r27
 1455 00a6 00C0      		rjmp .L191
 1456 00a8 8091 0000 		lds r24,pressed_sw2
 221:catboard.c    **** 	if (! (*col_pin_sw2 & col_bit_sw2)) { // press SW2
 1457               		.loc 1 221 0
 1458 00ac 4F99      		sbic 0x9,7
 1459 00ae 00C0      		rjmp .L192
 222:catboard.c    **** 		if (! pressed_sw2) {
 1460               		.loc 1 222 0
 1461 00b0 8111      		cpse r24,__zero_reg__
 1462 00b2 00C0      		rjmp .L193
 223:catboard.c    **** 			key_press_sw2();
 1463               		.loc 1 223 0
 1464 00b4 0E94 0000 		call key_press_sw2
 1465               	.LVL117:
 1466 00b8 00C0      		rjmp .L193
 1467               	.L192:
 225:catboard.c    **** 	} else if (pressed_sw2) { // release SW2
 1468               		.loc 1 225 0
 1469 00ba 8111      		cpse r24,__zero_reg__
 226:catboard.c    **** 		key_release_sw2();
 1470               		.loc 1 226 0
 1471 00bc 0E94 0000 		call key_release_sw2
 1472               	.LVL118:
 1473               	.L193:
 228:catboard.c    **** 	repeat_tick();
 1474               		.loc 1 228 0
 1475 00c0 0E94 0000 		call repeat_tick
 1476               	.LVL119:
 1477               	.LBB51:
 1478               	.LBB52:
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1479               		.loc 2 164 0
 1480 00c4 8FE1      		ldi r24,lo8(19999)
 1481 00c6 9EE4      		ldi r25,hi8(19999)
 1482 00c8 0197      		1: sbiw r24,1
 1483 00ca 01F4      		brne 1b
 1484 00cc 00C0      		rjmp .
 1485 00ce 0000      		nop
 1486               	/* epilogue start */
 1487               	.LBE52:
 1488               	.LBE51:
 230:catboard.c    **** }
 1489               		.loc 1 230 0
 1490 00d0 DF91      		pop r29
 1491 00d2 CF91      		pop r28
 1492 00d4 1F91      		pop r17
 1493 00d6 0F91      		pop r16
 1494 00d8 FF90      		pop r15
 1495 00da EF90      		pop r14
 1496 00dc DF90      		pop r13
 1497 00de CF90      		pop r12
 1498 00e0 BF90      		pop r11
 1499 00e2 AF90      		pop r10
 1500 00e4 9F90      		pop r9
 1501               	.LVL120:
 1502 00e6 8F90      		pop r8
 1503 00e8 7F90      		pop r7
 1504 00ea 0895      		ret
 1505               	.LFE10:
 1507               		.section	.text.startup.main,"ax",@progbits
 1508               	.global	main
 1510               	main:
 1511               	.LFB8:
 167:catboard.c    **** int main(void) {
 1512               		.loc 1 167 0
 1513               	/* prologue: function */
 1514               	/* frame size = 0 */
 1515               	/* stack size = 0 */
 1516               	.L__stack_usage = 0
 169:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 1517               		.loc 1 169 0
 1518 0000 84B7      		in r24,0x34
 1519 0002 877F      		andi r24,lo8(-9)
 1520 0004 84BF      		out 0x34,r24
 170:catboard.c    **** 	wdt_disable();
 1521               		.loc 1 170 0
 1522 0006 88E1      		ldi r24,lo8(24)
 1523               	/* #APP */
 1524               	 ;  170 "catboard.c" 1
 1525 0008 0FB6      		in __tmp_reg__, __SREG__
 1526 000a F894      		cli
 1527 000c 8093 6000 		sts 96, r24
 1528 0010 1092 6000 		sts 96, __zero_reg__
 1529 0014 0FBE      		out __SREG__,__tmp_reg__
 1530               		
 1531               	 ;  0 "" 2
 1532               	.LVL121:
 1533               	/* #NOAPP */
 1534               	.LBB53:
 1535               	.LBB54:
 1536               		.file 3 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h"
   1:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    All rights reserved.
   3:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
   4:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
   7:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      distribution.
  13:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  17:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  29:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  31:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  34:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  37:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  38:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \file */
  39:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  41:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  43:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** peripherals as needed.
  46:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  47:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  50:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** macros are not available.
  53:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  54:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  59:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
  60:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  61:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  62:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  64:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <small>
  66:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <center>
  67:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <table border="3">
  68:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  69:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  73:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  74:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  75:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  76:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  77:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  78:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  79:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  80:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  81:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  82:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  83:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  84:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  85:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  86:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  87:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
  88:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
  89:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  90:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  91:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  92:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  93:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
  94:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
  95:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  96:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  97:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  98:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  99:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 247:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 248:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 249:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 250:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 251:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 252:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 253:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 254:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 255:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 256:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 257:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 258:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 259:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 260:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 261:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 262:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 263:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 264:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 265:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 266:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 267:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 268:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 269:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 270:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 271:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 272:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 273:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 274:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 275:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 276:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 277:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 278:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 279:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 280:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 281:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 282:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 283:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 284:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 285:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 286:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 287:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 288:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 289:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 290:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 291:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 292:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 293:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 294:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 295:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 296:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 297:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 298:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 299:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 300:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 301:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 302:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 303:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 304:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 305:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 306:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 307:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 308:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 309:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 310:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 311:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 312:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 313:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 314:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 315:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 316:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 317:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 318:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 319:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 320:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 321:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 322:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 323:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 324:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 325:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 326:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 327:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 328:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 329:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 330:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 331:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 332:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 333:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 334:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 335:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 336:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 337:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 338:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 339:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_all_enable()</td>
 340:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable all modules.</td>
 341:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 342:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 343:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 344:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 345:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_all_disable()</td>
 346:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable all modules.</td>
 347:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 348:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 349:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </table>
 350:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </center>
 351:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </small>
 352:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 353:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** @} */
 354:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 355:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
 356:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** // Include any other device on need basis
 357:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 358:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 359:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 360:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 361:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 362:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 363:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 364:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 365:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 366:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 367:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 368:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 369:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 370:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
 371:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 372:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 373:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 374:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 375:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 376:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 377:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 378:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 379:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 380:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 381:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 382:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 383:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
 384:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
 385:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
 386:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
 387:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
 388:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
 389:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
 390:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
 391:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 392:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 393:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 394:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 395:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 396:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 397:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 398:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 399:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 400:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 401:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 402:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 403:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 404:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 405:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 406:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 407:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 408:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 409:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 410:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 411:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 412:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 413:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 414:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
 415:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 416:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 417:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
 418:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 419:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 420:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 421:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 422:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 423:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 424:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 425:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 426:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 427:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 428:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 429:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
 430:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 431:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 432:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 433:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 434:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 435:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 436:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 437:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 438:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 439:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 440:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 441:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 442:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 443:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 444:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 445:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 446:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 447:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 448:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 449:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 450:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
 451:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
 452:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
 453:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
 454:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
 455:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
 456:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
 457:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
 458:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 459:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
 460:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
 461:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
 462:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
 463:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
 464:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
 465:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
 466:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
 467:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 468:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 469:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 470:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
 471:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
 472:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
 473:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
 474:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
 475:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
 476:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 477:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 478:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 479:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
 480:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
 481:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
 482:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
 483:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
 484:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
 485:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 486:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
 487:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
 488:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
 489:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
 490:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
 491:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
 492:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
 493:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
 494:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 495:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
 496:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
 497:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
 498:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
 499:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
 500:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
 501:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
 502:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
 503:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 504:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
 505:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 506:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
 507:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 508:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 509:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 510:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
 511:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 512:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 513:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 514:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
 515:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 516:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 517:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 518:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 519:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 520:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 521:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 522:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 523:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 524:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 525:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 526:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 527:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 528:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 529:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|R_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 530:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 531:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 532:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 533:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 534:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 535:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
 536:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
 537:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
 538:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
 539:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
 540:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 541:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 542:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 543:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 544:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 545:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 546:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 547:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 548:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 549:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 550:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 551:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 552:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 553:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 554:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 555:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 556:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 557:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 558:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 559:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 560:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 561:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 562:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 563:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 564:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 565:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 566:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 567:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 568:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 569:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 570:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 571:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 572:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 573:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 574:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
 575:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
 576:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 577:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
 578:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
 579:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 580:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 581:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 582:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 583:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
 584:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 585:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 586:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 587:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 588:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 589:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
 590:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 591:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 592:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 593:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
 594:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 595:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 596:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 597:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 598:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 599:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 600:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 601:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 602:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 603:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 604:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 605:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 606:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 607:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 608:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 609:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 610:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 611:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 612:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 613:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 614:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 615:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 616:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 617:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 618:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 619:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 620:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 621:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 622:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 625:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 626:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 627:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 628:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 629:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 630:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 631:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 632:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 633:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 634:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 635:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 636:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 637:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 638:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 639:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 640:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 641:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
 642:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
 643:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
 644:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
 645:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 646:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 647:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 648:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 649:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 650:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 651:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 652:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 653:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 654:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 655:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 656:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 657:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 658:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 659:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 660:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 661:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 662:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 663:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 664:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 665:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 666:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 667:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 668:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 669:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 670:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 671:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 672:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 673:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 674:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 675:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 676:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 677:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 678:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 679:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 680:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 681:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 682:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 683:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 684:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 685:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 686:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
 687:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
 688:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 689:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 690:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 691:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 692:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 693:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 694:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 695:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 696:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 697:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 698:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 699:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 700:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 701:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 702:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 703:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 704:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 705:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 706:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 707:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 708:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 709:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 710:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 711:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 712:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 713:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 714:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 715:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 716:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 717:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 718:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 719:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 720:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 721:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 722:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
 723:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 724:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 725:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 726:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 727:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 728:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
 729:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 730:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 731:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 732:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 733:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
 734:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 735:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 736:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 737:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 738:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 739:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 740:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 741:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 742:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 743:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 744:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 745:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 746:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 747:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 748:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 749:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 750:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 751:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 752:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 753:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 754:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 755:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 756:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 757:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 758:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 759:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 760:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 761:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 762:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 763:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 764:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 765:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 766:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 767:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 768:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 769:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 770:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 771:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 772:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 773:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 774:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 775:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 776:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
 777:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 778:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 779:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 780:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 781:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 782:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 783:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 784:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 785:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 786:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 787:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 788:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 789:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 790:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 791:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 792:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 793:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 794:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 795:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 796:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 797:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 798:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 799:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 800:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 801:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 802:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
 803:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
 804:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 805:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 806:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
 807:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
 808:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
 809:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
 810:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
 811:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
 812:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 813:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 814:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 815:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 816:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 817:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 818:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 819:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 820:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 821:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 822:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 823:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 824:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 825:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 826:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 827:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 828:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 829:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 830:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 831:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 832:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 833:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 834:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 835:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 836:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 837:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 838:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 839:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 840:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
 841:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
 842:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 843:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 844:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__)
 845:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 846:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 847:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 848:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 849:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 850:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 851:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 852:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 853:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 854:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 855:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Reduced Power Stage Controller */
 856:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 857:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 858:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 859:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 860:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 861:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 862:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 863:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
 864:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
 865:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 866:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 867:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
 868:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
 869:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
 870:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
 871:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
 872:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
 873:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
 874:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
 875:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
 876:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
 877:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
 878:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
 879:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
 880:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 881:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 882:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 883:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 884:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 885:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 886:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 887:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 888:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 889:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 890:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 891:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 892:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 893:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
 894:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
 895:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 896:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 897:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
 898:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
 899:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
 900:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
 901:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
 902:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
 903:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
 904:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
 905:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
 906:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
 907:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
 908:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
 909:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
 910:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
 911:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
 912:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
 913:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
 914:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 915:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 916:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 917:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 918:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 919:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 920:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 921:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 922:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 923:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 924:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 925:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 926:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 927:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 928:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 929:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 930:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
 931:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
 932:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 933:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 934:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
 935:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
 936:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
 937:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
 938:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
 939:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
 940:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
 941:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
 942:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 943:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 944:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 945:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 946:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 947:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 948:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 949:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 950:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 951:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 952:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
 953:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
 954:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 955:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 956:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 957:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 958:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 959:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 960:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 961:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 962:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 963:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 964:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 965:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 966:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 967:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
 968:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
 969:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 970:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 971:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__)
 972:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 973:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 974:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 975:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 976:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 977:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 978:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 979:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 980:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 981:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 982:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 983:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 984:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 985:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 986:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 987:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 988:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 989:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 990:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 991:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 992:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 993:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 994:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
 995:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
 996:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 997:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 998:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
 999:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1000:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1001:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1002:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1003:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1004:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1005:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1006:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1007:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1008:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1009:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Voltage ADC */
1010:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1011:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1012:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1013:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
1014:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
1015:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1016:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1017:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
1018:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1019:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1020:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1021:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1022:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1023:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1024:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1025:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1026:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1027:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1028:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1029:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1030:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
1031:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1032:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1033:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1034:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1035:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1036:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1037:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1038:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
1039:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
1040:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1041:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1042:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1043:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1044:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1045:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1046:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1047:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
1048:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
1049:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1050:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
1051:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
1052:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1053:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
1054:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
1055:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1056:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1057:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
1058:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
1059:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
1060:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
1061:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
1062:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
1063:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
1064:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
1065:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
1066:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
1067:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
1068:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
1069:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
1070:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
1071:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
1072:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
1073:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1074:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1075:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1076:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1077:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1078:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1079:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1080:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1081:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1082:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1083:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Universal Serial Interface */
1084:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1085:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1086:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1087:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1088:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1089:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1090:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1091:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
1092:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1093:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1094:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1095:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1096:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1097:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1098:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1099:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
1119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
1120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
1125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
1131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
1135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
1138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Voltage ADC */
1150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
1157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
1158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
1160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
1161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
1164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
1168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
1185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
1186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
1188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
1189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
1191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
1192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
1195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny87__)
1196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
1217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
1218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
1221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
1225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
1245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1247:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1248:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1249:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1250:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
1251:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1252:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1253:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1254:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
1255:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1256:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1257:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1258:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1259:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1260:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1261:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1262:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1263:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1264:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1265:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1266:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1267:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1268:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1269:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1270:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1271:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1272:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1273:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1274:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
1275:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
1276:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1277:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1278:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1279:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1280:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
1281:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
1282:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1283:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
1284:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
1285:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1286:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
1287:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
1288:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1289:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
1290:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
1291:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1292:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1293:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1294:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1295:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1296:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1297:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1298:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1299:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1300:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1301:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1302:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1303:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1304:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1305:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
1306:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
1307:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
1308:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
1309:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
1310:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1311:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1312:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1313:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1314:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1315:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1316:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1317:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
1318:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
1319:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1320:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1321:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
1322:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
1323:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1324:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1325:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1326:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1327:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1328:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1329:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1330:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1331:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1332:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1333:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
1334:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
1335:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1336:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
1337:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
1338:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1339:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
1340:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
1341:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1342:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
1343:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1344:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1345:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1346:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1347:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1348:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1349:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1350:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1351:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1352:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1353:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1354:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1355:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1356:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1357:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1358:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1359:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1360:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1361:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1362:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1363:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1364:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1365:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1366:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1367:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1368:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1369:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1370:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1371:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1372:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1373:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1374:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1375:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1376:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1377:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1378:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1379:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1380:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1381:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1382:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1383:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1384:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1385:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1386:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1387:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1388:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1389:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1390:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1391:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1392:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1393:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1394:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1395:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1396:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVB__) \
1397:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1398:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1399:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__) \
1400:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1401:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1402:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1403:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1404:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1405:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1406:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1407:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1408:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1409:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1410:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1411:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1412:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1413:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1414:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1415:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1416:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1417:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1418:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1419:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1420:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1421:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1422:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1423:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1424:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1425:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1426:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1427:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1428:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1429:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1430:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__DOXYGEN__)
1431:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1432:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1433:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1434:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1435:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1436:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1437:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
1438:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
1439:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1440:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
1441:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
1442:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1443:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1444:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1445:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1446:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code 
1447:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** typedef enum
1448:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1449:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1450:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1451:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1452:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1453:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1454:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1455:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1456:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1457:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_256 = 8,
1458:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1459:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } clock_div_t;
1460:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \endcode
1461:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Clock prescaler setting enumerations.
1462:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1463:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1464:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** typedef enum
1465:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1466:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1467:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1468:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1469:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1470:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1471:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1472:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1473:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1474:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_256 = 8
1475:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__)
1476:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     , clock_div_1_rc = 15
1477:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
1478:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } clock_div_t;
1479:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1480:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1481:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1482:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1483:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1484:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1485:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1486:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1487:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1488:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** optimizations are disabled.
1489:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1490:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** The type of x is clock_div_t.
1491:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1492:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1493:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1494:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1495:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     __asm__ __volatile__ (
 1537               		.loc 3 1495 0
 1538 0016 90E0      		ldi r25,0
 1539 0018 80E8      		ldi r24,lo8(-128)
 1540               	/* #APP */
 1541               	 ;  1495 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h" 1
 1542 001a 0FB6      		in __tmp_reg__,__SREG__
 1543 001c F894      		cli
 1544 001e 8093 6100 		sts 97, r24
 1545 0022 9093 6100 		sts 97, r25
 1546 0026 0FBE      		out __SREG__, __tmp_reg__
 1547               	 ;  0 "" 2
 1548               	/* #NOAPP */
 1549               	.LBE54:
 1550               	.LBE53:
 175:catboard.c    **** 	init();
 1551               		.loc 1 175 0
 1552 0028 0E94 0000 		call init
 1553               	.LVL122:
 1554               	.L203:
 177:catboard.c    **** 		poll();
 1555               		.loc 1 177 0 discriminator 1
 1556 002c 0E94 0000 		call poll
 1557               	.LVL123:
 1558 0030 00C0      		rjmp .L203
 1559               	.LFE8:
 1561               	.global	repeat_time
 1562               		.section .bss
 1565               	repeat_time:
 1566 0000 0000      		.zero	2
 1567               	.global	release_time
 1570               	release_time:
 1571 0002 0000      		.zero	2
 1572               	.global	press_time2
 1575               	press_time2:
 1576 0004 0000      		.zero	2
 1577               	.global	press_time
 1580               	press_time:
 1581 0006 0000      		.zero	2
 1582               	.global	last_key
 1583               		.data
 1586               	last_key:
 1587 0000 FF        		.byte	-1
 1588               	.global	turbo_repeat
 1591               	turbo_repeat:
 1592 0001 01        		.byte	1
 1593               	.global	prev_layer
 1594               		.section .bss
 1597               	prev_layer:
 1598 0008 0000      		.zero	2
 1599               	.global	mod_keys
 1602               	mod_keys:
 1603 000a 00        		.zero	1
 1604               	.global	queue
 1605               		.data
 1608               	queue:
 1609 0002 FF        		.byte	-1
 1610 0003 FF        		.byte	-1
 1611 0004 FF        		.byte	-1
 1612 0005 FF        		.byte	-1
 1613 0006 FF        		.byte	-1
 1614 0007 FF        		.byte	-1
 1615 0008 FF        		.byte	-1
 1616               	.global	pressed_sw2
 1617               		.section .bss
 1620               	pressed_sw2:
 1621 000b 00        		.zero	1
 1622               		.comm	pressed,60,1
 1623               	.global	col_bit_sw2
 1624               		.section	.rodata
 1627               	col_bit_sw2:
 1628 0000 80        		.byte	-128
 1629               	.global	col_pin_sw2
 1632               	col_pin_sw2:
 1633 0001 2900      		.word	41
 1634               	.global	col_bit
 1637               	col_bit:
 1638 0003 40        		.byte	64
 1639 0004 20        		.byte	32
 1640 0005 08        		.byte	8
 1641 0006 04        		.byte	4
 1642 0007 02        		.byte	2
 1643 0008 01        		.byte	1
 1644 0009 80        		.byte	-128
 1645 000a 40        		.byte	64
 1646 000b 20        		.byte	32
 1647 000c 10        		.byte	16
 1648 000d 02        		.byte	2
 1649 000e 01        		.byte	1
 1650               	.global	col_pin
 1653               	col_pin:
 1654 000f 2900      		.word	41
 1655 0011 2900      		.word	41
 1656 0013 2900      		.word	41
 1657 0015 2900      		.word	41
 1658 0017 2900      		.word	41
 1659 0019 2900      		.word	41
 1660 001b 2300      		.word	35
 1661 001d 2300      		.word	35
 1662 001f 2300      		.word	35
 1663 0021 2300      		.word	35
 1664 0023 2300      		.word	35
 1665 0025 2300      		.word	35
 1666               	.global	row_bit
 1669               	row_bit:
 1670 0027 80        		.byte	-128
 1671 0028 40        		.byte	64
 1672 0029 20        		.byte	32
 1673 002a 10        		.byte	16
 1674 002b 04        		.byte	4
 1675               	.global	row_port
 1678               	row_port:
 1679 002c 2800      		.word	40
 1680 002e 2800      		.word	40
 1681 0030 2800      		.word	40
 1682 0032 2800      		.word	40
 1683 0034 2800      		.word	40
 1684               	.global	layer_fnlock
 1687               	layer_fnlock:
 1688 0036 29        		.byte	41
 1689 0037 82        		.byte	-126
 1690 0038 90        		.byte	-112
 1691 0039 2B        		.byte	43
 1692 003a 35        		.byte	53
 1693 003b FD        		.byte	-3
 1694 003c 00        		.byte	0
 1695 003d 4E        		.byte	78
 1696 003e 4B        		.byte	75
 1697 003f 1E        		.byte	30
 1698 0040 84        		.byte	-124
 1699 0041 00        		.byte	0
 1700 0042 50        		.byte	80
 1701 0043 4A        		.byte	74
 1702 0044 1F        		.byte	31
 1703 0045 84        		.byte	-124
 1704 0046 00        		.byte	0
 1705 0047 51        		.byte	81
 1706 0048 52        		.byte	82
 1707 0049 20        		.byte	32
 1708 004a 81        		.byte	-127
 1709 004b 00        		.byte	0
 1710 004c 4F        		.byte	79
 1711 004d 4D        		.byte	77
 1712 004e 21        		.byte	33
 1713 004f 2C        		.byte	44
 1714 0050 00        		.byte	0
 1715 0051 28        		.byte	40
 1716 0052 35        		.byte	53
 1717 0053 22        		.byte	34
 1718 0054 2C        		.byte	44
 1719 0055 62        		.byte	98
 1720 0056 55        		.byte	85
 1721 0057 54        		.byte	84
 1722 0058 23        		.byte	35
 1723 0059 FF        		.byte	-1
 1724 005a 59        		.byte	89
 1725 005b 5C        		.byte	92
 1726 005c 5F        		.byte	95
 1727 005d 24        		.byte	36
 1728 005e C0        		.byte	-64
 1729 005f 5A        		.byte	90
 1730 0060 5D        		.byte	93
 1731 0061 60        		.byte	96
 1732 0062 25        		.byte	37
 1733 0063 28        		.byte	40
 1734 0064 5B        		.byte	91
 1735 0065 5E        		.byte	94
 1736 0066 61        		.byte	97
 1737 0067 26        		.byte	38
 1738 0068 53        		.byte	83
 1739 0069 63        		.byte	99
 1740 006a 57        		.byte	87
 1741 006b 56        		.byte	86
 1742 006c 27        		.byte	39
 1743 006d 2E        		.byte	46
 1744 006e A0        		.byte	-96
 1745 006f 28        		.byte	40
 1746 0070 29        		.byte	41
 1747 0071 2D        		.byte	45
 1748               	.global	layer_fn
 1751               	layer_fn:
 1752 0072 FB        		.byte	-5
 1753 0073 F1        		.byte	-15
 1754 0074 90        		.byte	-112
 1755 0075 2B        		.byte	43
 1756 0076 46        		.byte	70
 1757 0077 2B        		.byte	43
 1758 0078 00        		.byte	0
 1759 0079 00        		.byte	0
 1760 007a 00        		.byte	0
 1761 007b 3A        		.byte	58
 1762 007c 84        		.byte	-124
 1763 007d 00        		.byte	0
 1764 007e 00        		.byte	0
 1765 007f 00        		.byte	0
 1766 0080 3B        		.byte	59
 1767 0081 84        		.byte	-124
 1768 0082 00        		.byte	0
 1769 0083 00        		.byte	0
 1770 0084 00        		.byte	0
 1771 0085 3C        		.byte	60
 1772 0086 81        		.byte	-127
 1773 0087 00        		.byte	0
 1774 0088 00        		.byte	0
 1775 0089 00        		.byte	0
 1776 008a 3D        		.byte	61
 1777 008b F3        		.byte	-13
 1778 008c 00        		.byte	0
 1779 008d 00        		.byte	0
 1780 008e 35        		.byte	53
 1781 008f 3E        		.byte	62
 1782 0090 FC        		.byte	-4
 1783 0091 2A        		.byte	42
 1784 0092 28        		.byte	40
 1785 0093 28        		.byte	40
 1786 0094 3F        		.byte	63
 1787 0095 FF        		.byte	-1
 1788 0096 4C        		.byte	76
 1789 0097 50        		.byte	80
 1790 0098 4A        		.byte	74
 1791 0099 40        		.byte	64
 1792 009a FE        		.byte	-2
 1793 009b 49        		.byte	73
 1794 009c 51        		.byte	81
 1795 009d 52        		.byte	82
 1796 009e 41        		.byte	65
 1797 009f 00        		.byte	0
 1798 00a0 00        		.byte	0
 1799 00a1 4F        		.byte	79
 1800 00a2 4D        		.byte	77
 1801 00a3 42        		.byte	66
 1802 00a4 47        		.byte	71
 1803 00a5 00        		.byte	0
 1804 00a6 4E        		.byte	78
 1805 00a7 4B        		.byte	75
 1806 00a8 43        		.byte	67
 1807 00a9 45        		.byte	69
 1808 00aa F2        		.byte	-14
 1809 00ab 48        		.byte	72
 1810 00ac 29        		.byte	41
 1811 00ad 44        		.byte	68
 1812               	.global	layer1
 1815               	layer1:
 1816 00ae 29        		.byte	41
 1817 00af F1        		.byte	-15
 1818 00b0 90        		.byte	-112
 1819 00b1 2B        		.byte	43
 1820 00b2 35        		.byte	53
 1821 00b3 FD        		.byte	-3
 1822 00b4 1D        		.byte	29
 1823 00b5 04        		.byte	4
 1824 00b6 14        		.byte	20
 1825 00b7 1E        		.byte	30
 1826 00b8 84        		.byte	-124
 1827 00b9 1B        		.byte	27
 1828 00ba 16        		.byte	22
 1829 00bb 1A        		.byte	26
 1830 00bc 1F        		.byte	31
 1831 00bd 84        		.byte	-124
 1832 00be 06        		.byte	6
 1833 00bf 07        		.byte	7
 1834 00c0 08        		.byte	8
 1835 00c1 20        		.byte	32
 1836 00c2 81        		.byte	-127
 1837 00c3 19        		.byte	25
 1838 00c4 09        		.byte	9
 1839 00c5 15        		.byte	21
 1840 00c6 21        		.byte	33
 1841 00c7 F3        		.byte	-13
 1842 00c8 05        		.byte	5
 1843 00c9 0A        		.byte	10
 1844 00ca 17        		.byte	23
 1845 00cb 22        		.byte	34
 1846 00cc 2C        		.byte	44
 1847 00cd 11        		.byte	17
 1848 00ce 0B        		.byte	11
 1849 00cf 1C        		.byte	28
 1850 00d0 23        		.byte	35
 1851 00d1 FF        		.byte	-1
 1852 00d2 10        		.byte	16
 1853 00d3 0D        		.byte	13
 1854 00d4 18        		.byte	24
 1855 00d5 24        		.byte	36
 1856 00d6 C0        		.byte	-64
 1857 00d7 36        		.byte	54
 1858 00d8 0E        		.byte	14
 1859 00d9 0C        		.byte	12
 1860 00da 25        		.byte	37
 1861 00db 31        		.byte	49
 1862 00dc 37        		.byte	55
 1863 00dd 0F        		.byte	15
 1864 00de 12        		.byte	18
 1865 00df 26        		.byte	38
 1866 00e0 30        		.byte	48
 1867 00e1 38        		.byte	56
 1868 00e2 33        		.byte	51
 1869 00e3 13        		.byte	19
 1870 00e4 27        		.byte	39
 1871 00e5 2E        		.byte	46
 1872 00e6 F2        		.byte	-14
 1873 00e7 34        		.byte	52
 1874 00e8 2F        		.byte	47
 1875 00e9 2D        		.byte	45
 1876               	.global	mac_mode
 1877               		.section .bss
 1880               	mac_mode:
 1881 000c 00        		.zero	1
 1882               	.global	layout
 1883               		.data
 1886               	layout:
 1887 0009 0000      		.word	layer2
 1888               	.global	layer2
 1889               		.section	.rodata
 1892               	layer2:
 1893 00ea 29        		.byte	41
 1894 00eb F1        		.byte	-15
 1895 00ec 90        		.byte	-112
 1896 00ed 2B        		.byte	43
 1897 00ee 35        		.byte	53
 1898 00ef FD        		.byte	-3
 1899 00f0 14        		.byte	20
 1900 00f1 09        		.byte	9
 1901 00f2 0D        		.byte	13
 1902 00f3 1E        		.byte	30
 1903 00f4 84        		.byte	-124
 1904 00f5 38        		.byte	56
 1905 00f6 1C        		.byte	28
 1906 00f7 06        		.byte	6
 1907 00f8 1F        		.byte	31
 1908 00f9 84        		.byte	-124
 1909 00fa 16        		.byte	22
 1910 00fb 19        		.byte	25
 1911 00fc 18        		.byte	24
 1912 00fd 20        		.byte	32
 1913 00fe 81        		.byte	-127
 1914 00ff 10        		.byte	16
 1915 0100 04        		.byte	4
 1916 0101 0E        		.byte	14
 1917 0102 21        		.byte	33
 1918 0103 F3        		.byte	-13
 1919 0104 0C        		.byte	12
 1920 0105 13        		.byte	19
 1921 0106 08        		.byte	8
 1922 0107 22        		.byte	34
 1923 0108 2C        		.byte	44
 1924 0109 17        		.byte	23
 1925 010a 15        		.byte	21
 1926 010b 11        		.byte	17
 1927 010c 23        		.byte	35
 1928 010d FF        		.byte	-1
 1929 010e 1B        		.byte	27
 1930 010f 12        		.byte	18
 1931 0110 0A        		.byte	10
 1932 0111 24        		.byte	36
 1933 0112 C0        		.byte	-64
 1934 0113 05        		.byte	5
 1935 0114 0F        		.byte	15
 1936 0115 0B        		.byte	11
 1937 0116 25        		.byte	37
 1938 0117 31        		.byte	49
 1939 0118 36        		.byte	54
 1940 0119 07        		.byte	7
 1941 011a 1A        		.byte	26
 1942 011b 26        		.byte	38
 1943 011c 30        		.byte	48
 1944 011d 37        		.byte	55
 1945 011e 33        		.byte	51
 1946 011f 1D        		.byte	29
 1947 0120 27        		.byte	39
 1948 0121 2E        		.byte	46
 1949 0122 F2        		.byte	-14
 1950 0123 34        		.byte	52
 1951 0124 2F        		.byte	47
 1952 0125 2D        		.byte	45
 2185               	.Letext0:
 2186               		.file 4 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/stdint.h"
 2187               		.file 5 "usb_keyboard.h"
 2188               		.file 6 "jcuken.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 catboard.c
     /tmp/ccOPgIso.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccOPgIso.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccOPgIso.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccOPgIso.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccOPgIso.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccOPgIso.s:12     .text.init:0000000000000000 init
                            *COM*:000000000000003c pressed
     /tmp/ccOPgIso.s:89     .text.key_press_sw2:0000000000000000 key_press_sw2
     /tmp/ccOPgIso.s:1620   .bss:000000000000000b pressed_sw2
     /tmp/ccOPgIso.s:144    .text.key_release_sw2:0000000000000000 key_release_sw2
     /tmp/ccOPgIso.s:178    .text.change_layout:0000000000000000 change_layout
     /tmp/ccOPgIso.s:1880   .bss:000000000000000c mac_mode
     /tmp/ccOPgIso.s:255    .text.get_code:0000000000000000 get_code
     /tmp/ccOPgIso.s:1751   .rodata:0000000000000072 layer_fn
     /tmp/ccOPgIso.s:1886   .data:0000000000000009 layout
     /tmp/ccOPgIso.s:1815   .rodata:00000000000000ae layer1
     /tmp/ccOPgIso.s:326    .text.send:0000000000000000 send
     /tmp/ccOPgIso.s:1608   .data:0000000000000002 queue
     /tmp/ccOPgIso.s:1602   .bss:000000000000000a mod_keys
     /tmp/ccOPgIso.s:377    .text.key_release:0000000000000000 key_release
     /tmp/ccOPgIso.s:1597   .bss:0000000000000008 prev_layer
     /tmp/ccOPgIso.s:1586   .data:0000000000000000 last_key
     /tmp/ccOPgIso.s:1580   .bss:0000000000000006 press_time
     /tmp/ccOPgIso.s:1892   .rodata:00000000000000ea layer2
     /tmp/ccOPgIso.s:1575   .bss:0000000000000004 press_time2
     /tmp/ccOPgIso.s:1570   .bss:0000000000000002 release_time
     /tmp/ccOPgIso.s:1565   .bss:0000000000000000 repeat_time
     /tmp/ccOPgIso.s:734    .text.key_press:0000000000000000 key_press
     /tmp/ccOPgIso.s:1687   .rodata:0000000000000036 layer_fnlock
     /tmp/ccOPgIso.s:1591   .data:0000000000000001 turbo_repeat
     /tmp/ccOPgIso.s:1171   .text.repeat_tick:0000000000000000 repeat_tick
     /tmp/ccOPgIso.s:1321   .text.poll:0000000000000000 poll
     /tmp/ccOPgIso.s:1678   .rodata:000000000000002c row_port
     /tmp/ccOPgIso.s:1669   .rodata:0000000000000027 row_bit
     /tmp/ccOPgIso.s:1653   .rodata:000000000000000f col_pin
     /tmp/ccOPgIso.s:1637   .rodata:0000000000000003 col_bit
     /tmp/ccOPgIso.s:1510   .text.startup.main:0000000000000000 main
     /tmp/ccOPgIso.s:1627   .rodata:0000000000000000 col_bit_sw2
     /tmp/ccOPgIso.s:1632   .rodata:0000000000000001 col_pin_sw2

UNDEFINED SYMBOLS
usb_init
usb_configured
usb_keyboard_press
keyboard_modifier_keys
keyboard_keys
usb_keyboard_send
__do_copy_data
__do_clear_bss
