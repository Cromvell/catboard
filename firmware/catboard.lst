   1               		.file	"catboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.section	.text.init_ports,"ax",@progbits
  10               	.global	init_ports
  12               	init_ports:
  13               	.LFB8:
  14               		.file 1 "at90usb162mu.h"
   1:at90usb162mu.h **** #define LED_CONFIG		(DDRD	|= (1<<6))
   2:at90usb162mu.h **** #define LED_OFF			(PORTD	|= (1<<6))
   3:at90usb162mu.h **** #define LED_ON			(PORTD	&= ~(1<<6))
   4:at90usb162mu.h **** 
   5:at90usb162mu.h **** #define LED_BLUE_CONFIG	(DDRD	|= (1<<1))
   6:at90usb162mu.h **** #define LED_BLUE_OFF		(PORTD	&= ~(1<<1))
   7:at90usb162mu.h **** #define LED_BLUE_ON		(PORTD	|= (1<<1))
   8:at90usb162mu.h **** 
   9:at90usb162mu.h **** #define LED_RED_CONFIG	(DDRC	|= (1<<6))
  10:at90usb162mu.h **** #define LED_RED_OFF	(PORTC	|= (1<<6))
  11:at90usb162mu.h **** #define LED_RED_ON		(PORTC	&= ~(1<<6))
  12:at90usb162mu.h **** 
  13:at90usb162mu.h **** #define FN_KEY_ID			7*5+4
  14:at90usb162mu.h **** 
  15:at90usb162mu.h **** // Init ports
  16:at90usb162mu.h **** void init_ports(void) {
  15               		.loc 1 16 0
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
  17:at90usb162mu.h **** 	DDRB  = 0b01001010; DDRC  = 0b00100000; DDRD  = 0b00000100;
  20               		.loc 1 17 0
  21 0000 8AE4      		ldi r24,lo8(74)
  22 0002 84B9      		out 0x4,r24
  23 0004 80E2      		ldi r24,lo8(32)
  24 0006 87B9      		out 0x7,r24
  25 0008 84E0      		ldi r24,lo8(4)
  26 000a 8AB9      		out 0xa,r24
  18:at90usb162mu.h **** 	PORTB = 0xFF;		PORTC = 0xFF; 		PORTD = 0xFF;
  27               		.loc 1 18 0
  28 000c 8FEF      		ldi r24,lo8(-1)
  29 000e 85B9      		out 0x5,r24
  30 0010 88B9      		out 0x8,r24
  31 0012 8BB9      		out 0xb,r24
  32 0014 0895      		ret
  33               	.LFE8:
  35               		.section	.text.init,"ax",@progbits
  36               	.global	init
  38               	init:
  39               	.LFB10:
  40               		.file 2 "catboard.c"
   1:catboard.c    **** /*
   2:catboard.c    **** * Project: CatBoard ][
   3:catboard.c    **** * Version: 3.1 beta
   4:catboard.c    **** * Date: 2013-09-02
   5:catboard.c    **** * Author: Vladimir Romanovich <ibnteo@gmail.com>
   6:catboard.c    **** * License: GPL2
   7:catboard.c    **** * Blog: http://ibnteo.klava.org/tag/catboard
   8:catboard.c    **** * Site: http://catboard.klava.org/
   9:catboard.c    **** * 
  10:catboard.c    **** * Board: AVR-USB162MU (http://microsin.net/programming/AVR/avr-usb162mu.html) analogue Teensy 1.0
  11:catboard.c    **** */
  12:catboard.c    **** 
  13:catboard.c    **** #include <avr/io.h>
  14:catboard.c    **** #include <avr/pgmspace.h>
  15:catboard.c    **** #include <avr/interrupt.h>
  16:catboard.c    **** #include <avr/wdt.h>
  17:catboard.c    **** #include <avr/power.h>
  18:catboard.c    **** #include <util/delay.h>
  19:catboard.c    **** #include "usb_keyboard.h"
  20:catboard.c    **** 
  21:catboard.c    **** #define STR_MANUFACTURER	L"ibnTeo"
  22:catboard.c    **** #define STR_PRODUCT		L"CatBoard"
  23:catboard.c    **** 
  24:catboard.c    **** #define _PINC		(uint8_t *const)&PINC
  25:catboard.c    **** #define _PORTC		(uint8_t *const)&PORTC
  26:catboard.c    **** #define _PIND		(uint8_t *const)&PIND
  27:catboard.c    **** #define _PORTD		(uint8_t *const)&PORTD
  28:catboard.c    **** #define _PORTB		(uint8_t *const)&PORTB
  29:catboard.c    **** #define _PINB		(uint8_t *const)&PINB
  30:catboard.c    **** 
  31:catboard.c    **** #define ROWS	5
  32:catboard.c    **** #define COLS	12
  33:catboard.c    **** #define KEYS	COLS*ROWS
  34:catboard.c    **** 
  35:catboard.c    **** //1=num lock, 2=caps lock, 4=scroll lock, 8=compose, 16=kana
  36:catboard.c    **** #define LED_NUM_LOCK		1
  37:catboard.c    **** #define LED_CAPS_LOCK		2
  38:catboard.c    **** #define LED_SCROLL_LOCK	4
  39:catboard.c    **** #define LED_COMPOSE		8
  40:catboard.c    **** #define LED_KANA			16
  41:catboard.c    **** 
  42:catboard.c    **** #define NULL				0
  43:catboard.c    **** #define NA					0
  44:catboard.c    **** // 109-127 - catboard
  45:catboard.c    **** #define KEY_CB_START		109
  46:catboard.c    **** #define KEY_LAYER1			109
  47:catboard.c    **** #define KEY_LAYER2			110
  48:catboard.c    **** #define KEY_MACRO			111
  49:catboard.c    **** // ...
  50:catboard.c    **** #define KEY_MY_SHIFT		119
  51:catboard.c    **** #define KEY_TYPO_MODE		120
  52:catboard.c    **** #define KEY_LED				121 // (+Shift)
  53:catboard.c    **** #define KEY_LOCK			122
  54:catboard.c    **** #define KEY_TURBO_REPEAT	123
  55:catboard.c    **** #define KEY_OS_MODE			124 // (+Shift)
  56:catboard.c    **** #define KEY_ALT_TAB			125
  57:catboard.c    **** #define KEY_FN_LOCK			126 // (+Shift)
  58:catboard.c    **** #define KEY_FN				127
  59:catboard.c    **** #define KEY_NULL			0
  60:catboard.c    **** 
  61:catboard.c    **** #define KEY_LCTRL	101
  62:catboard.c    **** #define KEY_LSHIFT	102
  63:catboard.c    **** #define KEY_LALT	103
  64:catboard.c    **** #define KEY_LGUI	104
  65:catboard.c    **** #define KEY_RCTRL	105
  66:catboard.c    **** #define KEY_RSHIFT	106
  67:catboard.c    **** #define KEY_RALT	107
  68:catboard.c    **** #define KEY_RGUI	108
  69:catboard.c    **** /*#define KEY_LCTRL	0x01+100
  70:catboard.c    **** #define KEY_LSHIFT	0x02+100
  71:catboard.c    **** #define KEY_LALT	0x04+100
  72:catboard.c    **** #define KEY_LGUI	0x08+100
  73:catboard.c    **** #define KEY_RCTRL	0x10+100
  74:catboard.c    **** #define KEY_RSHIFT	0x20+100
  75:catboard.c    **** #define KEY_RALT	0x40+100
  76:catboard.c    **** #define KEY_RGUI	0x80+100*/
  77:catboard.c    **** 
  78:catboard.c    **** 
  79:catboard.c    **** #define KEY_PRESSED_FN		1
  80:catboard.c    **** #define KEY_PRESSED_MODS	2
  81:catboard.c    **** #define KEY_PRESSED_ALT		3
  82:catboard.c    **** #define KEY_PRESSED_SHIFT	4
  83:catboard.c    **** #define KEY_PRESSED_CTRL	5
  84:catboard.c    **** #define KEY_PRESSED_PREV	6
  85:catboard.c    **** 
  86:catboard.c    **** //#include "qwerty.h"
  87:catboard.c    **** //#include "dvorak.h"
  88:catboard.c    **** #include "jcuken.h"
  89:catboard.c    **** 
  90:catboard.c    **** //#include "at90usb162.h"
  91:catboard.c    **** #include "at90usb162mu.h"
  92:catboard.c    **** 
  93:catboard.c    **** #include "my_macros.h"
  94:catboard.c    **** 
  95:catboard.c    **** // 0 - shorcuts my layout; 1 - shorcuts qwerty layout
  96:catboard.c    **** #define KEY_SHORTCUTS_LAYER1	1
  97:catboard.c    **** 
  98:catboard.c    **** // Nonstandart hardware layout
  99:catboard.c    **** #define KEY_LAYOUT_ALT_SHIFT	1
 100:catboard.c    **** #define KEY_LAYOUT_CTRL_SHIFT	2
 101:catboard.c    **** #define KEY_LAYOUT_GUI_SPACE	3
 102:catboard.c    **** 
 103:catboard.c    **** //#define KEY_LAYOUT		0
 104:catboard.c    **** #define KEY_LAYOUT		KEY_LAYOUT_ALT_SHIFT
 105:catboard.c    **** 
 106:catboard.c    **** // OS mode: 0 - Windows, 1 - Linux, 2 - Mac
 107:catboard.c    **** uint8_t os_mode = 1;
 108:catboard.c    **** 
 109:catboard.c    **** uint8_t caps_lock_led = 0;
 110:catboard.c    **** 
 111:catboard.c    **** // 0x00-0x7F - normal keys
 112:catboard.c    **** // 0x80-0xF0 - mod_keys | 0x80
 113:catboard.c    **** // 0xF1-0xFF - catboard keys
 114:catboard.c    **** 
 115:catboard.c    **** // TODO: think...
 116:catboard.c    **** // 4-99 - Normal keys (96 keys)
 117:catboard.c    **** // 101-108|KEY_MOD - Mod keys (8 keys)
 118:catboard.c    **** // 109-127|KEY_MOD - CatBoard keys (19 keys)
 119:catboard.c    **** // n|0x80 - Shift inverse keys
 120:catboard.c    **** 
 121:catboard.c    **** 
 122:catboard.c    **** // Start layout
 123:catboard.c    **** uint8_t *layout = &layer2;
 124:catboard.c    **** 
 125:catboard.c    **** int8_t pressed[KEYS];
 126:catboard.c    **** uint8_t queue[7] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 127:catboard.c    **** uint8_t mod_keys = 0;
 128:catboard.c    **** uint8_t *prev_layer = 0;
 129:catboard.c    **** 
 130:catboard.c    **** uint8_t turbo_repeat = 1;
 131:catboard.c    **** uint8_t locked = 0;
 132:catboard.c    **** uint8_t led = 1; // LED light
 133:catboard.c    **** 
 134:catboard.c    **** uint8_t last_key = 0xFF;
 135:catboard.c    **** uint16_t press_time = 0;
 136:catboard.c    **** uint16_t press_time2 = 0;
 137:catboard.c    **** uint16_t release_time = 0;
 138:catboard.c    **** uint16_t repeat_time = 0;
 139:catboard.c    **** 
 140:catboard.c    **** void init(void);
 141:catboard.c    **** void send(void);
 142:catboard.c    **** void poll(void);
 143:catboard.c    **** void repeat_tick(void);
 144:catboard.c    **** void key_press(uint8_t key_id);
 145:catboard.c    **** void key_release(uint8_t key_id);
 146:catboard.c    **** uint8_t get_code(uint8_t key_id);
 147:catboard.c    **** 
 148:catboard.c    **** /*
 149:catboard.c    **** rus
 150:catboard.c    **** §!@#$%^&*()–»
 151:catboard.c    **** јџќ®†њѓѕў‘“ъ
 152:catboard.c    **** ƒыћ÷©}°љ∆…эё
 153:catboard.c    **** ]ђ≈≠µи™~≤≥“
 154:catboard.c    **** 
 155:catboard.c    **** rus shift
 156:catboard.c    **** ±|"£€∞¬¶√'`—«
 157:catboard.c    **** ЈЏЌ®†ЊЃЅЎ’”Ъ
 158:catboard.c    **** ƒЫЋ÷©{•Љ∆…ЭЁ
 159:catboard.c    **** [Ђ≈≠µИ™~<>„
 160:catboard.c    **** 
 161:catboard.c    **** lat
 162:catboard.c    **** §¡™£¢∞§¶•ªº–≠
 163:catboard.c    **** œ∑´®†¥¨ˆøπ“‘
 164:catboard.c    **** åß∂ƒ©˙∆˚¬…æ«
 165:catboard.c    **** `Ω≈ç√∫˜µ≤≥÷
 166:catboard.c    **** 
 167:catboard.c    **** lat shift
 168:catboard.c    **** ±⁄€‹›ﬁﬂ‡°·‚—±
 169:catboard.c    **** Œ„´‰ˇÁ¨ˆØ∏”’
 170:catboard.c    **** ÅÍÎÏ˝ÓÔÒÚÆ»
 171:catboard.c    **** `¸˛Ç◊ı˜Â¯˘¿
 172:catboard.c    **** */
 173:catboard.c    **** 
 174:catboard.c    **** 
 175:catboard.c    **** int main(void) {
 176:catboard.c    **** 	// Disable watchdog if enabled by bootloader/fuses
 177:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 178:catboard.c    **** 	wdt_disable();
 179:catboard.c    **** 
 180:catboard.c    **** 	// Disable clock division
 181:catboard.c    **** 	clock_prescale_set(clock_div_1);
 182:catboard.c    **** 
 183:catboard.c    **** 	init();
 184:catboard.c    **** 	for (;;) {
 185:catboard.c    **** 		poll();
 186:catboard.c    **** 	}
 187:catboard.c    **** }
 188:catboard.c    **** 
 189:catboard.c    **** void init(void) {
  41               		.loc 2 189 0
  42               	/* prologue: function */
  43               	/* frame size = 0 */
  44               	/* stack size = 0 */
  45               	.L__stack_usage = 0
 190:catboard.c    **** 	// Set for 16 MHz clock
 191:catboard.c    **** 	CLKPR = 0x80; CLKPR = 0;
  46               		.loc 2 191 0
  47 0000 80E8      		ldi r24,lo8(-128)
  48 0002 8093 6100 		sts 97,r24
  49 0006 1092 6100 		sts 97,__zero_reg__
 192:catboard.c    **** 
 193:catboard.c    **** 	init_ports();
  50               		.loc 2 193 0
  51 000a 0E94 0000 		call init_ports
  52               	.LVL0:
 194:catboard.c    **** 
 195:catboard.c    **** 	LED_CONFIG;
  53               		.loc 2 195 0
  54 000e 569A      		sbi 0xa,6
 196:catboard.c    **** 	LED_RED_CONFIG;
  55               		.loc 2 196 0
  56 0010 3E9A      		sbi 0x7,6
 197:catboard.c    **** 	LED_BLUE_CONFIG;
  57               		.loc 2 197 0
  58 0012 519A      		sbi 0xa,1
 198:catboard.c    **** 
 199:catboard.c    **** 	LED_RED_OFF;
  59               		.loc 2 199 0
  60 0014 469A      		sbi 0x8,6
 200:catboard.c    **** 	LED_BLUE_OFF;
  61               		.loc 2 200 0
  62 0016 5998      		cbi 0xb,1
 201:catboard.c    **** 	if (led) LED_ON;
  63               		.loc 2 201 0
  64 0018 8091 0000 		lds r24,led
  65 001c 8111      		cpse r24,__zero_reg__
  66               		.loc 2 201 0 is_stmt 0 discriminator 1
  67 001e 5E98      		cbi 0xb,6
  68               	.L3:
  69               	.LVL1:
  70 0020 E0E0      		ldi r30,lo8(pressed)
  71 0022 F0E0      		ldi r31,hi8(pressed)
  72               	.LVL2:
  73               	.L4:
  74               	.LBB19:
 202:catboard.c    **** 
 203:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
 204:catboard.c    **** 		pressed[i] = 0;
  75               		.loc 2 204 0 is_stmt 1 discriminator 2
  76 0024 1192      		st Z+,__zero_reg__
 203:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
  77               		.loc 2 203 0 discriminator 2
  78 0026 80E0      		ldi r24,hi8(pressed+60)
  79 0028 E030      		cpi r30,lo8(pressed+60)
  80 002a F807      		cpc r31,r24
  81 002c 01F4      		brne .L4
  82               	.LBE19:
 205:catboard.c    **** 	}
 206:catboard.c    **** 
 207:catboard.c    **** 	usb_init();
  83               		.loc 2 207 0
  84 002e 0E94 0000 		call usb_init
  85               	.LVL3:
  86               	.L5:
 208:catboard.c    **** 	while(!usb_configured());
  87               		.loc 2 208 0 discriminator 1
  88 0032 0E94 0000 		call usb_configured
  89               	.LVL4:
  90 0036 8823      		tst r24
  91 0038 01F0      		breq .L5
 209:catboard.c    **** 	LED_OFF;
  92               		.loc 2 209 0
  93 003a 5E9A      		sbi 0xb,6
 210:catboard.c    **** 	if (led) LED_RED_ON;
  94               		.loc 2 210 0
  95 003c 8091 0000 		lds r24,led
  96 0040 8111      		cpse r24,__zero_reg__
  97               		.loc 2 210 0 is_stmt 0 discriminator 1
  98 0042 4698      		cbi 0x8,6
  99               	.L6:
 211:catboard.c    **** 	caps_lock_led = keyboard_leds;
 100               		.loc 2 211 0 is_stmt 1
 101 0044 8091 0000 		lds r24,keyboard_leds
 102 0048 8093 0000 		sts caps_lock_led,r24
 103 004c 0895      		ret
 104               	.LFE10:
 106               		.section	.text.caps_lock_change_layer,"ax",@progbits
 107               	.global	caps_lock_change_layer
 109               	caps_lock_change_layer:
 110               	.LFB12:
 212:catboard.c    **** }
 213:catboard.c    **** 
 214:catboard.c    **** void poll() {
 215:catboard.c    **** 	uint8_t row, col, key_id;
 216:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 217:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 218:catboard.c    **** 		_delay_us(1);
 219:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 220:catboard.c    **** 			key_id = col*ROWS+row;
 221:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 222:catboard.c    **** 				if (! pressed[key_id]) {
 223:catboard.c    **** 					key_press(key_id);
 224:catboard.c    **** 				}
 225:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 226:catboard.c    **** 				key_release(key_id);
 227:catboard.c    **** 			}
 228:catboard.c    **** 		}
 229:catboard.c    **** 		*row_port[row] |= row_bit[row];
 230:catboard.c    **** 	}
 231:catboard.c    **** 	if (caps_lock_led != (keyboard_leds & LED_CAPS_LOCK)) { // change layout
 232:catboard.c    **** 		caps_lock_change_layer();
 233:catboard.c    **** 	}
 234:catboard.c    **** 	//if (keyboard_leds) LED_ON; else LED_OFF;
 235:catboard.c    **** 	repeat_tick();
 236:catboard.c    **** 	_delay_ms(5);
 237:catboard.c    **** }
 238:catboard.c    **** 
 239:catboard.c    **** void caps_lock_change_layer() {
 111               		.loc 2 239 0
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114               	/* stack size = 0 */
 115               	.L__stack_usage = 0
 240:catboard.c    **** 	caps_lock_led = (keyboard_leds & LED_CAPS_LOCK);
 116               		.loc 2 240 0
 117 0000 2091 0000 		lds r18,keyboard_leds
 118 0004 2270      		andi r18,lo8(2)
 119 0006 2093 0000 		sts caps_lock_led,r18
 120 000a 8091 0000 		lds r24,layout
 121 000e 9091 0000 		lds r25,layout+1
 241:catboard.c    **** 	if ((caps_lock_led) && (layout != layer1)) {
 122               		.loc 2 241 0
 123 0012 2223      		tst r18
 124 0014 01F0      		breq .L19
 125               		.loc 2 241 0 is_stmt 0 discriminator 1
 126 0016 20E0      		ldi r18,hi8(layer1)
 127 0018 8030      		cpi r24,lo8(layer1)
 128 001a 9207      		cpc r25,r18
 129 001c 01F0      		breq .L18
 242:catboard.c    **** 		if (layout==layer_fn) {
 130               		.loc 2 242 0 is_stmt 1
 131 001e 8050      		subi r24,lo8(layer_fn)
 132 0020 9040      		sbci r25,hi8(layer_fn)
 133 0022 01F4      		brne .L22
 243:catboard.c    **** 			prev_layer = layer1;
 134               		.loc 2 243 0
 135 0024 80E0      		ldi r24,lo8(layer1)
 136 0026 90E0      		ldi r25,hi8(layer1)
 137 0028 9093 0000 		sts prev_layer+1,r25
 138 002c 8093 0000 		sts prev_layer,r24
 139 0030 00C0      		rjmp .L23
 140               	.L22:
 244:catboard.c    **** 		} else {
 245:catboard.c    **** 			layout = layer1;
 141               		.loc 2 245 0
 142 0032 80E0      		ldi r24,lo8(layer1)
 143 0034 90E0      		ldi r25,hi8(layer1)
 144 0036 9093 0000 		sts layout+1,r25
 145 003a 8093 0000 		sts layout,r24
 146               	.L23:
 246:catboard.c    **** 		}
 247:catboard.c    **** 		LED_RED_OFF;
 147               		.loc 2 247 0
 148 003e 469A      		sbi 0x8,6
 248:catboard.c    **** 		if (led) LED_BLUE_ON;
 149               		.loc 2 248 0
 150 0040 8091 0000 		lds r24,led
 151 0044 8823      		tst r24
 152 0046 01F0      		breq .L18
 153               		.loc 2 248 0 is_stmt 0 discriminator 1
 154 0048 599A      		sbi 0xb,1
 155 004a 0895      		ret
 156               	.L19:
 249:catboard.c    **** 	} else if ((! caps_lock_led) && (layout != layer2)) {
 157               		.loc 2 249 0 is_stmt 1 discriminator 1
 158 004c 20E0      		ldi r18,hi8(layer2)
 159 004e 8030      		cpi r24,lo8(layer2)
 160 0050 9207      		cpc r25,r18
 161 0052 01F0      		breq .L18
 250:catboard.c    **** 		if (layout==layer_fn) {
 162               		.loc 2 250 0
 163 0054 8050      		subi r24,lo8(layer_fn)
 164 0056 9040      		sbci r25,hi8(layer_fn)
 165 0058 01F4      		brne .L25
 251:catboard.c    **** 			prev_layer = layer2;
 166               		.loc 2 251 0
 167 005a 80E0      		ldi r24,lo8(layer2)
 168 005c 90E0      		ldi r25,hi8(layer2)
 169 005e 9093 0000 		sts prev_layer+1,r25
 170 0062 8093 0000 		sts prev_layer,r24
 171 0066 00C0      		rjmp .L26
 172               	.L25:
 252:catboard.c    **** 		} else {
 253:catboard.c    **** 			layout = layer2;
 173               		.loc 2 253 0
 174 0068 80E0      		ldi r24,lo8(layer2)
 175 006a 90E0      		ldi r25,hi8(layer2)
 176 006c 9093 0000 		sts layout+1,r25
 177 0070 8093 0000 		sts layout,r24
 178               	.L26:
 254:catboard.c    **** 		}
 255:catboard.c    **** 		LED_BLUE_OFF;
 179               		.loc 2 255 0
 180 0074 5998      		cbi 0xb,1
 256:catboard.c    **** 		if (led) LED_RED_ON;
 181               		.loc 2 256 0
 182 0076 8091 0000 		lds r24,led
 183 007a 8111      		cpse r24,__zero_reg__
 184               		.loc 2 256 0 is_stmt 0 discriminator 1
 185 007c 4698      		cbi 0x8,6
 186               	.L18:
 187 007e 0895      		ret
 188               	.LFE12:
 190               		.section	.text.change_layout,"ax",@progbits
 191               	.global	change_layout
 193               	change_layout:
 194               	.LFB16:
 257:catboard.c    **** 	}
 258:catboard.c    **** }
 259:catboard.c    **** 
 260:catboard.c    **** void repeat_tick(void) {
 261:catboard.c    **** 	if (repeat_time) { // repeat pause
 262:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 263:catboard.c    **** 			repeat_time++;
 264:catboard.c    **** 		} else { // repeat press
 265:catboard.c    **** 			repeat_time = 1;
 266:catboard.c    **** 			if (turbo_repeat) {
 267:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 268:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 269:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 270:catboard.c    **** 					keyboard_keys[0] = 0;
 271:catboard.c    **** 					usb_keyboard_send();
 272:catboard.c    **** 				}
 273:catboard.c    **** 			}
 274:catboard.c    **** 		}
 275:catboard.c    **** 	} else if (press_time2) { // press2 pause
 276:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 277:catboard.c    **** 			press_time2++;
 278:catboard.c    **** 		} else {
 279:catboard.c    **** 			repeat_time = 1;
 280:catboard.c    **** 		}
 281:catboard.c    **** 	} else if (release_time) { // release pause
 282:catboard.c    **** 		if (release_time<(press_time+50)) {
 283:catboard.c    **** 			release_time++;
 284:catboard.c    **** 		} else {
 285:catboard.c    **** 			last_key = 0xFF;
 286:catboard.c    **** 			release_time = 0;
 287:catboard.c    **** 			press_time = 0;
 288:catboard.c    **** 			press_time2 = 0;
 289:catboard.c    **** 			release_time = 0;
 290:catboard.c    **** 		}
 291:catboard.c    **** 	} else if (press_time) { // press1 pause
 292:catboard.c    **** 		if (press_time<250) {
 293:catboard.c    **** 			press_time++;
 294:catboard.c    **** 		} else {
 295:catboard.c    **** 			press_time = 0;
 296:catboard.c    **** 		}
 297:catboard.c    **** 	}	
 298:catboard.c    **** }
 299:catboard.c    **** 
 300:catboard.c    **** void key_press(uint8_t key_id) {
 301:catboard.c    **** 	uint8_t i;
 302:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 303:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 304:catboard.c    **** 	
 305:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 306:catboard.c    **** 	if (key_code==NULL) {
 307:catboard.c    **** 		key_code = layout[key_id];
 308:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 309:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 310:catboard.c    **** 			key_code = prev_layer[key_id];
 311:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 312:catboard.c    **** 		}
 313:catboard.c    **** 	}
 314:catboard.c    **** 
 315:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 316:catboard.c    **** 	
 317:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys
 318:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 319:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 320:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 321:catboard.c    **** 			} else { // Alt press, Tab press and release
 322:catboard.c    **** 				if (! mod_keys) {
 323:catboard.c    **** 					mod_keys |= (KEY_ALT);
 324:catboard.c    **** 				} else {
 325:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 326:catboard.c    **** 				}
 327:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 328:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 329:catboard.c    **** 				usb_keyboard_send();
 330:catboard.c    **** 				_delay_ms(50);
 331:catboard.c    **** 				send();
 332:catboard.c    **** 			}
 333:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 334:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 335:catboard.c    **** 				if (prev_layer) { // FnLock Off
 336:catboard.c    **** 					layout = prev_layer;
 337:catboard.c    **** 					prev_layer = 0;
 338:catboard.c    **** 				} else { // FnLock On
 339:catboard.c    **** 					prev_layer = layout;
 340:catboard.c    **** 					layout = layer_fnlock;
 341:catboard.c    **** 				}
 342:catboard.c    **** 			}
 343:catboard.c    **** 		} else if (key_code==KEY_OS_MODE) { // Mac mode
 344:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 345:catboard.c    **** 				os_mode++;
 346:catboard.c    **** 				if (os_mode>2) os_mode = 0;
 347:catboard.c    **** 			} else { // Press Space
 348:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 349:catboard.c    **** 			}
 350:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 351:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 352:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 353:catboard.c    **** 				mod_keys |= KEY_CTRL;
 354:catboard.c    **** 				send();
 355:catboard.c    **** 			} else {
 356:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 357:catboard.c    **** 				mod_keys |= KEY_SHIFT;
 358:catboard.c    **** 				send();
 359:catboard.c    **** 			}
 360:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 361:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 362:catboard.c    **** 			send();
 363:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 364:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 365:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 366:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 367:catboard.c    **** 			send();
 368:catboard.c    **** 		} else if (key_code==KEY_MACRO) { // TODO: My Macro
 369:catboard.c    **** 			/*uint8_t macros_pos_index = 0;
 370:catboard.c    **** 			for (i==0; i<sizeof(macros_pos); i++) {
 371:catboard.c    **** 				if (key_id==macros_pos[i]) {
 372:catboard.c    **** 					macros_pos_index = i;
 373:catboard.c    **** 					break;
 374:catboard.c    **** 				}
 375:catboard.c    **** 			}
 376:catboard.c    **** 			uint16_t *macros;
 377:catboard.c    **** 			uint16_t *macros = macros_press[macros_pos_index];
 378:catboard.c    **** 			for (i==0; i<sizeof(macros); i=i+2) {
 379:catboard.c    **** 				usb_keyboard_press(macros[i], macros[i+1]);
 380:catboard.c    **** 			}*/
 381:catboard.c    **** 		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
 382:catboard.c    **** 			if (locked) {
 383:catboard.c    **** 				locked = 0;
 384:catboard.c    **** 				if (led) {
 385:catboard.c    **** 					if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 386:catboard.c    **** 					if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 387:catboard.c    **** 				}
 388:catboard.c    **** 			} else {
 389:catboard.c    **** 				locked = 1;
 390:catboard.c    **** 				LED_OFF;
 391:catboard.c    **** 				LED_RED_OFF;
 392:catboard.c    **** 				LED_BLUE_OFF;
 393:catboard.c    **** 				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
 394:catboard.c    **** 			}
 395:catboard.c    **** 		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
 396:catboard.c    **** 			if (led) {
 397:catboard.c    **** 				led = 0;
 398:catboard.c    **** 				LED_OFF;
 399:catboard.c    **** 				LED_RED_OFF;
 400:catboard.c    **** 				LED_BLUE_OFF;
 401:catboard.c    **** 			} else {
 402:catboard.c    **** 				led = 1;
 403:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 404:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 405:catboard.c    **** 			}
 406:catboard.c    **** 		}
 407:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys
 408:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 409:catboard.c    **** 			mod_keys |= KEY_GUI;
 410:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 411:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 412:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 413:catboard.c    **** 			mod_keys |= KEY_CTRL;
 414:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 415:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 416:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 417:catboard.c    **** 			mod_keys |= KEY_ALT;
 418:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 419:catboard.c    **** 			mod_keys |= KEY_GUI;
 420:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 421:catboard.c    **** 			mod_keys |= KEY_RIGHT_CTRL;
 422:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 423:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 424:catboard.c    **** 		} else if (key_code==KEY_RALT) {
 425:catboard.c    **** 			mod_keys |= KEY_RIGHT_ALT;
 426:catboard.c    **** 		} else if (key_code==KEY_RGUI) {
 427:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 428:catboard.c    **** 		}
 429:catboard.c    **** 		send();
 430:catboard.c    **** 	} else {
 431:catboard.c    **** 		/*if (mod_keys & (KEY_ALT|KEY_RIGHT_ALT)) { // TODO: typo
 432:catboard.c    **** 			uint16_t num = layer2_typo[0];
 433:catboard.c    **** 			char str[4];
 434:catboard.c    **** 			itoa(num, &str, 16);
 435:catboard.c    **** 		}*/
 436:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 437:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 438:catboard.c    **** 			queue[0] = key_id;
 439:catboard.c    **** 			send();
 440:catboard.c    **** 		}
 441:catboard.c    **** 	}
 442:catboard.c    **** 	// Autorepeat
 443:catboard.c    **** 	if (last_key==key_id) { // calc press2
 444:catboard.c    **** 		press_time2 = 1;
 445:catboard.c    **** 		repeat_time = 0;
 446:catboard.c    **** 	} else { // calc press1
 447:catboard.c    **** 		last_key = key_id;
 448:catboard.c    **** 		press_time = 1;
 449:catboard.c    **** 		press_time2 = 0;
 450:catboard.c    **** 		release_time = 0;
 451:catboard.c    **** 		repeat_time = 0;
 452:catboard.c    **** 	}
 453:catboard.c    **** }
 454:catboard.c    **** 
 455:catboard.c    **** void key_release(uint8_t key_id) {
 456:catboard.c    **** 	uint8_t i;
 457:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 458:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 459:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 460:catboard.c    **** 		key_code = prev_layer[key_id];
 461:catboard.c    **** 	}
 462:catboard.c    **** 	pressed[key_id] = 0;
 463:catboard.c    **** 	if (locked) return;
 464:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys release
 465:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 466:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 467:catboard.c    **** 			send();
 468:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 469:catboard.c    **** 			mod_keys &= ~(KEY_CTRL);
 470:catboard.c    **** 			send();
 471:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // LAYER1
 472:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 473:catboard.c    **** 			send();
 474:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 475:catboard.c    **** 				if (layout!=layer1) {
 476:catboard.c    **** 					if (layout==layer_fn) {
 477:catboard.c    **** 						prev_layer = layer1;
 478:catboard.c    **** 					} else {
 479:catboard.c    **** 						layout = layer1;
 480:catboard.c    **** 					}
 481:catboard.c    **** 					change_layout();
 482:catboard.c    **** 					//LED_ON;
 483:catboard.c    **** 					LED_RED_OFF;
 484:catboard.c    **** 					if (led) LED_BLUE_ON;
 485:catboard.c    **** 				}
 486:catboard.c    **** 			}
 487:catboard.c    **** 			last_key = 0xFF;
 488:catboard.c    **** 			press_time = 0;
 489:catboard.c    **** 			press_time2 = 0;
 490:catboard.c    **** 			release_time = 0;
 491:catboard.c    **** 			repeat_time = 0;
 492:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // LAYER2
 493:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 494:catboard.c    **** 			send();
 495:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 496:catboard.c    **** 				if (layout!=layer2) {
 497:catboard.c    **** 					if (layout==layer_fn) {
 498:catboard.c    **** 						prev_layer = layer2;
 499:catboard.c    **** 					} else {
 500:catboard.c    **** 						layout = layer2;
 501:catboard.c    **** 					}
 502:catboard.c    **** 					change_layout();
 503:catboard.c    **** 					//LED_OFF;
 504:catboard.c    **** 					LED_BLUE_OFF;
 505:catboard.c    **** 					if (led) LED_RED_ON;
 506:catboard.c    **** 				}
 507:catboard.c    **** 			}
 508:catboard.c    **** 			last_key = 0xFF;
 509:catboard.c    **** 			press_time = 0;
 510:catboard.c    **** 			press_time2 = 0;
 511:catboard.c    **** 			release_time = 0;
 512:catboard.c    **** 			repeat_time = 0;
 513:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 514:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 515:catboard.c    **** 			send();
 516:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 517:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 518:catboard.c    **** 			}
 519:catboard.c    **** 			last_key = 0xFF;
 520:catboard.c    **** 			press_time = 0;
 521:catboard.c    **** 			press_time2 = 0;
 522:catboard.c    **** 			release_time = 0;
 523:catboard.c    **** 			repeat_time = 0;
 524:catboard.c    **** 		}
 525:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 526:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 527:catboard.c    **** 			mod_keys &= ~KEY_LGUI;
 528:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 529:catboard.c    **** 			mod_keys &= ~KEY_RGUI;
 530:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 531:catboard.c    **** 			mod_keys &= ~KEY_CTRL;
 532:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 533:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 534:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 535:catboard.c    **** 			mod_keys &= ~KEY_ALT;
 536:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 537:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 538:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 539:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_CTRL;
 540:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 541:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 542:catboard.c    **** 		} else if (key_code==KEY_RALT) {
 543:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_ALT;
 544:catboard.c    **** 		} else if (key_code==KEY_RGUI) {
 545:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 546:catboard.c    **** 		}
 547:catboard.c    **** 		send();
 548:catboard.c    **** 	} else {
 549:catboard.c    **** 		for (i=0; i<6; i++) {
 550:catboard.c    **** 			if (queue[i]==key_id) {
 551:catboard.c    **** 				break;
 552:catboard.c    **** 			}
 553:catboard.c    **** 		}
 554:catboard.c    **** 		for (; i<6; i++) {
 555:catboard.c    **** 			queue[i] = queue[i+1];
 556:catboard.c    **** 		}
 557:catboard.c    **** 		send();
 558:catboard.c    **** 		// Autorepeat
 559:catboard.c    **** 		if (last_key==key_id) { // realise time
 560:catboard.c    **** 			press_time2 = 0;
 561:catboard.c    **** 			release_time = 1;
 562:catboard.c    **** 			repeat_time = 0;
 563:catboard.c    **** 		} else { // reset
 564:catboard.c    **** 			press_time = 0;
 565:catboard.c    **** 			press_time2 = 0;
 566:catboard.c    **** 			release_time = 0;
 567:catboard.c    **** 			repeat_time = 0;
 568:catboard.c    **** 		}
 569:catboard.c    **** 	}
 570:catboard.c    **** }
 571:catboard.c    **** 
 572:catboard.c    **** void change_layout(void) {
 195               		.loc 2 572 0 is_stmt 1
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 0 */
 199               	.L__stack_usage = 0
 573:catboard.c    **** 	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || os_mode==2) { // Press Cmd+Space
 200               		.loc 2 573 0
 201 0000 8091 0000 		lds r24,os_mode
 202 0004 8230      		cpi r24,lo8(2)
 203 0006 01F4      		brne .L37
 204               	.LBB30:
 205               	.LBB31:
 574:catboard.c    **** 		keyboard_modifier_keys = KEY_GUI;
 206               		.loc 2 574 0
 207 0008 88E0      		ldi r24,lo8(8)
 208 000a 8093 0000 		sts keyboard_modifier_keys,r24
 575:catboard.c    **** 		keyboard_keys[0] = 0;
 209               		.loc 2 575 0
 210 000e 1092 0000 		sts keyboard_keys,__zero_reg__
 576:catboard.c    **** 		usb_keyboard_send();
 211               		.loc 2 576 0
 212 0012 0E94 0000 		call usb_keyboard_send
 213               	.LVL5:
 214               	.LBB32:
 215               	.LBB33:
 216               		.file 3 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h"
   1:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 217               		.loc 3 164 0
 218 0016 2FEF      		ldi r18,lo8(159999)
 219 0018 80E7      		ldi r24,hi8(159999)
 220 001a 92E0      		ldi r25,hlo8(159999)
 221 001c 2150      		1: subi r18,1
 222 001e 8040      		sbci r24,0
 223 0020 9040      		sbci r25,0
 224 0022 01F4      		brne 1b
 225 0024 00C0      		rjmp .
 226 0026 0000      		nop
 227               	.LBE33:
 228               	.LBE32:
 577:catboard.c    **** 		_delay_ms(50);
 578:catboard.c    **** 		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 229               		.loc 2 578 0
 230 0028 68E0      		ldi r22,lo8(8)
 231 002a 8CE2      		ldi r24,lo8(44)
 232 002c 00C0      		rjmp .L38
 233               	.LVL6:
 234               	.L37:
 235               	.LBE31:
 236               	.LBE30:
 579:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
 580:catboard.c    **** 		keyboard_modifier_keys = KEY_ALT;
 237               		.loc 2 580 0
 238 002e 84E0      		ldi r24,lo8(4)
 239 0030 8093 0000 		sts keyboard_modifier_keys,r24
 581:catboard.c    **** 		keyboard_keys[0] = 0;
 240               		.loc 2 581 0
 241 0034 1092 0000 		sts keyboard_keys,__zero_reg__
 582:catboard.c    **** 		usb_keyboard_send();
 242               		.loc 2 582 0
 243 0038 0E94 0000 		call usb_keyboard_send
 244               	.LVL7:
 245               	.LBB34:
 246               	.LBB35:
 247               		.loc 3 164 0
 248 003c 2FEF      		ldi r18,lo8(159999)
 249 003e 80E7      		ldi r24,hi8(159999)
 250 0040 92E0      		ldi r25,hlo8(159999)
 251 0042 2150      		1: subi r18,1
 252 0044 8040      		sbci r24,0
 253 0046 9040      		sbci r25,0
 254 0048 01F4      		brne 1b
 255 004a 00C0      		rjmp .
 256 004c 0000      		nop
 257               	.LBE35:
 258               	.LBE34:
 583:catboard.c    **** 		_delay_ms(50);
 584:catboard.c    **** 		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 259               		.loc 2 584 0
 260 004e 66E0      		ldi r22,lo8(6)
 261 0050 80E0      		ldi r24,0
 262               	.LVL8:
 263               	.L38:
 264 0052 0C94 0000 		jmp usb_keyboard_press
 265               	.LVL9:
 266               	.LFE16:
 268               		.section	.text.get_code,"ax",@progbits
 269               	.global	get_code
 271               	get_code:
 272               	.LFB18:
 585:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_CTRL_SHIFT) { // Press Ctrl+Shift
 586:catboard.c    **** 		keyboard_modifier_keys = KEY_CTRL;
 587:catboard.c    **** 		keyboard_keys[0] = 0;
 588:catboard.c    **** 		usb_keyboard_send();
 589:catboard.c    **** 		_delay_ms(50);
 590:catboard.c    **** 		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
 591:catboard.c    **** 	}
 592:catboard.c    **** }
 593:catboard.c    **** 
 594:catboard.c    **** void send(void) {
 595:catboard.c    **** 	uint8_t i;
 596:catboard.c    **** 	for (i=0; i<6; i++) {
 597:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 598:catboard.c    **** 	}
 599:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 600:catboard.c    **** 	usb_keyboard_send();
 601:catboard.c    **** }
 602:catboard.c    **** 
 603:catboard.c    **** uint8_t get_code(uint8_t key_id) {
 273               		.loc 2 603 0
 274               	.LVL10:
 275               	/* prologue: function */
 276               	/* frame size = 0 */
 277               	/* stack size = 0 */
 278               	.L__stack_usage = 0
 604:catboard.c    **** 	uint8_t key_code = 0;
 605:catboard.c    **** 	if (key_id<KEYS) { // not 0xFF
 279               		.loc 2 605 0
 280 0000 8C33      		cpi r24,lo8(60)
 281 0002 00F4      		brsh .L44
 282               	.LVL11:
 283               	.LBB38:
 284               	.LBB39:
 606:catboard.c    **** 		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 285               		.loc 2 606 0
 286 0004 282F      		mov r18,r24
 287 0006 30E0      		ldi r19,0
 288 0008 F901      		movw r30,r18
 289 000a E050      		subi r30,lo8(-(pressed))
 290 000c F040      		sbci r31,hi8(-(pressed))
 291 000e 9081      		ld r25,Z
 292 0010 9130      		cpi r25,lo8(1)
 293 0012 01F4      		brne .L41
 607:catboard.c    **** 			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 294               		.loc 2 607 0
 295 0014 F901      		movw r30,r18
 296 0016 E050      		subi r30,lo8(-(layer_fn))
 297 0018 F040      		sbci r31,hi8(-(layer_fn))
 298 001a 8081      		ld r24,Z
 299               	.LVL12:
 300 001c 1816      		cp __zero_reg__,r24
 301 001e 04F0      		brlt .L40
 302 0020 00C0      		rjmp .L44
 303               	.L41:
 608:catboard.c    **** 				key_code = layer_fn[key_id];
 609:catboard.c    **** 			}
 610:catboard.c    **** 		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from la
 304               		.loc 2 610 0
 305 0022 4091 0000 		lds r20,layout
 306 0026 5091 0000 		lds r21,layout+1
 307 002a 60E0      		ldi r22,hi8(layer_fn)
 308 002c 4030      		cpi r20,lo8(layer_fn)
 309 002e 5607      		cpc r21,r22
 310 0030 01F0      		breq .L43
 311 0032 9230      		cpi r25,lo8(2)
 312 0034 01F4      		brne .L43
 611:catboard.c    **** 			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 313               		.loc 2 611 0
 314 0036 F901      		movw r30,r18
 315 0038 E050      		subi r30,lo8(-(layer1))
 316 003a F040      		sbci r31,hi8(-(layer1))
 317 003c 00C0      		rjmp .L48
 318               	.L43:
 612:catboard.c    **** 		} else {
 613:catboard.c    **** 			key_code = layout[key_id];
 319               		.loc 2 613 0
 320 003e FA01      		movw r30,r20
 321 0040 E80F      		add r30,r24
 322 0042 F11D      		adc r31,__zero_reg__
 323               	.L48:
 324 0044 8081      		ld r24,Z
 325               	.LVL13:
 326 0046 0895      		ret
 327               	.LVL14:
 328               	.L44:
 329               	.LBE39:
 330               	.LBE38:
 604:catboard.c    **** 	uint8_t key_code = 0;
 331               		.loc 2 604 0
 332 0048 80E0      		ldi r24,0
 333               	.L40:
 334               	.LVL15:
 614:catboard.c    **** 		}
 615:catboard.c    **** 	}
 616:catboard.c    **** 	return key_code;
 617:catboard.c    **** }
 335               		.loc 2 617 0
 336 004a 0895      		ret
 337               	.LFE18:
 339               		.section	.text.send,"ax",@progbits
 340               	.global	send
 342               	send:
 343               	.LFB17:
 594:catboard.c    **** void send(void) {
 344               		.loc 2 594 0
 345 0000 0F93      		push r16
 346               	.LCFI0:
 347 0002 1F93      		push r17
 348               	.LCFI1:
 349 0004 CF93      		push r28
 350               	.LCFI2:
 351 0006 DF93      		push r29
 352               	.LCFI3:
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 4 */
 356               	.L__stack_usage = 4
 357               	.LVL16:
 358 0008 C0E0      		ldi r28,lo8(queue)
 359 000a D0E0      		ldi r29,hi8(queue)
 360 000c 00E0      		ldi r16,lo8(keyboard_keys)
 361 000e 10E0      		ldi r17,hi8(keyboard_keys)
 362               	.LVL17:
 363               	.L50:
 597:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 364               		.loc 2 597 0 discriminator 2
 365 0010 8991      		ld r24,Y+
 366 0012 0E94 0000 		call get_code
 367               	.LVL18:
 368 0016 F801      		movw r30,r16
 369 0018 8193      		st Z+,r24
 370 001a 8F01      		movw r16,r30
 596:catboard.c    **** 	for (i=0; i<6; i++) {
 371               		.loc 2 596 0 discriminator 2
 372 001c F0E0      		ldi r31,hi8(queue+6)
 373 001e C030      		cpi r28,lo8(queue+6)
 374 0020 DF07      		cpc r29,r31
 375 0022 01F4      		brne .L50
 599:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 376               		.loc 2 599 0
 377 0024 8091 0000 		lds r24,mod_keys
 378 0028 8093 0000 		sts keyboard_modifier_keys,r24
 379               	/* epilogue start */
 601:catboard.c    **** }
 380               		.loc 2 601 0
 381 002c DF91      		pop r29
 382 002e CF91      		pop r28
 383 0030 1F91      		pop r17
 384 0032 0F91      		pop r16
 600:catboard.c    **** 	usb_keyboard_send();
 385               		.loc 2 600 0
 386 0034 0C94 0000 		jmp usb_keyboard_send
 387               	.LVL19:
 388               	.LFE17:
 390               		.section	.text.key_release,"ax",@progbits
 391               	.global	key_release
 393               	key_release:
 394               	.LFB15:
 455:catboard.c    **** void key_release(uint8_t key_id) {
 395               		.loc 2 455 0
 396               	.LVL20:
 397 0000 CF93      		push r28
 398               	.LCFI4:
 399 0002 DF93      		push r29
 400               	.LCFI5:
 401               	/* prologue: function */
 402               	/* frame size = 0 */
 403               	/* stack size = 2 */
 404               	.L__stack_usage = 2
 405 0004 D82F      		mov r29,r24
 457:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 406               		.loc 2 457 0
 407 0006 282F      		mov r18,r24
 408 0008 30E0      		ldi r19,0
 409 000a F901      		movw r30,r18
 410 000c E050      		subi r30,lo8(-(pressed))
 411 000e F040      		sbci r31,hi8(-(pressed))
 412 0010 C081      		ld r28,Z
 413               	.LVL21:
 458:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 414               		.loc 2 458 0
 415 0012 C130      		cpi r28,lo8(1)
 416 0014 01F4      		brne .L53
 458:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 417               		.loc 2 458 0 is_stmt 0 discriminator 1
 418 0016 F901      		movw r30,r18
 419 0018 E050      		subi r30,lo8(-(layer_fn))
 420 001a F040      		sbci r31,hi8(-(layer_fn))
 421 001c 00C0      		rjmp .L136
 422               	.L53:
 458:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 423               		.loc 2 458 0 discriminator 2
 424 001e E091 0000 		lds r30,layout
 425 0022 F091 0000 		lds r31,layout+1
 426 0026 E20F      		add r30,r18
 427 0028 F31F      		adc r31,r19
 428 002a 9081      		ld r25,Z
 429               	.LVL22:
 459:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 430               		.loc 2 459 0 is_stmt 1 discriminator 2
 431 002c C630      		cpi r28,lo8(6)
 432 002e 01F4      		brne .L54
 459:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 433               		.loc 2 459 0 is_stmt 0 discriminator 1
 434 0030 4091 0000 		lds r20,prev_layer
 435 0034 5091 0000 		lds r21,prev_layer+1
 436 0038 4115      		cp r20,__zero_reg__
 437 003a 5105      		cpc r21,__zero_reg__
 438 003c 01F0      		breq .L54
 460:catboard.c    **** 		key_code = prev_layer[key_id];
 439               		.loc 2 460 0 is_stmt 1
 440 003e FA01      		movw r30,r20
 441 0040 E20F      		add r30,r18
 442 0042 F31F      		adc r31,r19
 443               	.LVL23:
 444               	.L136:
 445 0044 9081      		ld r25,Z
 446               	.LVL24:
 447               	.L54:
 462:catboard.c    **** 	pressed[key_id] = 0;
 448               		.loc 2 462 0
 449 0046 F901      		movw r30,r18
 450 0048 E050      		subi r30,lo8(-(pressed))
 451 004a F040      		sbci r31,hi8(-(pressed))
 452 004c 1082      		st Z,__zero_reg__
 463:catboard.c    **** 	if (locked) return;
 453               		.loc 2 463 0
 454 004e 8091 0000 		lds r24,locked
 455               	.LVL25:
 456 0052 8111      		cpse r24,__zero_reg__
 457 0054 00C0      		rjmp .L52
 464:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys release
 458               		.loc 2 464 0
 459 0056 9D36      		cpi r25,lo8(109)
 460 0058 00F4      		brsh .+2
 461 005a 00C0      		rjmp .L56
 465:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 462               		.loc 2 465 0
 463 005c 9D37      		cpi r25,lo8(125)
 464 005e 01F4      		brne .L57
 465:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 465               		.loc 2 465 0 is_stmt 0 discriminator 1
 466 0060 C330      		cpi r28,lo8(3)
 467 0062 01F4      		brne .+2
 468 0064 00C0      		rjmp .L52
 466:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 469               		.loc 2 466 0 is_stmt 1
 470 0066 8091 0000 		lds r24,mod_keys
 471 006a 00C0      		rjmp .L141
 472               	.L57:
 468:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 473               		.loc 2 468 0
 474 006c 9D36      		cpi r25,lo8(109)
 475 006e 01F0      		breq .+2
 476 0070 00C0      		rjmp .L58
 477 0072 8091 0000 		lds r24,mod_keys
 468:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 478               		.loc 2 468 0 is_stmt 0 discriminator 1
 479 0076 C530      		cpi r28,lo8(5)
 480 0078 01F4      		brne .L59
 481 007a 00C0      		rjmp .L140
 482               	.L59:
 472:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 483               		.loc 2 472 0 is_stmt 1
 484 007c 8D7F      		andi r24,lo8(-3)
 485 007e 8093 0000 		sts mod_keys,r24
 473:catboard.c    **** 			send();
 486               		.loc 2 473 0
 487 0082 0E94 0000 		call send
 488               	.LVL26:
 474:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 489               		.loc 2 474 0
 490 0086 8091 0000 		lds r24,last_key
 491 008a 8D13      		cpse r24,r29
 492 008c 00C0      		rjmp .L71
 474:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 493               		.loc 2 474 0 is_stmt 0 discriminator 1
 494 008e 8091 0000 		lds r24,press_time
 495 0092 9091 0000 		lds r25,press_time+1
 496 0096 0097      		sbiw r24,0
 497 0098 01F4      		brne .+2
 498 009a 00C0      		rjmp .L71
 499 009c C297      		sbiw r24,50
 500 009e 00F0      		brlo .+2
 501 00a0 00C0      		rjmp .L71
 502 00a2 C430      		cpi r28,lo8(4)
 503 00a4 01F4      		brne .+2
 504 00a6 00C0      		rjmp .L71
 475:catboard.c    **** 				if (layout!=layer1) {
 505               		.loc 2 475 0 is_stmt 1
 506 00a8 8091 0000 		lds r24,layout
 507 00ac 9091 0000 		lds r25,layout+1
 508 00b0 20E0      		ldi r18,hi8(layer1)
 509 00b2 8030      		cpi r24,lo8(layer1)
 510 00b4 9207      		cpc r25,r18
 511 00b6 01F4      		brne .+2
 512 00b8 00C0      		rjmp .L71
 513               	.LBB40:
 476:catboard.c    **** 					if (layout==layer_fn) {
 514               		.loc 2 476 0
 515 00ba 8050      		subi r24,lo8(layer_fn)
 516 00bc 9040      		sbci r25,hi8(layer_fn)
 517 00be 01F4      		brne .L63
 477:catboard.c    **** 						prev_layer = layer1;
 518               		.loc 2 477 0
 519 00c0 80E0      		ldi r24,lo8(layer1)
 520 00c2 90E0      		ldi r25,hi8(layer1)
 521 00c4 9093 0000 		sts prev_layer+1,r25
 522 00c8 8093 0000 		sts prev_layer,r24
 523 00cc 00C0      		rjmp .L64
 524               	.L63:
 479:catboard.c    **** 						layout = layer1;
 525               		.loc 2 479 0
 526 00ce 80E0      		ldi r24,lo8(layer1)
 527 00d0 90E0      		ldi r25,hi8(layer1)
 528 00d2 9093 0000 		sts layout+1,r25
 529 00d6 8093 0000 		sts layout,r24
 530               	.L64:
 481:catboard.c    **** 					change_layout();
 531               		.loc 2 481 0
 532 00da 0E94 0000 		call change_layout
 533               	.LVL27:
 483:catboard.c    **** 					LED_RED_OFF;
 534               		.loc 2 483 0
 535 00de 469A      		sbi 0x8,6
 484:catboard.c    **** 					if (led) LED_BLUE_ON;
 536               		.loc 2 484 0
 537 00e0 8091 0000 		lds r24,led
 538 00e4 8823      		tst r24
 539 00e6 01F4      		brne .+2
 540 00e8 00C0      		rjmp .L71
 484:catboard.c    **** 					if (led) LED_BLUE_ON;
 541               		.loc 2 484 0 is_stmt 0 discriminator 1
 542 00ea 599A      		sbi 0xb,1
 543 00ec 00C0      		rjmp .L71
 544               	.LVL28:
 545               	.L58:
 546               	.LBE40:
 492:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // LAYER2
 547               		.loc 2 492 0 is_stmt 1
 548 00ee 9E36      		cpi r25,lo8(110)
 549 00f0 01F4      		brne .L65
 493:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 550               		.loc 2 493 0
 551 00f2 8091 0000 		lds r24,mod_keys
 552 00f6 8F7D      		andi r24,lo8(-33)
 553 00f8 8093 0000 		sts mod_keys,r24
 494:catboard.c    **** 			send();
 554               		.loc 2 494 0
 555 00fc 0E94 0000 		call send
 556               	.LVL29:
 495:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 557               		.loc 2 495 0
 558 0100 8091 0000 		lds r24,last_key
 559 0104 8D13      		cpse r24,r29
 560 0106 00C0      		rjmp .L71
 495:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 561               		.loc 2 495 0 is_stmt 0 discriminator 1
 562 0108 8091 0000 		lds r24,press_time
 563 010c 9091 0000 		lds r25,press_time+1
 564 0110 0097      		sbiw r24,0
 565 0112 01F4      		brne .+2
 566 0114 00C0      		rjmp .L71
 567 0116 C297      		sbiw r24,50
 568 0118 00F0      		brlo .+2
 569 011a 00C0      		rjmp .L71
 570 011c C430      		cpi r28,lo8(4)
 571 011e 01F4      		brne .+2
 572 0120 00C0      		rjmp .L71
 496:catboard.c    **** 				if (layout!=layer2) {
 573               		.loc 2 496 0 is_stmt 1
 574 0122 8091 0000 		lds r24,layout
 575 0126 9091 0000 		lds r25,layout+1
 576 012a 20E0      		ldi r18,hi8(layer2)
 577 012c 8030      		cpi r24,lo8(layer2)
 578 012e 9207      		cpc r25,r18
 579 0130 01F0      		breq .L71
 580               	.LBB41:
 497:catboard.c    **** 					if (layout==layer_fn) {
 581               		.loc 2 497 0
 582 0132 8050      		subi r24,lo8(layer_fn)
 583 0134 9040      		sbci r25,hi8(layer_fn)
 584 0136 01F4      		brne .L69
 498:catboard.c    **** 						prev_layer = layer2;
 585               		.loc 2 498 0
 586 0138 80E0      		ldi r24,lo8(layer2)
 587 013a 90E0      		ldi r25,hi8(layer2)
 588 013c 9093 0000 		sts prev_layer+1,r25
 589 0140 8093 0000 		sts prev_layer,r24
 590 0144 00C0      		rjmp .L70
 591               	.L69:
 500:catboard.c    **** 						layout = layer2;
 592               		.loc 2 500 0
 593 0146 80E0      		ldi r24,lo8(layer2)
 594 0148 90E0      		ldi r25,hi8(layer2)
 595 014a 9093 0000 		sts layout+1,r25
 596 014e 8093 0000 		sts layout,r24
 597               	.L70:
 502:catboard.c    **** 					change_layout();
 598               		.loc 2 502 0
 599 0152 0E94 0000 		call change_layout
 600               	.LVL30:
 504:catboard.c    **** 					LED_BLUE_OFF;
 601               		.loc 2 504 0
 602 0156 5998      		cbi 0xb,1
 505:catboard.c    **** 					if (led) LED_RED_ON;
 603               		.loc 2 505 0
 604 0158 8091 0000 		lds r24,led
 605 015c 8823      		tst r24
 606 015e 01F0      		breq .L71
 505:catboard.c    **** 					if (led) LED_RED_ON;
 607               		.loc 2 505 0 is_stmt 0 discriminator 1
 608 0160 4698      		cbi 0x8,6
 609 0162 00C0      		rjmp .L71
 610               	.LVL31:
 611               	.L65:
 612               	.LBE41:
 513:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 613               		.loc 2 513 0 is_stmt 1
 614 0164 9737      		cpi r25,lo8(119)
 615 0166 01F0      		breq .+2
 616 0168 00C0      		rjmp .L52
 514:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 617               		.loc 2 514 0
 618 016a 8091 0000 		lds r24,mod_keys
 619 016e 8D7F      		andi r24,lo8(-3)
 620 0170 8093 0000 		sts mod_keys,r24
 515:catboard.c    **** 			send();
 621               		.loc 2 515 0
 622 0174 0E94 0000 		call send
 623               	.LVL32:
 516:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 624               		.loc 2 516 0
 625 0178 8091 0000 		lds r24,last_key
 626 017c 8D13      		cpse r24,r29
 627 017e 00C0      		rjmp .L71
 516:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 628               		.loc 2 516 0 is_stmt 0 discriminator 1
 629 0180 8091 0000 		lds r24,press_time
 630 0184 9091 0000 		lds r25,press_time+1
 631 0188 0097      		sbiw r24,0
 632 018a 01F0      		breq .L71
 633 018c C297      		sbiw r24,50
 634 018e 00F4      		brsh .L71
 635 0190 C230      		cpi r28,lo8(2)
 636 0192 01F0      		breq .L71
 637 0194 8091 0000 		lds r24,mod_keys
 638 0198 8111      		cpse r24,__zero_reg__
 639 019a 00C0      		rjmp .L71
 517:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 640               		.loc 2 517 0 is_stmt 1
 641 019c 60E0      		ldi r22,0
 642 019e 8CE2      		ldi r24,lo8(44)
 643 01a0 0E94 0000 		call usb_keyboard_press
 644               	.LVL33:
 645               	.L71:
 519:catboard.c    **** 			last_key = 0xFF;
 646               		.loc 2 519 0
 647 01a4 8FEF      		ldi r24,lo8(-1)
 648 01a6 8093 0000 		sts last_key,r24
 649 01aa 00C0      		rjmp .L90
 650               	.LVL34:
 651               	.L56:
 525:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 652               		.loc 2 525 0
 653 01ac 9536      		cpi r25,lo8(101)
 654 01ae 00F0      		brlo .L72
 526:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 655               		.loc 2 526 0
 656 01b0 8091 0000 		lds r24,os_mode
 657 01b4 8230      		cpi r24,lo8(2)
 658 01b6 01F4      		brne .L73
 526:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 659               		.loc 2 526 0 is_stmt 0 discriminator 1
 660 01b8 9536      		cpi r25,lo8(101)
 661 01ba 01F4      		brne .L74
 527:catboard.c    **** 			mod_keys &= ~KEY_LGUI;
 662               		.loc 2 527 0 is_stmt 1
 663 01bc 8091 0000 		lds r24,mod_keys
 664 01c0 8779      		andi r24,lo8(-105)
 665 01c2 00C0      		rjmp .L137
 666               	.L74:
 528:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 667               		.loc 2 528 0 discriminator 1
 668 01c4 9936      		cpi r25,lo8(105)
 669 01c6 01F0      		breq .+2
 670 01c8 00C0      		rjmp .L134
 671 01ca 00C0      		rjmp .L76
 672               	.L73:
 528:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 673               		.loc 2 528 0 is_stmt 0 discriminator 2
 674 01cc 9C36      		cpi r25,lo8(108)
 675 01ce 01F4      		brne .L78
 676               	.L76:
 529:catboard.c    **** 			mod_keys &= ~KEY_RGUI;
 677               		.loc 2 529 0 is_stmt 1
 678 01d0 8091 0000 		lds r24,mod_keys
 679 01d4 8379      		andi r24,lo8(-109)
 680 01d6 00C0      		rjmp .L137
 681               	.L78:
 530:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 682               		.loc 2 530 0
 683 01d8 9536      		cpi r25,lo8(101)
 684 01da 01F4      		brne .L79
 531:catboard.c    **** 			mod_keys &= ~KEY_CTRL;
 685               		.loc 2 531 0
 686 01dc 8091 0000 		lds r24,mod_keys
 687               	.L140:
 688 01e0 8E7F      		andi r24,lo8(-2)
 689 01e2 00C0      		rjmp .L137
 690               	.L79:
 691 01e4 8091 0000 		lds r24,mod_keys
 532:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 692               		.loc 2 532 0
 693 01e8 9636      		cpi r25,lo8(102)
 694 01ea 01F4      		brne .L80
 695 01ec 00C0      		rjmp .L139
 696               	.L80:
 534:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 697               		.loc 2 534 0
 698 01ee 9736      		cpi r25,lo8(103)
 699 01f0 01F4      		brne .L81
 700               	.L141:
 535:catboard.c    **** 			mod_keys &= ~KEY_ALT;
 701               		.loc 2 535 0
 702 01f2 8B7F      		andi r24,lo8(-5)
 703 01f4 00C0      		rjmp .L137
 704               	.L81:
 536:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 705               		.loc 2 536 0
 706 01f6 9836      		cpi r25,lo8(104)
 707 01f8 01F4      		brne .L82
 537:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 708               		.loc 2 537 0
 709 01fa 877F      		andi r24,lo8(-9)
 710 01fc 00C0      		rjmp .L137
 711               	.L82:
 538:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 712               		.loc 2 538 0
 713 01fe 9936      		cpi r25,lo8(105)
 714 0200 01F4      		brne .L83
 539:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_CTRL;
 715               		.loc 2 539 0
 716 0202 8F7E      		andi r24,lo8(-17)
 717 0204 00C0      		rjmp .L137
 718               	.L83:
 540:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 719               		.loc 2 540 0
 720 0206 9A36      		cpi r25,lo8(106)
 721 0208 01F4      		brne .L84
 722               	.L139:
 541:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 723               		.loc 2 541 0
 724 020a 8D7F      		andi r24,lo8(-3)
 725 020c 00C0      		rjmp .L137
 726               	.L84:
 543:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_ALT;
 727               		.loc 2 543 0
 728 020e 8F7B      		andi r24,lo8(-65)
 729               	.L137:
 730 0210 8093 0000 		sts mod_keys,r24
 731               	/* epilogue start */
 570:catboard.c    **** }
 732               		.loc 2 570 0
 733 0214 DF91      		pop r29
 734 0216 CF91      		pop r28
 735               	.LVL35:
 547:catboard.c    **** 		send();
 736               		.loc 2 547 0
 737 0218 0C94 0000 		jmp send
 738               	.LVL36:
 739               	.L72:
 740 021c E0E0      		ldi r30,lo8(queue)
 741 021e F0E0      		ldi r31,hi8(queue)
 525:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 742               		.loc 2 525 0
 743 0220 90E0      		ldi r25,0
 744               	.LVL37:
 745               	.L87:
 550:catboard.c    **** 			if (queue[i]==key_id) {
 746               		.loc 2 550 0
 747 0222 8191      		ld r24,Z+
 748 0224 8D17      		cp r24,r29
 749 0226 01F0      		breq .L135
 549:catboard.c    **** 		for (i=0; i<6; i++) {
 750               		.loc 2 549 0
 751 0228 9F5F      		subi r25,lo8(-(1))
 752               	.LVL38:
 753 022a 9630      		cpi r25,lo8(6)
 754 022c 01F4      		brne .L87
 755 022e 00C0      		rjmp .L135
 756               	.L89:
 555:catboard.c    **** 			queue[i] = queue[i+1];
 757               		.loc 2 555 0 discriminator 2
 758 0230 E92F      		mov r30,r25
 759 0232 F0E0      		ldi r31,0
 760 0234 E050      		subi r30,lo8(-(queue))
 761 0236 F040      		sbci r31,hi8(-(queue))
 762 0238 8181      		ldd r24,Z+1
 763 023a 8083      		st Z,r24
 554:catboard.c    **** 		for (; i<6; i++) {
 764               		.loc 2 554 0 discriminator 2
 765 023c 9F5F      		subi r25,lo8(-(1))
 766               	.LVL39:
 767               	.L135:
 554:catboard.c    **** 		for (; i<6; i++) {
 768               		.loc 2 554 0 is_stmt 0 discriminator 1
 769 023e 9630      		cpi r25,lo8(6)
 770 0240 01F4      		brne .L89
 557:catboard.c    **** 		send();
 771               		.loc 2 557 0 is_stmt 1
 772 0242 0E94 0000 		call send
 773               	.LVL40:
 559:catboard.c    **** 		if (last_key==key_id) { // realise time
 774               		.loc 2 559 0
 775 0246 8091 0000 		lds r24,last_key
 776 024a 8D13      		cpse r24,r29
 777 024c 00C0      		rjmp .L90
 560:catboard.c    **** 			press_time2 = 0;
 778               		.loc 2 560 0
 779 024e 1092 0000 		sts press_time2+1,__zero_reg__
 780 0252 1092 0000 		sts press_time2,__zero_reg__
 561:catboard.c    **** 			release_time = 1;
 781               		.loc 2 561 0
 782 0256 81E0      		ldi r24,lo8(1)
 783 0258 90E0      		ldi r25,0
 784 025a 9093 0000 		sts release_time+1,r25
 785 025e 8093 0000 		sts release_time,r24
 786 0262 00C0      		rjmp .L138
 787               	.L90:
 564:catboard.c    **** 			press_time = 0;
 788               		.loc 2 564 0
 789 0264 1092 0000 		sts press_time+1,__zero_reg__
 790 0268 1092 0000 		sts press_time,__zero_reg__
 565:catboard.c    **** 			press_time2 = 0;
 791               		.loc 2 565 0
 792 026c 1092 0000 		sts press_time2+1,__zero_reg__
 793 0270 1092 0000 		sts press_time2,__zero_reg__
 566:catboard.c    **** 			release_time = 0;
 794               		.loc 2 566 0
 795 0274 1092 0000 		sts release_time+1,__zero_reg__
 796 0278 1092 0000 		sts release_time,__zero_reg__
 797               	.L138:
 567:catboard.c    **** 			repeat_time = 0;
 798               		.loc 2 567 0
 799 027c 1092 0000 		sts repeat_time+1,__zero_reg__
 800 0280 1092 0000 		sts repeat_time,__zero_reg__
 801 0284 00C0      		rjmp .L52
 802               	.LVL41:
 803               	.L134:
 528:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 804               		.loc 2 528 0
 805 0286 9C36      		cpi r25,lo8(108)
 806 0288 01F0      		breq .+2
 807 028a 00C0      		rjmp .L79
 808 028c 00C0      		rjmp .L76
 809               	.LVL42:
 810               	.L52:
 811               	/* epilogue start */
 570:catboard.c    **** }
 812               		.loc 2 570 0
 813 028e DF91      		pop r29
 814               	.LVL43:
 815 0290 CF91      		pop r28
 816               	.LVL44:
 817 0292 0895      		ret
 818               	.LFE15:
 820               		.section	.text.key_press,"ax",@progbits
 821               	.global	key_press
 823               	key_press:
 824               	.LFB14:
 300:catboard.c    **** void key_press(uint8_t key_id) {
 825               		.loc 2 300 0
 826               	.LVL45:
 827 0000 CF93      		push r28
 828               	.LCFI6:
 829               	/* prologue: function */
 830               	/* frame size = 0 */
 831               	/* stack size = 1 */
 832               	.L__stack_usage = 1
 833 0002 C82F      		mov r28,r24
 302:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 834               		.loc 2 302 0
 835 0004 6091 0000 		lds r22,mod_keys
 836 0008 962F      		mov r25,r22
 837 000a 9D7D      		andi r25,lo8(-35)
 838               	.LVL46:
 303:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 839               		.loc 2 303 0
 840 000c 282F      		mov r18,r24
 841 000e 30E0      		ldi r19,0
 842 0010 8091 0000 		lds r24,pressed+39
 843               	.LVL47:
 844 0014 8111      		cpse r24,__zero_reg__
 845 0016 00C0      		rjmp .L194
 303:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 846               		.loc 2 303 0 is_stmt 0 discriminator 1
 847 0018 9923      		tst r25
 848 001a 01F0      		breq .L195
 303:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 849               		.loc 2 303 0
 850 001c 82E0      		ldi r24,lo8(2)
 851 001e 00C0      		rjmp .L143
 852               	.L194:
 853 0020 81E0      		ldi r24,lo8(1)
 854 0022 00C0      		rjmp .L143
 855               	.L195:
 856 0024 8FEF      		ldi r24,lo8(-1)
 857               	.L143:
 303:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 858               		.loc 2 303 0 discriminator 6
 859 0026 F901      		movw r30,r18
 860 0028 E050      		subi r30,lo8(-(pressed))
 861 002a F040      		sbci r31,hi8(-(pressed))
 862 002c 8083      		st Z,r24
 305:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 863               		.loc 2 305 0 is_stmt 1 discriminator 6
 864 002e 8130      		cpi r24,lo8(1)
 865 0030 01F4      		brne .L144
 305:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 866               		.loc 2 305 0 is_stmt 0 discriminator 1
 867 0032 F901      		movw r30,r18
 868 0034 E050      		subi r30,lo8(-(layer_fn))
 869 0036 F040      		sbci r31,hi8(-(layer_fn))
 870 0038 00C0      		rjmp .L242
 871               	.L144:
 305:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 872               		.loc 2 305 0 discriminator 2
 873 003a E091 0000 		lds r30,layout
 874 003e F091 0000 		lds r31,layout+1
 875 0042 EC0F      		add r30,r28
 876 0044 F11D      		adc r31,__zero_reg__
 877               	.L242:
 878 0046 8081      		ld r24,Z
 879               	.LVL48:
 306:catboard.c    **** 	if (key_code==NULL) {
 880               		.loc 2 306 0 is_stmt 1 discriminator 2
 881 0048 8111      		cpse r24,__zero_reg__
 882 004a 00C0      		rjmp .L146
 307:catboard.c    **** 		key_code = layout[key_id];
 883               		.loc 2 307 0
 884 004c 4C2F      		mov r20,r28
 885 004e 50E0      		ldi r21,0
 886 0050 E091 0000 		lds r30,layout
 887 0054 F091 0000 		lds r31,layout+1
 888 0058 E40F      		add r30,r20
 889 005a F51F      		adc r31,r21
 890 005c 8081      		ld r24,Z
 891               	.LVL49:
 308:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 892               		.loc 2 308 0
 893 005e 9923      		tst r25
 894 0060 01F0      		breq .L196
 895 0062 92E0      		ldi r25,lo8(2)
 896               	.LVL50:
 897 0064 00C0      		rjmp .L147
 898               	.LVL51:
 899               	.L196:
 900 0066 9FEF      		ldi r25,lo8(-1)
 901               	.LVL52:
 902               	.L147:
 308:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 903               		.loc 2 308 0 is_stmt 0 discriminator 3
 904 0068 F901      		movw r30,r18
 905 006a E050      		subi r30,lo8(-(pressed))
 906 006c F040      		sbci r31,hi8(-(pressed))
 907 006e 9083      		st Z,r25
 309:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 908               		.loc 2 309 0 is_stmt 1 discriminator 3
 909 0070 8111      		cpse r24,__zero_reg__
 910 0072 00C0      		rjmp .L146
 309:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 911               		.loc 2 309 0 is_stmt 0 discriminator 1
 912 0074 A091 0000 		lds r26,prev_layer
 913 0078 B091 0000 		lds r27,prev_layer+1
 914 007c 1097      		sbiw r26,0
 915 007e 01F0      		breq .L146
 916 0080 6111      		cpse r22,__zero_reg__
 917 0082 00C0      		rjmp .L146
 310:catboard.c    **** 			key_code = prev_layer[key_id];
 918               		.loc 2 310 0 is_stmt 1
 919 0084 A40F      		add r26,r20
 920 0086 B51F      		adc r27,r21
 921 0088 8C91      		ld r24,X
 922               	.LVL53:
 311:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 923               		.loc 2 311 0
 924 008a 96E0      		ldi r25,lo8(6)
 925 008c 9083      		st Z,r25
 926               	.L146:
 315:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 927               		.loc 2 315 0
 928 008e 9091 0000 		lds r25,locked
 929 0092 9923      		tst r25
 930 0094 01F0      		breq .L148
 315:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 931               		.loc 2 315 0 is_stmt 0 discriminator 1
 932 0096 8A37      		cpi r24,lo8(122)
 933 0098 01F0      		breq .+2
 934 009a 00C0      		rjmp .L142
 935 009c 00C0      		rjmp .L239
 936               	.L148:
 317:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys
 937               		.loc 2 317 0 is_stmt 1
 938 009e 8D36      		cpi r24,lo8(109)
 939 00a0 00F4      		brsh .+2
 940 00a2 00C0      		rjmp .L151
 318:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 941               		.loc 2 318 0
 942 00a4 8D37      		cpi r24,lo8(125)
 943 00a6 01F4      		brne .L152
 319:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 944               		.loc 2 319 0
 945 00a8 F901      		movw r30,r18
 946 00aa E050      		subi r30,lo8(-(pressed))
 947 00ac F040      		sbci r31,hi8(-(pressed))
 948 00ae 8081      		ld r24,Z
 949               	.LVL54:
 950 00b0 8130      		cpi r24,lo8(1)
 951 00b2 01F4      		brne .L153
 320:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 952               		.loc 2 320 0
 953 00b4 64E0      		ldi r22,lo8(4)
 954               	.LVL55:
 955 00b6 8BE2      		ldi r24,lo8(43)
 956 00b8 00C0      		rjmp .L245
 957               	.LVL56:
 958               	.L153:
 322:catboard.c    **** 				if (! mod_keys) {
 959               		.loc 2 322 0
 960 00ba 6111      		cpse r22,__zero_reg__
 961 00bc 00C0      		rjmp .L155
 323:catboard.c    **** 					mod_keys |= (KEY_ALT);
 962               		.loc 2 323 0
 963 00be 84E0      		ldi r24,lo8(4)
 964 00c0 8093 0000 		sts mod_keys,r24
 965 00c4 00C0      		rjmp .L156
 966               	.L155:
 325:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 967               		.loc 2 325 0
 968 00c6 83E0      		ldi r24,lo8(3)
 969 00c8 8083      		st Z,r24
 970               	.L156:
 327:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 971               		.loc 2 327 0
 972 00ca 8091 0000 		lds r24,mod_keys
 973 00ce 8093 0000 		sts keyboard_modifier_keys,r24
 328:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 974               		.loc 2 328 0
 975 00d2 8BE2      		ldi r24,lo8(43)
 976 00d4 8093 0000 		sts keyboard_keys,r24
 329:catboard.c    **** 				usb_keyboard_send();
 977               		.loc 2 329 0
 978 00d8 0E94 0000 		call usb_keyboard_send
 979               	.LVL57:
 980               	.LBB42:
 981               	.LBB43:
 982               		.loc 3 164 0
 983 00dc 2FEF      		ldi r18,lo8(159999)
 984 00de 80E7      		ldi r24,hi8(159999)
 985 00e0 92E0      		ldi r25,hlo8(159999)
 986 00e2 2150      		1: subi r18,1
 987 00e4 8040      		sbci r24,0
 988 00e6 9040      		sbci r25,0
 989 00e8 01F4      		brne 1b
 990 00ea 00C0      		rjmp .
 991 00ec 0000      		nop
 992 00ee 00C0      		rjmp .L244
 993               	.LVL58:
 994               	.L152:
 995               	.LBE43:
 996               	.LBE42:
 333:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 997               		.loc 2 333 0
 998 00f0 8E37      		cpi r24,lo8(126)
 999 00f2 01F4      		brne .L157
 334:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 1000               		.loc 2 334 0
 1001 00f4 F901      		movw r30,r18
 1002 00f6 E050      		subi r30,lo8(-(pressed))
 1003 00f8 F040      		sbci r31,hi8(-(pressed))
 1004 00fa 8081      		ld r24,Z
 1005               	.LVL59:
 1006 00fc 8130      		cpi r24,lo8(1)
 1007 00fe 01F0      		breq .+2
 1008 0100 00C0      		rjmp .L154
 334:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 1009               		.loc 2 334 0 is_stmt 0 discriminator 1
 1010 0102 6272      		andi r22,lo8(34)
 1011               	.LVL60:
 1012 0104 01F4      		brne .+2
 1013 0106 00C0      		rjmp .L154
 335:catboard.c    **** 				if (prev_layer) { // FnLock Off
 1014               		.loc 2 335 0 is_stmt 1
 1015 0108 2091 0000 		lds r18,prev_layer
 1016 010c 3091 0000 		lds r19,prev_layer+1
 1017               	.LVL61:
 1018 0110 2115      		cp r18,__zero_reg__
 1019 0112 3105      		cpc r19,__zero_reg__
 1020 0114 01F0      		breq .L160
 336:catboard.c    **** 					layout = prev_layer;
 1021               		.loc 2 336 0
 1022 0116 3093 0000 		sts layout+1,r19
 1023 011a 2093 0000 		sts layout,r18
 337:catboard.c    **** 					prev_layer = 0;
 1024               		.loc 2 337 0
 1025 011e 1092 0000 		sts prev_layer+1,__zero_reg__
 1026 0122 1092 0000 		sts prev_layer,__zero_reg__
 1027 0126 00C0      		rjmp .L154
 1028               	.L160:
 339:catboard.c    **** 					prev_layer = layout;
 1029               		.loc 2 339 0
 1030 0128 2091 0000 		lds r18,layout
 1031 012c 3091 0000 		lds r19,layout+1
 1032 0130 3093 0000 		sts prev_layer+1,r19
 1033 0134 2093 0000 		sts prev_layer,r18
 340:catboard.c    **** 					layout = layer_fnlock;
 1034               		.loc 2 340 0
 1035 0138 20E0      		ldi r18,lo8(layer_fnlock)
 1036 013a 30E0      		ldi r19,hi8(layer_fnlock)
 1037 013c 3093 0000 		sts layout+1,r19
 1038 0140 2093 0000 		sts layout,r18
 1039 0144 00C0      		rjmp .L154
 1040               	.LVL62:
 1041               	.L157:
 343:catboard.c    **** 		} else if (key_code==KEY_OS_MODE) { // Mac mode
 1042               		.loc 2 343 0
 1043 0146 8C37      		cpi r24,lo8(124)
 1044 0148 01F4      		brne .L161
 344:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 1045               		.loc 2 344 0
 1046 014a F901      		movw r30,r18
 1047 014c E050      		subi r30,lo8(-(pressed))
 1048 014e F040      		sbci r31,hi8(-(pressed))
 1049 0150 8081      		ld r24,Z
 1050               	.LVL63:
 1051 0152 8130      		cpi r24,lo8(1)
 1052 0154 01F4      		brne .L162
 344:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 1053               		.loc 2 344 0 is_stmt 0 discriminator 1
 1054 0156 862F      		mov r24,r22
 1055 0158 8272      		andi r24,lo8(34)
 1056 015a 01F0      		breq .L162
 345:catboard.c    **** 				os_mode++;
 1057               		.loc 2 345 0 is_stmt 1
 1058 015c 8091 0000 		lds r24,os_mode
 1059 0160 8F5F      		subi r24,lo8(-(1))
 1060 0162 8093 0000 		sts os_mode,r24
 346:catboard.c    **** 				if (os_mode>2) os_mode = 0;
 1061               		.loc 2 346 0
 1062 0166 8330      		cpi r24,lo8(3)
 1063 0168 00F4      		brsh .+2
 1064 016a 00C0      		rjmp .L154
 346:catboard.c    **** 				if (os_mode>2) os_mode = 0;
 1065               		.loc 2 346 0 is_stmt 0 discriminator 1
 1066 016c 1092 0000 		sts os_mode,__zero_reg__
 1067 0170 00C0      		rjmp .L154
 1068               	.L162:
 348:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 1069               		.loc 2 348 0 is_stmt 1
 1070 0172 8CE2      		ldi r24,lo8(44)
 1071               	.LVL64:
 1072               	.L245:
 1073 0174 0E94 0000 		call usb_keyboard_press
 1074               	.LVL65:
 1075 0178 00C0      		rjmp .L154
 1076               	.LVL66:
 1077               	.L161:
 350:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 1078               		.loc 2 350 0
 1079 017a 8D36      		cpi r24,lo8(109)
 1080 017c 01F4      		brne .L163
 351:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 1081               		.loc 2 351 0
 1082 017e 862F      		mov r24,r22
 1083               	.LVL67:
 1084 0180 8272      		andi r24,lo8(34)
 1085 0182 01F0      		breq .L164
 352:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 1086               		.loc 2 352 0
 1087 0184 F901      		movw r30,r18
 1088 0186 E050      		subi r30,lo8(-(pressed))
 1089 0188 F040      		sbci r31,hi8(-(pressed))
 1090 018a 85E0      		ldi r24,lo8(5)
 1091 018c 8083      		st Z,r24
 1092 018e 00C0      		rjmp .L251
 1093               	.L164:
 356:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 1094               		.loc 2 356 0
 1095 0190 6623      		tst r22
 1096 0192 01F4      		brne .+2
 1097 0194 00C0      		rjmp .L250
 356:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 1098               		.loc 2 356 0 is_stmt 0 discriminator 1
 1099 0196 F901      		movw r30,r18
 1100 0198 E050      		subi r30,lo8(-(pressed))
 1101 019a F040      		sbci r31,hi8(-(pressed))
 1102 019c 84E0      		ldi r24,lo8(4)
 1103 019e 8083      		st Z,r24
 1104 01a0 00C0      		rjmp .L250
 1105               	.LVL68:
 1106               	.L163:
 360:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 1107               		.loc 2 360 0 is_stmt 1
 1108 01a2 8E36      		cpi r24,lo8(110)
 1109 01a4 01F4      		brne .L166
 361:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 1110               		.loc 2 361 0
 1111 01a6 6062      		ori r22,lo8(32)
 1112               	.LVL69:
 1113 01a8 00C0      		rjmp .L243
 1114               	.LVL70:
 1115               	.L166:
 363:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 1116               		.loc 2 363 0
 1117 01aa 8B37      		cpi r24,lo8(123)
 1118 01ac 01F4      		brne .L167
 364:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 1119               		.loc 2 364 0
 1120 01ae 81E0      		ldi r24,lo8(1)
 1121               	.LVL71:
 1122 01b0 9091 0000 		lds r25,turbo_repeat
 1123 01b4 9111      		cpse r25,__zero_reg__
 1124 01b6 80E0      		ldi r24,0
 1125               	.L168:
 1126 01b8 8093 0000 		sts turbo_repeat,r24
 1127 01bc 00C0      		rjmp .L154
 1128               	.LVL72:
 1129               	.L167:
 365:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 1130               		.loc 2 365 0
 1131 01be 8737      		cpi r24,lo8(119)
 1132 01c0 01F4      		brne .L169
 1133 01c2 00C0      		rjmp .L250
 1134               	.L169:
 368:catboard.c    **** 		} else if (key_code==KEY_MACRO) { // TODO: My Macro
 1135               		.loc 2 368 0
 1136 01c4 8F36      		cpi r24,lo8(111)
 1137 01c6 01F4      		brne .+2
 1138 01c8 00C0      		rjmp .L154
 381:catboard.c    **** 		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
 1139               		.loc 2 381 0
 1140 01ca 8A37      		cpi r24,lo8(122)
 1141 01cc 01F4      		brne .L240
 1142 01ce 00C0      		rjmp .L170
 1143               	.L239:
 383:catboard.c    **** 				locked = 0;
 1144               		.loc 2 383 0
 1145 01d0 1092 0000 		sts locked,__zero_reg__
 384:catboard.c    **** 				if (led) {
 1146               		.loc 2 384 0
 1147 01d4 8091 0000 		lds r24,led
 1148               	.LVL73:
 1149 01d8 8823      		tst r24
 1150 01da 01F4      		brne .+2
 1151 01dc 00C0      		rjmp .L154
 1152 01de 00C0      		rjmp .L254
 1153               	.LVL74:
 1154               	.L170:
 389:catboard.c    **** 				locked = 1;
 1155               		.loc 2 389 0
 1156 01e0 81E0      		ldi r24,lo8(1)
 1157               	.LVL75:
 1158 01e2 8093 0000 		sts locked,r24
 390:catboard.c    **** 				LED_OFF;
 1159               		.loc 2 390 0
 1160 01e6 5E9A      		sbi 0xb,6
 391:catboard.c    **** 				LED_RED_OFF;
 1161               		.loc 2 391 0
 1162 01e8 469A      		sbi 0x8,6
 392:catboard.c    **** 				LED_BLUE_OFF;
 1163               		.loc 2 392 0
 1164 01ea 5998      		cbi 0xb,1
 393:catboard.c    **** 				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
 1165               		.loc 2 393 0
 1166 01ec 68E0      		ldi r22,lo8(8)
 1167               	.LVL76:
 1168 01ee 8FE0      		ldi r24,lo8(15)
 1169 01f0 00C0      		rjmp .L245
 1170               	.LVL77:
 1171               	.L240:
 395:catboard.c    **** 		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
 1172               		.loc 2 395 0
 1173 01f2 8937      		cpi r24,lo8(121)
 1174 01f4 01F0      		breq .+2
 1175 01f6 00C0      		rjmp .L154
 395:catboard.c    **** 		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
 1176               		.loc 2 395 0 is_stmt 0 discriminator 1
 1177 01f8 6272      		andi r22,lo8(34)
 1178               	.LVL78:
 1179 01fa 01F4      		brne .+2
 1180 01fc 00C0      		rjmp .L154
 396:catboard.c    **** 			if (led) {
 1181               		.loc 2 396 0 is_stmt 1
 1182 01fe 8091 0000 		lds r24,led
 1183               	.LVL79:
 1184 0202 8823      		tst r24
 1185 0204 01F0      		breq .L175
 397:catboard.c    **** 				led = 0;
 1186               		.loc 2 397 0
 1187 0206 1092 0000 		sts led,__zero_reg__
 398:catboard.c    **** 				LED_OFF;
 1188               		.loc 2 398 0
 1189 020a 5E9A      		sbi 0xb,6
 399:catboard.c    **** 				LED_RED_OFF;
 1190               		.loc 2 399 0
 1191 020c 469A      		sbi 0x8,6
 400:catboard.c    **** 				LED_BLUE_OFF;
 1192               		.loc 2 400 0
 1193 020e 5998      		cbi 0xb,1
 1194 0210 00C0      		rjmp .L154
 1195               	.L175:
 402:catboard.c    **** 				led = 1;
 1196               		.loc 2 402 0
 1197 0212 81E0      		ldi r24,lo8(1)
 1198 0214 8093 0000 		sts led,r24
 1199               	.L254:
 403:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 1200               		.loc 2 403 0
 1201 0218 2091 0000 		lds r18,layout
 1202 021c 3091 0000 		lds r19,layout+1
 1203               	.LVL80:
 1204 0220 80E0      		ldi r24,hi8(layer1)
 1205 0222 2030      		cpi r18,lo8(layer1)
 1206 0224 3807      		cpc r19,r24
 1207 0226 01F0      		breq .L176
 403:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 1208               		.loc 2 403 0 is_stmt 0 discriminator 2
 1209 0228 4091 0000 		lds r20,prev_layer
 1210 022c 5091 0000 		lds r21,prev_layer+1
 1211 0230 4050      		subi r20,lo8(layer1)
 1212 0232 5040      		sbci r21,hi8(layer1)
 1213 0234 01F4      		brne .L177
 1214               	.L176:
 403:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 1215               		.loc 2 403 0 discriminator 1
 1216 0236 599A      		sbi 0xb,1
 1217               	.L177:
 404:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 1218               		.loc 2 404 0 is_stmt 1
 1219 0238 2050      		subi r18,lo8(layer2)
 1220 023a 3040      		sbci r19,hi8(layer2)
 1221 023c 01F0      		breq .L178
 404:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 1222               		.loc 2 404 0 is_stmt 0 discriminator 2
 1223 023e 2091 0000 		lds r18,prev_layer
 1224 0242 3091 0000 		lds r19,prev_layer+1
 1225 0246 2050      		subi r18,lo8(layer2)
 1226 0248 3040      		sbci r19,hi8(layer2)
 1227 024a 01F0      		breq .+2
 1228 024c 00C0      		rjmp .L154
 1229               	.L178:
 404:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 1230               		.loc 2 404 0 discriminator 1
 1231 024e 4698      		cbi 0x8,6
 1232 0250 00C0      		rjmp .L154
 1233               	.LVL81:
 1234               	.L151:
 407:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys
 1235               		.loc 2 407 0 is_stmt 1
 1236 0252 8536      		cpi r24,lo8(101)
 1237 0254 00F0      		brlo .L179
 408:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 1238               		.loc 2 408 0
 1239 0256 9091 0000 		lds r25,os_mode
 1240 025a 9230      		cpi r25,lo8(2)
 1241 025c 01F4      		brne .L180
 408:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 1242               		.loc 2 408 0 is_stmt 0 discriminator 1
 1243 025e 8536      		cpi r24,lo8(101)
 1244 0260 01F4      		brne .L181
 1245 0262 00C0      		rjmp .L249
 1246               	.L181:
 410:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 1247               		.loc 2 410 0 is_stmt 1 discriminator 1
 1248 0264 8936      		cpi r24,lo8(105)
 1249 0266 01F0      		breq .+2
 1250 0268 00C0      		rjmp .L241
 1251 026a 00C0      		rjmp .L183
 1252               	.L180:
 410:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 1253               		.loc 2 410 0 is_stmt 0 discriminator 2
 1254 026c 8C36      		cpi r24,lo8(108)
 1255 026e 01F4      		brne .L185
 1256               	.L183:
 411:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 1257               		.loc 2 411 0 is_stmt 1
 1258 0270 6068      		ori r22,lo8(-128)
 1259               	.LVL82:
 1260 0272 00C0      		rjmp .L243
 1261               	.LVL83:
 1262               	.L185:
 412:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 1263               		.loc 2 412 0
 1264 0274 8536      		cpi r24,lo8(101)
 1265 0276 01F4      		brne .L186
 1266               	.LVL84:
 1267               	.L251:
 413:catboard.c    **** 			mod_keys |= KEY_CTRL;
 1268               		.loc 2 413 0
 1269 0278 6160      		ori r22,lo8(1)
 1270               	.LVL85:
 1271 027a 00C0      		rjmp .L243
 1272               	.LVL86:
 1273               	.L186:
 414:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 1274               		.loc 2 414 0
 1275 027c 8636      		cpi r24,lo8(102)
 1276 027e 01F4      		brne .L187
 1277 0280 00C0      		rjmp .L250
 1278               	.L187:
 416:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 1279               		.loc 2 416 0
 1280 0282 8736      		cpi r24,lo8(103)
 1281 0284 01F4      		brne .L188
 417:catboard.c    **** 			mod_keys |= KEY_ALT;
 1282               		.loc 2 417 0
 1283 0286 6460      		ori r22,lo8(4)
 1284               	.LVL87:
 1285 0288 00C0      		rjmp .L243
 1286               	.LVL88:
 1287               	.L188:
 418:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 1288               		.loc 2 418 0
 1289 028a 8836      		cpi r24,lo8(104)
 1290 028c 01F4      		brne .L189
 1291               	.L249:
 419:catboard.c    **** 			mod_keys |= KEY_GUI;
 1292               		.loc 2 419 0
 1293 028e 6860      		ori r22,lo8(8)
 1294               	.LVL89:
 1295 0290 00C0      		rjmp .L243
 1296               	.LVL90:
 1297               	.L189:
 420:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 1298               		.loc 2 420 0
 1299 0292 8936      		cpi r24,lo8(105)
 1300 0294 01F4      		brne .L190
 421:catboard.c    **** 			mod_keys |= KEY_RIGHT_CTRL;
 1301               		.loc 2 421 0
 1302 0296 6061      		ori r22,lo8(16)
 1303               	.LVL91:
 1304 0298 00C0      		rjmp .L243
 1305               	.LVL92:
 1306               	.L190:
 422:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 1307               		.loc 2 422 0
 1308 029a 8A36      		cpi r24,lo8(106)
 1309 029c 01F4      		brne .L191
 1310               	.LVL93:
 1311               	.L250:
 423:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 1312               		.loc 2 423 0
 1313 029e 6260      		ori r22,lo8(2)
 1314               	.LVL94:
 1315 02a0 00C0      		rjmp .L243
 1316               	.LVL95:
 1317               	.L191:
 425:catboard.c    **** 			mod_keys |= KEY_RIGHT_ALT;
 1318               		.loc 2 425 0
 1319 02a2 6064      		ori r22,lo8(64)
 1320               	.LVL96:
 1321               	.L243:
 1322 02a4 6093 0000 		sts mod_keys,r22
 1323 02a8 00C0      		rjmp .L244
 1324               	.LVL97:
 1325               	.L179:
 436:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 1326               		.loc 2 436 0
 1327 02aa 8091 0000 		lds r24,last_key
 1328               	.LVL98:
 1329 02ae 8C13      		cpse r24,r28
 1330 02b0 00C0      		rjmp .L192
 436:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 1331               		.loc 2 436 0 is_stmt 0 discriminator 1
 1332 02b2 2091 0000 		lds r18,release_time
 1333 02b6 3091 0000 		lds r19,release_time+1
 1334               	.LVL99:
 1335 02ba 2A30      		cpi r18,10
 1336 02bc 3105      		cpc r19,__zero_reg__
 1337 02be 00F0      		brlo .L154
 1338               	.L192:
 1339               	.LVL100:
 437:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 1340               		.loc 2 437 0 is_stmt 1 discriminator 1
 1341 02c0 8091 0000 		lds r24,queue+4
 1342 02c4 8093 0000 		sts queue+5,r24
 1343               	.LVL101:
 1344 02c8 8091 0000 		lds r24,queue+3
 1345 02cc 8093 0000 		sts queue+4,r24
 1346               	.LVL102:
 1347 02d0 8091 0000 		lds r24,queue+2
 1348 02d4 8093 0000 		sts queue+3,r24
 1349               	.LVL103:
 1350 02d8 8091 0000 		lds r24,queue+1
 1351 02dc 8093 0000 		sts queue+2,r24
 1352               	.LVL104:
 1353 02e0 8091 0000 		lds r24,queue
 1354 02e4 8093 0000 		sts queue+1,r24
 1355               	.LVL105:
 438:catboard.c    **** 			queue[0] = key_id;
 1356               		.loc 2 438 0 discriminator 1
 1357 02e8 C093 0000 		sts queue,r28
 1358               	.LVL106:
 1359               	.L244:
 439:catboard.c    **** 			send();
 1360               		.loc 2 439 0 discriminator 1
 1361 02ec 0E94 0000 		call send
 1362               	.LVL107:
 1363               	.L154:
 443:catboard.c    **** 	if (last_key==key_id) { // calc press2
 1364               		.loc 2 443 0
 1365 02f0 8091 0000 		lds r24,last_key
 1366 02f4 8C13      		cpse r24,r28
 1367 02f6 00C0      		rjmp .L193
 444:catboard.c    **** 		press_time2 = 1;
 1368               		.loc 2 444 0
 1369 02f8 81E0      		ldi r24,lo8(1)
 1370 02fa 90E0      		ldi r25,0
 1371 02fc 9093 0000 		sts press_time2+1,r25
 1372 0300 8093 0000 		sts press_time2,r24
 1373 0304 00C0      		rjmp .L246
 1374               	.L193:
 447:catboard.c    **** 		last_key = key_id;
 1375               		.loc 2 447 0
 1376 0306 C093 0000 		sts last_key,r28
 448:catboard.c    **** 		press_time = 1;
 1377               		.loc 2 448 0
 1378 030a 81E0      		ldi r24,lo8(1)
 1379 030c 90E0      		ldi r25,0
 1380 030e 9093 0000 		sts press_time+1,r25
 1381 0312 8093 0000 		sts press_time,r24
 449:catboard.c    **** 		press_time2 = 0;
 1382               		.loc 2 449 0
 1383 0316 1092 0000 		sts press_time2+1,__zero_reg__
 1384 031a 1092 0000 		sts press_time2,__zero_reg__
 450:catboard.c    **** 		release_time = 0;
 1385               		.loc 2 450 0
 1386 031e 1092 0000 		sts release_time+1,__zero_reg__
 1387 0322 1092 0000 		sts release_time,__zero_reg__
 1388               	.L246:
 451:catboard.c    **** 		repeat_time = 0;
 1389               		.loc 2 451 0
 1390 0326 1092 0000 		sts repeat_time+1,__zero_reg__
 1391 032a 1092 0000 		sts repeat_time,__zero_reg__
 1392 032e 00C0      		rjmp .L142
 1393               	.LVL108:
 1394               	.L241:
 410:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 1395               		.loc 2 410 0
 1396 0330 8C36      		cpi r24,lo8(108)
 1397 0332 01F0      		breq .+2
 1398 0334 00C0      		rjmp .L186
 1399 0336 00C0      		rjmp .L183
 1400               	.LVL109:
 1401               	.L142:
 1402               	/* epilogue start */
 453:catboard.c    **** }
 1403               		.loc 2 453 0
 1404 0338 CF91      		pop r28
 1405               	.LVL110:
 1406 033a 0895      		ret
 1407               	.LFE14:
 1409               		.section	.text.repeat_tick,"ax",@progbits
 1410               	.global	repeat_tick
 1412               	repeat_tick:
 1413               	.LFB13:
 260:catboard.c    **** void repeat_tick(void) {
 1414               		.loc 2 260 0
 1415               	/* prologue: function */
 1416               	/* frame size = 0 */
 1417               	/* stack size = 0 */
 1418               	.L__stack_usage = 0
 261:catboard.c    **** 	if (repeat_time) { // repeat pause
 1419               		.loc 2 261 0
 1420 0000 8091 0000 		lds r24,repeat_time
 1421 0004 9091 0000 		lds r25,repeat_time+1
 1422 0008 0097      		sbiw r24,0
 1423 000a 01F0      		breq .L256
 262:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 1424               		.loc 2 262 0
 1425 000c 2091 0000 		lds r18,release_time
 1426 0010 3091 0000 		lds r19,release_time+1
 1427 0014 3695      		lsr r19
 1428 0016 2795      		ror r18
 1429 0018 3695      		lsr r19
 1430 001a 2795      		ror r18
 1431 001c 8217      		cp r24,r18
 1432 001e 9307      		cpc r25,r19
 1433 0020 00F4      		brsh .L257
 263:catboard.c    **** 			repeat_time++;
 1434               		.loc 2 263 0
 1435 0022 0196      		adiw r24,1
 1436 0024 00C0      		rjmp .L271
 1437               	.L257:
 265:catboard.c    **** 			repeat_time = 1;
 1438               		.loc 2 265 0
 1439 0026 81E0      		ldi r24,lo8(1)
 1440 0028 90E0      		ldi r25,0
 1441 002a 9093 0000 		sts repeat_time+1,r25
 1442 002e 8093 0000 		sts repeat_time,r24
 266:catboard.c    **** 			if (turbo_repeat) {
 1443               		.loc 2 266 0
 1444 0032 8091 0000 		lds r24,turbo_repeat
 1445 0036 8823      		tst r24
 1446 0038 01F4      		brne .+2
 1447 003a 00C0      		rjmp .L255
 267:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 1448               		.loc 2 267 0
 1449 003c 8091 0000 		lds r24,mod_keys
 1450 0040 8093 0000 		sts keyboard_modifier_keys,r24
 268:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 1451               		.loc 2 268 0
 1452 0044 8091 0000 		lds r24,last_key
 1453 0048 0E94 0000 		call get_code
 1454               	.LVL111:
 1455 004c 8093 0000 		sts keyboard_keys,r24
 269:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 1456               		.loc 2 269 0
 1457 0050 0E94 0000 		call usb_keyboard_send
 1458               	.LVL112:
 1459 0054 8111      		cpse r24,__zero_reg__
 1460 0056 00C0      		rjmp .L255
 270:catboard.c    **** 					keyboard_keys[0] = 0;
 1461               		.loc 2 270 0
 1462 0058 1092 0000 		sts keyboard_keys,__zero_reg__
 271:catboard.c    **** 					usb_keyboard_send();
 1463               		.loc 2 271 0
 1464 005c 0C94 0000 		jmp usb_keyboard_send
 1465               	.LVL113:
 1466               	.L256:
 275:catboard.c    **** 	} else if (press_time2) { // press2 pause
 1467               		.loc 2 275 0
 1468 0060 2091 0000 		lds r18,press_time2
 1469 0064 3091 0000 		lds r19,press_time2+1
 1470 0068 8091 0000 		lds r24,press_time
 1471 006c 9091 0000 		lds r25,press_time+1
 1472 0070 2115      		cp r18,__zero_reg__
 1473 0072 3105      		cpc r19,__zero_reg__
 1474 0074 01F0      		breq .L261
 276:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 1475               		.loc 2 276 0
 1476 0076 4091 0000 		lds r20,pressed+39
 1477 007a 4423      		tst r20
 1478 007c 01F0      		breq .L267
 1479 007e 45E0      		ldi r20,lo8(5)
 1480 0080 50E0      		ldi r21,0
 1481 0082 00C0      		rjmp .L262
 1482               	.L267:
 1483 0084 4EE1      		ldi r20,lo8(30)
 1484 0086 50E0      		ldi r21,0
 1485               	.L262:
 276:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 1486               		.loc 2 276 0 is_stmt 0 discriminator 3
 1487 0088 840F      		add r24,r20
 1488 008a 951F      		adc r25,r21
 1489 008c 2817      		cp r18,r24
 1490 008e 3907      		cpc r19,r25
 1491 0090 00F4      		brsh .L263
 277:catboard.c    **** 			press_time2++;
 1492               		.loc 2 277 0 is_stmt 1
 1493 0092 2F5F      		subi r18,-1
 1494 0094 3F4F      		sbci r19,-1
 1495 0096 3093 0000 		sts press_time2+1,r19
 1496 009a 2093 0000 		sts press_time2,r18
 1497 009e 0895      		ret
 1498               	.L263:
 279:catboard.c    **** 			repeat_time = 1;
 1499               		.loc 2 279 0
 1500 00a0 81E0      		ldi r24,lo8(1)
 1501 00a2 90E0      		ldi r25,0
 1502               	.L271:
 1503 00a4 9093 0000 		sts repeat_time+1,r25
 1504 00a8 8093 0000 		sts repeat_time,r24
 1505 00ac 0895      		ret
 1506               	.L261:
 281:catboard.c    **** 	} else if (release_time) { // release pause
 1507               		.loc 2 281 0
 1508 00ae 2091 0000 		lds r18,release_time
 1509 00b2 3091 0000 		lds r19,release_time+1
 1510 00b6 2115      		cp r18,__zero_reg__
 1511 00b8 3105      		cpc r19,__zero_reg__
 1512 00ba 01F0      		breq .L264
 282:catboard.c    **** 		if (release_time<(press_time+50)) {
 1513               		.loc 2 282 0
 1514 00bc C296      		adiw r24,50
 1515 00be 2817      		cp r18,r24
 1516 00c0 3907      		cpc r19,r25
 1517 00c2 00F4      		brsh .L265
 283:catboard.c    **** 			release_time++;
 1518               		.loc 2 283 0
 1519 00c4 2F5F      		subi r18,-1
 1520 00c6 3F4F      		sbci r19,-1
 1521 00c8 3093 0000 		sts release_time+1,r19
 1522 00cc 2093 0000 		sts release_time,r18
 1523 00d0 0895      		ret
 1524               	.L265:
 285:catboard.c    **** 			last_key = 0xFF;
 1525               		.loc 2 285 0
 1526 00d2 8FEF      		ldi r24,lo8(-1)
 1527 00d4 8093 0000 		sts last_key,r24
 286:catboard.c    **** 			release_time = 0;
 1528               		.loc 2 286 0
 1529 00d8 1092 0000 		sts release_time+1,__zero_reg__
 1530 00dc 1092 0000 		sts release_time,__zero_reg__
 287:catboard.c    **** 			press_time = 0;
 1531               		.loc 2 287 0
 1532 00e0 1092 0000 		sts press_time+1,__zero_reg__
 1533 00e4 1092 0000 		sts press_time,__zero_reg__
 288:catboard.c    **** 			press_time2 = 0;
 1534               		.loc 2 288 0
 1535 00e8 1092 0000 		sts press_time2+1,__zero_reg__
 1536 00ec 1092 0000 		sts press_time2,__zero_reg__
 1537 00f0 0895      		ret
 1538               	.L264:
 291:catboard.c    **** 	} else if (press_time) { // press1 pause
 1539               		.loc 2 291 0
 1540 00f2 0097      		sbiw r24,0
 1541 00f4 01F0      		breq .L255
 292:catboard.c    **** 		if (press_time<250) {
 1542               		.loc 2 292 0
 1543 00f6 8A3F      		cpi r24,-6
 1544 00f8 9105      		cpc r25,__zero_reg__
 1545 00fa 00F4      		brsh .L266
 293:catboard.c    **** 			press_time++;
 1546               		.loc 2 293 0
 1547 00fc 0196      		adiw r24,1
 1548 00fe 9093 0000 		sts press_time+1,r25
 1549 0102 8093 0000 		sts press_time,r24
 1550 0106 0895      		ret
 1551               	.L266:
 295:catboard.c    **** 			press_time = 0;
 1552               		.loc 2 295 0
 1553 0108 1092 0000 		sts press_time+1,__zero_reg__
 1554 010c 1092 0000 		sts press_time,__zero_reg__
 1555               	.L255:
 1556 0110 0895      		ret
 1557               	.LFE13:
 1559               		.section	.text.poll,"ax",@progbits
 1560               	.global	poll
 1562               	poll:
 1563               	.LFB11:
 214:catboard.c    **** void poll() {
 1564               		.loc 2 214 0
 1565 0000 7F92      		push r7
 1566               	.LCFI7:
 1567 0002 8F92      		push r8
 1568               	.LCFI8:
 1569 0004 9F92      		push r9
 1570               	.LCFI9:
 1571 0006 AF92      		push r10
 1572               	.LCFI10:
 1573 0008 BF92      		push r11
 1574               	.LCFI11:
 1575 000a CF92      		push r12
 1576               	.LCFI12:
 1577 000c DF92      		push r13
 1578               	.LCFI13:
 1579 000e EF92      		push r14
 1580               	.LCFI14:
 1581 0010 FF92      		push r15
 1582               	.LCFI15:
 1583 0012 0F93      		push r16
 1584               	.LCFI16:
 1585 0014 1F93      		push r17
 1586               	.LCFI17:
 1587 0016 CF93      		push r28
 1588               	.LCFI18:
 1589 0018 DF93      		push r29
 1590               	.LCFI19:
 1591               	/* prologue: function */
 1592               	/* frame size = 0 */
 1593               	/* stack size = 13 */
 1594               	.L__stack_usage = 13
 1595               	.LVL114:
 1596 001a 70E0      		ldi r23,lo8(row_port)
 1597 001c E72E      		mov r14,r23
 1598 001e 70E0      		ldi r23,hi8(row_port)
 1599 0020 F72E      		mov r15,r23
 1600 0022 00E0      		ldi r16,lo8(row_bit)
 1601 0024 10E0      		ldi r17,hi8(row_bit)
 216:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1602               		.loc 2 216 0
 1603 0026 912C      		mov r9,__zero_reg__
 1604               	.LVL115:
 1605               	.L276:
 217:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 1606               		.loc 2 217 0
 1607 0028 D701      		movw r26,r14
 1608 002a CD91      		ld r28,X+
 1609 002c DD91      		ld r29,X+
 1610 002e 7D01      		movw r14,r26
 1611 0030 F801      		movw r30,r16
 1612 0032 7190      		ld r7,Z+
 1613 0034 8F01      		movw r16,r30
 1614 0036 972D      		mov r25,r7
 1615 0038 9095      		com r25
 1616 003a 8881      		ld r24,Y
 1617 003c 8923      		and r24,r25
 1618 003e 8883      		st Y,r24
 1619               	.LVL116:
 1620               	.LBB44:
 1621               	.LBB45:
 165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #else
 167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	{
 172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		{
 176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		}
 180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		return;
 181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	}
 182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	else
 183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
 186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** }
 187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /**
 189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   
 207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  
 214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  */
 223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** void
 224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** {
 226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#else
 242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//round up by default
 243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#endif
 245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1622               		.loc 3 246 0
 1623 0040 F5E0      		ldi r31,lo8(5)
 1624 0042 FA95      		1: dec r31
 1625 0044 01F4      		brne 1b
 1626 0046 0000      		nop
 1627               	.LVL117:
 1628 0048 50E0      		ldi r21,lo8(col_pin)
 1629 004a C52E      		mov r12,r21
 1630 004c 50E0      		ldi r21,hi8(col_pin)
 1631 004e D52E      		mov r13,r21
 1632 0050 60E0      		ldi r22,lo8(col_bit)
 1633 0052 A62E      		mov r10,r22
 1634 0054 60E0      		ldi r22,hi8(col_bit)
 1635 0056 B62E      		mov r11,r22
 1636 0058 812C      		mov r8,__zero_reg__
 1637               	.LVL118:
 1638               	.L275:
 1639               	.LBE45:
 1640               	.LBE44:
 220:catboard.c    **** 			key_id = col*ROWS+row;
 1641               		.loc 2 220 0
 1642 005a 882D      		mov r24,r8
 1643 005c 890D      		add r24,r9
 1644               	.LVL119:
 221:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1645               		.loc 2 221 0
 1646 005e D601      		movw r26,r12
 1647 0060 ED91      		ld r30,X+
 1648 0062 FD91      		ld r31,X+
 1649 0064 6D01      		movw r12,r26
 1650 0066 D501      		movw r26,r10
 1651 0068 9D91      		ld r25,X+
 1652 006a 5D01      		movw r10,r26
 1653 006c 2081      		ld r18,Z
 1654 006e 9223      		and r25,r18
 1655 0070 282F      		mov r18,r24
 1656 0072 30E0      		ldi r19,0
 222:catboard.c    **** 				if (! pressed[key_id]) {
 1657               		.loc 2 222 0
 1658 0074 F901      		movw r30,r18
 1659 0076 E050      		subi r30,lo8(-(pressed))
 1660 0078 F040      		sbci r31,hi8(-(pressed))
 221:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1661               		.loc 2 221 0
 1662 007a 9111      		cpse r25,__zero_reg__
 1663 007c 00C0      		rjmp .L273
 222:catboard.c    **** 				if (! pressed[key_id]) {
 1664               		.loc 2 222 0
 1665 007e 9081      		ld r25,Z
 1666 0080 9111      		cpse r25,__zero_reg__
 1667 0082 00C0      		rjmp .L274
 223:catboard.c    **** 					key_press(key_id);
 1668               		.loc 2 223 0
 1669 0084 0E94 0000 		call key_press
 1670               	.LVL120:
 1671 0088 00C0      		rjmp .L274
 1672               	.LVL121:
 1673               	.L273:
 225:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 1674               		.loc 2 225 0
 1675 008a 9081      		ld r25,Z
 1676 008c 9111      		cpse r25,__zero_reg__
 226:catboard.c    **** 				key_release(key_id);
 1677               		.loc 2 226 0
 1678 008e 0E94 0000 		call key_release
 1679               	.LVL122:
 1680               	.L274:
 1681 0092 B5E0      		ldi r27,lo8(5)
 1682 0094 8B0E      		add r8,r27
 1683               	.LVL123:
 219:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 1684               		.loc 2 219 0
 1685 0096 ECE3      		ldi r30,lo8(60)
 1686 0098 8E12      		cpse r8,r30
 1687 009a 00C0      		rjmp .L275
 229:catboard.c    **** 		*row_port[row] |= row_bit[row];
 1688               		.loc 2 229 0
 1689 009c 8881      		ld r24,Y
 1690 009e 8729      		or r24,r7
 1691 00a0 8883      		st Y,r24
 216:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1692               		.loc 2 216 0
 1693 00a2 9394      		inc r9
 1694               	.LVL124:
 1695 00a4 9B12      		cpse r9,r27
 1696 00a6 00C0      		rjmp .L276
 231:catboard.c    **** 	if (caps_lock_led != (keyboard_leds & LED_CAPS_LOCK)) { // change layout
 1697               		.loc 2 231 0
 1698 00a8 8091 0000 		lds r24,keyboard_leds
 1699 00ac 8270      		andi r24,lo8(2)
 1700 00ae 9091 0000 		lds r25,caps_lock_led
 1701 00b2 9813      		cpse r25,r24
 1702               	.LBB46:
 232:catboard.c    **** 		caps_lock_change_layer();
 1703               		.loc 2 232 0
 1704 00b4 0E94 0000 		call caps_lock_change_layer
 1705               	.LVL125:
 1706               	.L277:
 1707               	.LBE46:
 235:catboard.c    **** 	repeat_tick();
 1708               		.loc 2 235 0
 1709 00b8 0E94 0000 		call repeat_tick
 1710               	.LVL126:
 1711               	.LBB47:
 1712               	.LBB48:
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1713               		.loc 3 164 0
 1714 00bc 8FE1      		ldi r24,lo8(19999)
 1715 00be 9EE4      		ldi r25,hi8(19999)
 1716 00c0 0197      		1: sbiw r24,1
 1717 00c2 01F4      		brne 1b
 1718 00c4 00C0      		rjmp .
 1719 00c6 0000      		nop
 1720               	/* epilogue start */
 1721               	.LBE48:
 1722               	.LBE47:
 237:catboard.c    **** }
 1723               		.loc 2 237 0
 1724 00c8 DF91      		pop r29
 1725 00ca CF91      		pop r28
 1726 00cc 1F91      		pop r17
 1727 00ce 0F91      		pop r16
 1728 00d0 FF90      		pop r15
 1729 00d2 EF90      		pop r14
 1730 00d4 DF90      		pop r13
 1731 00d6 CF90      		pop r12
 1732 00d8 BF90      		pop r11
 1733 00da AF90      		pop r10
 1734 00dc 9F90      		pop r9
 1735               	.LVL127:
 1736 00de 8F90      		pop r8
 1737 00e0 7F90      		pop r7
 1738 00e2 0895      		ret
 1739               	.LFE11:
 1741               		.section	.text.startup.main,"ax",@progbits
 1742               	.global	main
 1744               	main:
 1745               	.LFB9:
 175:catboard.c    **** int main(void) {
 1746               		.loc 2 175 0
 1747               	/* prologue: function */
 1748               	/* frame size = 0 */
 1749               	/* stack size = 0 */
 1750               	.L__stack_usage = 0
 177:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 1751               		.loc 2 177 0
 1752 0000 84B7      		in r24,0x34
 1753 0002 877F      		andi r24,lo8(-9)
 1754 0004 84BF      		out 0x34,r24
 178:catboard.c    **** 	wdt_disable();
 1755               		.loc 2 178 0
 1756 0006 88E1      		ldi r24,lo8(24)
 1757               	/* #APP */
 1758               	 ;  178 "catboard.c" 1
 1759 0008 0FB6      		in __tmp_reg__, __SREG__
 1760 000a F894      		cli
 1761 000c 8093 6000 		sts 96, r24
 1762 0010 1092 6000 		sts 96, __zero_reg__
 1763 0014 0FBE      		out __SREG__,__tmp_reg__
 1764               		
 1765               	 ;  0 "" 2
 1766               	.LVL128:
 1767               	/* #NOAPP */
 1768               	.LBB49:
 1769               	.LBB50:
 1770               		.file 4 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h"
   1:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    All rights reserved.
   3:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
   4:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
   7:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      distribution.
  13:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  17:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  29:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  31:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  34:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  37:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  38:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \file */
  39:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  41:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  43:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** peripherals as needed.
  46:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  47:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  50:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** macros are not available.
  53:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  54:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  59:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
  60:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  61:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  62:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  64:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <small>
  66:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <center>
  67:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <table border="3">
  68:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  69:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  73:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  74:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  75:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  76:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  77:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  78:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  79:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  80:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  81:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  82:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  83:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  84:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  85:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  86:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  87:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
  88:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
  89:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  90:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  91:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  92:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  93:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
  94:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
  95:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  96:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  97:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  98:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  99:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 247:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 248:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 249:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 250:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 251:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 252:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 253:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 254:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 255:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 256:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 257:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 258:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 259:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 260:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 261:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 262:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 263:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 264:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 265:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 266:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 267:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 268:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 269:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 270:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 271:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 272:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 273:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 274:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 275:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 276:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 277:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 278:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 279:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 280:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 281:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 282:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 283:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 284:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 285:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 286:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 287:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 288:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 289:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 290:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 291:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 292:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 293:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 294:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 295:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 296:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 297:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 298:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 299:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 300:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 301:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 302:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 303:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 304:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 305:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 306:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 307:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 308:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 309:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 310:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 311:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 312:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 313:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 314:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 315:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 316:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 317:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 318:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 319:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 320:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 321:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 322:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 323:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 324:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 325:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 326:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 327:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 328:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 329:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 330:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 331:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 332:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 333:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 334:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 335:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 336:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 337:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 338:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 339:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_all_enable()</td>
 340:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable all modules.</td>
 341:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 342:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 343:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 344:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 345:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_all_disable()</td>
 346:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable all modules.</td>
 347:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 348:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 349:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </table>
 350:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </center>
 351:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </small>
 352:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 353:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** @} */
 354:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 355:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
 356:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** // Include any other device on need basis
 357:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 358:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 359:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 360:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 361:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 362:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 363:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 364:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 365:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 366:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 367:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 368:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 369:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 370:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
 371:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 372:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 373:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 374:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 375:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 376:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 377:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 378:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 379:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 380:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 381:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 382:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 383:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
 384:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
 385:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
 386:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
 387:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
 388:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
 389:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
 390:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
 391:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 392:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 393:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 394:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 395:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 396:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 397:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 398:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 399:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 400:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 401:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 402:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 403:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 404:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 405:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 406:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 407:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 408:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 409:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 410:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 411:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 412:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 413:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 414:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
 415:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 416:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 417:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
 418:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 419:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 420:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 421:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 422:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 423:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 424:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 425:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 426:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 427:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 428:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 429:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
 430:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 431:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 432:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 433:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 434:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 435:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 436:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 437:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 438:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 439:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 440:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 441:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 442:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 443:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 444:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 445:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 446:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 447:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 448:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 449:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 450:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
 451:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
 452:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
 453:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
 454:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
 455:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
 456:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
 457:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
 458:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 459:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
 460:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
 461:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
 462:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
 463:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
 464:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
 465:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
 466:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
 467:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 468:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 469:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 470:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
 471:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
 472:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
 473:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
 474:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
 475:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
 476:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 477:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 478:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 479:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
 480:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
 481:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
 482:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
 483:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
 484:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
 485:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 486:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
 487:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
 488:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
 489:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
 490:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
 491:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
 492:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
 493:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
 494:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 495:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
 496:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
 497:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
 498:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
 499:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
 500:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
 501:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
 502:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
 503:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 504:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
 505:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 506:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
 507:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 508:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 509:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 510:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
 511:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 512:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 513:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 514:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
 515:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 516:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 517:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 518:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 519:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 520:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 521:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 522:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 523:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 524:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 525:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 526:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 527:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 528:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 529:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|R_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 530:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 531:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 532:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 533:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 534:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 535:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
 536:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
 537:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
 538:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
 539:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
 540:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 541:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 542:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 543:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 544:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 545:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 546:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 547:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 548:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 549:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 550:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 551:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 552:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 553:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 554:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 555:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 556:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 557:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 558:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 559:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 560:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 561:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 562:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 563:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 564:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 565:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 566:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 567:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 568:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 569:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 570:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 571:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 572:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 573:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 574:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
 575:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
 576:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 577:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
 578:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
 579:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 580:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 581:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 582:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 583:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
 584:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 585:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 586:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 587:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 588:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 589:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
 590:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 591:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 592:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 593:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
 594:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 595:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 596:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 597:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 598:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 599:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 600:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 601:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 602:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 603:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 604:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 605:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 606:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 607:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 608:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 609:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 610:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 611:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 612:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 613:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 614:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 615:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 616:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 617:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 618:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 619:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 620:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 621:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 622:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 625:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 626:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 627:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 628:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 629:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 630:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 631:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 632:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 633:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 634:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 635:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 636:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 637:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 638:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 639:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 640:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 641:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
 642:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
 643:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
 644:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
 645:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 646:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 647:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 648:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 649:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 650:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 651:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 652:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 653:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 654:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 655:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 656:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 657:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 658:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 659:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 660:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 661:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 662:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 663:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 664:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 665:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 666:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 667:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 668:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 669:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 670:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 671:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 672:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 673:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 674:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 675:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 676:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 677:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 678:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 679:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 680:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 681:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 682:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 683:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 684:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 685:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 686:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
 687:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
 688:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 689:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 690:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 691:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 692:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 693:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 694:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 695:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 696:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 697:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 698:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 699:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 700:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 701:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 702:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 703:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 704:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 705:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 706:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 707:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 708:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 709:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 710:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 711:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 712:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 713:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 714:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 715:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 716:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 717:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 718:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 719:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 720:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 721:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 722:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
 723:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 724:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 725:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 726:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 727:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 728:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
 729:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 730:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 731:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 732:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 733:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
 734:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 735:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 736:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 737:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 738:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 739:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 740:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 741:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 742:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 743:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 744:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 745:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 746:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 747:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 748:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 749:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 750:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 751:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 752:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 753:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 754:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 755:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 756:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 757:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 758:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 759:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 760:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 761:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 762:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 763:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 764:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 765:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 766:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 767:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 768:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 769:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 770:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 771:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 772:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 773:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 774:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 775:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 776:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
 777:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 778:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 779:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 780:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 781:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 782:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 783:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 784:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 785:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 786:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 787:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 788:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 789:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 790:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 791:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 792:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 793:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 794:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 795:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 796:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 797:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 798:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 799:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 800:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 801:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 802:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
 803:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
 804:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 805:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 806:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
 807:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
 808:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
 809:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
 810:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
 811:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
 812:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 813:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 814:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 815:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 816:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 817:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 818:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 819:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 820:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 821:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 822:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 823:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 824:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 825:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 826:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 827:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 828:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 829:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 830:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 831:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 832:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 833:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 834:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 835:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 836:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 837:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 838:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 839:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 840:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
 841:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
 842:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 843:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 844:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__)
 845:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 846:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 847:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 848:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 849:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 850:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 851:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 852:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 853:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 854:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 855:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Reduced Power Stage Controller */
 856:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 857:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 858:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 859:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 860:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 861:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 862:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 863:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
 864:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
 865:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 866:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 867:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
 868:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
 869:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
 870:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
 871:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
 872:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
 873:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
 874:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
 875:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
 876:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
 877:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
 878:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
 879:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
 880:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 881:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 882:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 883:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 884:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 885:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 886:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 887:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 888:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 889:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 890:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 891:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 892:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 893:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
 894:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
 895:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 896:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 897:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
 898:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
 899:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
 900:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
 901:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
 902:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
 903:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
 904:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
 905:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
 906:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
 907:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
 908:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
 909:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
 910:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
 911:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
 912:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
 913:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
 914:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 915:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 916:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 917:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 918:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 919:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 920:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 921:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 922:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 923:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 924:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 925:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 926:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 927:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 928:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 929:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 930:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
 931:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
 932:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 933:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 934:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
 935:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
 936:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
 937:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
 938:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
 939:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
 940:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
 941:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
 942:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 943:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 944:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 945:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 946:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 947:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 948:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 949:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 950:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 951:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 952:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
 953:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
 954:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 955:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 956:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 957:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 958:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 959:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 960:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 961:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 962:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 963:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 964:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 965:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 966:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 967:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
 968:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
 969:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 970:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 971:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__)
 972:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 973:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 974:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 975:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 976:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 977:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 978:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 979:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 980:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 981:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 982:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 983:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 984:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 985:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 986:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 987:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 988:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 989:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 990:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 991:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 992:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 993:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 994:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
 995:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
 996:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 997:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 998:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
 999:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1000:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1001:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1002:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1003:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1004:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1005:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1006:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1007:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1008:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1009:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Voltage ADC */
1010:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1011:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1012:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1013:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
1014:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
1015:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1016:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1017:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
1018:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1019:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1020:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1021:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1022:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1023:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1024:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1025:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1026:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1027:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1028:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1029:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1030:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
1031:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1032:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1033:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1034:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1035:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1036:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1037:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1038:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
1039:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
1040:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1041:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1042:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1043:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1044:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1045:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1046:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1047:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
1048:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
1049:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1050:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
1051:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
1052:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1053:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
1054:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
1055:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1056:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1057:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
1058:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
1059:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
1060:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
1061:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
1062:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
1063:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
1064:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
1065:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
1066:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
1067:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
1068:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
1069:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
1070:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
1071:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
1072:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
1073:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1074:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1075:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1076:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1077:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1078:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1079:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1080:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1081:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1082:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1083:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Universal Serial Interface */
1084:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1085:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1086:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1087:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1088:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1089:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1090:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1091:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
1092:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1093:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1094:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1095:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1096:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1097:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1098:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1099:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
1119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
1120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
1125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
1131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
1135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
1138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Voltage ADC */
1150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
1157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
1158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
1160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
1161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
1164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
1168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
1185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
1186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
1188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
1189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
1191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
1192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
1195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny87__)
1196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
1217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
1218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
1221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
1225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
1245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1247:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1248:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1249:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1250:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
1251:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1252:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1253:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1254:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
1255:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1256:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1257:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1258:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1259:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1260:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1261:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1262:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1263:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1264:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1265:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1266:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1267:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1268:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1269:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1270:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1271:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1272:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1273:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1274:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
1275:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
1276:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1277:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1278:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1279:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1280:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
1281:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
1282:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1283:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
1284:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
1285:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1286:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
1287:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
1288:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1289:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
1290:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
1291:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1292:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1293:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1294:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1295:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1296:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1297:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1298:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1299:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1300:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1301:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1302:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1303:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1304:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1305:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
1306:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
1307:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
1308:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
1309:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
1310:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1311:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1312:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1313:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1314:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1315:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1316:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1317:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
1318:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
1319:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1320:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1321:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
1322:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
1323:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1324:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1325:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1326:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1327:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1328:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1329:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1330:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1331:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1332:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1333:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
1334:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
1335:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1336:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
1337:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
1338:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1339:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
1340:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
1341:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1342:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
1343:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1344:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1345:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1346:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1347:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1348:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1349:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1350:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1351:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1352:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1353:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1354:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1355:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1356:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1357:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1358:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1359:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1360:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1361:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1362:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1363:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1364:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1365:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1366:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1367:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1368:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1369:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1370:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1371:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1372:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1373:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1374:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1375:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1376:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1377:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1378:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1379:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1380:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1381:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1382:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1383:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1384:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1385:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1386:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1387:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1388:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1389:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1390:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1391:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1392:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1393:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1394:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1395:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1396:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVB__) \
1397:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1398:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1399:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__) \
1400:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1401:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1402:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1403:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1404:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1405:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1406:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1407:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1408:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1409:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1410:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1411:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1412:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1413:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1414:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1415:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1416:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1417:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1418:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1419:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1420:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1421:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1422:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1423:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1424:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1425:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1426:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1427:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1428:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1429:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1430:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__DOXYGEN__)
1431:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1432:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1433:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1434:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1435:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1436:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1437:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
1438:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
1439:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1440:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
1441:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
1442:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1443:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1444:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1445:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1446:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code 
1447:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** typedef enum
1448:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1449:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1450:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1451:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1452:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1453:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1454:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1455:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1456:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1457:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_256 = 8,
1458:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1459:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } clock_div_t;
1460:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \endcode
1461:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Clock prescaler setting enumerations.
1462:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1463:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1464:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** typedef enum
1465:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1466:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1467:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1468:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1469:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1470:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1471:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1472:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1473:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1474:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_256 = 8
1475:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__)
1476:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     , clock_div_1_rc = 15
1477:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
1478:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } clock_div_t;
1479:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1480:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1481:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1482:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1483:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1484:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1485:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1486:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1487:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1488:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** optimizations are disabled.
1489:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1490:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** The type of x is clock_div_t.
1491:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1492:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1493:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1494:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1495:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     __asm__ __volatile__ (
 1771               		.loc 4 1495 0
 1772 0016 90E0      		ldi r25,0
 1773 0018 80E8      		ldi r24,lo8(-128)
 1774               	/* #APP */
 1775               	 ;  1495 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h" 1
 1776 001a 0FB6      		in __tmp_reg__,__SREG__
 1777 001c F894      		cli
 1778 001e 8093 6100 		sts 97, r24
 1779 0022 9093 6100 		sts 97, r25
 1780 0026 0FBE      		out __SREG__, __tmp_reg__
 1781               	 ;  0 "" 2
 1782               	/* #NOAPP */
 1783               	.LBE50:
 1784               	.LBE49:
 183:catboard.c    **** 	init();
 1785               		.loc 2 183 0
 1786 0028 0E94 0000 		call init
 1787               	.LVL129:
 1788               	.L284:
 185:catboard.c    **** 		poll();
 1789               		.loc 2 185 0 discriminator 1
 1790 002c 0E94 0000 		call poll
 1791               	.LVL130:
 1792 0030 00C0      		rjmp .L284
 1793               	.LFE9:
 1795               	.global	repeat_time
 1796               		.section .bss
 1799               	repeat_time:
 1800 0000 0000      		.zero	2
 1801               	.global	release_time
 1804               	release_time:
 1805 0002 0000      		.zero	2
 1806               	.global	press_time2
 1809               	press_time2:
 1810 0004 0000      		.zero	2
 1811               	.global	press_time
 1814               	press_time:
 1815 0006 0000      		.zero	2
 1816               	.global	last_key
 1817               		.data
 1820               	last_key:
 1821 0000 FF        		.byte	-1
 1822               	.global	led
 1825               	led:
 1826 0001 01        		.byte	1
 1827               	.global	locked
 1828               		.section .bss
 1831               	locked:
 1832 0008 00        		.zero	1
 1833               	.global	turbo_repeat
 1834               		.data
 1837               	turbo_repeat:
 1838 0002 01        		.byte	1
 1839               	.global	prev_layer
 1840               		.section .bss
 1843               	prev_layer:
 1844 0009 0000      		.zero	2
 1845               	.global	mod_keys
 1848               	mod_keys:
 1849 000b 00        		.zero	1
 1850               	.global	queue
 1851               		.data
 1854               	queue:
 1855 0003 FF        		.byte	-1
 1856 0004 FF        		.byte	-1
 1857 0005 FF        		.byte	-1
 1858 0006 FF        		.byte	-1
 1859 0007 FF        		.byte	-1
 1860 0008 FF        		.byte	-1
 1861 0009 FF        		.byte	-1
 1862               		.comm	pressed,60,1
 1863               	.global	layout
 1866               	layout:
 1867 000a 0000      		.word	layer2
 1868               	.global	caps_lock_led
 1869               		.section .bss
 1872               	caps_lock_led:
 1873 000c 00        		.zero	1
 1874               	.global	os_mode
 1875               		.data
 1878               	os_mode:
 1879 000c 01        		.byte	1
 1880               	.global	macros_press
 1881               		.section	.rodata
 1884               	macros_press:
 1885 0000 0000      		.word	macros1
 1886 0002 0000      		.word	macros2
 1887 0004 0000      		.word	macros3
 1888 0006 0000      		.word	macros4
 1889 0008 0000      		.word	macros5
 1890               	.global	macros5
 1893               	macros5:
 1894 000a 06        		.byte	6
 1895 000b 02        		.byte	2
 1896 000c 04        		.byte	4
 1897 000d 00        		.byte	0
 1898 000e 17        		.byte	23
 1899 000f 00        		.byte	0
 1900 0010 05        		.byte	5
 1901 0011 02        		.byte	2
 1902 0012 12        		.byte	18
 1903 0013 00        		.byte	0
 1904 0014 04        		.byte	4
 1905 0015 00        		.byte	0
 1906 0016 15        		.byte	21
 1907 0017 00        		.byte	0
 1908 0018 07        		.byte	7
 1909 0019 00        		.byte	0
 1910               	.global	macros4
 1913               	macros4:
 1914 001a 3D        		.byte	61
 1915 001b 00        		.byte	0
 1916               	.global	macros3
 1919               	macros3:
 1920 001c 3C        		.byte	60
 1921 001d 00        		.byte	0
 1922               	.global	macros2
 1925               	macros2:
 1926 001e 3B        		.byte	59
 1927 001f 00        		.byte	0
 1928               	.global	macros1
 1931               	macros1:
 1932 0020 3A        		.byte	58
 1933 0021 00        		.byte	0
 1934               	.global	macros_pos
 1937               	macros_pos:
 1938 0022 0A        		.byte	10
 1939 0023 0E        		.byte	14
 1940 0024 13        		.byte	19
 1941 0025 18        		.byte	24
 1942 0026 1D        		.byte	29
 1943               	.global	layer_fnlock
 1946               	layer_fnlock:
 1947 0027 35        		.byte	53
 1948 0028 2B        		.byte	43
 1949 0029 69        		.byte	105
 1950 002a 7D        		.byte	125
 1951 002b 7B        		.byte	123
 1952 002c 1E        		.byte	30
 1953 002d 4B        		.byte	75
 1954 002e 4E        		.byte	78
 1955 002f 68        		.byte	104
 1956 0030 6D        		.byte	109
 1957 0031 1F        		.byte	31
 1958 0032 4A        		.byte	74
 1959 0033 50        		.byte	80
 1960 0034 6F        		.byte	111
 1961 0035 6F        		.byte	111
 1962 0036 20        		.byte	32
 1963 0037 52        		.byte	82
 1964 0038 51        		.byte	81
 1965 0039 6F        		.byte	111
 1966 003a 67        		.byte	103
 1967 003b 21        		.byte	33
 1968 003c 4D        		.byte	77
 1969 003d 4F        		.byte	79
 1970 003e 6F        		.byte	111
 1971 003f 65        		.byte	101
 1972 0040 22        		.byte	34
 1973 0041 35        		.byte	53
 1974 0042 28        		.byte	40
 1975 0043 6F        		.byte	111
 1976 0044 77        		.byte	119
 1977 0045 23        		.byte	35
 1978 0046 54        		.byte	84
 1979 0047 55        		.byte	85
 1980 0048 62        		.byte	98
 1981 0049 2C        		.byte	44
 1982 004a 24        		.byte	36
 1983 004b 5F        		.byte	95
 1984 004c 5C        		.byte	92
 1985 004d 59        		.byte	89
 1986 004e 7F        		.byte	127
 1987 004f 25        		.byte	37
 1988 0050 60        		.byte	96
 1989 0051 5D        		.byte	93
 1990 0052 5A        		.byte	90
 1991 0053 6B        		.byte	107
 1992 0054 26        		.byte	38
 1993 0055 61        		.byte	97
 1994 0056 5E        		.byte	94
 1995 0057 5B        		.byte	91
 1996 0058 00        		.byte	0
 1997 0059 27        		.byte	39
 1998 005a 56        		.byte	86
 1999 005b 57        		.byte	87
 2000 005c 63        		.byte	99
 2001 005d 6E        		.byte	110
 2002 005e 2D        		.byte	45
 2003 005f 29        		.byte	41
 2004 0060 28        		.byte	40
 2005 0061 53        		.byte	83
 2006 0062 2E        		.byte	46
 2007               	.global	layer_fn
 2010               	layer_fn:
 2011 0063 46        		.byte	70
 2012 0064 2B        		.byte	43
 2013 0065 69        		.byte	105
 2014 0066 7D        		.byte	125
 2015 0067 7B        		.byte	123
 2016 0068 3A        		.byte	58
 2017 0069 00        		.byte	0
 2018 006a 00        		.byte	0
 2019 006b 68        		.byte	104
 2020 006c 6D        		.byte	109
 2021 006d 3B        		.byte	59
 2022 006e 00        		.byte	0
 2023 006f 00        		.byte	0
 2024 0070 00        		.byte	0
 2025 0071 00        		.byte	0
 2026 0072 3C        		.byte	60
 2027 0073 00        		.byte	0
 2028 0074 00        		.byte	0
 2029 0075 00        		.byte	0
 2030 0076 67        		.byte	103
 2031 0077 3D        		.byte	61
 2032 0078 00        		.byte	0
 2033 0079 00        		.byte	0
 2034 007a 00        		.byte	0
 2035 007b 65        		.byte	101
 2036 007c 3E        		.byte	62
 2037 007d 35        		.byte	53
 2038 007e 00        		.byte	0
 2039 007f 00        		.byte	0
 2040 0080 77        		.byte	119
 2041 0081 3F        		.byte	63
 2042 0082 79        		.byte	121
 2043 0083 28        		.byte	40
 2044 0084 2A        		.byte	42
 2045 0085 7C        		.byte	124
 2046 0086 40        		.byte	64
 2047 0087 4A        		.byte	74
 2048 0088 50        		.byte	80
 2049 0089 4C        		.byte	76
 2050 008a 7F        		.byte	127
 2051 008b 41        		.byte	65
 2052 008c 52        		.byte	82
 2053 008d 51        		.byte	81
 2054 008e 49        		.byte	73
 2055 008f 7E        		.byte	126
 2056 0090 42        		.byte	66
 2057 0091 4D        		.byte	77
 2058 0092 4F        		.byte	79
 2059 0093 00        		.byte	0
 2060 0094 00        		.byte	0
 2061 0095 43        		.byte	67
 2062 0096 4B        		.byte	75
 2063 0097 4E        		.byte	78
 2064 0098 00        		.byte	0
 2065 0099 7A        		.byte	122
 2066 009a 44        		.byte	68
 2067 009b 29        		.byte	41
 2068 009c 48        		.byte	72
 2069 009d 47        		.byte	71
 2070 009e 45        		.byte	69
 2071               	.global	layer1
 2074               	layer1:
 2075 009f 35        		.byte	53
 2076 00a0 2B        		.byte	43
 2077 00a1 69        		.byte	105
 2078 00a2 7D        		.byte	125
 2079 00a3 29        		.byte	41
 2080 00a4 1E        		.byte	30
 2081 00a5 14        		.byte	20
 2082 00a6 04        		.byte	4
 2083 00a7 68        		.byte	104
 2084 00a8 6D        		.byte	109
 2085 00a9 1F        		.byte	31
 2086 00aa 1A        		.byte	26
 2087 00ab 16        		.byte	22
 2088 00ac 1B        		.byte	27
 2089 00ad 1D        		.byte	29
 2090 00ae 20        		.byte	32
 2091 00af 08        		.byte	8
 2092 00b0 07        		.byte	7
 2093 00b1 06        		.byte	6
 2094 00b2 67        		.byte	103
 2095 00b3 21        		.byte	33
 2096 00b4 15        		.byte	21
 2097 00b5 09        		.byte	9
 2098 00b6 19        		.byte	25
 2099 00b7 65        		.byte	101
 2100 00b8 22        		.byte	34
 2101 00b9 17        		.byte	23
 2102 00ba 0A        		.byte	10
 2103 00bb 05        		.byte	5
 2104 00bc 77        		.byte	119
 2105 00bd 23        		.byte	35
 2106 00be 1C        		.byte	28
 2107 00bf 0B        		.byte	11
 2108 00c0 11        		.byte	17
 2109 00c1 2C        		.byte	44
 2110 00c2 24        		.byte	36
 2111 00c3 18        		.byte	24
 2112 00c4 0D        		.byte	13
 2113 00c5 10        		.byte	16
 2114 00c6 7F        		.byte	127
 2115 00c7 25        		.byte	37
 2116 00c8 0C        		.byte	12
 2117 00c9 0E        		.byte	14
 2118 00ca 36        		.byte	54
 2119 00cb 6B        		.byte	107
 2120 00cc 26        		.byte	38
 2121 00cd 12        		.byte	18
 2122 00ce 0F        		.byte	15
 2123 00cf 37        		.byte	55
 2124 00d0 38        		.byte	56
 2125 00d1 27        		.byte	39
 2126 00d2 13        		.byte	19
 2127 00d3 33        		.byte	51
 2128 00d4 31        		.byte	49
 2129 00d5 6E        		.byte	110
 2130 00d6 2D        		.byte	45
 2131 00d7 2F        		.byte	47
 2132 00d8 34        		.byte	52
 2133 00d9 30        		.byte	48
 2134 00da 2E        		.byte	46
 2135               	.global	col_bit
 2138               	col_bit:
 2139 00db 08        		.byte	8
 2140 00dc 01        		.byte	1
 2141 00dd 10        		.byte	16
 2142 00de 01        		.byte	1
 2143 00df 04        		.byte	4
 2144 00e0 20        		.byte	32
 2145 00e1 10        		.byte	16
 2146 00e2 10        		.byte	16
 2147 00e3 04        		.byte	4
 2148 00e4 20        		.byte	32
 2149 00e5 80        		.byte	-128
 2150 00e6 80        		.byte	-128
 2151               	.global	col_pin
 2154               	col_pin:
 2155 00e7 2900      		.word	41
 2156 00e9 2900      		.word	41
 2157 00eb 2900      		.word	41
 2158 00ed 2300      		.word	35
 2159 00ef 2600      		.word	38
 2160 00f1 2900      		.word	41
 2161 00f3 2300      		.word	35
 2162 00f5 2600      		.word	38
 2163 00f7 2300      		.word	35
 2164 00f9 2300      		.word	35
 2165 00fb 2600      		.word	38
 2166 00fd 2300      		.word	35
 2167               	.global	row_bit
 2170               	row_bit:
 2171 00ff 20        		.byte	32
 2172 0100 04        		.byte	4
 2173 0101 40        		.byte	64
 2174 0102 08        		.byte	8
 2175 0103 02        		.byte	2
 2176               	.global	row_port
 2179               	row_port:
 2180 0104 2800      		.word	40
 2181 0106 2B00      		.word	43
 2182 0108 2500      		.word	37
 2183 010a 2500      		.word	37
 2184 010c 2500      		.word	37
 2185               	.global	layer2
 2188               	layer2:
 2189 010e 35        		.byte	53
 2190 010f 2B        		.byte	43
 2191 0110 69        		.byte	105
 2192 0111 7D        		.byte	125
 2193 0112 29        		.byte	41
 2194 0113 1E        		.byte	30
 2195 0114 0D        		.byte	13
 2196 0115 09        		.byte	9
 2197 0116 68        		.byte	104
 2198 0117 6D        		.byte	109
 2199 0118 1F        		.byte	31
 2200 0119 06        		.byte	6
 2201 011a 1C        		.byte	28
 2202 011b 38        		.byte	56
 2203 011c 14        		.byte	20
 2204 011d 20        		.byte	32
 2205 011e 18        		.byte	24
 2206 011f 1A        		.byte	26
 2207 0120 16        		.byte	22
 2208 0121 67        		.byte	103
 2209 0122 21        		.byte	33
 2210 0123 0E        		.byte	14
 2211 0124 04        		.byte	4
 2212 0125 10        		.byte	16
 2213 0126 65        		.byte	101
 2214 0127 22        		.byte	34
 2215 0128 08        		.byte	8
 2216 0129 13        		.byte	19
 2217 012a 0C        		.byte	12
 2218 012b 77        		.byte	119
 2219 012c 23        		.byte	35
 2220 012d 11        		.byte	17
 2221 012e 15        		.byte	21
 2222 012f 17        		.byte	23
 2223 0130 2C        		.byte	44
 2224 0131 24        		.byte	36
 2225 0132 0A        		.byte	10
 2226 0133 12        		.byte	18
 2227 0134 1B        		.byte	27
 2228 0135 7F        		.byte	127
 2229 0136 25        		.byte	37
 2230 0137 0B        		.byte	11
 2231 0138 0F        		.byte	15
 2232 0139 05        		.byte	5
 2233 013a 6B        		.byte	107
 2234 013b 26        		.byte	38
 2235 013c 19        		.byte	25
 2236 013d 07        		.byte	7
 2237 013e 36        		.byte	54
 2238 013f 37        		.byte	55
 2239 0140 27        		.byte	39
 2240 0141 1D        		.byte	29
 2241 0142 33        		.byte	51
 2242 0143 31        		.byte	49
 2243 0144 6E        		.byte	110
 2244 0145 2D        		.byte	45
 2245 0146 2F        		.byte	47
 2246 0147 34        		.byte	52
 2247 0148 30        		.byte	48
 2248 0149 2E        		.byte	46
 2475               	.Letext0:
 2476               		.file 5 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/stdint.h"
 2477               		.file 6 "usb_keyboard.h"
 2478               		.file 7 "jcuken.h"
 2479               		.file 8 "my_macros.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 catboard.c
     /tmp/ccJEzKpo.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccJEzKpo.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccJEzKpo.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccJEzKpo.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccJEzKpo.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccJEzKpo.s:12     .text.init_ports:0000000000000000 init_ports
     /tmp/ccJEzKpo.s:38     .text.init:0000000000000000 init
     /tmp/ccJEzKpo.s:1825   .data:0000000000000001 led
                            *COM*:000000000000003c pressed
     /tmp/ccJEzKpo.s:1872   .bss:000000000000000c caps_lock_led
     /tmp/ccJEzKpo.s:109    .text.caps_lock_change_layer:0000000000000000 caps_lock_change_layer
     /tmp/ccJEzKpo.s:1866   .data:000000000000000a layout
     /tmp/ccJEzKpo.s:2074   .rodata:000000000000009f layer1
     /tmp/ccJEzKpo.s:2010   .rodata:0000000000000063 layer_fn
     /tmp/ccJEzKpo.s:1843   .bss:0000000000000009 prev_layer
     /tmp/ccJEzKpo.s:2188   .rodata:000000000000010e layer2
     /tmp/ccJEzKpo.s:193    .text.change_layout:0000000000000000 change_layout
     /tmp/ccJEzKpo.s:1878   .data:000000000000000c os_mode
     /tmp/ccJEzKpo.s:271    .text.get_code:0000000000000000 get_code
     /tmp/ccJEzKpo.s:342    .text.send:0000000000000000 send
     /tmp/ccJEzKpo.s:1854   .data:0000000000000003 queue
     /tmp/ccJEzKpo.s:1848   .bss:000000000000000b mod_keys
     /tmp/ccJEzKpo.s:393    .text.key_release:0000000000000000 key_release
     /tmp/ccJEzKpo.s:1831   .bss:0000000000000008 locked
     /tmp/ccJEzKpo.s:1820   .data:0000000000000000 last_key
     /tmp/ccJEzKpo.s:1814   .bss:0000000000000006 press_time
     /tmp/ccJEzKpo.s:1809   .bss:0000000000000004 press_time2
     /tmp/ccJEzKpo.s:1804   .bss:0000000000000002 release_time
     /tmp/ccJEzKpo.s:1799   .bss:0000000000000000 repeat_time
     /tmp/ccJEzKpo.s:823    .text.key_press:0000000000000000 key_press
     /tmp/ccJEzKpo.s:1946   .rodata:0000000000000027 layer_fnlock
     /tmp/ccJEzKpo.s:1837   .data:0000000000000002 turbo_repeat
     /tmp/ccJEzKpo.s:1412   .text.repeat_tick:0000000000000000 repeat_tick
     /tmp/ccJEzKpo.s:1562   .text.poll:0000000000000000 poll
     /tmp/ccJEzKpo.s:2179   .rodata:0000000000000104 row_port
     /tmp/ccJEzKpo.s:2170   .rodata:00000000000000ff row_bit
     /tmp/ccJEzKpo.s:2154   .rodata:00000000000000e7 col_pin
     /tmp/ccJEzKpo.s:2138   .rodata:00000000000000db col_bit
     /tmp/ccJEzKpo.s:1744   .text.startup.main:0000000000000000 main
     /tmp/ccJEzKpo.s:1884   .rodata:0000000000000000 macros_press
     /tmp/ccJEzKpo.s:1931   .rodata:0000000000000020 macros1
     /tmp/ccJEzKpo.s:1925   .rodata:000000000000001e macros2
     /tmp/ccJEzKpo.s:1919   .rodata:000000000000001c macros3
     /tmp/ccJEzKpo.s:1913   .rodata:000000000000001a macros4
     /tmp/ccJEzKpo.s:1893   .rodata:000000000000000a macros5
     /tmp/ccJEzKpo.s:1937   .rodata:0000000000000022 macros_pos

UNDEFINED SYMBOLS
usb_init
usb_configured
keyboard_leds
keyboard_modifier_keys
keyboard_keys
usb_keyboard_send
usb_keyboard_press
__do_copy_data
__do_clear_bss
