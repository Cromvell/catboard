   1               		.file	"catboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.section	.text.init_ports,"ax",@progbits
  10               	.global	init_ports
  12               	init_ports:
  13               	.LFB8:
  14               		.file 1 "at90usb162mu.h"
   1:at90usb162mu.h **** #define LED_CONFIG		(DDRD	|= (1<<6))
   2:at90usb162mu.h **** #define LED_OFF			(PORTD	|= (1<<6))
   3:at90usb162mu.h **** #define LED_ON			(PORTD	&= ~(1<<6))
   4:at90usb162mu.h **** 
   5:at90usb162mu.h **** #define LED_BLUE_CONFIG	(DDRD	|= (1<<1))
   6:at90usb162mu.h **** #define LED_BLUE_OFF		(PORTD	&= ~(1<<1))
   7:at90usb162mu.h **** #define LED_BLUE_ON		(PORTD	|= (1<<1))
   8:at90usb162mu.h **** 
   9:at90usb162mu.h **** #define LED_RED_CONFIG	(DDRC	|= (1<<6))
  10:at90usb162mu.h **** #define LED_RED_OFF	(PORTC	|= (1<<6))
  11:at90usb162mu.h **** #define LED_RED_ON		(PORTC	&= ~(1<<6))
  12:at90usb162mu.h **** 
  13:at90usb162mu.h **** // Init ports
  14:at90usb162mu.h **** void init_ports(void) {
  15               		.loc 1 14 0
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
  15:at90usb162mu.h **** 	DDRB  = 0b01001010; DDRC  = 0b00100000; DDRD  = 0b00000100;
  20               		.loc 1 15 0
  21 0000 8AE4      		ldi r24,lo8(74)
  22 0002 84B9      		out 0x4,r24
  23 0004 80E2      		ldi r24,lo8(32)
  24 0006 87B9      		out 0x7,r24
  25 0008 84E0      		ldi r24,lo8(4)
  26 000a 8AB9      		out 0xa,r24
  16:at90usb162mu.h **** 	PORTB = 0xFF;		PORTC = 0xFF; 		PORTD = 0xFF;
  27               		.loc 1 16 0
  28 000c 8FEF      		ldi r24,lo8(-1)
  29 000e 85B9      		out 0x5,r24
  30 0010 88B9      		out 0x8,r24
  31 0012 8BB9      		out 0xb,r24
  32 0014 0895      		ret
  33               	.LFE8:
  35               		.section	.text.init,"ax",@progbits
  36               	.global	init
  38               	init:
  39               	.LFB10:
  40               		.file 2 "catboard.c"
   1:catboard.c    **** /*
   2:catboard.c    **** * Project: CatBoard (http://ibnteo.klava.org/tag/catboard)
   3:catboard.c    **** * Version: 2.2
   4:catboard.c    **** * Date: 2013-06-23
   5:catboard.c    **** * Author: Vladimir Romanovich <ibnteo@gmail.com>
   6:catboard.c    **** * License: GPL2
   7:catboard.c    **** * 
   8:catboard.c    **** * Based on: http://geekhack.org/index.php?topic=15542.0
   9:catboard.c    **** * 
  10:catboard.c    **** * Board: AVR-USB162MU (http://microsin.net/programming/AVR/avr-usb162mu.html) analogue Teensy 1.0
  11:catboard.c    **** */
  12:catboard.c    **** 
  13:catboard.c    **** #include <avr/io.h>
  14:catboard.c    **** #include <avr/pgmspace.h>
  15:catboard.c    **** #include <avr/interrupt.h>
  16:catboard.c    **** #include <avr/wdt.h>
  17:catboard.c    **** #include <avr/power.h>
  18:catboard.c    **** #include <util/delay.h>
  19:catboard.c    **** #include "usb_keyboard.h"
  20:catboard.c    **** 
  21:catboard.c    **** #define STR_MANUFACTURER	L"ibnTeo"
  22:catboard.c    **** #define STR_PRODUCT		L"CatBoard"
  23:catboard.c    **** 
  24:catboard.c    **** #define _PINC		(uint8_t *const)&PINC
  25:catboard.c    **** #define _PORTC		(uint8_t *const)&PORTC
  26:catboard.c    **** #define _PIND		(uint8_t *const)&PIND
  27:catboard.c    **** #define _PORTD		(uint8_t *const)&PORTD
  28:catboard.c    **** #define _PORTB		(uint8_t *const)&PORTB
  29:catboard.c    **** #define _PINB		(uint8_t *const)&PINB
  30:catboard.c    **** 
  31:catboard.c    **** #define ROWS	5
  32:catboard.c    **** #define COLS	12
  33:catboard.c    **** #define KEYS	COLS*ROWS
  34:catboard.c    **** 
  35:catboard.c    **** #define NULL				0
  36:catboard.c    **** #define NA					0
  37:catboard.c    **** #define KEY_LAYER1			0xF1
  38:catboard.c    **** #define KEY_LAYER2			0xF2
  39:catboard.c    **** #define KEY_MY_SHIFT		0xF3
  40:catboard.c    **** #define KEY_LED				0xF9
  41:catboard.c    **** #define KEY_LOCK			0xFA
  42:catboard.c    **** #define KEY_TURBO_REPEAT	0xFB
  43:catboard.c    **** #define KEY_MAC_MODE		0xFC // (+Shift)
  44:catboard.c    **** #define KEY_ALT_TAB			0xFD
  45:catboard.c    **** #define KEY_FN_LOCK			0xFE
  46:catboard.c    **** #define KEY_FN				0xFF
  47:catboard.c    **** #define FN_KEY_ID			7*5+4
  48:catboard.c    **** #define KEY_MOD				0x80
  49:catboard.c    **** #define KEY_NULL			0
  50:catboard.c    **** 
  51:catboard.c    **** #define KEY_PRESSED_FN		1
  52:catboard.c    **** #define KEY_PRESSED_MODS	2
  53:catboard.c    **** #define KEY_PRESSED_ALT		3
  54:catboard.c    **** #define KEY_PRESSED_SHIFT	4
  55:catboard.c    **** #define KEY_PRESSED_CTRL	5
  56:catboard.c    **** #define KEY_PRESSED_PREV	6
  57:catboard.c    **** 
  58:catboard.c    **** //#include "qwerty.h"
  59:catboard.c    **** //#include "dvorak.h"
  60:catboard.c    **** #include "jcuken.h"
  61:catboard.c    **** 
  62:catboard.c    **** //#include "at90usb162.h"
  63:catboard.c    **** #include "at90usb162mu.h"
  64:catboard.c    **** 
  65:catboard.c    **** // 0 - shorcuts my layout; 1 - shorcuts qwerty layout
  66:catboard.c    **** #define KEY_SHORTCUTS_LAYER1	1
  67:catboard.c    **** 
  68:catboard.c    **** // Nonstandart hardware layout
  69:catboard.c    **** #define KEY_LAYOUT_ALT_SHIFT	1
  70:catboard.c    **** #define KEY_LAYOUT_CTRL_SHIFT	2
  71:catboard.c    **** #define KEY_LAYOUT_GUI_SPACE	3
  72:catboard.c    **** 
  73:catboard.c    **** //#define KEY_LAYOUT		0
  74:catboard.c    **** #define KEY_LAYOUT		KEY_LAYOUT_ALT_SHIFT
  75:catboard.c    **** 
  76:catboard.c    **** // Mac mode off
  77:catboard.c    **** uint8_t mac_mode = 0;
  78:catboard.c    **** 
  79:catboard.c    **** // 0x00-0x7F - normal keys
  80:catboard.c    **** // 0x80-0xF0 - mod_keys | 0x80
  81:catboard.c    **** // 0xF1-0xFF - catboard keys
  82:catboard.c    **** 
  83:catboard.c    **** const uint8_t layer1[KEYS] = {
  84:catboard.c    **** 	//ROW1			ROW2				ROW3			ROW4			ROW5
  85:catboard.c    **** 	KEY_TILDE,		KEY_TAB,			KEY_RIGHT_CTRL|KEY_MOD,KEY_ALT_TAB,KEY_ESC,				// COL1
  86:catboard.c    **** 	KEY_1,			KEY_Q,				KEY_A,			KEY_GUI|KEY_MOD,KEY_LAYER1,				// COL2
  87:catboard.c    **** 	KEY_2,			KEY_W,				KEY_S,			KEY_X,			KEY_Z,					// COL3
  88:catboard.c    **** 	KEY_3,			KEY_E,				KEY_D,			KEY_C,			KEY_LEFT_ALT|KEY_MOD,	// COL4
  89:catboard.c    **** 	KEY_4,			KEY_R,				KEY_F,			KEY_V,			KEY_LEFT_CTRL|KEY_MOD,	// COL5
  90:catboard.c    **** 	KEY_5,			KEY_T,				KEY_G,			KEY_B,			KEY_MY_SHIFT,			// COL6
  91:catboard.c    **** 	KEY_6,			KEY_Y,				KEY_H,			KEY_N,			KEY_SPACE,				// COL7 
  92:catboard.c    **** 	KEY_7,			KEY_U,				KEY_J,			KEY_M,			KEY_FN,					// COL8
  93:catboard.c    **** 	KEY_8,			KEY_I,				KEY_K,			KEY_COMMA,		KEY_RIGHT_ALT|KEY_MOD,	// COL9
  94:catboard.c    **** 	KEY_9,			KEY_O,				KEY_L,			KEY_PERIOD,		KEY_SLASH,				// COL10
  95:catboard.c    **** 	KEY_0,			KEY_P,				KEY_SEMICOLON,	KEY_BACKSLASH,	KEY_LAYER2,				// COL11
  96:catboard.c    **** 	KEY_MINUS,		KEY_LEFT_BRACE,		KEY_QUOTE,		KEY_RIGHT_BRACE,KEY_EQUAL				// COL12
  97:catboard.c    **** };
  98:catboard.c    **** 
  99:catboard.c    **** /*
 100:catboard.c    **** [e][~][1][2][3][4][5]  [6][7][8][9][0][-][=]
 101:catboard.c    **** [a][t][Q][W][E][R][T]  [Y][U][I][O][P][b][b]
 102:catboard.c    **** [m][c][A][S][D][F][G]  [H][J][K][L][:]["][\]
 103:catboard.c    ****   [s] [Z][X][C][V][B]  [N][M][,][.][/] [s]
 104:catboard.c    ****             [a][c][s]  [s][f][a]
 105:catboard.c    **** r5c1 r1c1 r1c2 r1c3 r1c4 r1c5 r1c6      r1c7 r1c8 r1c9 r1c10 r1c11 r1c12 r5c12
 106:catboard.c    **** r4c1 r2c1 r2c2 r2c3 r2c4 r2c5 r2c6      r2c7 r2c8 r2c9 r2c10 r2c11 r2c12 r4c12
 107:catboard.c    **** r4c2 r3c1 r3c2 r3c3 r3c4 r3c5 r3c6      r3c7 r3c8 r3c9 r3c10 r3c11 r3c12 r4c11
 108:catboard.c    ****   r5c2    r5c3 r4c3 r4c4 r4c5 r4c6      r4c7 r4c8 r4c9 r4c10 r5c10    r5c11
 109:catboard.c    ****                     r5c4 r5c5   r5c6  r5c7   r5c8 r5c9
 110:catboard.c    **** */
 111:catboard.c    **** 
 112:catboard.c    **** // Start layout
 113:catboard.c    **** uint8_t *layout = &layer2;
 114:catboard.c    **** 
 115:catboard.c    **** const uint8_t layer_fn[KEYS] = {
 116:catboard.c    **** 	//ROW1				ROW2			ROW3			ROW4			ROW5
 117:catboard.c    **** 	KEY_PRINTSCREEN,	KEY_TAB,		KEY_RIGHT_CTRL|KEY_MOD,KEY_ALT_TAB,KEY_TURBO_REPEAT,	// COL1
 118:catboard.c    **** 	KEY_F1,				NULL,			NULL,			KEY_GUI|KEY_MOD,KEY_LAYER1,				// COL2
 119:catboard.c    **** 	KEY_F2,				NULL,			NULL,			NULL,			NULL,					// COL3
 120:catboard.c    **** 	KEY_F3,				NULL,			NULL,			NULL,			KEY_LEFT_ALT|KEY_MOD,	// COL4
 121:catboard.c    **** 	KEY_F4,				NULL,			NULL,			NULL,			KEY_LEFT_CTRL|KEY_MOD,	// COL5
 122:catboard.c    **** 	KEY_F5,				KEY_TILDE,		NULL,			NULL,			KEY_MY_SHIFT,			// COL6
 123:catboard.c    **** 	KEY_F6,				KEY_LED,		KEY_ENTER,		KEY_BACKSPACE,	KEY_MAC_MODE,			// COL7
 124:catboard.c    **** 	KEY_F7,				KEY_HOME,		KEY_LEFT,		KEY_DELETE,		KEY_FN,					// COL8
 125:catboard.c    **** 	KEY_F8,				KEY_UP,			KEY_DOWN,		KEY_INSERT,		KEY_FN_LOCK,			// COL9
 126:catboard.c    **** 	KEY_F9,				KEY_END,		KEY_RIGHT,		NULL,			NULL,					// COL10
 127:catboard.c    **** 	KEY_F10,			KEY_PAGE_UP,	KEY_PAGE_DOWN,	NULL,			KEY_LOCK,				// COL11
 128:catboard.c    **** 	KEY_F11,			KEY_ESC,		KEY_PAUSE,		KEY_SCROLL_LOCK,KEY_F12					// COL12
 129:catboard.c    **** };
 130:catboard.c    **** 
 131:catboard.c    **** const uint8_t layer_fnlock[KEYS] = {
 132:catboard.c    **** 	//ROW1				ROW2			ROW3			ROW4			ROW5
 133:catboard.c    **** 	KEY_TILDE,			KEY_TAB,		KEY_RIGHT_CTRL|KEY_MOD,KEY_ALT_TAB,KEY_TURBO_REPEAT,	// COL1
 134:catboard.c    **** 	KEY_1,				KEY_PAGE_UP,	KEY_PAGE_DOWN,	KEY_GUI|KEY_MOD,KEY_LAYER1,				// COL2
 135:catboard.c    **** 	KEY_2,				KEY_HOME,		KEY_LEFT,		NULL,			NULL,					// COL3
 136:catboard.c    **** 	KEY_3,				KEY_UP,			KEY_DOWN,		NULL,			KEY_LEFT_ALT|KEY_MOD,	// COL4
 137:catboard.c    **** 	KEY_4,				KEY_END,		KEY_RIGHT,		NULL,			KEY_LEFT_CTRL|KEY_MOD,	// COL5
 138:catboard.c    **** 	KEY_5,				KEY_TILDE,		KEY_ENTER,		NULL,			KEY_MY_SHIFT,			// COL6
 139:catboard.c    **** 	KEY_6,				KEYPAD_SLASH,	KEYPAD_ASTERIX,	KEYPAD_0,		KEY_SPACE,				// COL7
 140:catboard.c    **** 	KEY_7,				KEYPAD_7,		KEYPAD_4,		KEYPAD_1,		KEY_FN,					// COL8
 141:catboard.c    **** 	KEY_8,				KEYPAD_8,		KEYPAD_5,		KEYPAD_2,		KEY_RIGHT_ALT|KEY_MOD,	// COL9
 142:catboard.c    **** 	KEY_9,				KEYPAD_9,		KEYPAD_6,		KEYPAD_3,		NULL,					// COL10
 143:catboard.c    **** 	KEY_0,				KEYPAD_MINUS,	KEYPAD_PLUS,	KEYPAD_PERIOD,	KEY_LAYER2,				// COL11
 144:catboard.c    **** 	KEY_MINUS,			KEY_ESC,		KEY_ENTER,		KEY_NUM_LOCK,	KEY_EQUAL				// COL12
 145:catboard.c    **** };
 146:catboard.c    **** 
 147:catboard.c    **** int8_t pressed[KEYS];
 148:catboard.c    **** uint8_t queue[7] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 149:catboard.c    **** uint8_t mod_keys = 0;
 150:catboard.c    **** uint8_t *prev_layer = 0;
 151:catboard.c    **** 
 152:catboard.c    **** uint8_t turbo_repeat = 1;
 153:catboard.c    **** uint8_t locked = 0;
 154:catboard.c    **** uint8_t led = 1; // LED light
 155:catboard.c    **** 
 156:catboard.c    **** uint8_t last_key = 0xFF;
 157:catboard.c    **** uint16_t press_time = 0;
 158:catboard.c    **** uint16_t press_time2 = 0;
 159:catboard.c    **** uint16_t release_time = 0;
 160:catboard.c    **** uint16_t repeat_time = 0;
 161:catboard.c    **** 
 162:catboard.c    **** void init(void);
 163:catboard.c    **** void send(void);
 164:catboard.c    **** void poll(void);
 165:catboard.c    **** void repeat_tick(void);
 166:catboard.c    **** void key_press(uint8_t key_id);
 167:catboard.c    **** void key_release(uint8_t key_id);
 168:catboard.c    **** uint8_t get_code(uint8_t key_id);
 169:catboard.c    **** 
 170:catboard.c    **** int main(void) {
 171:catboard.c    **** 	// Disable watchdog if enabled by bootloader/fuses
 172:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 173:catboard.c    **** 	wdt_disable();
 174:catboard.c    **** 
 175:catboard.c    **** 	// Disable clock division
 176:catboard.c    **** 	clock_prescale_set(clock_div_1);
 177:catboard.c    **** 
 178:catboard.c    **** 	init();
 179:catboard.c    **** 	for (;;) {
 180:catboard.c    **** 		poll();
 181:catboard.c    **** 	}
 182:catboard.c    **** }
 183:catboard.c    **** 
 184:catboard.c    **** void init(void) {
  41               		.loc 2 184 0
  42               	/* prologue: function */
  43               	/* frame size = 0 */
  44               	/* stack size = 0 */
  45               	.L__stack_usage = 0
 185:catboard.c    **** 	// Set for 16 MHz clock
 186:catboard.c    **** 	CLKPR = 0x80; CLKPR = 0;
  46               		.loc 2 186 0
  47 0000 80E8      		ldi r24,lo8(-128)
  48 0002 8093 6100 		sts 97,r24
  49 0006 1092 6100 		sts 97,__zero_reg__
 187:catboard.c    **** 
 188:catboard.c    **** 	init_ports();
  50               		.loc 2 188 0
  51 000a 0E94 0000 		call init_ports
  52               	.LVL0:
 189:catboard.c    **** 
 190:catboard.c    **** 	LED_CONFIG;
  53               		.loc 2 190 0
  54 000e 569A      		sbi 0xa,6
 191:catboard.c    **** 	LED_RED_CONFIG;
  55               		.loc 2 191 0
  56 0010 3E9A      		sbi 0x7,6
 192:catboard.c    **** 	LED_BLUE_CONFIG;
  57               		.loc 2 192 0
  58 0012 519A      		sbi 0xa,1
 193:catboard.c    **** 
 194:catboard.c    **** 	LED_RED_OFF;
  59               		.loc 2 194 0
  60 0014 469A      		sbi 0x8,6
 195:catboard.c    **** 	LED_BLUE_OFF;
  61               		.loc 2 195 0
  62 0016 5998      		cbi 0xb,1
 196:catboard.c    **** 	if (led) LED_ON;
  63               		.loc 2 196 0
  64 0018 8091 0000 		lds r24,led
  65 001c 8111      		cpse r24,__zero_reg__
  66               		.loc 2 196 0 is_stmt 0 discriminator 1
  67 001e 5E98      		cbi 0xb,6
  68               	.L3:
  69               	.LVL1:
  70 0020 E0E0      		ldi r30,lo8(pressed)
  71 0022 F0E0      		ldi r31,hi8(pressed)
  72               	.LVL2:
  73               	.L4:
  74               	.LBB18:
 197:catboard.c    **** 
 198:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
 199:catboard.c    **** 		pressed[i] = 0;
  75               		.loc 2 199 0 is_stmt 1 discriminator 2
  76 0024 1192      		st Z+,__zero_reg__
 198:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
  77               		.loc 2 198 0 discriminator 2
  78 0026 80E0      		ldi r24,hi8(pressed+60)
  79 0028 E030      		cpi r30,lo8(pressed+60)
  80 002a F807      		cpc r31,r24
  81 002c 01F4      		brne .L4
  82               	.LBE18:
 200:catboard.c    **** 	}
 201:catboard.c    **** 
 202:catboard.c    **** 	usb_init();
  83               		.loc 2 202 0
  84 002e 0E94 0000 		call usb_init
  85               	.LVL3:
  86               	.L5:
 203:catboard.c    **** 	while(!usb_configured());
  87               		.loc 2 203 0 discriminator 1
  88 0032 0E94 0000 		call usb_configured
  89               	.LVL4:
  90 0036 8823      		tst r24
  91 0038 01F0      		breq .L5
 204:catboard.c    **** 	LED_OFF;
  92               		.loc 2 204 0
  93 003a 5E9A      		sbi 0xb,6
 205:catboard.c    **** 	if (led) LED_RED_ON;
  94               		.loc 2 205 0
  95 003c 8091 0000 		lds r24,led
  96 0040 8111      		cpse r24,__zero_reg__
  97               		.loc 2 205 0 is_stmt 0 discriminator 1
  98 0042 4698      		cbi 0x8,6
  99               	.L2:
 100 0044 0895      		ret
 101               	.LFE10:
 103               		.section	.text.change_layout,"ax",@progbits
 104               	.global	change_layout
 106               	change_layout:
 107               	.LFB15:
 206:catboard.c    **** }
 207:catboard.c    **** 
 208:catboard.c    **** void poll() {
 209:catboard.c    **** 	uint8_t row, col, key_id;
 210:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 211:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 212:catboard.c    **** 		_delay_us(1);
 213:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 214:catboard.c    **** 			key_id = col*ROWS+row;
 215:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 216:catboard.c    **** 				if (! pressed[key_id]) {
 217:catboard.c    **** 					key_press(key_id);
 218:catboard.c    **** 				}
 219:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 220:catboard.c    **** 				key_release(key_id);
 221:catboard.c    **** 			}
 222:catboard.c    **** 		}
 223:catboard.c    **** 		*row_port[row] |= row_bit[row];
 224:catboard.c    **** 	}
 225:catboard.c    **** 	repeat_tick();
 226:catboard.c    **** 	_delay_ms(5);
 227:catboard.c    **** }
 228:catboard.c    **** 
 229:catboard.c    **** void repeat_tick(void) {
 230:catboard.c    **** 	if (repeat_time) { // repeat pause
 231:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 232:catboard.c    **** 			repeat_time++;
 233:catboard.c    **** 		} else { // repeat press
 234:catboard.c    **** 			repeat_time = 1;
 235:catboard.c    **** 			if (turbo_repeat) {
 236:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 237:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 238:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 239:catboard.c    **** 					keyboard_keys[0] = 0;
 240:catboard.c    **** 					usb_keyboard_send();
 241:catboard.c    **** 				}
 242:catboard.c    **** 			}
 243:catboard.c    **** 		}
 244:catboard.c    **** 	} else if (press_time2) { // press2 pause
 245:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 246:catboard.c    **** 			press_time2++;
 247:catboard.c    **** 		} else {
 248:catboard.c    **** 			repeat_time = 1;
 249:catboard.c    **** 		}
 250:catboard.c    **** 	} else if (release_time) { // release pause
 251:catboard.c    **** 		if (release_time<(press_time+50)) {
 252:catboard.c    **** 			release_time++;
 253:catboard.c    **** 		} else {
 254:catboard.c    **** 			last_key = 0xFF;
 255:catboard.c    **** 			release_time = 0;
 256:catboard.c    **** 			press_time = 0;
 257:catboard.c    **** 			press_time2 = 0;
 258:catboard.c    **** 			release_time = 0;
 259:catboard.c    **** 		}
 260:catboard.c    **** 	} else if (press_time) { // press1 pause
 261:catboard.c    **** 		if (press_time<250) {
 262:catboard.c    **** 			press_time++;
 263:catboard.c    **** 		} else {
 264:catboard.c    **** 			press_time = 0;
 265:catboard.c    **** 		}
 266:catboard.c    **** 	}	
 267:catboard.c    **** }
 268:catboard.c    **** 
 269:catboard.c    **** void key_press(uint8_t key_id) {
 270:catboard.c    **** 	uint8_t i;
 271:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 272:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 273:catboard.c    **** 	
 274:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 275:catboard.c    **** 	if (key_code==NULL) {
 276:catboard.c    **** 		key_code = layout[key_id];
 277:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 278:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 279:catboard.c    **** 			key_code = prev_layer[key_id];
 280:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 281:catboard.c    **** 		}
 282:catboard.c    **** 	}
 283:catboard.c    **** 
 284:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 285:catboard.c    **** 	
 286:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys
 287:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 288:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 289:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 290:catboard.c    **** 			} else { // Alt press, Tab press and release
 291:catboard.c    **** 				if (! mod_keys) {
 292:catboard.c    **** 					mod_keys |= (KEY_ALT);
 293:catboard.c    **** 				} else {
 294:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 295:catboard.c    **** 				}
 296:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 297:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 298:catboard.c    **** 				usb_keyboard_send();
 299:catboard.c    **** 				_delay_ms(50);
 300:catboard.c    **** 				send();
 301:catboard.c    **** 			}
 302:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 303:catboard.c    **** 			if (prev_layer) { // FnLock Off
 304:catboard.c    **** 				layout = prev_layer;
 305:catboard.c    **** 				prev_layer = 0;
 306:catboard.c    **** 			} else { // FnLock On
 307:catboard.c    **** 				prev_layer = layout;
 308:catboard.c    **** 				layout = layer_fnlock;
 309:catboard.c    **** 			}
 310:catboard.c    **** 			if (prev_layer || mac_mode) {
 311:catboard.c    **** 				if (led) LED_ON;
 312:catboard.c    **** 			} else {
 313:catboard.c    **** 				LED_OFF;
 314:catboard.c    **** 			}
 315:catboard.c    **** 		} else if (key_code==KEY_MAC_MODE) { // Mac mode
 316:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 317:catboard.c    **** 				mac_mode = ! mac_mode;
 318:catboard.c    **** 				if (mac_mode || prev_layer) {
 319:catboard.c    **** 					if (led) LED_ON;
 320:catboard.c    **** 				} else {
 321:catboard.c    **** 					LED_OFF;
 322:catboard.c    **** 				}
 323:catboard.c    **** 			} else { // Press Space
 324:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 325:catboard.c    **** 			}
 326:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 327:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 328:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 329:catboard.c    **** 				mod_keys |= KEY_CTRL;
 330:catboard.c    **** 				send();
 331:catboard.c    **** 			} else {
 332:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 333:catboard.c    **** 				mod_keys |= KEY_SHIFT;
 334:catboard.c    **** 				send();
 335:catboard.c    **** 			}
 336:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 337:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 338:catboard.c    **** 			send();
 339:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 340:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 341:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 342:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 343:catboard.c    **** 			send();
 344:catboard.c    **** 		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
 345:catboard.c    **** 			if (locked) {
 346:catboard.c    **** 				locked = 0;
 347:catboard.c    **** 				if (led) {
 348:catboard.c    **** 					if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 349:catboard.c    **** 					if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 350:catboard.c    **** 					if (prev_layer || mac_mode) LED_ON;
 351:catboard.c    **** 				}
 352:catboard.c    **** 			} else {
 353:catboard.c    **** 				locked = 1;
 354:catboard.c    **** 				LED_OFF;
 355:catboard.c    **** 				LED_RED_OFF;
 356:catboard.c    **** 				LED_BLUE_OFF;
 357:catboard.c    **** 				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
 358:catboard.c    **** 			}
 359:catboard.c    **** 		} else if (key_code==KEY_LED) { // LED On/Off
 360:catboard.c    **** 			if (led) {
 361:catboard.c    **** 				led = 0;
 362:catboard.c    **** 				LED_OFF;
 363:catboard.c    **** 				LED_RED_OFF;
 364:catboard.c    **** 				LED_BLUE_OFF;
 365:catboard.c    **** 			} else {
 366:catboard.c    **** 				led = 1;
 367:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 368:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 369:catboard.c    **** 				if (prev_layer || mac_mode) LED_ON;
 370:catboard.c    **** 			}
 371:catboard.c    **** 		}
 372:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys
 373:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 374:catboard.c    **** 			mod_keys |= KEY_GUI;
 375:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 376:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 377:catboard.c    **** 		} else {
 378:catboard.c    **** 			mod_keys |= (key_code & 0x7F);
 379:catboard.c    **** 		}
 380:catboard.c    **** 		send();
 381:catboard.c    **** 	} else {
 382:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 383:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 384:catboard.c    **** 			queue[0] = key_id;
 385:catboard.c    **** 			send();
 386:catboard.c    **** 		}
 387:catboard.c    **** 	}
 388:catboard.c    **** 	// Autorepeat
 389:catboard.c    **** 	if (last_key==key_id) { // calc press2
 390:catboard.c    **** 		press_time2 = 1;
 391:catboard.c    **** 		repeat_time = 0;
 392:catboard.c    **** 	} else { // calc press1
 393:catboard.c    **** 		last_key = key_id;
 394:catboard.c    **** 		press_time = 1;
 395:catboard.c    **** 		press_time2 = 0;
 396:catboard.c    **** 		release_time = 0;
 397:catboard.c    **** 		repeat_time = 0;
 398:catboard.c    **** 	}
 399:catboard.c    **** }
 400:catboard.c    **** 
 401:catboard.c    **** void key_release(uint8_t key_id) {
 402:catboard.c    **** 	uint8_t i;
 403:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 404:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 405:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 406:catboard.c    **** 		key_code = prev_layer[key_id];
 407:catboard.c    **** 	}
 408:catboard.c    **** 	pressed[key_id] = 0;
 409:catboard.c    **** 	if (locked) return;
 410:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys release
 411:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 412:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 413:catboard.c    **** 			send();
 414:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 415:catboard.c    **** 			mod_keys &= ~(KEY_CTRL);
 416:catboard.c    **** 			send();
 417:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // LAYER1
 418:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 419:catboard.c    **** 			send();
 420:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 421:catboard.c    **** 				if (layout!=layer1) {
 422:catboard.c    **** 					if (layout==layer_fn) {
 423:catboard.c    **** 						prev_layer = layer1;
 424:catboard.c    **** 					} else {
 425:catboard.c    **** 						layout = layer1;
 426:catboard.c    **** 					}
 427:catboard.c    **** 					change_layout();
 428:catboard.c    **** 					//LED_ON;
 429:catboard.c    **** 					LED_RED_OFF;
 430:catboard.c    **** 					if (led) LED_BLUE_ON;
 431:catboard.c    **** 				}
 432:catboard.c    **** 			}
 433:catboard.c    **** 			last_key = 0xFF;
 434:catboard.c    **** 			press_time = 0;
 435:catboard.c    **** 			press_time2 = 0;
 436:catboard.c    **** 			release_time = 0;
 437:catboard.c    **** 			repeat_time = 0;
 438:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // LAYER2
 439:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 440:catboard.c    **** 			send();
 441:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 442:catboard.c    **** 				if (layout!=layer2) {
 443:catboard.c    **** 					if (layout==layer_fn) {
 444:catboard.c    **** 						prev_layer = layer2;
 445:catboard.c    **** 					} else {
 446:catboard.c    **** 						layout = layer2;
 447:catboard.c    **** 					}
 448:catboard.c    **** 					change_layout();
 449:catboard.c    **** 					//LED_OFF;
 450:catboard.c    **** 					LED_BLUE_OFF;
 451:catboard.c    **** 					if (led) LED_RED_ON;
 452:catboard.c    **** 				}
 453:catboard.c    **** 			}
 454:catboard.c    **** 			last_key = 0xFF;
 455:catboard.c    **** 			press_time = 0;
 456:catboard.c    **** 			press_time2 = 0;
 457:catboard.c    **** 			release_time = 0;
 458:catboard.c    **** 			repeat_time = 0;
 459:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 460:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 461:catboard.c    **** 			send();
 462:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 463:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 464:catboard.c    **** 			}
 465:catboard.c    **** 			last_key = 0xFF;
 466:catboard.c    **** 			press_time = 0;
 467:catboard.c    **** 			press_time2 = 0;
 468:catboard.c    **** 			release_time = 0;
 469:catboard.c    **** 			repeat_time = 0;
 470:catboard.c    **** 		}
 471:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys release
 472:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 473:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 474:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 475:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 476:catboard.c    **** 		} else {
 477:catboard.c    **** 			mod_keys &= ~(key_code & 0x7F);
 478:catboard.c    **** 		}
 479:catboard.c    **** 		send();
 480:catboard.c    **** 	} else {
 481:catboard.c    **** 		for (i=0; i<6; i++) {
 482:catboard.c    **** 			if (queue[i]==key_id) {
 483:catboard.c    **** 				break;
 484:catboard.c    **** 			}
 485:catboard.c    **** 		}
 486:catboard.c    **** 		for (; i<6; i++) {
 487:catboard.c    **** 			queue[i] = queue[i+1];
 488:catboard.c    **** 		}
 489:catboard.c    **** 		send();
 490:catboard.c    **** 		// Autorepeat
 491:catboard.c    **** 		if (last_key==key_id) { // realise time
 492:catboard.c    **** 			press_time2 = 0;
 493:catboard.c    **** 			release_time = 1;
 494:catboard.c    **** 			repeat_time = 0;
 495:catboard.c    **** 		} else { // reset
 496:catboard.c    **** 			press_time = 0;
 497:catboard.c    **** 			press_time2 = 0;
 498:catboard.c    **** 			release_time = 0;
 499:catboard.c    **** 			repeat_time = 0;
 500:catboard.c    **** 		}
 501:catboard.c    **** 	}
 502:catboard.c    **** }
 503:catboard.c    **** 
 504:catboard.c    **** void change_layout(void) {
 108               		.loc 2 504 0 is_stmt 1
 109               	/* prologue: function */
 110               	/* frame size = 0 */
 111               	/* stack size = 0 */
 112               	.L__stack_usage = 0
 505:catboard.c    **** 	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || mac_mode) { // Press Cmd+Space
 113               		.loc 2 505 0
 114 0000 8091 0000 		lds r24,mac_mode
 115 0004 8823      		tst r24
 116 0006 01F0      		breq .L19
 117               	.LBB29:
 118               	.LBB30:
 506:catboard.c    **** 		keyboard_modifier_keys = KEY_GUI;
 119               		.loc 2 506 0
 120 0008 88E0      		ldi r24,lo8(8)
 121 000a 8093 0000 		sts keyboard_modifier_keys,r24
 507:catboard.c    **** 		keyboard_keys[0] = 0;
 122               		.loc 2 507 0
 123 000e 1092 0000 		sts keyboard_keys,__zero_reg__
 508:catboard.c    **** 		usb_keyboard_send();
 124               		.loc 2 508 0
 125 0012 0E94 0000 		call usb_keyboard_send
 126               	.LVL5:
 127               	.LBB31:
 128               	.LBB32:
 129               		.file 3 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h"
   1:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 130               		.loc 3 164 0
 131 0016 2FEF      		ldi r18,lo8(159999)
 132 0018 80E7      		ldi r24,hi8(159999)
 133 001a 92E0      		ldi r25,hlo8(159999)
 134 001c 2150      		1: subi r18,1
 135 001e 8040      		sbci r24,0
 136 0020 9040      		sbci r25,0
 137 0022 01F4      		brne 1b
 138 0024 00C0      		rjmp .
 139 0026 0000      		nop
 140               	.LBE32:
 141               	.LBE31:
 509:catboard.c    **** 		_delay_ms(50);
 510:catboard.c    **** 		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 142               		.loc 2 510 0
 143 0028 68E0      		ldi r22,lo8(8)
 144 002a 8CE2      		ldi r24,lo8(44)
 145 002c 00C0      		rjmp .L20
 146               	.LVL6:
 147               	.L19:
 148               	.LBE30:
 149               	.LBE29:
 511:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
 512:catboard.c    **** 		keyboard_modifier_keys = KEY_ALT;
 150               		.loc 2 512 0
 151 002e 84E0      		ldi r24,lo8(4)
 152 0030 8093 0000 		sts keyboard_modifier_keys,r24
 513:catboard.c    **** 		keyboard_keys[0] = 0;
 153               		.loc 2 513 0
 154 0034 1092 0000 		sts keyboard_keys,__zero_reg__
 514:catboard.c    **** 		usb_keyboard_send();
 155               		.loc 2 514 0
 156 0038 0E94 0000 		call usb_keyboard_send
 157               	.LVL7:
 158               	.LBB33:
 159               	.LBB34:
 160               		.loc 3 164 0
 161 003c 2FEF      		ldi r18,lo8(159999)
 162 003e 80E7      		ldi r24,hi8(159999)
 163 0040 92E0      		ldi r25,hlo8(159999)
 164 0042 2150      		1: subi r18,1
 165 0044 8040      		sbci r24,0
 166 0046 9040      		sbci r25,0
 167 0048 01F4      		brne 1b
 168 004a 00C0      		rjmp .
 169 004c 0000      		nop
 170               	.LBE34:
 171               	.LBE33:
 515:catboard.c    **** 		_delay_ms(50);
 516:catboard.c    **** 		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 172               		.loc 2 516 0
 173 004e 66E0      		ldi r22,lo8(6)
 174 0050 80E0      		ldi r24,0
 175               	.LVL8:
 176               	.L20:
 177 0052 0C94 0000 		jmp usb_keyboard_press
 178               	.LVL9:
 179               	.LFE15:
 181               		.section	.text.get_code,"ax",@progbits
 182               	.global	get_code
 184               	get_code:
 185               	.LFB17:
 517:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_CTRL_SHIFT) { // Press Ctrl+Shift
 518:catboard.c    **** 		keyboard_modifier_keys = KEY_CTRL;
 519:catboard.c    **** 		keyboard_keys[0] = 0;
 520:catboard.c    **** 		usb_keyboard_send();
 521:catboard.c    **** 		_delay_ms(50);
 522:catboard.c    **** 		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
 523:catboard.c    **** 	}
 524:catboard.c    **** }
 525:catboard.c    **** 
 526:catboard.c    **** void send(void) {
 527:catboard.c    **** 	uint8_t i;
 528:catboard.c    **** 	for (i=0; i<6; i++) {
 529:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 530:catboard.c    **** 	}
 531:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 532:catboard.c    **** 	usb_keyboard_send();
 533:catboard.c    **** }
 534:catboard.c    **** 
 535:catboard.c    **** uint8_t get_code(uint8_t key_id) {
 186               		.loc 2 535 0
 187               	.LVL10:
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 0 */
 191               	.L__stack_usage = 0
 536:catboard.c    **** 	uint8_t key_code = 0;
 537:catboard.c    **** 	if (key_id<KEYS) { // not 0xFF
 192               		.loc 2 537 0
 193 0000 8C33      		cpi r24,lo8(60)
 194 0002 00F4      		brsh .L26
 195               	.LVL11:
 196               	.LBB37:
 197               	.LBB38:
 538:catboard.c    **** 		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 198               		.loc 2 538 0
 199 0004 282F      		mov r18,r24
 200 0006 30E0      		ldi r19,0
 201 0008 F901      		movw r30,r18
 202 000a E050      		subi r30,lo8(-(pressed))
 203 000c F040      		sbci r31,hi8(-(pressed))
 204 000e 9081      		ld r25,Z
 205 0010 9130      		cpi r25,lo8(1)
 206 0012 01F4      		brne .L23
 539:catboard.c    **** 			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 207               		.loc 2 539 0
 208 0014 F901      		movw r30,r18
 209 0016 E050      		subi r30,lo8(-(layer_fn))
 210 0018 F040      		sbci r31,hi8(-(layer_fn))
 211 001a 8081      		ld r24,Z
 212               	.LVL12:
 213 001c 1816      		cp __zero_reg__,r24
 214 001e 04F0      		brlt .L22
 215 0020 00C0      		rjmp .L26
 216               	.L23:
 540:catboard.c    **** 				key_code = layer_fn[key_id];
 541:catboard.c    **** 			}
 542:catboard.c    **** 		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from la
 217               		.loc 2 542 0
 218 0022 4091 0000 		lds r20,layout
 219 0026 5091 0000 		lds r21,layout+1
 220 002a 60E0      		ldi r22,hi8(layer_fn)
 221 002c 4030      		cpi r20,lo8(layer_fn)
 222 002e 5607      		cpc r21,r22
 223 0030 01F0      		breq .L25
 224 0032 9230      		cpi r25,lo8(2)
 225 0034 01F4      		brne .L25
 543:catboard.c    **** 			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 226               		.loc 2 543 0
 227 0036 F901      		movw r30,r18
 228 0038 E050      		subi r30,lo8(-(layer1))
 229 003a F040      		sbci r31,hi8(-(layer1))
 230 003c 00C0      		rjmp .L30
 231               	.L25:
 544:catboard.c    **** 		} else {
 545:catboard.c    **** 			key_code = layout[key_id];
 232               		.loc 2 545 0
 233 003e FA01      		movw r30,r20
 234 0040 E80F      		add r30,r24
 235 0042 F11D      		adc r31,__zero_reg__
 236               	.L30:
 237 0044 8081      		ld r24,Z
 238               	.LVL13:
 239 0046 0895      		ret
 240               	.LVL14:
 241               	.L26:
 242               	.LBE38:
 243               	.LBE37:
 536:catboard.c    **** 	uint8_t key_code = 0;
 244               		.loc 2 536 0
 245 0048 80E0      		ldi r24,0
 246               	.L22:
 247               	.LVL15:
 546:catboard.c    **** 		}
 547:catboard.c    **** 	}
 548:catboard.c    **** 	return key_code;
 549:catboard.c    **** }
 248               		.loc 2 549 0
 249 004a 0895      		ret
 250               	.LFE17:
 252               		.section	.text.send,"ax",@progbits
 253               	.global	send
 255               	send:
 256               	.LFB16:
 526:catboard.c    **** void send(void) {
 257               		.loc 2 526 0
 258 0000 0F93      		push r16
 259               	.LCFI0:
 260 0002 1F93      		push r17
 261               	.LCFI1:
 262 0004 CF93      		push r28
 263               	.LCFI2:
 264 0006 DF93      		push r29
 265               	.LCFI3:
 266               	/* prologue: function */
 267               	/* frame size = 0 */
 268               	/* stack size = 4 */
 269               	.L__stack_usage = 4
 270               	.LVL16:
 271 0008 C0E0      		ldi r28,lo8(queue)
 272 000a D0E0      		ldi r29,hi8(queue)
 273 000c 00E0      		ldi r16,lo8(keyboard_keys)
 274 000e 10E0      		ldi r17,hi8(keyboard_keys)
 275               	.LVL17:
 276               	.L32:
 529:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 277               		.loc 2 529 0 discriminator 2
 278 0010 8991      		ld r24,Y+
 279 0012 0E94 0000 		call get_code
 280               	.LVL18:
 281 0016 F801      		movw r30,r16
 282 0018 8193      		st Z+,r24
 283 001a 8F01      		movw r16,r30
 528:catboard.c    **** 	for (i=0; i<6; i++) {
 284               		.loc 2 528 0 discriminator 2
 285 001c F0E0      		ldi r31,hi8(queue+6)
 286 001e C030      		cpi r28,lo8(queue+6)
 287 0020 DF07      		cpc r29,r31
 288 0022 01F4      		brne .L32
 531:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 289               		.loc 2 531 0
 290 0024 8091 0000 		lds r24,mod_keys
 291 0028 8093 0000 		sts keyboard_modifier_keys,r24
 292               	/* epilogue start */
 533:catboard.c    **** }
 293               		.loc 2 533 0
 294 002c DF91      		pop r29
 295 002e CF91      		pop r28
 296 0030 1F91      		pop r17
 297 0032 0F91      		pop r16
 532:catboard.c    **** 	usb_keyboard_send();
 298               		.loc 2 532 0
 299 0034 0C94 0000 		jmp usb_keyboard_send
 300               	.LVL19:
 301               	.LFE16:
 303               		.section	.text.key_release,"ax",@progbits
 304               	.global	key_release
 306               	key_release:
 307               	.LFB14:
 401:catboard.c    **** void key_release(uint8_t key_id) {
 308               		.loc 2 401 0
 309               	.LVL20:
 310 0000 CF93      		push r28
 311               	.LCFI4:
 312 0002 DF93      		push r29
 313               	.LCFI5:
 314               	/* prologue: function */
 315               	/* frame size = 0 */
 316               	/* stack size = 2 */
 317               	.L__stack_usage = 2
 318 0004 D82F      		mov r29,r24
 403:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 319               		.loc 2 403 0
 320 0006 282F      		mov r18,r24
 321 0008 30E0      		ldi r19,0
 322 000a F901      		movw r30,r18
 323 000c E050      		subi r30,lo8(-(pressed))
 324 000e F040      		sbci r31,hi8(-(pressed))
 325 0010 C081      		ld r28,Z
 326               	.LVL21:
 404:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 327               		.loc 2 404 0
 328 0012 C130      		cpi r28,lo8(1)
 329 0014 01F4      		brne .L35
 404:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 330               		.loc 2 404 0 is_stmt 0 discriminator 1
 331 0016 F901      		movw r30,r18
 332 0018 E050      		subi r30,lo8(-(layer_fn))
 333 001a F040      		sbci r31,hi8(-(layer_fn))
 334 001c 00C0      		rjmp .L110
 335               	.L35:
 404:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 336               		.loc 2 404 0 discriminator 2
 337 001e E091 0000 		lds r30,layout
 338 0022 F091 0000 		lds r31,layout+1
 339 0026 E20F      		add r30,r18
 340 0028 F31F      		adc r31,r19
 341 002a 9081      		ld r25,Z
 342               	.LVL22:
 405:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 343               		.loc 2 405 0 is_stmt 1 discriminator 2
 344 002c C630      		cpi r28,lo8(6)
 345 002e 01F4      		brne .L36
 405:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 346               		.loc 2 405 0 is_stmt 0 discriminator 1
 347 0030 4091 0000 		lds r20,prev_layer
 348 0034 5091 0000 		lds r21,prev_layer+1
 349 0038 4115      		cp r20,__zero_reg__
 350 003a 5105      		cpc r21,__zero_reg__
 351 003c 01F0      		breq .L36
 406:catboard.c    **** 		key_code = prev_layer[key_id];
 352               		.loc 2 406 0 is_stmt 1
 353 003e FA01      		movw r30,r20
 354 0040 E20F      		add r30,r18
 355 0042 F31F      		adc r31,r19
 356               	.LVL23:
 357               	.L110:
 358 0044 9081      		ld r25,Z
 359               	.LVL24:
 360               	.L36:
 408:catboard.c    **** 	pressed[key_id] = 0;
 361               		.loc 2 408 0
 362 0046 F901      		movw r30,r18
 363 0048 E050      		subi r30,lo8(-(pressed))
 364 004a F040      		sbci r31,hi8(-(pressed))
 365 004c 1082      		st Z,__zero_reg__
 409:catboard.c    **** 	if (locked) return;
 366               		.loc 2 409 0
 367 004e 8091 0000 		lds r24,locked
 368               	.LVL25:
 369 0052 8111      		cpse r24,__zero_reg__
 370 0054 00C0      		rjmp .L34
 410:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys release
 371               		.loc 2 410 0
 372 0056 913F      		cpi r25,lo8(-15)
 373 0058 00F4      		brsh .+2
 374 005a 00C0      		rjmp .L38
 411:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 375               		.loc 2 411 0
 376 005c 9D3F      		cpi r25,lo8(-3)
 377 005e 01F4      		brne .L39
 411:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 378               		.loc 2 411 0 is_stmt 0 discriminator 1
 379 0060 C330      		cpi r28,lo8(3)
 380 0062 01F4      		brne .+2
 381 0064 00C0      		rjmp .L34
 412:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 382               		.loc 2 412 0 is_stmt 1
 383 0066 8091 0000 		lds r24,mod_keys
 384 006a 8B7F      		andi r24,lo8(-5)
 385 006c 00C0      		rjmp .L111
 386               	.L39:
 414:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 387               		.loc 2 414 0
 388 006e 913F      		cpi r25,lo8(-15)
 389 0070 01F0      		breq .+2
 390 0072 00C0      		rjmp .L40
 391 0074 8091 0000 		lds r24,mod_keys
 414:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 392               		.loc 2 414 0 is_stmt 0 discriminator 1
 393 0078 C530      		cpi r28,lo8(5)
 394 007a 01F4      		brne .L41
 415:catboard.c    **** 			mod_keys &= ~(KEY_CTRL);
 395               		.loc 2 415 0 is_stmt 1
 396 007c 8E7F      		andi r24,lo8(-2)
 397 007e 00C0      		rjmp .L111
 398               	.L41:
 418:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 399               		.loc 2 418 0
 400 0080 8D7F      		andi r24,lo8(-3)
 401 0082 8093 0000 		sts mod_keys,r24
 419:catboard.c    **** 			send();
 402               		.loc 2 419 0
 403 0086 0E94 0000 		call send
 404               	.LVL26:
 420:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 405               		.loc 2 420 0
 406 008a 8091 0000 		lds r24,last_key
 407 008e 8D13      		cpse r24,r29
 408 0090 00C0      		rjmp .L53
 420:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 409               		.loc 2 420 0 is_stmt 0 discriminator 1
 410 0092 8091 0000 		lds r24,press_time
 411 0096 9091 0000 		lds r25,press_time+1
 412 009a 0097      		sbiw r24,0
 413 009c 01F4      		brne .+2
 414 009e 00C0      		rjmp .L53
 415 00a0 C297      		sbiw r24,50
 416 00a2 00F0      		brlo .+2
 417 00a4 00C0      		rjmp .L53
 418 00a6 C430      		cpi r28,lo8(4)
 419 00a8 01F4      		brne .+2
 420 00aa 00C0      		rjmp .L53
 421:catboard.c    **** 				if (layout!=layer1) {
 421               		.loc 2 421 0 is_stmt 1
 422 00ac 8091 0000 		lds r24,layout
 423 00b0 9091 0000 		lds r25,layout+1
 424 00b4 20E0      		ldi r18,hi8(layer1)
 425 00b6 8030      		cpi r24,lo8(layer1)
 426 00b8 9207      		cpc r25,r18
 427 00ba 01F4      		brne .+2
 428 00bc 00C0      		rjmp .L53
 429               	.LBB39:
 422:catboard.c    **** 					if (layout==layer_fn) {
 430               		.loc 2 422 0
 431 00be 8050      		subi r24,lo8(layer_fn)
 432 00c0 9040      		sbci r25,hi8(layer_fn)
 433 00c2 01F4      		brne .L45
 423:catboard.c    **** 						prev_layer = layer1;
 434               		.loc 2 423 0
 435 00c4 80E0      		ldi r24,lo8(layer1)
 436 00c6 90E0      		ldi r25,hi8(layer1)
 437 00c8 9093 0000 		sts prev_layer+1,r25
 438 00cc 8093 0000 		sts prev_layer,r24
 439 00d0 00C0      		rjmp .L46
 440               	.L45:
 425:catboard.c    **** 						layout = layer1;
 441               		.loc 2 425 0
 442 00d2 80E0      		ldi r24,lo8(layer1)
 443 00d4 90E0      		ldi r25,hi8(layer1)
 444 00d6 9093 0000 		sts layout+1,r25
 445 00da 8093 0000 		sts layout,r24
 446               	.L46:
 427:catboard.c    **** 					change_layout();
 447               		.loc 2 427 0
 448 00de 0E94 0000 		call change_layout
 449               	.LVL27:
 429:catboard.c    **** 					LED_RED_OFF;
 450               		.loc 2 429 0
 451 00e2 469A      		sbi 0x8,6
 430:catboard.c    **** 					if (led) LED_BLUE_ON;
 452               		.loc 2 430 0
 453 00e4 8091 0000 		lds r24,led
 454 00e8 8823      		tst r24
 455 00ea 01F4      		brne .+2
 456 00ec 00C0      		rjmp .L53
 430:catboard.c    **** 					if (led) LED_BLUE_ON;
 457               		.loc 2 430 0 is_stmt 0 discriminator 1
 458 00ee 599A      		sbi 0xb,1
 459 00f0 00C0      		rjmp .L53
 460               	.LVL28:
 461               	.L40:
 462               	.LBE39:
 438:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // LAYER2
 463               		.loc 2 438 0 is_stmt 1
 464 00f2 923F      		cpi r25,lo8(-14)
 465 00f4 01F4      		brne .L47
 439:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 466               		.loc 2 439 0
 467 00f6 8091 0000 		lds r24,mod_keys
 468 00fa 8F7D      		andi r24,lo8(-33)
 469 00fc 8093 0000 		sts mod_keys,r24
 440:catboard.c    **** 			send();
 470               		.loc 2 440 0
 471 0100 0E94 0000 		call send
 472               	.LVL29:
 441:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 473               		.loc 2 441 0
 474 0104 8091 0000 		lds r24,last_key
 475 0108 8D13      		cpse r24,r29
 476 010a 00C0      		rjmp .L53
 441:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 477               		.loc 2 441 0 is_stmt 0 discriminator 1
 478 010c 8091 0000 		lds r24,press_time
 479 0110 9091 0000 		lds r25,press_time+1
 480 0114 0097      		sbiw r24,0
 481 0116 01F4      		brne .+2
 482 0118 00C0      		rjmp .L53
 483 011a C297      		sbiw r24,50
 484 011c 00F0      		brlo .+2
 485 011e 00C0      		rjmp .L53
 486 0120 C430      		cpi r28,lo8(4)
 487 0122 01F4      		brne .+2
 488 0124 00C0      		rjmp .L53
 442:catboard.c    **** 				if (layout!=layer2) {
 489               		.loc 2 442 0 is_stmt 1
 490 0126 8091 0000 		lds r24,layout
 491 012a 9091 0000 		lds r25,layout+1
 492 012e 20E0      		ldi r18,hi8(layer2)
 493 0130 8030      		cpi r24,lo8(layer2)
 494 0132 9207      		cpc r25,r18
 495 0134 01F0      		breq .L53
 496               	.LBB40:
 443:catboard.c    **** 					if (layout==layer_fn) {
 497               		.loc 2 443 0
 498 0136 8050      		subi r24,lo8(layer_fn)
 499 0138 9040      		sbci r25,hi8(layer_fn)
 500 013a 01F4      		brne .L51
 444:catboard.c    **** 						prev_layer = layer2;
 501               		.loc 2 444 0
 502 013c 80E0      		ldi r24,lo8(layer2)
 503 013e 90E0      		ldi r25,hi8(layer2)
 504 0140 9093 0000 		sts prev_layer+1,r25
 505 0144 8093 0000 		sts prev_layer,r24
 506 0148 00C0      		rjmp .L52
 507               	.L51:
 446:catboard.c    **** 						layout = layer2;
 508               		.loc 2 446 0
 509 014a 80E0      		ldi r24,lo8(layer2)
 510 014c 90E0      		ldi r25,hi8(layer2)
 511 014e 9093 0000 		sts layout+1,r25
 512 0152 8093 0000 		sts layout,r24
 513               	.L52:
 448:catboard.c    **** 					change_layout();
 514               		.loc 2 448 0
 515 0156 0E94 0000 		call change_layout
 516               	.LVL30:
 450:catboard.c    **** 					LED_BLUE_OFF;
 517               		.loc 2 450 0
 518 015a 5998      		cbi 0xb,1
 451:catboard.c    **** 					if (led) LED_RED_ON;
 519               		.loc 2 451 0
 520 015c 8091 0000 		lds r24,led
 521 0160 8823      		tst r24
 522 0162 01F0      		breq .L53
 451:catboard.c    **** 					if (led) LED_RED_ON;
 523               		.loc 2 451 0 is_stmt 0 discriminator 1
 524 0164 4698      		cbi 0x8,6
 525 0166 00C0      		rjmp .L53
 526               	.LVL31:
 527               	.L47:
 528               	.LBE40:
 459:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 529               		.loc 2 459 0 is_stmt 1
 530 0168 933F      		cpi r25,lo8(-13)
 531 016a 01F0      		breq .+2
 532 016c 00C0      		rjmp .L34
 460:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 533               		.loc 2 460 0
 534 016e 8091 0000 		lds r24,mod_keys
 535 0172 8D7F      		andi r24,lo8(-3)
 536 0174 8093 0000 		sts mod_keys,r24
 461:catboard.c    **** 			send();
 537               		.loc 2 461 0
 538 0178 0E94 0000 		call send
 539               	.LVL32:
 462:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 540               		.loc 2 462 0
 541 017c 8091 0000 		lds r24,last_key
 542 0180 8D13      		cpse r24,r29
 543 0182 00C0      		rjmp .L53
 462:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 544               		.loc 2 462 0 is_stmt 0 discriminator 1
 545 0184 8091 0000 		lds r24,press_time
 546 0188 9091 0000 		lds r25,press_time+1
 547 018c 0097      		sbiw r24,0
 548 018e 01F0      		breq .L53
 549 0190 C297      		sbiw r24,50
 550 0192 00F4      		brsh .L53
 551 0194 C230      		cpi r28,lo8(2)
 552 0196 01F0      		breq .L53
 553 0198 8091 0000 		lds r24,mod_keys
 554 019c 8111      		cpse r24,__zero_reg__
 555 019e 00C0      		rjmp .L53
 463:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 556               		.loc 2 463 0 is_stmt 1
 557 01a0 60E0      		ldi r22,0
 558 01a2 8CE2      		ldi r24,lo8(44)
 559 01a4 0E94 0000 		call usb_keyboard_press
 560               	.LVL33:
 561               	.L53:
 465:catboard.c    **** 			last_key = 0xFF;
 562               		.loc 2 465 0
 563 01a8 8FEF      		ldi r24,lo8(-1)
 564 01aa 8093 0000 		sts last_key,r24
 565 01ae 00C0      		rjmp .L65
 566               	.LVL34:
 567               	.L38:
 471:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys release
 568               		.loc 2 471 0
 569 01b0 97FF      		sbrs r25,7
 570 01b2 00C0      		rjmp .L54
 472:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 571               		.loc 2 472 0
 572 01b4 8091 0000 		lds r24,mac_mode
 573 01b8 8823      		tst r24
 574 01ba 01F0      		breq .L55
 472:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 575               		.loc 2 472 0 is_stmt 0 discriminator 1
 576 01bc 9138      		cpi r25,lo8(-127)
 577 01be 01F4      		brne .L56
 473:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 578               		.loc 2 473 0 is_stmt 1
 579 01c0 8091 0000 		lds r24,mod_keys
 580 01c4 877F      		andi r24,lo8(-9)
 581 01c6 00C0      		rjmp .L111
 582               	.L56:
 474:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 583               		.loc 2 474 0 discriminator 1
 584 01c8 9039      		cpi r25,lo8(-112)
 585 01ca 01F0      		breq .L58
 586               	.L55:
 474:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 587               		.loc 2 474 0 is_stmt 0 discriminator 2
 588 01cc 9038      		cpi r25,lo8(-128)
 589 01ce 01F4      		brne .L59
 590               	.L58:
 475:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 591               		.loc 2 475 0 is_stmt 1
 592 01d0 8091 0000 		lds r24,mod_keys
 593 01d4 8F77      		andi r24,lo8(127)
 594 01d6 00C0      		rjmp .L111
 595               	.L59:
 477:catboard.c    **** 			mod_keys &= ~(key_code & 0x7F);
 596               		.loc 2 477 0
 597 01d8 9F77      		andi r25,lo8(127)
 598               	.LVL35:
 599 01da 9095      		com r25
 600 01dc 8091 0000 		lds r24,mod_keys
 601 01e0 8923      		and r24,r25
 602               	.L111:
 603 01e2 8093 0000 		sts mod_keys,r24
 604               	/* epilogue start */
 502:catboard.c    **** }
 605               		.loc 2 502 0
 606 01e6 DF91      		pop r29
 607 01e8 CF91      		pop r28
 608               	.LVL36:
 479:catboard.c    **** 		send();
 609               		.loc 2 479 0
 610 01ea 0C94 0000 		jmp send
 611               	.LVL37:
 612               	.L54:
 613 01ee E0E0      		ldi r30,lo8(queue)
 614 01f0 F0E0      		ldi r31,hi8(queue)
 471:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys release
 615               		.loc 2 471 0
 616 01f2 90E0      		ldi r25,0
 617               	.LVL38:
 618               	.L62:
 482:catboard.c    **** 			if (queue[i]==key_id) {
 619               		.loc 2 482 0
 620 01f4 8191      		ld r24,Z+
 621 01f6 8D17      		cp r24,r29
 622 01f8 01F0      		breq .L109
 481:catboard.c    **** 		for (i=0; i<6; i++) {
 623               		.loc 2 481 0
 624 01fa 9F5F      		subi r25,lo8(-(1))
 625               	.LVL39:
 626 01fc 9630      		cpi r25,lo8(6)
 627 01fe 01F4      		brne .L62
 628 0200 00C0      		rjmp .L109
 629               	.L64:
 487:catboard.c    **** 			queue[i] = queue[i+1];
 630               		.loc 2 487 0 discriminator 2
 631 0202 E92F      		mov r30,r25
 632 0204 F0E0      		ldi r31,0
 633 0206 E050      		subi r30,lo8(-(queue))
 634 0208 F040      		sbci r31,hi8(-(queue))
 635 020a 8181      		ldd r24,Z+1
 636 020c 8083      		st Z,r24
 486:catboard.c    **** 		for (; i<6; i++) {
 637               		.loc 2 486 0 discriminator 2
 638 020e 9F5F      		subi r25,lo8(-(1))
 639               	.LVL40:
 640               	.L109:
 486:catboard.c    **** 		for (; i<6; i++) {
 641               		.loc 2 486 0 is_stmt 0 discriminator 1
 642 0210 9630      		cpi r25,lo8(6)
 643 0212 01F4      		brne .L64
 489:catboard.c    **** 		send();
 644               		.loc 2 489 0 is_stmt 1
 645 0214 0E94 0000 		call send
 646               	.LVL41:
 491:catboard.c    **** 		if (last_key==key_id) { // realise time
 647               		.loc 2 491 0
 648 0218 8091 0000 		lds r24,last_key
 649 021c 8D13      		cpse r24,r29
 650 021e 00C0      		rjmp .L65
 492:catboard.c    **** 			press_time2 = 0;
 651               		.loc 2 492 0
 652 0220 1092 0000 		sts press_time2+1,__zero_reg__
 653 0224 1092 0000 		sts press_time2,__zero_reg__
 493:catboard.c    **** 			release_time = 1;
 654               		.loc 2 493 0
 655 0228 81E0      		ldi r24,lo8(1)
 656 022a 90E0      		ldi r25,0
 657 022c 9093 0000 		sts release_time+1,r25
 658 0230 8093 0000 		sts release_time,r24
 659 0234 00C0      		rjmp .L112
 660               	.L65:
 496:catboard.c    **** 			press_time = 0;
 661               		.loc 2 496 0
 662 0236 1092 0000 		sts press_time+1,__zero_reg__
 663 023a 1092 0000 		sts press_time,__zero_reg__
 497:catboard.c    **** 			press_time2 = 0;
 664               		.loc 2 497 0
 665 023e 1092 0000 		sts press_time2+1,__zero_reg__
 666 0242 1092 0000 		sts press_time2,__zero_reg__
 498:catboard.c    **** 			release_time = 0;
 667               		.loc 2 498 0
 668 0246 1092 0000 		sts release_time+1,__zero_reg__
 669 024a 1092 0000 		sts release_time,__zero_reg__
 670               	.L112:
 499:catboard.c    **** 			repeat_time = 0;
 671               		.loc 2 499 0
 672 024e 1092 0000 		sts repeat_time+1,__zero_reg__
 673 0252 1092 0000 		sts repeat_time,__zero_reg__
 674               	.L34:
 675               	/* epilogue start */
 502:catboard.c    **** }
 676               		.loc 2 502 0
 677 0256 DF91      		pop r29
 678               	.LVL42:
 679 0258 CF91      		pop r28
 680               	.LVL43:
 681 025a 0895      		ret
 682               	.LFE14:
 684               		.section	.text.key_press,"ax",@progbits
 685               	.global	key_press
 687               	key_press:
 688               	.LFB13:
 269:catboard.c    **** void key_press(uint8_t key_id) {
 689               		.loc 2 269 0
 690               	.LVL44:
 691 0000 CF93      		push r28
 692               	.LCFI6:
 693               	/* prologue: function */
 694               	/* frame size = 0 */
 695               	/* stack size = 1 */
 696               	.L__stack_usage = 1
 697 0002 C82F      		mov r28,r24
 271:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 698               		.loc 2 271 0
 699 0004 6091 0000 		lds r22,mod_keys
 700 0008 962F      		mov r25,r22
 701 000a 9D7D      		andi r25,lo8(-35)
 702               	.LVL45:
 272:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 703               		.loc 2 272 0
 704 000c 282F      		mov r18,r24
 705 000e 30E0      		ldi r19,0
 706 0010 8091 0000 		lds r24,pressed+39
 707               	.LVL46:
 708 0014 8111      		cpse r24,__zero_reg__
 709 0016 00C0      		rjmp .L168
 272:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 710               		.loc 2 272 0 is_stmt 0 discriminator 1
 711 0018 9923      		tst r25
 712 001a 01F0      		breq .L169
 272:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 713               		.loc 2 272 0
 714 001c 82E0      		ldi r24,lo8(2)
 715 001e 00C0      		rjmp .L114
 716               	.L168:
 717 0020 81E0      		ldi r24,lo8(1)
 718 0022 00C0      		rjmp .L114
 719               	.L169:
 720 0024 8FEF      		ldi r24,lo8(-1)
 721               	.L114:
 272:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 722               		.loc 2 272 0 discriminator 6
 723 0026 F901      		movw r30,r18
 724 0028 E050      		subi r30,lo8(-(pressed))
 725 002a F040      		sbci r31,hi8(-(pressed))
 726 002c 8083      		st Z,r24
 274:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 727               		.loc 2 274 0 is_stmt 1 discriminator 6
 728 002e 8130      		cpi r24,lo8(1)
 729 0030 01F4      		brne .L115
 274:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 730               		.loc 2 274 0 is_stmt 0 discriminator 1
 731 0032 F901      		movw r30,r18
 732 0034 E050      		subi r30,lo8(-(layer_fn))
 733 0036 F040      		sbci r31,hi8(-(layer_fn))
 734 0038 00C0      		rjmp .L218
 735               	.L115:
 274:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 736               		.loc 2 274 0 discriminator 2
 737 003a E091 0000 		lds r30,layout
 738 003e F091 0000 		lds r31,layout+1
 739 0042 EC0F      		add r30,r28
 740 0044 F11D      		adc r31,__zero_reg__
 741               	.L218:
 742 0046 8081      		ld r24,Z
 743               	.LVL47:
 275:catboard.c    **** 	if (key_code==NULL) {
 744               		.loc 2 275 0 is_stmt 1 discriminator 2
 745 0048 8111      		cpse r24,__zero_reg__
 746 004a 00C0      		rjmp .L117
 276:catboard.c    **** 		key_code = layout[key_id];
 747               		.loc 2 276 0
 748 004c 4C2F      		mov r20,r28
 749 004e 50E0      		ldi r21,0
 750 0050 E091 0000 		lds r30,layout
 751 0054 F091 0000 		lds r31,layout+1
 752 0058 E40F      		add r30,r20
 753 005a F51F      		adc r31,r21
 754 005c 8081      		ld r24,Z
 755               	.LVL48:
 277:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 756               		.loc 2 277 0
 757 005e 9923      		tst r25
 758 0060 01F0      		breq .L170
 759 0062 92E0      		ldi r25,lo8(2)
 760               	.LVL49:
 761 0064 00C0      		rjmp .L118
 762               	.LVL50:
 763               	.L170:
 764 0066 9FEF      		ldi r25,lo8(-1)
 765               	.LVL51:
 766               	.L118:
 277:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 767               		.loc 2 277 0 is_stmt 0 discriminator 3
 768 0068 F901      		movw r30,r18
 769 006a E050      		subi r30,lo8(-(pressed))
 770 006c F040      		sbci r31,hi8(-(pressed))
 771 006e 9083      		st Z,r25
 278:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 772               		.loc 2 278 0 is_stmt 1 discriminator 3
 773 0070 8111      		cpse r24,__zero_reg__
 774 0072 00C0      		rjmp .L117
 278:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 775               		.loc 2 278 0 is_stmt 0 discriminator 1
 776 0074 A091 0000 		lds r26,prev_layer
 777 0078 B091 0000 		lds r27,prev_layer+1
 778 007c 1097      		sbiw r26,0
 779 007e 01F0      		breq .L117
 780 0080 6111      		cpse r22,__zero_reg__
 781 0082 00C0      		rjmp .L117
 279:catboard.c    **** 			key_code = prev_layer[key_id];
 782               		.loc 2 279 0 is_stmt 1
 783 0084 A40F      		add r26,r20
 784 0086 B51F      		adc r27,r21
 785 0088 8C91      		ld r24,X
 786               	.LVL52:
 280:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 787               		.loc 2 280 0
 788 008a 96E0      		ldi r25,lo8(6)
 789 008c 9083      		st Z,r25
 790               	.L117:
 284:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 791               		.loc 2 284 0
 792 008e 9091 0000 		lds r25,locked
 793 0092 9923      		tst r25
 794 0094 01F0      		breq .L119
 284:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 795               		.loc 2 284 0 is_stmt 0 discriminator 1
 796 0096 8A3F      		cpi r24,lo8(-6)
 797 0098 01F0      		breq .+2
 798 009a 00C0      		rjmp .L113
 799 009c 00C0      		rjmp .L216
 800               	.L119:
 286:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys
 801               		.loc 2 286 0 is_stmt 1
 802 009e 813F      		cpi r24,lo8(-15)
 803 00a0 00F4      		brsh .+2
 804 00a2 00C0      		rjmp .L122
 287:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 805               		.loc 2 287 0
 806 00a4 8D3F      		cpi r24,lo8(-3)
 807 00a6 01F4      		brne .L123
 288:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 808               		.loc 2 288 0
 809 00a8 F901      		movw r30,r18
 810 00aa E050      		subi r30,lo8(-(pressed))
 811 00ac F040      		sbci r31,hi8(-(pressed))
 812 00ae 8081      		ld r24,Z
 813               	.LVL53:
 814 00b0 8130      		cpi r24,lo8(1)
 815 00b2 01F4      		brne .L124
 289:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 816               		.loc 2 289 0
 817 00b4 64E0      		ldi r22,lo8(4)
 818               	.LVL54:
 819 00b6 8BE2      		ldi r24,lo8(43)
 820 00b8 00C0      		rjmp .L221
 821               	.LVL55:
 822               	.L124:
 291:catboard.c    **** 				if (! mod_keys) {
 823               		.loc 2 291 0
 824 00ba 6111      		cpse r22,__zero_reg__
 825 00bc 00C0      		rjmp .L126
 292:catboard.c    **** 					mod_keys |= (KEY_ALT);
 826               		.loc 2 292 0
 827 00be 84E0      		ldi r24,lo8(4)
 828 00c0 8093 0000 		sts mod_keys,r24
 829 00c4 00C0      		rjmp .L127
 830               	.L126:
 294:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 831               		.loc 2 294 0
 832 00c6 83E0      		ldi r24,lo8(3)
 833 00c8 8083      		st Z,r24
 834               	.L127:
 296:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 835               		.loc 2 296 0
 836 00ca 8091 0000 		lds r24,mod_keys
 837 00ce 8093 0000 		sts keyboard_modifier_keys,r24
 297:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 838               		.loc 2 297 0
 839 00d2 8BE2      		ldi r24,lo8(43)
 840 00d4 8093 0000 		sts keyboard_keys,r24
 298:catboard.c    **** 				usb_keyboard_send();
 841               		.loc 2 298 0
 842 00d8 0E94 0000 		call usb_keyboard_send
 843               	.LVL56:
 844               	.LBB41:
 845               	.LBB42:
 846               		.loc 3 164 0
 847 00dc 2FEF      		ldi r18,lo8(159999)
 848 00de 80E7      		ldi r24,hi8(159999)
 849 00e0 92E0      		ldi r25,hlo8(159999)
 850 00e2 2150      		1: subi r18,1
 851 00e4 8040      		sbci r24,0
 852 00e6 9040      		sbci r25,0
 853 00e8 01F4      		brne 1b
 854 00ea 00C0      		rjmp .
 855 00ec 0000      		nop
 856 00ee 00C0      		rjmp .L220
 857               	.LVL57:
 858               	.L123:
 859               	.LBE42:
 860               	.LBE41:
 302:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 861               		.loc 2 302 0
 862 00f0 8E3F      		cpi r24,lo8(-2)
 863 00f2 01F4      		brne .L128
 303:catboard.c    **** 			if (prev_layer) { // FnLock Off
 864               		.loc 2 303 0
 865 00f4 2091 0000 		lds r18,prev_layer
 866 00f8 3091 0000 		lds r19,prev_layer+1
 867               	.LVL58:
 868 00fc 2115      		cp r18,__zero_reg__
 869 00fe 3105      		cpc r19,__zero_reg__
 870 0100 01F0      		breq .L129
 304:catboard.c    **** 				layout = prev_layer;
 871               		.loc 2 304 0
 872 0102 3093 0000 		sts layout+1,r19
 873 0106 2093 0000 		sts layout,r18
 305:catboard.c    **** 				prev_layer = 0;
 874               		.loc 2 305 0
 875 010a 1092 0000 		sts prev_layer+1,__zero_reg__
 876 010e 1092 0000 		sts prev_layer,__zero_reg__
 877 0112 00C0      		rjmp .L130
 878               	.L129:
 307:catboard.c    **** 				prev_layer = layout;
 879               		.loc 2 307 0
 880 0114 8091 0000 		lds r24,layout
 881 0118 9091 0000 		lds r25,layout+1
 882               	.LVL59:
 883 011c 9093 0000 		sts prev_layer+1,r25
 884 0120 8093 0000 		sts prev_layer,r24
 308:catboard.c    **** 				layout = layer_fnlock;
 885               		.loc 2 308 0
 886 0124 20E0      		ldi r18,lo8(layer_fnlock)
 887 0126 30E0      		ldi r19,hi8(layer_fnlock)
 888 0128 3093 0000 		sts layout+1,r19
 889 012c 2093 0000 		sts layout,r18
 890               	.L130:
 310:catboard.c    **** 			if (prev_layer || mac_mode) {
 891               		.loc 2 310 0
 892 0130 2091 0000 		lds r18,prev_layer
 893 0134 3091 0000 		lds r19,prev_layer+1
 894 0138 232B      		or r18,r19
 895 013a 01F4      		brne .L137
 310:catboard.c    **** 			if (prev_layer || mac_mode) {
 896               		.loc 2 310 0 is_stmt 0 discriminator 1
 897 013c 8091 0000 		lds r24,mac_mode
 898 0140 8823      		tst r24
 899 0142 01F0      		breq .L138
 900 0144 00C0      		rjmp .L137
 901               	.LVL60:
 902               	.L128:
 315:catboard.c    **** 		} else if (key_code==KEY_MAC_MODE) { // Mac mode
 903               		.loc 2 315 0 is_stmt 1
 904 0146 8C3F      		cpi r24,lo8(-4)
 905 0148 01F4      		brne .L134
 316:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 906               		.loc 2 316 0
 907 014a F901      		movw r30,r18
 908 014c E050      		subi r30,lo8(-(pressed))
 909 014e F040      		sbci r31,hi8(-(pressed))
 910 0150 8081      		ld r24,Z
 911               	.LVL61:
 912 0152 8130      		cpi r24,lo8(1)
 913 0154 01F4      		brne .L135
 316:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 914               		.loc 2 316 0 is_stmt 0 discriminator 1
 915 0156 862F      		mov r24,r22
 916 0158 8272      		andi r24,lo8(34)
 917 015a 01F0      		breq .L135
 317:catboard.c    **** 				mac_mode = ! mac_mode;
 918               		.loc 2 317 0 is_stmt 1
 919 015c 81E0      		ldi r24,lo8(1)
 920 015e 9091 0000 		lds r25,mac_mode
 921 0162 9111      		cpse r25,__zero_reg__
 922 0164 80E0      		ldi r24,0
 923               	.L136:
 924 0166 8093 0000 		sts mac_mode,r24
 318:catboard.c    **** 				if (mac_mode || prev_layer) {
 925               		.loc 2 318 0
 926 016a 8111      		cpse r24,__zero_reg__
 927 016c 00C0      		rjmp .L137
 318:catboard.c    **** 				if (mac_mode || prev_layer) {
 928               		.loc 2 318 0 is_stmt 0 discriminator 1
 929 016e 2091 0000 		lds r18,prev_layer
 930 0172 3091 0000 		lds r19,prev_layer+1
 931               	.LVL62:
 932 0176 232B      		or r18,r19
 933 0178 01F0      		breq .L138
 934               	.L137:
 319:catboard.c    **** 					if (led) LED_ON;
 935               		.loc 2 319 0 is_stmt 1
 936 017a 8091 0000 		lds r24,led
 937 017e 00C0      		rjmp .L224
 938               	.L138:
 321:catboard.c    **** 					LED_OFF;
 939               		.loc 2 321 0
 940 0180 5E9A      		sbi 0xb,6
 941 0182 00C0      		rjmp .L125
 942               	.LVL63:
 943               	.L135:
 324:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 944               		.loc 2 324 0
 945 0184 8CE2      		ldi r24,lo8(44)
 946               	.LVL64:
 947               	.L221:
 948 0186 0E94 0000 		call usb_keyboard_press
 949               	.LVL65:
 950 018a 00C0      		rjmp .L125
 951               	.LVL66:
 952               	.L134:
 326:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 953               		.loc 2 326 0
 954 018c 813F      		cpi r24,lo8(-15)
 955 018e 01F4      		brne .L140
 327:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 956               		.loc 2 327 0
 957 0190 862F      		mov r24,r22
 958               	.LVL67:
 959 0192 8272      		andi r24,lo8(34)
 960 0194 01F0      		breq .L141
 328:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 961               		.loc 2 328 0
 962 0196 F901      		movw r30,r18
 963 0198 E050      		subi r30,lo8(-(pressed))
 964 019a F040      		sbci r31,hi8(-(pressed))
 965 019c 85E0      		ldi r24,lo8(5)
 966 019e 8083      		st Z,r24
 329:catboard.c    **** 				mod_keys |= KEY_CTRL;
 967               		.loc 2 329 0
 968 01a0 6160      		ori r22,lo8(1)
 969               	.LVL68:
 970 01a2 00C0      		rjmp .L228
 971               	.LVL69:
 972               	.L141:
 332:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 973               		.loc 2 332 0
 974 01a4 6623      		tst r22
 975 01a6 01F0      		breq .L229
 332:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 976               		.loc 2 332 0 is_stmt 0 discriminator 1
 977 01a8 F901      		movw r30,r18
 978 01aa E050      		subi r30,lo8(-(pressed))
 979 01ac F040      		sbci r31,hi8(-(pressed))
 980 01ae 84E0      		ldi r24,lo8(4)
 981 01b0 8083      		st Z,r24
 982 01b2 00C0      		rjmp .L229
 983               	.LVL70:
 984               	.L140:
 336:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 985               		.loc 2 336 0 is_stmt 1
 986 01b4 823F      		cpi r24,lo8(-14)
 987 01b6 01F4      		brne .L143
 337:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 988               		.loc 2 337 0
 989 01b8 6062      		ori r22,lo8(32)
 990               	.LVL71:
 991 01ba 00C0      		rjmp .L228
 992               	.LVL72:
 993               	.L143:
 339:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 994               		.loc 2 339 0
 995 01bc 8B3F      		cpi r24,lo8(-5)
 996 01be 01F4      		brne .L144
 340:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 997               		.loc 2 340 0
 998 01c0 81E0      		ldi r24,lo8(1)
 999               	.LVL73:
 1000 01c2 9091 0000 		lds r25,turbo_repeat
 1001 01c6 9111      		cpse r25,__zero_reg__
 1002 01c8 80E0      		ldi r24,0
 1003               	.L145:
 1004 01ca 8093 0000 		sts turbo_repeat,r24
 1005 01ce 00C0      		rjmp .L125
 1006               	.LVL74:
 1007               	.L144:
 341:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 1008               		.loc 2 341 0
 1009 01d0 833F      		cpi r24,lo8(-13)
 1010 01d2 01F4      		brne .L146
 1011               	.LVL75:
 1012               	.L229:
 342:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 1013               		.loc 2 342 0
 1014 01d4 6260      		ori r22,lo8(2)
 1015               	.LVL76:
 1016               	.L228:
 1017 01d6 6093 0000 		sts mod_keys,r22
 1018 01da 00C0      		rjmp .L220
 1019               	.LVL77:
 1020               	.L146:
 344:catboard.c    **** 		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
 1021               		.loc 2 344 0
 1022 01dc 8A3F      		cpi r24,lo8(-6)
 1023 01de 01F4      		brne .L217
 1024 01e0 00C0      		rjmp .L147
 1025               	.L216:
 346:catboard.c    **** 				locked = 0;
 1026               		.loc 2 346 0
 1027 01e2 1092 0000 		sts locked,__zero_reg__
 347:catboard.c    **** 				if (led) {
 1028               		.loc 2 347 0
 1029 01e6 8091 0000 		lds r24,led
 1030               	.LVL78:
 1031 01ea 8823      		tst r24
 1032 01ec 01F4      		brne .+2
 1033 01ee 00C0      		rjmp .L125
 1034 01f0 00C0      		rjmp .L234
 1035               	.LVL79:
 1036               	.L147:
 353:catboard.c    **** 				locked = 1;
 1037               		.loc 2 353 0
 1038 01f2 81E0      		ldi r24,lo8(1)
 1039               	.LVL80:
 1040 01f4 8093 0000 		sts locked,r24
 354:catboard.c    **** 				LED_OFF;
 1041               		.loc 2 354 0
 1042 01f8 5E9A      		sbi 0xb,6
 355:catboard.c    **** 				LED_RED_OFF;
 1043               		.loc 2 355 0
 1044 01fa 469A      		sbi 0x8,6
 356:catboard.c    **** 				LED_BLUE_OFF;
 1045               		.loc 2 356 0
 1046 01fc 5998      		cbi 0xb,1
 357:catboard.c    **** 				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
 1047               		.loc 2 357 0
 1048 01fe 68E0      		ldi r22,lo8(8)
 1049               	.LVL81:
 1050 0200 8FE0      		ldi r24,lo8(15)
 1051 0202 00C0      		rjmp .L221
 1052               	.LVL82:
 1053               	.L217:
 359:catboard.c    **** 		} else if (key_code==KEY_LED) { // LED On/Off
 1054               		.loc 2 359 0
 1055 0204 893F      		cpi r24,lo8(-7)
 1056 0206 01F0      		breq .+2
 1057 0208 00C0      		rjmp .L125
 360:catboard.c    **** 			if (led) {
 1058               		.loc 2 360 0
 1059 020a 8091 0000 		lds r24,led
 1060               	.LVL83:
 1061 020e 8823      		tst r24
 1062 0210 01F0      		breq .L154
 361:catboard.c    **** 				led = 0;
 1063               		.loc 2 361 0
 1064 0212 1092 0000 		sts led,__zero_reg__
 362:catboard.c    **** 				LED_OFF;
 1065               		.loc 2 362 0
 1066 0216 5E9A      		sbi 0xb,6
 363:catboard.c    **** 				LED_RED_OFF;
 1067               		.loc 2 363 0
 1068 0218 469A      		sbi 0x8,6
 364:catboard.c    **** 				LED_BLUE_OFF;
 1069               		.loc 2 364 0
 1070 021a 5998      		cbi 0xb,1
 1071 021c 00C0      		rjmp .L125
 1072               	.L154:
 366:catboard.c    **** 				led = 1;
 1073               		.loc 2 366 0
 1074 021e 81E0      		ldi r24,lo8(1)
 1075 0220 8093 0000 		sts led,r24
 1076               	.L234:
 367:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 1077               		.loc 2 367 0
 1078 0224 4091 0000 		lds r20,layout
 1079 0228 5091 0000 		lds r21,layout+1
 1080 022c 2091 0000 		lds r18,prev_layer
 1081 0230 3091 0000 		lds r19,prev_layer+1
 1082               	.LVL84:
 1083 0234 80E0      		ldi r24,hi8(layer1)
 1084 0236 4030      		cpi r20,lo8(layer1)
 1085 0238 5807      		cpc r21,r24
 1086 023a 01F0      		breq .L155
 367:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 1087               		.loc 2 367 0 is_stmt 0 discriminator 2
 1088 023c 90E0      		ldi r25,hi8(layer1)
 1089 023e 2030      		cpi r18,lo8(layer1)
 1090 0240 3907      		cpc r19,r25
 1091 0242 01F4      		brne .L156
 1092               	.L155:
 367:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 1093               		.loc 2 367 0 discriminator 1
 1094 0244 599A      		sbi 0xb,1
 1095               	.L156:
 368:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 1096               		.loc 2 368 0 is_stmt 1
 1097 0246 4050      		subi r20,lo8(layer2)
 1098 0248 5040      		sbci r21,hi8(layer2)
 1099 024a 01F0      		breq .L157
 368:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 1100               		.loc 2 368 0 is_stmt 0 discriminator 2
 1101 024c 2050      		subi r18,lo8(layer2)
 1102 024e 3040      		sbci r19,hi8(layer2)
 1103 0250 01F4      		brne .L158
 1104               	.L157:
 368:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 1105               		.loc 2 368 0 discriminator 1
 1106 0252 4698      		cbi 0x8,6
 1107               	.L158:
 369:catboard.c    **** 				if (prev_layer || mac_mode) LED_ON;
 1108               		.loc 2 369 0 is_stmt 1
 1109 0254 2091 0000 		lds r18,prev_layer
 1110 0258 3091 0000 		lds r19,prev_layer+1
 1111 025c 232B      		or r18,r19
 1112 025e 01F4      		brne .L159
 369:catboard.c    **** 				if (prev_layer || mac_mode) LED_ON;
 1113               		.loc 2 369 0 is_stmt 0 discriminator 2
 1114 0260 8091 0000 		lds r24,mac_mode
 1115               	.L224:
 1116 0264 8823      		tst r24
 1117 0266 01F0      		breq .L125
 1118               	.L159:
 369:catboard.c    **** 				if (prev_layer || mac_mode) LED_ON;
 1119               		.loc 2 369 0 discriminator 1
 1120 0268 5E98      		cbi 0xb,6
 1121 026a 00C0      		rjmp .L125
 1122               	.LVL85:
 1123               	.L122:
 372:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys
 1124               		.loc 2 372 0 is_stmt 1
 1125 026c 87FF      		sbrs r24,7
 1126 026e 00C0      		rjmp .L160
 373:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 1127               		.loc 2 373 0
 1128 0270 9091 0000 		lds r25,mac_mode
 1129 0274 9923      		tst r25
 1130 0276 01F0      		breq .L161
 373:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 1131               		.loc 2 373 0 is_stmt 0 discriminator 1
 1132 0278 8138      		cpi r24,lo8(-127)
 1133 027a 01F4      		brne .L162
 374:catboard.c    **** 			mod_keys |= KEY_GUI;
 1134               		.loc 2 374 0 is_stmt 1
 1135 027c 6860      		ori r22,lo8(8)
 1136               	.LVL86:
 1137 027e 00C0      		rjmp .L228
 1138               	.LVL87:
 1139               	.L162:
 375:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 1140               		.loc 2 375 0 discriminator 1
 1141 0280 8039      		cpi r24,lo8(-112)
 1142 0282 01F0      		breq .L164
 1143               	.L161:
 375:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 1144               		.loc 2 375 0 is_stmt 0 discriminator 2
 1145 0284 8038      		cpi r24,lo8(-128)
 1146 0286 01F4      		brne .L165
 1147               	.L164:
 376:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 1148               		.loc 2 376 0 is_stmt 1
 1149 0288 6068      		ori r22,lo8(-128)
 1150               	.LVL88:
 1151 028a 00C0      		rjmp .L228
 1152               	.LVL89:
 1153               	.L165:
 378:catboard.c    **** 			mod_keys |= (key_code & 0x7F);
 1154               		.loc 2 378 0
 1155 028c 8F77      		andi r24,lo8(127)
 1156               	.LVL90:
 1157 028e 862B      		or r24,r22
 1158 0290 8093 0000 		sts mod_keys,r24
 1159 0294 00C0      		rjmp .L220
 1160               	.LVL91:
 1161               	.L160:
 382:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 1162               		.loc 2 382 0
 1163 0296 8091 0000 		lds r24,last_key
 1164               	.LVL92:
 1165 029a 8C13      		cpse r24,r28
 1166 029c 00C0      		rjmp .L166
 382:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 1167               		.loc 2 382 0 is_stmt 0 discriminator 1
 1168 029e 2091 0000 		lds r18,release_time
 1169 02a2 3091 0000 		lds r19,release_time+1
 1170               	.LVL93:
 1171 02a6 2A30      		cpi r18,10
 1172 02a8 3105      		cpc r19,__zero_reg__
 1173 02aa 00F0      		brlo .L125
 1174               	.L166:
 1175               	.LVL94:
 383:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 1176               		.loc 2 383 0 is_stmt 1 discriminator 1
 1177 02ac 8091 0000 		lds r24,queue+4
 1178 02b0 8093 0000 		sts queue+5,r24
 1179               	.LVL95:
 1180 02b4 8091 0000 		lds r24,queue+3
 1181 02b8 8093 0000 		sts queue+4,r24
 1182               	.LVL96:
 1183 02bc 8091 0000 		lds r24,queue+2
 1184 02c0 8093 0000 		sts queue+3,r24
 1185               	.LVL97:
 1186 02c4 8091 0000 		lds r24,queue+1
 1187 02c8 8093 0000 		sts queue+2,r24
 1188               	.LVL98:
 1189 02cc 8091 0000 		lds r24,queue
 1190 02d0 8093 0000 		sts queue+1,r24
 1191               	.LVL99:
 384:catboard.c    **** 			queue[0] = key_id;
 1192               		.loc 2 384 0 discriminator 1
 1193 02d4 C093 0000 		sts queue,r28
 1194               	.LVL100:
 1195               	.L220:
 385:catboard.c    **** 			send();
 1196               		.loc 2 385 0 discriminator 1
 1197 02d8 0E94 0000 		call send
 1198               	.LVL101:
 1199               	.L125:
 389:catboard.c    **** 	if (last_key==key_id) { // calc press2
 1200               		.loc 2 389 0
 1201 02dc 8091 0000 		lds r24,last_key
 1202 02e0 8C13      		cpse r24,r28
 1203 02e2 00C0      		rjmp .L167
 390:catboard.c    **** 		press_time2 = 1;
 1204               		.loc 2 390 0
 1205 02e4 81E0      		ldi r24,lo8(1)
 1206 02e6 90E0      		ldi r25,0
 1207 02e8 9093 0000 		sts press_time2+1,r25
 1208 02ec 8093 0000 		sts press_time2,r24
 1209 02f0 00C0      		rjmp .L222
 1210               	.L167:
 393:catboard.c    **** 		last_key = key_id;
 1211               		.loc 2 393 0
 1212 02f2 C093 0000 		sts last_key,r28
 394:catboard.c    **** 		press_time = 1;
 1213               		.loc 2 394 0
 1214 02f6 81E0      		ldi r24,lo8(1)
 1215 02f8 90E0      		ldi r25,0
 1216 02fa 9093 0000 		sts press_time+1,r25
 1217 02fe 8093 0000 		sts press_time,r24
 395:catboard.c    **** 		press_time2 = 0;
 1218               		.loc 2 395 0
 1219 0302 1092 0000 		sts press_time2+1,__zero_reg__
 1220 0306 1092 0000 		sts press_time2,__zero_reg__
 396:catboard.c    **** 		release_time = 0;
 1221               		.loc 2 396 0
 1222 030a 1092 0000 		sts release_time+1,__zero_reg__
 1223 030e 1092 0000 		sts release_time,__zero_reg__
 1224               	.L222:
 397:catboard.c    **** 		repeat_time = 0;
 1225               		.loc 2 397 0
 1226 0312 1092 0000 		sts repeat_time+1,__zero_reg__
 1227 0316 1092 0000 		sts repeat_time,__zero_reg__
 1228               	.L113:
 1229               	/* epilogue start */
 399:catboard.c    **** }
 1230               		.loc 2 399 0
 1231 031a CF91      		pop r28
 1232               	.LVL102:
 1233 031c 0895      		ret
 1234               	.LFE13:
 1236               		.section	.text.repeat_tick,"ax",@progbits
 1237               	.global	repeat_tick
 1239               	repeat_tick:
 1240               	.LFB12:
 229:catboard.c    **** void repeat_tick(void) {
 1241               		.loc 2 229 0
 1242               	/* prologue: function */
 1243               	/* frame size = 0 */
 1244               	/* stack size = 0 */
 1245               	.L__stack_usage = 0
 230:catboard.c    **** 	if (repeat_time) { // repeat pause
 1246               		.loc 2 230 0
 1247 0000 8091 0000 		lds r24,repeat_time
 1248 0004 9091 0000 		lds r25,repeat_time+1
 1249 0008 0097      		sbiw r24,0
 1250 000a 01F0      		breq .L236
 231:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 1251               		.loc 2 231 0
 1252 000c 2091 0000 		lds r18,release_time
 1253 0010 3091 0000 		lds r19,release_time+1
 1254 0014 3695      		lsr r19
 1255 0016 2795      		ror r18
 1256 0018 3695      		lsr r19
 1257 001a 2795      		ror r18
 1258 001c 8217      		cp r24,r18
 1259 001e 9307      		cpc r25,r19
 1260 0020 00F4      		brsh .L237
 232:catboard.c    **** 			repeat_time++;
 1261               		.loc 2 232 0
 1262 0022 0196      		adiw r24,1
 1263 0024 00C0      		rjmp .L251
 1264               	.L237:
 234:catboard.c    **** 			repeat_time = 1;
 1265               		.loc 2 234 0
 1266 0026 81E0      		ldi r24,lo8(1)
 1267 0028 90E0      		ldi r25,0
 1268 002a 9093 0000 		sts repeat_time+1,r25
 1269 002e 8093 0000 		sts repeat_time,r24
 235:catboard.c    **** 			if (turbo_repeat) {
 1270               		.loc 2 235 0
 1271 0032 8091 0000 		lds r24,turbo_repeat
 1272 0036 8823      		tst r24
 1273 0038 01F4      		brne .+2
 1274 003a 00C0      		rjmp .L235
 236:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 1275               		.loc 2 236 0
 1276 003c 8091 0000 		lds r24,mod_keys
 1277 0040 8093 0000 		sts keyboard_modifier_keys,r24
 237:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 1278               		.loc 2 237 0
 1279 0044 8091 0000 		lds r24,last_key
 1280 0048 0E94 0000 		call get_code
 1281               	.LVL103:
 1282 004c 8093 0000 		sts keyboard_keys,r24
 238:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 1283               		.loc 2 238 0
 1284 0050 0E94 0000 		call usb_keyboard_send
 1285               	.LVL104:
 1286 0054 8111      		cpse r24,__zero_reg__
 1287 0056 00C0      		rjmp .L235
 239:catboard.c    **** 					keyboard_keys[0] = 0;
 1288               		.loc 2 239 0
 1289 0058 1092 0000 		sts keyboard_keys,__zero_reg__
 240:catboard.c    **** 					usb_keyboard_send();
 1290               		.loc 2 240 0
 1291 005c 0C94 0000 		jmp usb_keyboard_send
 1292               	.LVL105:
 1293               	.L236:
 244:catboard.c    **** 	} else if (press_time2) { // press2 pause
 1294               		.loc 2 244 0
 1295 0060 2091 0000 		lds r18,press_time2
 1296 0064 3091 0000 		lds r19,press_time2+1
 1297 0068 8091 0000 		lds r24,press_time
 1298 006c 9091 0000 		lds r25,press_time+1
 1299 0070 2115      		cp r18,__zero_reg__
 1300 0072 3105      		cpc r19,__zero_reg__
 1301 0074 01F0      		breq .L241
 245:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 1302               		.loc 2 245 0
 1303 0076 4091 0000 		lds r20,pressed+39
 1304 007a 4423      		tst r20
 1305 007c 01F0      		breq .L247
 1306 007e 45E0      		ldi r20,lo8(5)
 1307 0080 50E0      		ldi r21,0
 1308 0082 00C0      		rjmp .L242
 1309               	.L247:
 1310 0084 4EE1      		ldi r20,lo8(30)
 1311 0086 50E0      		ldi r21,0
 1312               	.L242:
 245:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 1313               		.loc 2 245 0 is_stmt 0 discriminator 3
 1314 0088 840F      		add r24,r20
 1315 008a 951F      		adc r25,r21
 1316 008c 2817      		cp r18,r24
 1317 008e 3907      		cpc r19,r25
 1318 0090 00F4      		brsh .L243
 246:catboard.c    **** 			press_time2++;
 1319               		.loc 2 246 0 is_stmt 1
 1320 0092 2F5F      		subi r18,-1
 1321 0094 3F4F      		sbci r19,-1
 1322 0096 3093 0000 		sts press_time2+1,r19
 1323 009a 2093 0000 		sts press_time2,r18
 1324 009e 0895      		ret
 1325               	.L243:
 248:catboard.c    **** 			repeat_time = 1;
 1326               		.loc 2 248 0
 1327 00a0 81E0      		ldi r24,lo8(1)
 1328 00a2 90E0      		ldi r25,0
 1329               	.L251:
 1330 00a4 9093 0000 		sts repeat_time+1,r25
 1331 00a8 8093 0000 		sts repeat_time,r24
 1332 00ac 0895      		ret
 1333               	.L241:
 250:catboard.c    **** 	} else if (release_time) { // release pause
 1334               		.loc 2 250 0
 1335 00ae 2091 0000 		lds r18,release_time
 1336 00b2 3091 0000 		lds r19,release_time+1
 1337 00b6 2115      		cp r18,__zero_reg__
 1338 00b8 3105      		cpc r19,__zero_reg__
 1339 00ba 01F0      		breq .L244
 251:catboard.c    **** 		if (release_time<(press_time+50)) {
 1340               		.loc 2 251 0
 1341 00bc C296      		adiw r24,50
 1342 00be 2817      		cp r18,r24
 1343 00c0 3907      		cpc r19,r25
 1344 00c2 00F4      		brsh .L245
 252:catboard.c    **** 			release_time++;
 1345               		.loc 2 252 0
 1346 00c4 2F5F      		subi r18,-1
 1347 00c6 3F4F      		sbci r19,-1
 1348 00c8 3093 0000 		sts release_time+1,r19
 1349 00cc 2093 0000 		sts release_time,r18
 1350 00d0 0895      		ret
 1351               	.L245:
 254:catboard.c    **** 			last_key = 0xFF;
 1352               		.loc 2 254 0
 1353 00d2 8FEF      		ldi r24,lo8(-1)
 1354 00d4 8093 0000 		sts last_key,r24
 255:catboard.c    **** 			release_time = 0;
 1355               		.loc 2 255 0
 1356 00d8 1092 0000 		sts release_time+1,__zero_reg__
 1357 00dc 1092 0000 		sts release_time,__zero_reg__
 256:catboard.c    **** 			press_time = 0;
 1358               		.loc 2 256 0
 1359 00e0 1092 0000 		sts press_time+1,__zero_reg__
 1360 00e4 1092 0000 		sts press_time,__zero_reg__
 257:catboard.c    **** 			press_time2 = 0;
 1361               		.loc 2 257 0
 1362 00e8 1092 0000 		sts press_time2+1,__zero_reg__
 1363 00ec 1092 0000 		sts press_time2,__zero_reg__
 1364 00f0 0895      		ret
 1365               	.L244:
 260:catboard.c    **** 	} else if (press_time) { // press1 pause
 1366               		.loc 2 260 0
 1367 00f2 0097      		sbiw r24,0
 1368 00f4 01F0      		breq .L235
 261:catboard.c    **** 		if (press_time<250) {
 1369               		.loc 2 261 0
 1370 00f6 8A3F      		cpi r24,-6
 1371 00f8 9105      		cpc r25,__zero_reg__
 1372 00fa 00F4      		brsh .L246
 262:catboard.c    **** 			press_time++;
 1373               		.loc 2 262 0
 1374 00fc 0196      		adiw r24,1
 1375 00fe 9093 0000 		sts press_time+1,r25
 1376 0102 8093 0000 		sts press_time,r24
 1377 0106 0895      		ret
 1378               	.L246:
 264:catboard.c    **** 			press_time = 0;
 1379               		.loc 2 264 0
 1380 0108 1092 0000 		sts press_time+1,__zero_reg__
 1381 010c 1092 0000 		sts press_time,__zero_reg__
 1382               	.L235:
 1383 0110 0895      		ret
 1384               	.LFE12:
 1386               		.section	.text.poll,"ax",@progbits
 1387               	.global	poll
 1389               	poll:
 1390               	.LFB11:
 208:catboard.c    **** void poll() {
 1391               		.loc 2 208 0
 1392 0000 7F92      		push r7
 1393               	.LCFI7:
 1394 0002 8F92      		push r8
 1395               	.LCFI8:
 1396 0004 9F92      		push r9
 1397               	.LCFI9:
 1398 0006 AF92      		push r10
 1399               	.LCFI10:
 1400 0008 BF92      		push r11
 1401               	.LCFI11:
 1402 000a CF92      		push r12
 1403               	.LCFI12:
 1404 000c DF92      		push r13
 1405               	.LCFI13:
 1406 000e EF92      		push r14
 1407               	.LCFI14:
 1408 0010 FF92      		push r15
 1409               	.LCFI15:
 1410 0012 0F93      		push r16
 1411               	.LCFI16:
 1412 0014 1F93      		push r17
 1413               	.LCFI17:
 1414 0016 CF93      		push r28
 1415               	.LCFI18:
 1416 0018 DF93      		push r29
 1417               	.LCFI19:
 1418               	/* prologue: function */
 1419               	/* frame size = 0 */
 1420               	/* stack size = 13 */
 1421               	.L__stack_usage = 13
 1422               	.LVL106:
 1423 001a 70E0      		ldi r23,lo8(row_port)
 1424 001c E72E      		mov r14,r23
 1425 001e 70E0      		ldi r23,hi8(row_port)
 1426 0020 F72E      		mov r15,r23
 1427 0022 00E0      		ldi r16,lo8(row_bit)
 1428 0024 10E0      		ldi r17,hi8(row_bit)
 210:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1429               		.loc 2 210 0
 1430 0026 912C      		mov r9,__zero_reg__
 1431               	.LVL107:
 1432               	.L256:
 211:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 1433               		.loc 2 211 0
 1434 0028 D701      		movw r26,r14
 1435 002a CD91      		ld r28,X+
 1436 002c DD91      		ld r29,X+
 1437 002e 7D01      		movw r14,r26
 1438 0030 F801      		movw r30,r16
 1439 0032 7190      		ld r7,Z+
 1440 0034 8F01      		movw r16,r30
 1441 0036 972D      		mov r25,r7
 1442 0038 9095      		com r25
 1443 003a 8881      		ld r24,Y
 1444 003c 8923      		and r24,r25
 1445 003e 8883      		st Y,r24
 1446               	.LVL108:
 1447               	.LBB43:
 1448               	.LBB44:
 165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #else
 167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	{
 172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		{
 176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		}
 180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		return;
 181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	}
 182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	else
 183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
 186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** }
 187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /**
 189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   
 207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  
 214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  */
 223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** void
 224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** {
 226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#else
 242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//round up by default
 243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#endif
 245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1449               		.loc 3 246 0
 1450 0040 F5E0      		ldi r31,lo8(5)
 1451 0042 FA95      		1: dec r31
 1452 0044 01F4      		brne 1b
 1453 0046 0000      		nop
 1454               	.LVL109:
 1455 0048 50E0      		ldi r21,lo8(col_pin)
 1456 004a C52E      		mov r12,r21
 1457 004c 50E0      		ldi r21,hi8(col_pin)
 1458 004e D52E      		mov r13,r21
 1459 0050 60E0      		ldi r22,lo8(col_bit)
 1460 0052 A62E      		mov r10,r22
 1461 0054 60E0      		ldi r22,hi8(col_bit)
 1462 0056 B62E      		mov r11,r22
 1463 0058 812C      		mov r8,__zero_reg__
 1464               	.LVL110:
 1465               	.L255:
 1466               	.LBE44:
 1467               	.LBE43:
 214:catboard.c    **** 			key_id = col*ROWS+row;
 1468               		.loc 2 214 0
 1469 005a 882D      		mov r24,r8
 1470 005c 890D      		add r24,r9
 1471               	.LVL111:
 215:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1472               		.loc 2 215 0
 1473 005e D601      		movw r26,r12
 1474 0060 ED91      		ld r30,X+
 1475 0062 FD91      		ld r31,X+
 1476 0064 6D01      		movw r12,r26
 1477 0066 D501      		movw r26,r10
 1478 0068 9D91      		ld r25,X+
 1479 006a 5D01      		movw r10,r26
 1480 006c 2081      		ld r18,Z
 1481 006e 9223      		and r25,r18
 1482 0070 282F      		mov r18,r24
 1483 0072 30E0      		ldi r19,0
 216:catboard.c    **** 				if (! pressed[key_id]) {
 1484               		.loc 2 216 0
 1485 0074 F901      		movw r30,r18
 1486 0076 E050      		subi r30,lo8(-(pressed))
 1487 0078 F040      		sbci r31,hi8(-(pressed))
 215:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1488               		.loc 2 215 0
 1489 007a 9111      		cpse r25,__zero_reg__
 1490 007c 00C0      		rjmp .L253
 216:catboard.c    **** 				if (! pressed[key_id]) {
 1491               		.loc 2 216 0
 1492 007e 9081      		ld r25,Z
 1493 0080 9111      		cpse r25,__zero_reg__
 1494 0082 00C0      		rjmp .L254
 217:catboard.c    **** 					key_press(key_id);
 1495               		.loc 2 217 0
 1496 0084 0E94 0000 		call key_press
 1497               	.LVL112:
 1498 0088 00C0      		rjmp .L254
 1499               	.LVL113:
 1500               	.L253:
 219:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 1501               		.loc 2 219 0
 1502 008a 9081      		ld r25,Z
 1503 008c 9111      		cpse r25,__zero_reg__
 220:catboard.c    **** 				key_release(key_id);
 1504               		.loc 2 220 0
 1505 008e 0E94 0000 		call key_release
 1506               	.LVL114:
 1507               	.L254:
 1508 0092 B5E0      		ldi r27,lo8(5)
 1509 0094 8B0E      		add r8,r27
 1510               	.LVL115:
 213:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 1511               		.loc 2 213 0
 1512 0096 ECE3      		ldi r30,lo8(60)
 1513 0098 8E12      		cpse r8,r30
 1514 009a 00C0      		rjmp .L255
 223:catboard.c    **** 		*row_port[row] |= row_bit[row];
 1515               		.loc 2 223 0
 1516 009c 8881      		ld r24,Y
 1517 009e 8729      		or r24,r7
 1518 00a0 8883      		st Y,r24
 210:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1519               		.loc 2 210 0
 1520 00a2 9394      		inc r9
 1521               	.LVL116:
 1522 00a4 9B12      		cpse r9,r27
 1523 00a6 00C0      		rjmp .L256
 225:catboard.c    **** 	repeat_tick();
 1524               		.loc 2 225 0
 1525 00a8 0E94 0000 		call repeat_tick
 1526               	.LVL117:
 1527               	.LBB45:
 1528               	.LBB46:
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1529               		.loc 3 164 0
 1530 00ac 8FE1      		ldi r24,lo8(19999)
 1531 00ae 9EE4      		ldi r25,hi8(19999)
 1532 00b0 0197      		1: sbiw r24,1
 1533 00b2 01F4      		brne 1b
 1534 00b4 00C0      		rjmp .
 1535 00b6 0000      		nop
 1536               	/* epilogue start */
 1537               	.LBE46:
 1538               	.LBE45:
 227:catboard.c    **** }
 1539               		.loc 2 227 0
 1540 00b8 DF91      		pop r29
 1541 00ba CF91      		pop r28
 1542 00bc 1F91      		pop r17
 1543 00be 0F91      		pop r16
 1544 00c0 FF90      		pop r15
 1545 00c2 EF90      		pop r14
 1546 00c4 DF90      		pop r13
 1547 00c6 CF90      		pop r12
 1548 00c8 BF90      		pop r11
 1549 00ca AF90      		pop r10
 1550 00cc 9F90      		pop r9
 1551               	.LVL118:
 1552 00ce 8F90      		pop r8
 1553 00d0 7F90      		pop r7
 1554 00d2 0895      		ret
 1555               	.LFE11:
 1557               		.section	.text.startup.main,"ax",@progbits
 1558               	.global	main
 1560               	main:
 1561               	.LFB9:
 170:catboard.c    **** int main(void) {
 1562               		.loc 2 170 0
 1563               	/* prologue: function */
 1564               	/* frame size = 0 */
 1565               	/* stack size = 0 */
 1566               	.L__stack_usage = 0
 172:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 1567               		.loc 2 172 0
 1568 0000 84B7      		in r24,0x34
 1569 0002 877F      		andi r24,lo8(-9)
 1570 0004 84BF      		out 0x34,r24
 173:catboard.c    **** 	wdt_disable();
 1571               		.loc 2 173 0
 1572 0006 88E1      		ldi r24,lo8(24)
 1573               	/* #APP */
 1574               	 ;  173 "catboard.c" 1
 1575 0008 0FB6      		in __tmp_reg__, __SREG__
 1576 000a F894      		cli
 1577 000c 8093 6000 		sts 96, r24
 1578 0010 1092 6000 		sts 96, __zero_reg__
 1579 0014 0FBE      		out __SREG__,__tmp_reg__
 1580               		
 1581               	 ;  0 "" 2
 1582               	.LVL119:
 1583               	/* #NOAPP */
 1584               	.LBB47:
 1585               	.LBB48:
 1586               		.file 4 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h"
   1:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    All rights reserved.
   3:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
   4:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
   7:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      distribution.
  13:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  17:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  29:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  31:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  34:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  37:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  38:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \file */
  39:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  41:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  43:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** peripherals as needed.
  46:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  47:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  50:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** macros are not available.
  53:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  54:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  59:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
  60:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  61:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  62:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  64:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <small>
  66:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <center>
  67:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <table border="3">
  68:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  69:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  73:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  74:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  75:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  76:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  77:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  78:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  79:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  80:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  81:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  82:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  83:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  84:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  85:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  86:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  87:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
  88:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
  89:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  90:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  91:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  92:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  93:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
  94:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
  95:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  96:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  97:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  98:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  99:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 247:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 248:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 249:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 250:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 251:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 252:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 253:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 254:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 255:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 256:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 257:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 258:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 259:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 260:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 261:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 262:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 263:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 264:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 265:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 266:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 267:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 268:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 269:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 270:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 271:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 272:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 273:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 274:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 275:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 276:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 277:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 278:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 279:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 280:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 281:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 282:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 283:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 284:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 285:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 286:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 287:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 288:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 289:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 290:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 291:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 292:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 293:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 294:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 295:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 296:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 297:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 298:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 299:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 300:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 301:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 302:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 303:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 304:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 305:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 306:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 307:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 308:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 309:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 310:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 311:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 312:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 313:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 314:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 315:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 316:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 317:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 318:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 319:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 320:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 321:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 322:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 323:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 324:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 325:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 326:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 327:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 328:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 329:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 330:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 331:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 332:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 333:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 334:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 335:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 336:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 337:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 338:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 339:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_all_enable()</td>
 340:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable all modules.</td>
 341:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 342:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 343:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 344:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 345:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_all_disable()</td>
 346:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable all modules.</td>
 347:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 348:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 349:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </table>
 350:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </center>
 351:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </small>
 352:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 353:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** @} */
 354:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 355:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
 356:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** // Include any other device on need basis
 357:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 358:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 359:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 360:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 361:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 362:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 363:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 364:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 365:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 366:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 367:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 368:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 369:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 370:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
 371:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 372:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 373:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 374:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 375:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 376:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 377:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 378:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 379:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 380:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 381:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 382:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 383:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
 384:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
 385:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
 386:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
 387:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
 388:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
 389:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
 390:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
 391:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 392:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 393:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 394:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 395:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 396:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 397:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 398:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 399:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 400:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 401:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 402:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 403:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 404:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 405:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 406:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 407:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 408:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 409:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 410:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 411:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 412:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 413:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 414:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
 415:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 416:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 417:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
 418:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 419:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 420:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 421:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 422:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 423:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 424:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 425:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 426:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 427:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 428:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 429:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
 430:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 431:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 432:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 433:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 434:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 435:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 436:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 437:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 438:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 439:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 440:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 441:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 442:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 443:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 444:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 445:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 446:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 447:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 448:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 449:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 450:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
 451:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
 452:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
 453:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
 454:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
 455:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
 456:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
 457:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
 458:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 459:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
 460:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
 461:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
 462:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
 463:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
 464:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
 465:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
 466:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
 467:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 468:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 469:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 470:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
 471:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
 472:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
 473:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
 474:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
 475:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
 476:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 477:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 478:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 479:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
 480:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
 481:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
 482:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
 483:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
 484:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
 485:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 486:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
 487:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
 488:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
 489:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
 490:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
 491:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
 492:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
 493:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
 494:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 495:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
 496:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
 497:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
 498:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
 499:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
 500:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
 501:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
 502:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
 503:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 504:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
 505:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 506:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
 507:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 508:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 509:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 510:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
 511:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 512:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 513:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 514:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
 515:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 516:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 517:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 518:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 519:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 520:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 521:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 522:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 523:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 524:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 525:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 526:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 527:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 528:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 529:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|R_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 530:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 531:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 532:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 533:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 534:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 535:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
 536:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
 537:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
 538:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
 539:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
 540:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 541:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 542:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 543:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 544:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 545:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 546:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 547:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 548:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 549:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 550:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 551:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 552:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 553:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 554:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 555:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 556:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 557:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 558:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 559:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 560:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 561:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 562:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 563:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 564:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 565:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 566:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 567:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 568:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 569:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 570:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 571:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 572:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 573:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 574:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
 575:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
 576:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 577:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
 578:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
 579:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 580:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 581:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 582:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 583:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
 584:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 585:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 586:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 587:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 588:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 589:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
 590:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 591:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 592:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 593:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
 594:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 595:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 596:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 597:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 598:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 599:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 600:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 601:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 602:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 603:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 604:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 605:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 606:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 607:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 608:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 609:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 610:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 611:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 612:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 613:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 614:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 615:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 616:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 617:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 618:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 619:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 620:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 621:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 622:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 625:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 626:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 627:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 628:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 629:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 630:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 631:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 632:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 633:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 634:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 635:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 636:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 637:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 638:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 639:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 640:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 641:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
 642:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
 643:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
 644:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
 645:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 646:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 647:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 648:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 649:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 650:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 651:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 652:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 653:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 654:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 655:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 656:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 657:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 658:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 659:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 660:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 661:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 662:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 663:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 664:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 665:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 666:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 667:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 668:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 669:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 670:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 671:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 672:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 673:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 674:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 675:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 676:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 677:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 678:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 679:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 680:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 681:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 682:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 683:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 684:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 685:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 686:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
 687:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
 688:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 689:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 690:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 691:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 692:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 693:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 694:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 695:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 696:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 697:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 698:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 699:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 700:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 701:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 702:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 703:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 704:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 705:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 706:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 707:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 708:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 709:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 710:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 711:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 712:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 713:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 714:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 715:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 716:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 717:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 718:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 719:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 720:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 721:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 722:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
 723:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 724:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 725:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 726:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 727:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 728:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
 729:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 730:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 731:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 732:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 733:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
 734:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 735:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 736:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 737:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 738:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 739:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 740:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 741:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 742:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 743:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 744:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 745:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 746:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 747:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 748:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 749:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 750:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 751:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 752:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 753:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 754:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 755:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 756:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 757:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 758:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 759:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 760:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 761:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 762:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 763:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 764:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 765:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 766:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 767:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 768:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 769:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 770:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 771:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 772:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 773:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 774:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 775:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 776:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
 777:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 778:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 779:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 780:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 781:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 782:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 783:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 784:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 785:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 786:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 787:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 788:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 789:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 790:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 791:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 792:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 793:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 794:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 795:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 796:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 797:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 798:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 799:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 800:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 801:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 802:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
 803:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
 804:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 805:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 806:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
 807:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
 808:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
 809:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
 810:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
 811:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
 812:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 813:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 814:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 815:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 816:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 817:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 818:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 819:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 820:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 821:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 822:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 823:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 824:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 825:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 826:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 827:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 828:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 829:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 830:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 831:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 832:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 833:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 834:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 835:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 836:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 837:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 838:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 839:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 840:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
 841:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
 842:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 843:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 844:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__)
 845:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 846:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 847:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 848:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 849:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 850:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 851:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 852:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 853:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 854:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 855:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Reduced Power Stage Controller */
 856:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 857:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 858:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 859:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 860:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 861:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 862:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 863:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
 864:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
 865:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 866:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 867:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
 868:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
 869:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
 870:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
 871:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
 872:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
 873:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
 874:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
 875:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
 876:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
 877:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
 878:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
 879:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
 880:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 881:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 882:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 883:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 884:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 885:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 886:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 887:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 888:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 889:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 890:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 891:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 892:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 893:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
 894:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
 895:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 896:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 897:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
 898:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
 899:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
 900:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
 901:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
 902:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
 903:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
 904:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
 905:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
 906:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
 907:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
 908:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
 909:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
 910:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
 911:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
 912:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
 913:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
 914:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 915:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 916:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 917:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 918:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 919:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 920:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 921:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 922:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 923:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 924:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 925:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 926:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 927:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 928:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 929:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 930:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
 931:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
 932:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 933:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 934:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
 935:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
 936:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
 937:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
 938:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
 939:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
 940:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
 941:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
 942:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 943:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 944:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 945:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 946:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 947:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 948:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 949:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 950:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 951:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 952:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
 953:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
 954:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 955:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 956:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 957:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 958:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 959:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 960:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 961:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 962:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 963:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 964:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 965:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 966:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 967:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
 968:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
 969:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 970:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 971:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__)
 972:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 973:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 974:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 975:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 976:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 977:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 978:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 979:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 980:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 981:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 982:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 983:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 984:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 985:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 986:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 987:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 988:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 989:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 990:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 991:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 992:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 993:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 994:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
 995:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
 996:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 997:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 998:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
 999:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1000:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1001:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1002:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1003:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1004:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1005:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1006:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1007:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1008:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1009:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Voltage ADC */
1010:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1011:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1012:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1013:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
1014:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
1015:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1016:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1017:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
1018:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1019:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1020:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1021:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1022:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1023:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1024:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1025:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1026:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1027:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1028:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1029:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1030:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
1031:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1032:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1033:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1034:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1035:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1036:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1037:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1038:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
1039:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
1040:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1041:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1042:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1043:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1044:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1045:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1046:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1047:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
1048:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
1049:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1050:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
1051:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
1052:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1053:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
1054:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
1055:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1056:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1057:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
1058:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
1059:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
1060:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
1061:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
1062:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
1063:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
1064:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
1065:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
1066:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
1067:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
1068:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
1069:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
1070:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
1071:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
1072:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
1073:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1074:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1075:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1076:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1077:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1078:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1079:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1080:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1081:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1082:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1083:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Universal Serial Interface */
1084:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1085:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1086:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1087:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1088:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1089:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1090:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1091:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
1092:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1093:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1094:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1095:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1096:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1097:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1098:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1099:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
1119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
1120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
1125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
1131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
1135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
1138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Voltage ADC */
1150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
1157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
1158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
1160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
1161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
1164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
1168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
1185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
1186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
1188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
1189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
1191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
1192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
1195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny87__)
1196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
1217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
1218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
1221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
1225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
1245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1247:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1248:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1249:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1250:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
1251:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1252:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1253:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1254:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
1255:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1256:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1257:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1258:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1259:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1260:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1261:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1262:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1263:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1264:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1265:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1266:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1267:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1268:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1269:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1270:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1271:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1272:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1273:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1274:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
1275:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
1276:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1277:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1278:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1279:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1280:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
1281:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
1282:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1283:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
1284:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
1285:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1286:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
1287:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
1288:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1289:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
1290:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
1291:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1292:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1293:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1294:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1295:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1296:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1297:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1298:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1299:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1300:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1301:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1302:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1303:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1304:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1305:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
1306:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
1307:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
1308:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
1309:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
1310:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1311:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1312:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1313:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1314:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1315:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1316:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1317:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
1318:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
1319:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1320:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1321:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
1322:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
1323:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1324:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1325:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1326:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1327:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1328:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1329:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1330:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1331:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1332:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1333:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
1334:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
1335:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1336:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
1337:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
1338:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1339:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
1340:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
1341:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1342:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
1343:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1344:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1345:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1346:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1347:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1348:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1349:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1350:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1351:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1352:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1353:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1354:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1355:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1356:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1357:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1358:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1359:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1360:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1361:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1362:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1363:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1364:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1365:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1366:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1367:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1368:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1369:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1370:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1371:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1372:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1373:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1374:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1375:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1376:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1377:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1378:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1379:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1380:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1381:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1382:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1383:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1384:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1385:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1386:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1387:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1388:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1389:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1390:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1391:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1392:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1393:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1394:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1395:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1396:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVB__) \
1397:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1398:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1399:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__) \
1400:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1401:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1402:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1403:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1404:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1405:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1406:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1407:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1408:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1409:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1410:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1411:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1412:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1413:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1414:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1415:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1416:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1417:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1418:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1419:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1420:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1421:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1422:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1423:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1424:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1425:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1426:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1427:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1428:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1429:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1430:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__DOXYGEN__)
1431:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1432:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1433:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1434:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1435:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1436:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1437:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
1438:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
1439:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1440:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
1441:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
1442:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1443:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1444:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1445:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1446:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code 
1447:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** typedef enum
1448:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1449:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1450:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1451:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1452:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1453:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1454:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1455:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1456:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1457:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_256 = 8,
1458:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1459:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } clock_div_t;
1460:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \endcode
1461:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Clock prescaler setting enumerations.
1462:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1463:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1464:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** typedef enum
1465:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1466:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1467:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1468:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1469:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1470:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1471:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1472:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1473:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1474:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_256 = 8
1475:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__)
1476:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     , clock_div_1_rc = 15
1477:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
1478:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } clock_div_t;
1479:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1480:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1481:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1482:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1483:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1484:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1485:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1486:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1487:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1488:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** optimizations are disabled.
1489:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1490:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** The type of x is clock_div_t.
1491:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1492:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1493:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1494:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1495:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     __asm__ __volatile__ (
 1587               		.loc 4 1495 0
 1588 0016 90E0      		ldi r25,0
 1589 0018 80E8      		ldi r24,lo8(-128)
 1590               	/* #APP */
 1591               	 ;  1495 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h" 1
 1592 001a 0FB6      		in __tmp_reg__,__SREG__
 1593 001c F894      		cli
 1594 001e 8093 6100 		sts 97, r24
 1595 0022 9093 6100 		sts 97, r25
 1596 0026 0FBE      		out __SREG__, __tmp_reg__
 1597               	 ;  0 "" 2
 1598               	/* #NOAPP */
 1599               	.LBE48:
 1600               	.LBE47:
 178:catboard.c    **** 	init();
 1601               		.loc 2 178 0
 1602 0028 0E94 0000 		call init
 1603               	.LVL120:
 1604               	.L263:
 180:catboard.c    **** 		poll();
 1605               		.loc 2 180 0 discriminator 1
 1606 002c 0E94 0000 		call poll
 1607               	.LVL121:
 1608 0030 00C0      		rjmp .L263
 1609               	.LFE9:
 1611               	.global	repeat_time
 1612               		.section .bss
 1615               	repeat_time:
 1616 0000 0000      		.zero	2
 1617               	.global	release_time
 1620               	release_time:
 1621 0002 0000      		.zero	2
 1622               	.global	press_time2
 1625               	press_time2:
 1626 0004 0000      		.zero	2
 1627               	.global	press_time
 1630               	press_time:
 1631 0006 0000      		.zero	2
 1632               	.global	last_key
 1633               		.data
 1636               	last_key:
 1637 0000 FF        		.byte	-1
 1638               	.global	led
 1641               	led:
 1642 0001 01        		.byte	1
 1643               	.global	locked
 1644               		.section .bss
 1647               	locked:
 1648 0008 00        		.zero	1
 1649               	.global	turbo_repeat
 1650               		.data
 1653               	turbo_repeat:
 1654 0002 01        		.byte	1
 1655               	.global	prev_layer
 1656               		.section .bss
 1659               	prev_layer:
 1660 0009 0000      		.zero	2
 1661               	.global	mod_keys
 1664               	mod_keys:
 1665 000b 00        		.zero	1
 1666               	.global	queue
 1667               		.data
 1670               	queue:
 1671 0003 FF        		.byte	-1
 1672 0004 FF        		.byte	-1
 1673 0005 FF        		.byte	-1
 1674 0006 FF        		.byte	-1
 1675 0007 FF        		.byte	-1
 1676 0008 FF        		.byte	-1
 1677 0009 FF        		.byte	-1
 1678               		.comm	pressed,60,1
 1679               	.global	layer_fnlock
 1680               		.section	.rodata
 1683               	layer_fnlock:
 1684 0000 35        		.byte	53
 1685 0001 2B        		.byte	43
 1686 0002 90        		.byte	-112
 1687 0003 FD        		.byte	-3
 1688 0004 FB        		.byte	-5
 1689 0005 1E        		.byte	30
 1690 0006 4B        		.byte	75
 1691 0007 4E        		.byte	78
 1692 0008 88        		.byte	-120
 1693 0009 F1        		.byte	-15
 1694 000a 1F        		.byte	31
 1695 000b 4A        		.byte	74
 1696 000c 50        		.byte	80
 1697 000d 00        		.byte	0
 1698 000e 00        		.byte	0
 1699 000f 20        		.byte	32
 1700 0010 52        		.byte	82
 1701 0011 51        		.byte	81
 1702 0012 00        		.byte	0
 1703 0013 84        		.byte	-124
 1704 0014 21        		.byte	33
 1705 0015 4D        		.byte	77
 1706 0016 4F        		.byte	79
 1707 0017 00        		.byte	0
 1708 0018 81        		.byte	-127
 1709 0019 22        		.byte	34
 1710 001a 35        		.byte	53
 1711 001b 28        		.byte	40
 1712 001c 00        		.byte	0
 1713 001d F3        		.byte	-13
 1714 001e 23        		.byte	35
 1715 001f 54        		.byte	84
 1716 0020 55        		.byte	85
 1717 0021 62        		.byte	98
 1718 0022 2C        		.byte	44
 1719 0023 24        		.byte	36
 1720 0024 5F        		.byte	95
 1721 0025 5C        		.byte	92
 1722 0026 59        		.byte	89
 1723 0027 FF        		.byte	-1
 1724 0028 25        		.byte	37
 1725 0029 60        		.byte	96
 1726 002a 5D        		.byte	93
 1727 002b 5A        		.byte	90
 1728 002c C0        		.byte	-64
 1729 002d 26        		.byte	38
 1730 002e 61        		.byte	97
 1731 002f 5E        		.byte	94
 1732 0030 5B        		.byte	91
 1733 0031 00        		.byte	0
 1734 0032 27        		.byte	39
 1735 0033 56        		.byte	86
 1736 0034 57        		.byte	87
 1737 0035 63        		.byte	99
 1738 0036 F2        		.byte	-14
 1739 0037 2D        		.byte	45
 1740 0038 29        		.byte	41
 1741 0039 28        		.byte	40
 1742 003a 53        		.byte	83
 1743 003b 2E        		.byte	46
 1744               	.global	layer_fn
 1747               	layer_fn:
 1748 003c 46        		.byte	70
 1749 003d 2B        		.byte	43
 1750 003e 90        		.byte	-112
 1751 003f FD        		.byte	-3
 1752 0040 FB        		.byte	-5
 1753 0041 3A        		.byte	58
 1754 0042 00        		.byte	0
 1755 0043 00        		.byte	0
 1756 0044 88        		.byte	-120
 1757 0045 F1        		.byte	-15
 1758 0046 3B        		.byte	59
 1759 0047 00        		.byte	0
 1760 0048 00        		.byte	0
 1761 0049 00        		.byte	0
 1762 004a 00        		.byte	0
 1763 004b 3C        		.byte	60
 1764 004c 00        		.byte	0
 1765 004d 00        		.byte	0
 1766 004e 00        		.byte	0
 1767 004f 84        		.byte	-124
 1768 0050 3D        		.byte	61
 1769 0051 00        		.byte	0
 1770 0052 00        		.byte	0
 1771 0053 00        		.byte	0
 1772 0054 81        		.byte	-127
 1773 0055 3E        		.byte	62
 1774 0056 35        		.byte	53
 1775 0057 00        		.byte	0
 1776 0058 00        		.byte	0
 1777 0059 F3        		.byte	-13
 1778 005a 3F        		.byte	63
 1779 005b F9        		.byte	-7
 1780 005c 28        		.byte	40
 1781 005d 2A        		.byte	42
 1782 005e FC        		.byte	-4
 1783 005f 40        		.byte	64
 1784 0060 4A        		.byte	74
 1785 0061 50        		.byte	80
 1786 0062 4C        		.byte	76
 1787 0063 FF        		.byte	-1
 1788 0064 41        		.byte	65
 1789 0065 52        		.byte	82
 1790 0066 51        		.byte	81
 1791 0067 49        		.byte	73
 1792 0068 FE        		.byte	-2
 1793 0069 42        		.byte	66
 1794 006a 4D        		.byte	77
 1795 006b 4F        		.byte	79
 1796 006c 00        		.byte	0
 1797 006d 00        		.byte	0
 1798 006e 43        		.byte	67
 1799 006f 4B        		.byte	75
 1800 0070 4E        		.byte	78
 1801 0071 00        		.byte	0
 1802 0072 FA        		.byte	-6
 1803 0073 44        		.byte	68
 1804 0074 29        		.byte	41
 1805 0075 48        		.byte	72
 1806 0076 47        		.byte	71
 1807 0077 45        		.byte	69
 1808               	.global	layout
 1809               		.data
 1812               	layout:
 1813 000a 0000      		.word	layer2
 1814               	.global	layer1
 1815               		.section	.rodata
 1818               	layer1:
 1819 0078 35        		.byte	53
 1820 0079 2B        		.byte	43
 1821 007a 90        		.byte	-112
 1822 007b FD        		.byte	-3
 1823 007c 29        		.byte	41
 1824 007d 1E        		.byte	30
 1825 007e 14        		.byte	20
 1826 007f 04        		.byte	4
 1827 0080 88        		.byte	-120
 1828 0081 F1        		.byte	-15
 1829 0082 1F        		.byte	31
 1830 0083 1A        		.byte	26
 1831 0084 16        		.byte	22
 1832 0085 1B        		.byte	27
 1833 0086 1D        		.byte	29
 1834 0087 20        		.byte	32
 1835 0088 08        		.byte	8
 1836 0089 07        		.byte	7
 1837 008a 06        		.byte	6
 1838 008b 84        		.byte	-124
 1839 008c 21        		.byte	33
 1840 008d 15        		.byte	21
 1841 008e 09        		.byte	9
 1842 008f 19        		.byte	25
 1843 0090 81        		.byte	-127
 1844 0091 22        		.byte	34
 1845 0092 17        		.byte	23
 1846 0093 0A        		.byte	10
 1847 0094 05        		.byte	5
 1848 0095 F3        		.byte	-13
 1849 0096 23        		.byte	35
 1850 0097 1C        		.byte	28
 1851 0098 0B        		.byte	11
 1852 0099 11        		.byte	17
 1853 009a 2C        		.byte	44
 1854 009b 24        		.byte	36
 1855 009c 18        		.byte	24
 1856 009d 0D        		.byte	13
 1857 009e 10        		.byte	16
 1858 009f FF        		.byte	-1
 1859 00a0 25        		.byte	37
 1860 00a1 0C        		.byte	12
 1861 00a2 0E        		.byte	14
 1862 00a3 36        		.byte	54
 1863 00a4 C0        		.byte	-64
 1864 00a5 26        		.byte	38
 1865 00a6 12        		.byte	18
 1866 00a7 0F        		.byte	15
 1867 00a8 37        		.byte	55
 1868 00a9 38        		.byte	56
 1869 00aa 27        		.byte	39
 1870 00ab 13        		.byte	19
 1871 00ac 33        		.byte	51
 1872 00ad 31        		.byte	49
 1873 00ae F2        		.byte	-14
 1874 00af 2D        		.byte	45
 1875 00b0 2F        		.byte	47
 1876 00b1 34        		.byte	52
 1877 00b2 30        		.byte	48
 1878 00b3 2E        		.byte	46
 1879               	.global	mac_mode
 1880               		.section .bss
 1883               	mac_mode:
 1884 000c 00        		.zero	1
 1885               	.global	col_bit
 1886               		.section	.rodata
 1889               	col_bit:
 1890 00b4 08        		.byte	8
 1891 00b5 01        		.byte	1
 1892 00b6 10        		.byte	16
 1893 00b7 01        		.byte	1
 1894 00b8 04        		.byte	4
 1895 00b9 20        		.byte	32
 1896 00ba 10        		.byte	16
 1897 00bb 10        		.byte	16
 1898 00bc 04        		.byte	4
 1899 00bd 20        		.byte	32
 1900 00be 80        		.byte	-128
 1901 00bf 80        		.byte	-128
 1902               	.global	col_pin
 1905               	col_pin:
 1906 00c0 2900      		.word	41
 1907 00c2 2900      		.word	41
 1908 00c4 2900      		.word	41
 1909 00c6 2300      		.word	35
 1910 00c8 2600      		.word	38
 1911 00ca 2900      		.word	41
 1912 00cc 2300      		.word	35
 1913 00ce 2600      		.word	38
 1914 00d0 2300      		.word	35
 1915 00d2 2300      		.word	35
 1916 00d4 2600      		.word	38
 1917 00d6 2300      		.word	35
 1918               	.global	row_bit
 1921               	row_bit:
 1922 00d8 20        		.byte	32
 1923 00d9 04        		.byte	4
 1924 00da 40        		.byte	64
 1925 00db 08        		.byte	8
 1926 00dc 02        		.byte	2
 1927               	.global	row_port
 1930               	row_port:
 1931 00dd 2800      		.word	40
 1932 00df 2B00      		.word	43
 1933 00e1 2500      		.word	37
 1934 00e3 2500      		.word	37
 1935 00e5 2500      		.word	37
 1936               	.global	layer2
 1939               	layer2:
 1940 00e7 35        		.byte	53
 1941 00e8 2B        		.byte	43
 1942 00e9 90        		.byte	-112
 1943 00ea FD        		.byte	-3
 1944 00eb 29        		.byte	41
 1945 00ec 1E        		.byte	30
 1946 00ed 0D        		.byte	13
 1947 00ee 09        		.byte	9
 1948 00ef 88        		.byte	-120
 1949 00f0 F1        		.byte	-15
 1950 00f1 1F        		.byte	31
 1951 00f2 06        		.byte	6
 1952 00f3 1C        		.byte	28
 1953 00f4 38        		.byte	56
 1954 00f5 14        		.byte	20
 1955 00f6 20        		.byte	32
 1956 00f7 18        		.byte	24
 1957 00f8 1A        		.byte	26
 1958 00f9 16        		.byte	22
 1959 00fa 84        		.byte	-124
 1960 00fb 21        		.byte	33
 1961 00fc 0E        		.byte	14
 1962 00fd 04        		.byte	4
 1963 00fe 10        		.byte	16
 1964 00ff 81        		.byte	-127
 1965 0100 22        		.byte	34
 1966 0101 08        		.byte	8
 1967 0102 13        		.byte	19
 1968 0103 0C        		.byte	12
 1969 0104 F3        		.byte	-13
 1970 0105 23        		.byte	35
 1971 0106 11        		.byte	17
 1972 0107 15        		.byte	21
 1973 0108 17        		.byte	23
 1974 0109 2C        		.byte	44
 1975 010a 24        		.byte	36
 1976 010b 0A        		.byte	10
 1977 010c 12        		.byte	18
 1978 010d 1B        		.byte	27
 1979 010e FF        		.byte	-1
 1980 010f 25        		.byte	37
 1981 0110 0B        		.byte	11
 1982 0111 0F        		.byte	15
 1983 0112 05        		.byte	5
 1984 0113 C0        		.byte	-64
 1985 0114 26        		.byte	38
 1986 0115 19        		.byte	25
 1987 0116 07        		.byte	7
 1988 0117 36        		.byte	54
 1989 0118 37        		.byte	55
 1990 0119 27        		.byte	39
 1991 011a 1D        		.byte	29
 1992 011b 33        		.byte	51
 1993 011c 31        		.byte	49
 1994 011d F2        		.byte	-14
 1995 011e 2D        		.byte	45
 1996 011f 2F        		.byte	47
 1997 0120 34        		.byte	52
 1998 0121 30        		.byte	48
 1999 0122 2E        		.byte	46
 2218               	.Letext0:
 2219               		.file 5 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/stdint.h"
 2220               		.file 6 "usb_keyboard.h"
 2221               		.file 7 "jcuken.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 catboard.c
     /tmp/ccE7VnwO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccE7VnwO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccE7VnwO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccE7VnwO.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccE7VnwO.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccE7VnwO.s:12     .text.init_ports:0000000000000000 init_ports
     /tmp/ccE7VnwO.s:38     .text.init:0000000000000000 init
     /tmp/ccE7VnwO.s:1641   .data:0000000000000001 led
                            *COM*:000000000000003c pressed
     /tmp/ccE7VnwO.s:106    .text.change_layout:0000000000000000 change_layout
     /tmp/ccE7VnwO.s:1883   .bss:000000000000000c mac_mode
     /tmp/ccE7VnwO.s:184    .text.get_code:0000000000000000 get_code
     /tmp/ccE7VnwO.s:1747   .rodata:000000000000003c layer_fn
     /tmp/ccE7VnwO.s:1812   .data:000000000000000a layout
     /tmp/ccE7VnwO.s:1818   .rodata:0000000000000078 layer1
     /tmp/ccE7VnwO.s:255    .text.send:0000000000000000 send
     /tmp/ccE7VnwO.s:1670   .data:0000000000000003 queue
     /tmp/ccE7VnwO.s:1664   .bss:000000000000000b mod_keys
     /tmp/ccE7VnwO.s:306    .text.key_release:0000000000000000 key_release
     /tmp/ccE7VnwO.s:1659   .bss:0000000000000009 prev_layer
     /tmp/ccE7VnwO.s:1647   .bss:0000000000000008 locked
     /tmp/ccE7VnwO.s:1636   .data:0000000000000000 last_key
     /tmp/ccE7VnwO.s:1630   .bss:0000000000000006 press_time
     /tmp/ccE7VnwO.s:1939   .rodata:00000000000000e7 layer2
     /tmp/ccE7VnwO.s:1625   .bss:0000000000000004 press_time2
     /tmp/ccE7VnwO.s:1620   .bss:0000000000000002 release_time
     /tmp/ccE7VnwO.s:1615   .bss:0000000000000000 repeat_time
     /tmp/ccE7VnwO.s:687    .text.key_press:0000000000000000 key_press
     /tmp/ccE7VnwO.s:1683   .rodata:0000000000000000 layer_fnlock
     /tmp/ccE7VnwO.s:1653   .data:0000000000000002 turbo_repeat
     /tmp/ccE7VnwO.s:1239   .text.repeat_tick:0000000000000000 repeat_tick
     /tmp/ccE7VnwO.s:1389   .text.poll:0000000000000000 poll
     /tmp/ccE7VnwO.s:1930   .rodata:00000000000000dd row_port
     /tmp/ccE7VnwO.s:1921   .rodata:00000000000000d8 row_bit
     /tmp/ccE7VnwO.s:1905   .rodata:00000000000000c0 col_pin
     /tmp/ccE7VnwO.s:1889   .rodata:00000000000000b4 col_bit
     /tmp/ccE7VnwO.s:1560   .text.startup.main:0000000000000000 main

UNDEFINED SYMBOLS
usb_init
usb_configured
keyboard_modifier_keys
keyboard_keys
usb_keyboard_send
usb_keyboard_press
__do_copy_data
__do_clear_bss
