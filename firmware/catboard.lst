   1               		.file	"catboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.section	.text.init,"ax",@progbits
  10               	.global	init
  12               	init:
  13               	.LFB9:
  14               		.file 1 "catboard.c"
   1:catboard.c    **** /*
   2:catboard.c    **** * Project: CatBoard (http://ibnteo.klava.org/tag/catboard)
   3:catboard.c    **** * Version: 0.91 pre-release
   4:catboard.c    **** * Date: 2013-03-20
   5:catboard.c    **** * Author: Vladimir Romanovich <ibnteo@gmail.com>
   6:catboard.c    **** * License: GPL2
   7:catboard.c    **** * 
   8:catboard.c    **** * Based on: http://geekhack.org/index.php?topic=15542.0
   9:catboard.c    **** * 
  10:catboard.c    **** * Board: AVR-USB162 (http://microsin.ru/content/view/685/44/) analogue Teensy
  11:catboard.c    **** */
  12:catboard.c    **** 
  13:catboard.c    **** #include <avr/io.h>
  14:catboard.c    **** #include <avr/pgmspace.h>
  15:catboard.c    **** #include <avr/interrupt.h>
  16:catboard.c    **** #include <avr/wdt.h>
  17:catboard.c    **** #include <avr/power.h>
  18:catboard.c    **** #include <util/delay.h>
  19:catboard.c    **** #include "usb_keyboard.h"
  20:catboard.c    **** 
  21:catboard.c    **** #define STR_MANUFACTURER	L"ibnTeo"
  22:catboard.c    **** #define STR_PRODUCT		L"Catboard"
  23:catboard.c    **** 
  24:catboard.c    **** #define LED_CONFIG	(DDRD	|= (1<<4))
  25:catboard.c    **** #define LED_OFF		(PORTD	&= ~(1<<4))
  26:catboard.c    **** #define LED_ON		(PORTD	|= (1<<4))
  27:catboard.c    **** 
  28:catboard.c    **** #define _PINC		(uint8_t *const)&PINC
  29:catboard.c    **** #define _PORTC		(uint8_t *const)&PORTC
  30:catboard.c    **** #define _PIND		(uint8_t *const)&PIND
  31:catboard.c    **** #define _PORTD		(uint8_t *const)&PORTD
  32:catboard.c    **** #define _PORTB		(uint8_t *const)&PORTB
  33:catboard.c    **** #define _PINB		(uint8_t *const)&PINB
  34:catboard.c    **** 
  35:catboard.c    **** #define ROWS	5
  36:catboard.c    **** #define COLS	12
  37:catboard.c    **** #define KEYS	COLS*ROWS
  38:catboard.c    **** 
  39:catboard.c    **** #define NULL				0
  40:catboard.c    **** #define NA					0
  41:catboard.c    **** #define KEY_LAYER1			0xF1
  42:catboard.c    **** #define KEY_LAYER2			0xF2
  43:catboard.c    **** #define KEY_TURBO_REPEAT	0xFB
  44:catboard.c    **** #define KEY_MAC_MODE		0xFC // (+Shift)
  45:catboard.c    **** #define KEY_ALT_TAB			0xFD
  46:catboard.c    **** #define KEY_FN_LOCK			0xFE
  47:catboard.c    **** #define KEY_FN				0xFF
  48:catboard.c    **** #define FN_KEY_ID			7*5
  49:catboard.c    **** #define KEY_MOD				0x80
  50:catboard.c    **** #define KEY_NULL			0
  51:catboard.c    **** 
  52:catboard.c    **** #define KEY_PRESSED_FN		1
  53:catboard.c    **** #define KEY_PRESSED_MODS	2
  54:catboard.c    **** #define KEY_PRESSED_ALT		3
  55:catboard.c    **** #define KEY_PRESSED_SHIFT	4
  56:catboard.c    **** #define KEY_PRESSED_CTRL	5
  57:catboard.c    **** #define KEY_PRESSED_PREV	6
  58:catboard.c    **** 
  59:catboard.c    **** // 0 - shorcuts my layout; 1 - shorcuts qwerty layout
  60:catboard.c    **** #define KEY_SHORTCUTS_LAYER1	1
  61:catboard.c    **** 
  62:catboard.c    **** // Nonstandart hardware layout
  63:catboard.c    **** #define KEY_LAYOUT_ALT_SHIFT	1
  64:catboard.c    **** #define KEY_LAYOUT_CTRL_SHIFT	2
  65:catboard.c    **** #define KEY_LAYOUT_GUI_SPACE	3
  66:catboard.c    **** 
  67:catboard.c    **** //#define KEY_LAYOUT		0
  68:catboard.c    **** #define KEY_LAYOUT		KEY_LAYOUT_ALT_SHIFT
  69:catboard.c    **** 
  70:catboard.c    **** #include "jcuken.h"
  71:catboard.c    **** //#include "dvorak.h"
  72:catboard.c    **** 
  73:catboard.c    **** // Start layout
  74:catboard.c    **** //uint8_t *layout = layer1;
  75:catboard.c    **** uint8_t *layout = layer2;
  76:catboard.c    **** 
  77:catboard.c    **** // Mac mode off
  78:catboard.c    **** uint8_t mac_mode = 0;
  79:catboard.c    **** 
  80:catboard.c    **** // 0x00-0x7F - normal keys
  81:catboard.c    **** // 0x80-0xF0 - mod_keys | 0x80
  82:catboard.c    **** // 0xF1-0xFF - catboard keys
  83:catboard.c    **** 
  84:catboard.c    **** const uint8_t layer1[KEYS] = {
  85:catboard.c    **** 	//ROW0				ROW1				ROW2			ROW3			ROW4
  86:catboard.c    **** 	KEY_ESC,			KEY_LAYER1,			KEY_RIGHT_CTRL|KEY_MOD,KEY_TAB,	KEY_TILDE,		// COL0
  87:catboard.c    **** 	KEY_ALT_TAB,		KEY_Z,				KEY_A,			KEY_Q,			KEY_1,			// COL1
  88:catboard.c    **** 	KEY_ALT|KEY_MOD,	KEY_X,				KEY_S,			KEY_W,			KEY_2,			// COL2
  89:catboard.c    **** 	KEY_ALT|KEY_MOD,	KEY_C,				KEY_D,			KEY_E,			KEY_3,			// COL3
  90:catboard.c    **** 	KEY_CTRL|KEY_MOD,	KEY_V,				KEY_F,			KEY_R,			KEY_4,			// COL4
  91:catboard.c    **** 	KEY_SHIFT|KEY_MOD,	KEY_B,				KEY_G,			KEY_T,			KEY_5,			// COL5
  92:catboard.c    **** 	KEY_SPACE,			KEY_N,				KEY_H,			KEY_Y,			KEY_6,			// COL6 
  93:catboard.c    **** 	KEY_FN,				KEY_M,				KEY_J,			KEY_U,			KEY_7,			// COL7
  94:catboard.c    **** 	KEY_RIGHT_ALT|KEY_MOD,KEY_COMMA,		KEY_K,			KEY_I,			KEY_8,			// COL8
  95:catboard.c    **** 	KEY_BACKSLASH,		KEY_PERIOD,			KEY_L,			KEY_O,			KEY_9,			// COL9
  96:catboard.c    **** 	KEY_RIGHT_BRACE,	KEY_SLASH,			KEY_SEMICOLON,	KEY_P,			KEY_0,			// COL10
  97:catboard.c    **** 	KEY_EQUAL,			KEY_LAYER2,			KEY_QUOTE,		KEY_LEFT_BRACE,	KEY_MINUS		// COL11
  98:catboard.c    **** };
  99:catboard.c    **** 
 100:catboard.c    **** 
 101:catboard.c    **** const uint8_t layer_fn[KEYS] = {
 102:catboard.c    **** 	//ROW0				ROW1				ROW2			ROW3			ROW4
 103:catboard.c    **** 	KEY_TURBO_REPEAT,	KEY_LAYER1,			KEY_RIGHT_CTRL|KEY_MOD,KEY_TAB,	KEY_PRINTSCREEN,// COL0
 104:catboard.c    **** 	KEY_ALT_TAB,		NULL,				NULL,			NULL,			KEY_F1,			// COL1
 105:catboard.c    **** 	KEY_ALT|KEY_MOD,	NULL,				NULL,			NULL,			KEY_F2,			// COL2
 106:catboard.c    **** 	KEY_ALT|KEY_MOD,	NULL,				NULL,			NULL,			KEY_F3,			// COL3
 107:catboard.c    **** 	KEY_CTRL|KEY_MOD,	NULL,				NULL,			NULL,			KEY_F4,			// COL4
 108:catboard.c    **** 	KEY_SHIFT|KEY_MOD,	NULL,				NULL,			KEY_TILDE,		KEY_F5,			// COL5
 109:catboard.c    **** 	KEY_MAC_MODE,		KEY_BACKSPACE,		KEY_ENTER,		KEY_ENTER,		KEY_F6,			// COL6 
 110:catboard.c    **** 	KEY_FN,				KEY_DELETE,			KEY_LEFT,		KEY_HOME,		KEY_F7,			// COL7
 111:catboard.c    **** 	KEY_FN_LOCK,		KEY_INSERT,			KEY_DOWN,		KEY_UP,			KEY_F8,			// COL8
 112:catboard.c    **** 	NULL,				NULL,				KEY_RIGHT,		KEY_END,		KEY_F9,			// COL9
 113:catboard.c    **** 	KEY_SCROLL_LOCK,	NULL,				KEY_PAGE_DOWN,	KEY_PAGE_UP,	KEY_F10,		// COL10
 114:catboard.c    **** 	KEY_F12,			KEY_LAYER2,			KEY_PAUSE,	KEY_ESC,		KEY_F11			// COL11
 115:catboard.c    **** };
 116:catboard.c    **** 
 117:catboard.c    **** const uint8_t layer_fnlock[KEYS] = {
 118:catboard.c    **** 	//ROW0				ROW1				ROW2			ROW3			ROW4
 119:catboard.c    **** 	KEY_ESC,			KEY_SHIFT|KEY_MOD,	KEY_RIGHT_CTRL|KEY_MOD,KEY_TAB,	KEY_TILDE,		// COL0
 120:catboard.c    **** 	KEY_ALT_TAB,		NULL,				KEY_PAGE_DOWN,	KEY_PAGE_UP,	KEY_1,			// COL1
 121:catboard.c    **** 	KEY_ALT|KEY_MOD,	NULL,				KEY_LEFT,		KEY_HOME,		KEY_2,			// COL2
 122:catboard.c    **** 	KEY_ALT|KEY_MOD,	NULL,				KEY_DOWN,		KEY_UP,			KEY_3,			// COL3
 123:catboard.c    **** 	KEY_CTRL|KEY_MOD,	NULL,				KEY_RIGHT,		KEY_END,		KEY_4,			// COL4
 124:catboard.c    **** 	KEY_SPACE,			NULL,				KEY_ENTER,		KEY_TILDE,		KEY_5,			// COL5
 125:catboard.c    **** 	KEY_SPACE,			KEYPAD_0,			KEYPAD_ASTERIX,	KEYPAD_SLASH,	KEY_6,			// COL6 
 126:catboard.c    **** 	KEY_FN,				KEYPAD_1,			KEYPAD_4,		KEYPAD_7,		KEY_7,			// COL7
 127:catboard.c    **** 	KEY_RIGHT_ALT|KEY_MOD,KEYPAD_2,			KEYPAD_5,		KEYPAD_8,		KEY_8,			// COL8
 128:catboard.c    **** 	KEY_ENTER,			KEYPAD_3,			KEYPAD_6,		KEYPAD_9,		KEY_9,			// COL9
 129:catboard.c    **** 	KEY_NUM_LOCK,		KEYPAD_PERIOD,		KEYPAD_PLUS,	KEYPAD_MINUS,	KEY_0,			// COL10
 130:catboard.c    **** 	KEY_EQUAL,			KEY_RIGHT_SHIFT|KEY_MOD,KEY_ENTER,	KEY_ESC,		KEY_MINUS		// COL11
 131:catboard.c    **** };
 132:catboard.c    **** 
 133:catboard.c    **** // Pins keyboard matrix (have to properly initialize ports)
 134:catboard.c    **** uint8_t *const	row_port[ROWS]	= { _PORTC,	_PORTC,	_PORTC,	_PORTC,	_PORTC};
 135:catboard.c    **** const uint8_t	row_bit[ROWS]	= { (1<<7),	(1<<6),	(1<<5),	(1<<4),	(1<<2)};
 136:catboard.c    **** uint8_t *const	col_pin[COLS]	= {_PIND, _PIND, _PIND, _PIND, _PIND, _PIND, _PINB,	_PINB,	_PINB, _PIN
 137:catboard.c    **** const uint8_t	col_bit[COLS]	= { (1<<6),	(1<<5),	(1<<3),	(1<<2),	(1<<1),	(1<<0),	(1<<7),	(1<<6),	(1<
 138:catboard.c    **** 
 139:catboard.c    **** int8_t pressed[KEYS];
 140:catboard.c    **** uint8_t queue[7] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 141:catboard.c    **** uint8_t mod_keys = 0;
 142:catboard.c    **** uint8_t *prev_layer = 0;
 143:catboard.c    **** 
 144:catboard.c    **** uint8_t turbo_repeat = 1;
 145:catboard.c    **** 
 146:catboard.c    **** uint8_t last_key = 0xFF;
 147:catboard.c    **** uint16_t press_time = 0;
 148:catboard.c    **** uint16_t press_time2 = 0;
 149:catboard.c    **** uint16_t release_time = 0;
 150:catboard.c    **** uint16_t repeat_time = 0;
 151:catboard.c    **** 
 152:catboard.c    **** void init(void);
 153:catboard.c    **** void send(void);
 154:catboard.c    **** void poll(void);
 155:catboard.c    **** void repeat_tick(void);
 156:catboard.c    **** void key_press(uint8_t key_id);
 157:catboard.c    **** void key_release(uint8_t key_id);
 158:catboard.c    **** uint8_t get_code(uint8_t key_id);
 159:catboard.c    **** 
 160:catboard.c    **** int main(void) {
 161:catboard.c    **** 	// Disable watchdog if enabled by bootloader/fuses
 162:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 163:catboard.c    **** 	wdt_disable();
 164:catboard.c    **** 
 165:catboard.c    **** 	// Disable clock division
 166:catboard.c    **** 	clock_prescale_set(clock_div_1);
 167:catboard.c    **** 
 168:catboard.c    **** 	init();
 169:catboard.c    **** 	for (;;) {
 170:catboard.c    **** 		poll();
 171:catboard.c    **** 	}
 172:catboard.c    **** }
 173:catboard.c    **** 
 174:catboard.c    **** void init(void) {
  15               		.loc 1 174 0
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
 175:catboard.c    **** 	// Set for 16 MHz clock
 176:catboard.c    **** 	CLKPR = 0x80; CLKPR = 0;
  20               		.loc 1 176 0
  21 0000 80E8      		ldi r24,lo8(-128)
  22 0002 8093 6100 		sts 97,r24
  23 0006 1092 6100 		sts 97,__zero_reg__
 177:catboard.c    **** 
 178:catboard.c    **** 	// Init ports
 179:catboard.c    **** 	DDRB	= 0x00; DDRC	= 0b11110100;	DDRD	= 0x00;
  24               		.loc 1 179 0
  25 000a 14B8      		out 0x4,__zero_reg__
  26 000c 94EF      		ldi r25,lo8(-12)
  27 000e 97B9      		out 0x7,r25
  28 0010 1AB8      		out 0xa,__zero_reg__
 180:catboard.c    **** 	PORTB	= 0xFF; PORTC	= 0b11110100; 	PORTD	= 0xFF;
  29               		.loc 1 180 0
  30 0012 8FEF      		ldi r24,lo8(-1)
  31 0014 85B9      		out 0x5,r24
  32 0016 98B9      		out 0x8,r25
  33 0018 8BB9      		out 0xb,r24
 181:catboard.c    **** 
 182:catboard.c    **** 	LED_CONFIG;
  34               		.loc 1 182 0
  35 001a 549A      		sbi 0xa,4
 183:catboard.c    **** 	LED_ON;
  36               		.loc 1 183 0
  37 001c 5C9A      		sbi 0xb,4
  38               	.LVL0:
  39 001e E0E0      		ldi r30,lo8(pressed)
  40 0020 F0E0      		ldi r31,hi8(pressed)
  41               	.LVL1:
  42               	.L2:
  43               	.LBB21:
 184:catboard.c    **** 
 185:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
 186:catboard.c    **** 		pressed[i] = 0;
  44               		.loc 1 186 0 discriminator 2
  45 0022 1192      		st Z+,__zero_reg__
 185:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
  46               		.loc 1 185 0 discriminator 2
  47 0024 20E0      		ldi r18,hi8(pressed+60)
  48 0026 E030      		cpi r30,lo8(pressed+60)
  49 0028 F207      		cpc r31,r18
  50 002a 01F4      		brne .L2
  51               	.LBE21:
 187:catboard.c    **** 	}
 188:catboard.c    **** 
 189:catboard.c    **** 	usb_init();
  52               		.loc 1 189 0
  53 002c 0E94 0000 		call usb_init
  54               	.LVL2:
 190:catboard.c    **** 	LED_OFF;
  55               		.loc 1 190 0
  56 0030 5C98      		cbi 0xb,4
  57               	.L3:
 191:catboard.c    **** 	while(!usb_configured());
  58               		.loc 1 191 0 discriminator 1
  59 0032 0E94 0000 		call usb_configured
  60               	.LVL3:
  61 0036 8823      		tst r24
  62 0038 01F0      		breq .L3
 192:catboard.c    **** 	LED_ON;
  63               		.loc 1 192 0
  64 003a 5C9A      		sbi 0xb,4
  65               	.LVL4:
  66               	.LBB22:
  67               	.LBB23:
  68               		.file 2 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h"
   1:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  69               		.loc 2 164 0
  70 003c 8FEF      		ldi r24,lo8(3199999)
  71 003e 93ED      		ldi r25,hi8(3199999)
  72 0040 20E3      		ldi r18,hlo8(3199999)
  73 0042 8150      		1: subi r24,1
  74 0044 9040      		sbci r25,0
  75 0046 2040      		sbci r18,0
  76 0048 01F4      		brne 1b
  77 004a 00C0      		rjmp .
  78 004c 0000      		nop
  79               	.LBE23:
  80               	.LBE22:
 193:catboard.c    **** 	_delay_ms(1000);
 194:catboard.c    **** 	LED_OFF;
  81               		.loc 1 194 0
  82 004e 5C98      		cbi 0xb,4
  83 0050 0895      		ret
  84               	.LFE9:
  86               		.section	.text.change_layout,"ax",@progbits
  87               	.global	change_layout
  89               	change_layout:
  90               	.LFB14:
 195:catboard.c    **** }
 196:catboard.c    **** 
 197:catboard.c    **** void poll() {
 198:catboard.c    **** 	uint8_t row, col, key_id;
 199:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 200:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 201:catboard.c    **** 		_delay_us(1);
 202:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 203:catboard.c    **** 			key_id = col*ROWS+row;
 204:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 205:catboard.c    **** 				if (! pressed[key_id]) {
 206:catboard.c    **** 					key_press(key_id);
 207:catboard.c    **** 				}
 208:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 209:catboard.c    **** 				key_release(key_id);
 210:catboard.c    **** 			}
 211:catboard.c    **** 		}
 212:catboard.c    **** 		*row_port[row] |= row_bit[row];
 213:catboard.c    **** 	}
 214:catboard.c    **** 	repeat_tick();
 215:catboard.c    **** 	_delay_ms(5);
 216:catboard.c    **** }
 217:catboard.c    **** 
 218:catboard.c    **** void repeat_tick(void) {
 219:catboard.c    **** 	if (repeat_time) { // repeat pause
 220:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 221:catboard.c    **** 			repeat_time++;
 222:catboard.c    **** 		} else { // repeat press
 223:catboard.c    **** 			repeat_time = 1;
 224:catboard.c    **** 			if (turbo_repeat) {
 225:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 226:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 227:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 228:catboard.c    **** 					keyboard_keys[0] = 0;
 229:catboard.c    **** 					usb_keyboard_send();
 230:catboard.c    **** 				}
 231:catboard.c    **** 			}
 232:catboard.c    **** 		}
 233:catboard.c    **** 	} else if (press_time2) { // press2 pause
 234:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 235:catboard.c    **** 			press_time2++;
 236:catboard.c    **** 		} else {
 237:catboard.c    **** 			repeat_time = 1;
 238:catboard.c    **** 		}
 239:catboard.c    **** 	} else if (release_time) { // release pause
 240:catboard.c    **** 		if (release_time<(press_time+50)) {
 241:catboard.c    **** 			release_time++;
 242:catboard.c    **** 		} else {
 243:catboard.c    **** 			last_key = 0xFF;
 244:catboard.c    **** 			release_time = 0;
 245:catboard.c    **** 			press_time = 0;
 246:catboard.c    **** 			press_time2 = 0;
 247:catboard.c    **** 			release_time = 0;
 248:catboard.c    **** 		}
 249:catboard.c    **** 	} else if (press_time) { // press1 pause
 250:catboard.c    **** 		if (press_time<250) {
 251:catboard.c    **** 			press_time++;
 252:catboard.c    **** 		} else {
 253:catboard.c    **** 			press_time = 0;
 254:catboard.c    **** 		}
 255:catboard.c    **** 	}	
 256:catboard.c    **** }
 257:catboard.c    **** 
 258:catboard.c    **** void key_press(uint8_t key_id) {
 259:catboard.c    **** 	uint8_t i;
 260:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 261:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 262:catboard.c    **** 	
 263:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 264:catboard.c    **** 	if (key_code==NULL) {
 265:catboard.c    **** 		key_code = layout[key_id];
 266:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 267:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 268:catboard.c    **** 			key_code = prev_layer[key_id];
 269:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 270:catboard.c    **** 		}
 271:catboard.c    **** 	}
 272:catboard.c    **** 	
 273:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys
 274:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 275:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 276:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 277:catboard.c    **** 			} else { // Alt press, Tab press and release
 278:catboard.c    **** 				if (! (mod_keys & (KEY_ALT|KEY_RIGHT_ALT|KEY_CTRL|KEY_RIGHT_CTRL|KEY_GUI|KEY_RIGHT_GUI))) {
 279:catboard.c    **** 					mod_keys |= (KEY_ALT);
 280:catboard.c    **** 				} else {
 281:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 282:catboard.c    **** 				}
 283:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 284:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 285:catboard.c    **** 				usb_keyboard_send();
 286:catboard.c    **** 				_delay_ms(50);
 287:catboard.c    **** 				send();
 288:catboard.c    **** 			}
 289:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 290:catboard.c    **** 			if (prev_layer) { // FnLock Off
 291:catboard.c    **** 				layout = prev_layer;
 292:catboard.c    **** 				prev_layer = 0;
 293:catboard.c    **** 			} else { // FnLock On
 294:catboard.c    **** 				prev_layer = layout;
 295:catboard.c    **** 				layout = layer_fnlock;
 296:catboard.c    **** 			}
 297:catboard.c    **** 			if (prev_layer || mac_mode) {
 298:catboard.c    **** 				LED_ON;
 299:catboard.c    **** 			} else {
 300:catboard.c    **** 				LED_OFF;
 301:catboard.c    **** 			}
 302:catboard.c    **** 		} else if (key_code==KEY_MAC_MODE) { // Mac mode
 303:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 304:catboard.c    **** 				mac_mode = ! mac_mode;
 305:catboard.c    **** 				if (mac_mode || prev_layer) {
 306:catboard.c    **** 					LED_ON;
 307:catboard.c    **** 				} else {
 308:catboard.c    **** 					LED_OFF;
 309:catboard.c    **** 				}
 310:catboard.c    **** 			} else { // TODO: Exclusion, press Space
 311:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 312:catboard.c    **** 			}
 313:catboard.c    **** 		/*} else if ((key_code==KEY_LAYER1 || key_code==KEY_LAYER2) && (mod_keys & (KEY_ALT|KEY_RIGHT_ALT
 314:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_SHIFT;
 315:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 316:catboard.c    **** 			send();*/
 317:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 318:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 319:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 320:catboard.c    **** 				mod_keys |= KEY_CTRL;
 321:catboard.c    **** 				send();
 322:catboard.c    **** 			} else {
 323:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 324:catboard.c    **** 				mod_keys |= KEY_SHIFT;
 325:catboard.c    **** 				send();
 326:catboard.c    **** 			}
 327:catboard.c    **** 			/*if (layout!=layer1) {
 328:catboard.c    **** 				if (layout==layer_fn) {
 329:catboard.c    **** 					prev_layer = layer1;
 330:catboard.c    **** 				} else {
 331:catboard.c    **** 					layout = layer1;
 332:catboard.c    **** 				}
 333:catboard.c    **** 				change_layout();
 334:catboard.c    **** 			}*/
 335:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 336:catboard.c    **** 			/*if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 337:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 338:catboard.c    **** 				mod_keys |= KEY_RIGHT_CTRL;
 339:catboard.c    **** 				send();
 340:catboard.c    **** 			} else {*/
 341:catboard.c    **** 				//if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 342:catboard.c    **** 				mod_keys |= KEY_RIGHT_SHIFT;
 343:catboard.c    **** 				send();
 344:catboard.c    **** 			//}
 345:catboard.c    **** 			/*if (layout!=layer2) {
 346:catboard.c    **** 				if (layout==layer_fn) {
 347:catboard.c    **** 					prev_layer = layer2;
 348:catboard.c    **** 				} else {
 349:catboard.c    **** 					layout = layer2;	
 350:catboard.c    **** 				}
 351:catboard.c    **** 				change_layout();
 352:catboard.c    **** 			}*/
 353:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 354:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 355:catboard.c    **** 		}
 356:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys
 357:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 358:catboard.c    **** 			mod_keys |= KEY_GUI;
 359:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 360:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 361:catboard.c    **** 		} else {
 362:catboard.c    **** 			mod_keys |= (key_code & 0x7F);
 363:catboard.c    **** 		}
 364:catboard.c    **** 		send();
 365:catboard.c    **** 	} else {
 366:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 367:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 368:catboard.c    **** 			queue[0] = key_id;
 369:catboard.c    **** 			send();
 370:catboard.c    **** 		}
 371:catboard.c    **** 	}
 372:catboard.c    **** 	// Autorepeat
 373:catboard.c    **** 	if (last_key==key_id) { // calc press2
 374:catboard.c    **** 		press_time2 = 1;
 375:catboard.c    **** 		repeat_time = 0;
 376:catboard.c    **** 	} else { // calc press1
 377:catboard.c    **** 		last_key = key_id;
 378:catboard.c    **** 		press_time = 1;
 379:catboard.c    **** 		press_time2 = 0;
 380:catboard.c    **** 		release_time = 0;
 381:catboard.c    **** 		repeat_time = 0;
 382:catboard.c    **** 	}
 383:catboard.c    **** }
 384:catboard.c    **** 
 385:catboard.c    **** void key_release(uint8_t key_id) {
 386:catboard.c    **** 	uint8_t i;
 387:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 388:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 389:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 390:catboard.c    **** 		key_code = prev_layer[key_id];
 391:catboard.c    **** 	}
 392:catboard.c    **** 	pressed[key_id] = 0;
 393:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys release
 394:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 395:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 396:catboard.c    **** 			send();
 397:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) {
 398:catboard.c    **** 			mod_keys &= ~(KEY_CTRL);
 399:catboard.c    **** 			send();
 400:catboard.c    **** 		} else if (key_code==KEY_LAYER1) {
 401:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 402:catboard.c    **** 			send();
 403:catboard.c    **** 			if (last_key==key_id && pressed_key_id!=KEY_PRESSED_SHIFT) {
 404:catboard.c    **** 				if (layout!=layer1) {
 405:catboard.c    **** 					if (layout==layer_fn) {
 406:catboard.c    **** 						prev_layer = layer1;
 407:catboard.c    **** 					} else {
 408:catboard.c    **** 						layout = layer1;
 409:catboard.c    **** 					}
 410:catboard.c    **** 					change_layout();
 411:catboard.c    **** 				}
 412:catboard.c    **** 			}
 413:catboard.c    **** 		} else if (key_code==KEY_LAYER2 && pressed_key_id==KEY_PRESSED_CTRL) {
 414:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_CTRL);
 415:catboard.c    **** 			send();
 416:catboard.c    **** 		} else if (key_code==KEY_LAYER2) {
 417:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 418:catboard.c    **** 			send();
 419:catboard.c    **** 			if (last_key==key_id && pressed_key_id!=KEY_PRESSED_SHIFT) {
 420:catboard.c    **** 				if (layout!=layer2) {
 421:catboard.c    **** 					if (layout==layer_fn) {
 422:catboard.c    **** 						prev_layer = layer2;
 423:catboard.c    **** 					} else {
 424:catboard.c    **** 						layout = layer2;
 425:catboard.c    **** 					}
 426:catboard.c    **** 					change_layout();
 427:catboard.c    **** 				}
 428:catboard.c    **** 			}
 429:catboard.c    **** 		/*} else if ((key_code==KEY_LAYER1 || key_code==KEY_LAYER2) && pressed_key_id==KEY_PRESSED_SHIFT)
 430:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 431:catboard.c    **** 			send();*/
 432:catboard.c    **** 		}
 433:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys release
 434:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 435:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 436:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 437:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 438:catboard.c    **** 		} else {
 439:catboard.c    **** 			mod_keys &= ~(key_code & 0x7F);
 440:catboard.c    **** 		}
 441:catboard.c    **** 		send();
 442:catboard.c    **** 	} else {
 443:catboard.c    **** 		for (i=0; i<6; i++) {
 444:catboard.c    **** 			if (queue[i]==key_id) {
 445:catboard.c    **** 				break;
 446:catboard.c    **** 			}
 447:catboard.c    **** 		}
 448:catboard.c    **** 		for (; i<6; i++) {
 449:catboard.c    **** 			queue[i] = queue[i+1];
 450:catboard.c    **** 		}
 451:catboard.c    **** 		send();
 452:catboard.c    **** 		// Autorepeat
 453:catboard.c    **** 		if (last_key==key_id) { // realise time
 454:catboard.c    **** 			press_time2 = 0;
 455:catboard.c    **** 			release_time = 1;
 456:catboard.c    **** 			repeat_time = 0;
 457:catboard.c    **** 		} else { // reset
 458:catboard.c    **** 			press_time = 0;
 459:catboard.c    **** 			press_time2 = 0;
 460:catboard.c    **** 			release_time = 0;
 461:catboard.c    **** 			repeat_time = 0;
 462:catboard.c    **** 		}
 463:catboard.c    **** 	}
 464:catboard.c    **** }
 465:catboard.c    **** 
 466:catboard.c    **** void change_layout(void) {
  91               		.loc 1 466 0
  92               	/* prologue: function */
  93               	/* frame size = 0 */
  94               	/* stack size = 0 */
  95               	.L__stack_usage = 0
 467:catboard.c    **** 	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || mac_mode) { // Press Cmd+Space
  96               		.loc 1 467 0
  97 0000 8091 0000 		lds r24,mac_mode
  98 0004 8823      		tst r24
  99 0006 01F0      		breq .L10
 100               	.LBB34:
 101               	.LBB35:
 468:catboard.c    **** 		keyboard_modifier_keys = KEY_GUI;
 102               		.loc 1 468 0
 103 0008 88E0      		ldi r24,lo8(8)
 104 000a 8093 0000 		sts keyboard_modifier_keys,r24
 469:catboard.c    **** 		keyboard_keys[0] = 0;
 105               		.loc 1 469 0
 106 000e 1092 0000 		sts keyboard_keys,__zero_reg__
 470:catboard.c    **** 		usb_keyboard_send();
 107               		.loc 1 470 0
 108 0012 0E94 0000 		call usb_keyboard_send
 109               	.LVL5:
 110               	.LBB36:
 111               	.LBB37:
 112               		.loc 2 164 0
 113 0016 2FEF      		ldi r18,lo8(159999)
 114 0018 80E7      		ldi r24,hi8(159999)
 115 001a 92E0      		ldi r25,hlo8(159999)
 116 001c 2150      		1: subi r18,1
 117 001e 8040      		sbci r24,0
 118 0020 9040      		sbci r25,0
 119 0022 01F4      		brne 1b
 120 0024 00C0      		rjmp .
 121 0026 0000      		nop
 122               	.LBE37:
 123               	.LBE36:
 471:catboard.c    **** 		_delay_ms(50);
 472:catboard.c    **** 		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 124               		.loc 1 472 0
 125 0028 68E0      		ldi r22,lo8(8)
 126 002a 8CE2      		ldi r24,lo8(44)
 127 002c 00C0      		rjmp .L11
 128               	.LVL6:
 129               	.L10:
 130               	.LBE35:
 131               	.LBE34:
 473:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
 474:catboard.c    **** 		keyboard_modifier_keys = KEY_ALT;
 132               		.loc 1 474 0
 133 002e 84E0      		ldi r24,lo8(4)
 134 0030 8093 0000 		sts keyboard_modifier_keys,r24
 475:catboard.c    **** 		keyboard_keys[0] = 0;
 135               		.loc 1 475 0
 136 0034 1092 0000 		sts keyboard_keys,__zero_reg__
 476:catboard.c    **** 		usb_keyboard_send();
 137               		.loc 1 476 0
 138 0038 0E94 0000 		call usb_keyboard_send
 139               	.LVL7:
 140               	.LBB38:
 141               	.LBB39:
 142               		.loc 2 164 0
 143 003c 2FEF      		ldi r18,lo8(159999)
 144 003e 80E7      		ldi r24,hi8(159999)
 145 0040 92E0      		ldi r25,hlo8(159999)
 146 0042 2150      		1: subi r18,1
 147 0044 8040      		sbci r24,0
 148 0046 9040      		sbci r25,0
 149 0048 01F4      		brne 1b
 150 004a 00C0      		rjmp .
 151 004c 0000      		nop
 152               	.LBE39:
 153               	.LBE38:
 477:catboard.c    **** 		_delay_ms(50);
 478:catboard.c    **** 		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 154               		.loc 1 478 0
 155 004e 66E0      		ldi r22,lo8(6)
 156 0050 80E0      		ldi r24,0
 157               	.LVL8:
 158               	.L11:
 159 0052 0C94 0000 		jmp usb_keyboard_press
 160               	.LVL9:
 161               	.LFE14:
 163               		.section	.text.get_code,"ax",@progbits
 164               	.global	get_code
 166               	get_code:
 167               	.LFB16:
 479:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_CTRL_SHIFT) { // Press Ctrl+Shift
 480:catboard.c    **** 		keyboard_modifier_keys = KEY_CTRL;
 481:catboard.c    **** 		keyboard_keys[0] = 0;
 482:catboard.c    **** 		usb_keyboard_send();
 483:catboard.c    **** 		_delay_ms(50);
 484:catboard.c    **** 		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
 485:catboard.c    **** 	}
 486:catboard.c    **** }
 487:catboard.c    **** 
 488:catboard.c    **** void send(void) {
 489:catboard.c    **** 	uint8_t i;
 490:catboard.c    **** 	for (i=0; i<6; i++) {
 491:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 492:catboard.c    **** 	}
 493:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 494:catboard.c    **** 	usb_keyboard_send();
 495:catboard.c    **** }
 496:catboard.c    **** 
 497:catboard.c    **** uint8_t get_code(uint8_t key_id) {
 168               		.loc 1 497 0
 169               	.LVL10:
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
 498:catboard.c    **** 	uint8_t key_code = 0;
 499:catboard.c    **** 	if (key_id<KEYS) { // not 0xFF
 174               		.loc 1 499 0
 175 0000 8C33      		cpi r24,lo8(60)
 176 0002 00F4      		brsh .L17
 177               	.LVL11:
 178               	.LBB42:
 179               	.LBB43:
 500:catboard.c    **** 		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 180               		.loc 1 500 0
 181 0004 282F      		mov r18,r24
 182 0006 30E0      		ldi r19,0
 183 0008 F901      		movw r30,r18
 184 000a E050      		subi r30,lo8(-(pressed))
 185 000c F040      		sbci r31,hi8(-(pressed))
 186 000e 9081      		ld r25,Z
 187 0010 9130      		cpi r25,lo8(1)
 188 0012 01F4      		brne .L14
 501:catboard.c    **** 			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 189               		.loc 1 501 0
 190 0014 F901      		movw r30,r18
 191 0016 E050      		subi r30,lo8(-(layer_fn))
 192 0018 F040      		sbci r31,hi8(-(layer_fn))
 193 001a 8081      		ld r24,Z
 194               	.LVL12:
 195 001c 1816      		cp __zero_reg__,r24
 196 001e 04F0      		brlt .L13
 197 0020 00C0      		rjmp .L17
 198               	.L14:
 502:catboard.c    **** 				key_code = layer_fn[key_id];
 503:catboard.c    **** 			}
 504:catboard.c    **** 		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from la
 199               		.loc 1 504 0
 200 0022 4091 0000 		lds r20,layout
 201 0026 5091 0000 		lds r21,layout+1
 202 002a 60E0      		ldi r22,hi8(layer_fn)
 203 002c 4030      		cpi r20,lo8(layer_fn)
 204 002e 5607      		cpc r21,r22
 205 0030 01F0      		breq .L16
 206 0032 9230      		cpi r25,lo8(2)
 207 0034 01F4      		brne .L16
 505:catboard.c    **** 			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 208               		.loc 1 505 0
 209 0036 F901      		movw r30,r18
 210 0038 E050      		subi r30,lo8(-(layer1))
 211 003a F040      		sbci r31,hi8(-(layer1))
 212 003c 00C0      		rjmp .L21
 213               	.L16:
 506:catboard.c    **** 		} else {
 507:catboard.c    **** 			key_code = layout[key_id];
 214               		.loc 1 507 0
 215 003e FA01      		movw r30,r20
 216 0040 E80F      		add r30,r24
 217 0042 F11D      		adc r31,__zero_reg__
 218               	.L21:
 219 0044 8081      		ld r24,Z
 220               	.LVL13:
 221 0046 0895      		ret
 222               	.LVL14:
 223               	.L17:
 224               	.LBE43:
 225               	.LBE42:
 498:catboard.c    **** 	uint8_t key_code = 0;
 226               		.loc 1 498 0
 227 0048 80E0      		ldi r24,0
 228               	.L13:
 229               	.LVL15:
 508:catboard.c    **** 		}
 509:catboard.c    **** 	}
 510:catboard.c    **** 	return key_code;
 511:catboard.c    **** }
 230               		.loc 1 511 0
 231 004a 0895      		ret
 232               	.LFE16:
 234               		.section	.text.send,"ax",@progbits
 235               	.global	send
 237               	send:
 238               	.LFB15:
 488:catboard.c    **** void send(void) {
 239               		.loc 1 488 0
 240 0000 0F93      		push r16
 241               	.LCFI0:
 242 0002 1F93      		push r17
 243               	.LCFI1:
 244 0004 CF93      		push r28
 245               	.LCFI2:
 246 0006 DF93      		push r29
 247               	.LCFI3:
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 4 */
 251               	.L__stack_usage = 4
 252               	.LVL16:
 253 0008 C0E0      		ldi r28,lo8(queue)
 254 000a D0E0      		ldi r29,hi8(queue)
 255 000c 00E0      		ldi r16,lo8(keyboard_keys)
 256 000e 10E0      		ldi r17,hi8(keyboard_keys)
 257               	.LVL17:
 258               	.L23:
 491:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 259               		.loc 1 491 0 discriminator 2
 260 0010 8991      		ld r24,Y+
 261 0012 0E94 0000 		call get_code
 262               	.LVL18:
 263 0016 F801      		movw r30,r16
 264 0018 8193      		st Z+,r24
 265 001a 8F01      		movw r16,r30
 490:catboard.c    **** 	for (i=0; i<6; i++) {
 266               		.loc 1 490 0 discriminator 2
 267 001c F0E0      		ldi r31,hi8(queue+6)
 268 001e C030      		cpi r28,lo8(queue+6)
 269 0020 DF07      		cpc r29,r31
 270 0022 01F4      		brne .L23
 493:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 271               		.loc 1 493 0
 272 0024 8091 0000 		lds r24,mod_keys
 273 0028 8093 0000 		sts keyboard_modifier_keys,r24
 274               	/* epilogue start */
 495:catboard.c    **** }
 275               		.loc 1 495 0
 276 002c DF91      		pop r29
 277 002e CF91      		pop r28
 278 0030 1F91      		pop r17
 279 0032 0F91      		pop r16
 494:catboard.c    **** 	usb_keyboard_send();
 280               		.loc 1 494 0
 281 0034 0C94 0000 		jmp usb_keyboard_send
 282               	.LVL19:
 283               	.LFE15:
 285               		.section	.text.key_release,"ax",@progbits
 286               	.global	key_release
 288               	key_release:
 289               	.LFB13:
 385:catboard.c    **** void key_release(uint8_t key_id) {
 290               		.loc 1 385 0
 291               	.LVL20:
 292 0000 CF93      		push r28
 293               	.LCFI4:
 294 0002 DF93      		push r29
 295               	.LCFI5:
 296               	/* prologue: function */
 297               	/* frame size = 0 */
 298               	/* stack size = 2 */
 299               	.L__stack_usage = 2
 300 0004 D82F      		mov r29,r24
 387:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 301               		.loc 1 387 0
 302 0006 282F      		mov r18,r24
 303 0008 30E0      		ldi r19,0
 304 000a F901      		movw r30,r18
 305 000c E050      		subi r30,lo8(-(pressed))
 306 000e F040      		sbci r31,hi8(-(pressed))
 307 0010 C081      		ld r28,Z
 308               	.LVL21:
 388:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 309               		.loc 1 388 0
 310 0012 C130      		cpi r28,lo8(1)
 311 0014 01F4      		brne .L26
 388:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 312               		.loc 1 388 0 is_stmt 0 discriminator 1
 313 0016 F901      		movw r30,r18
 314 0018 E050      		subi r30,lo8(-(layer_fn))
 315 001a F040      		sbci r31,hi8(-(layer_fn))
 316 001c 00C0      		rjmp .L74
 317               	.L26:
 388:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 318               		.loc 1 388 0 discriminator 2
 319 001e E091 0000 		lds r30,layout
 320 0022 F091 0000 		lds r31,layout+1
 321 0026 E20F      		add r30,r18
 322 0028 F31F      		adc r31,r19
 323 002a 9081      		ld r25,Z
 324               	.LVL22:
 389:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 325               		.loc 1 389 0 is_stmt 1 discriminator 2
 326 002c C630      		cpi r28,lo8(6)
 327 002e 01F4      		brne .L27
 389:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 328               		.loc 1 389 0 is_stmt 0 discriminator 1
 329 0030 4091 0000 		lds r20,prev_layer
 330 0034 5091 0000 		lds r21,prev_layer+1
 331 0038 4115      		cp r20,__zero_reg__
 332 003a 5105      		cpc r21,__zero_reg__
 333 003c 01F0      		breq .L27
 390:catboard.c    **** 		key_code = prev_layer[key_id];
 334               		.loc 1 390 0 is_stmt 1
 335 003e FA01      		movw r30,r20
 336 0040 E20F      		add r30,r18
 337 0042 F31F      		adc r31,r19
 338               	.LVL23:
 339               	.L74:
 340 0044 9081      		ld r25,Z
 341               	.LVL24:
 342               	.L27:
 392:catboard.c    **** 	pressed[key_id] = 0;
 343               		.loc 1 392 0
 344 0046 F901      		movw r30,r18
 345 0048 E050      		subi r30,lo8(-(pressed))
 346 004a F040      		sbci r31,hi8(-(pressed))
 347 004c 1082      		st Z,__zero_reg__
 393:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys release
 348               		.loc 1 393 0
 349 004e 913F      		cpi r25,lo8(-15)
 350 0050 00F4      		brsh .+2
 351 0052 00C0      		rjmp .L28
 394:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 352               		.loc 1 394 0
 353 0054 9D3F      		cpi r25,lo8(-3)
 354 0056 01F4      		brne .L29
 394:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 355               		.loc 1 394 0 is_stmt 0 discriminator 1
 356 0058 C330      		cpi r28,lo8(3)
 357 005a 01F4      		brne .+2
 358 005c 00C0      		rjmp .L25
 395:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 359               		.loc 1 395 0 is_stmt 1
 360 005e 8091 0000 		lds r24,mod_keys
 361               	.LVL25:
 362 0062 8B7F      		andi r24,lo8(-5)
 363 0064 00C0      		rjmp .L77
 364               	.L29:
 397:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) {
 365               		.loc 1 397 0
 366 0066 913F      		cpi r25,lo8(-15)
 367 0068 01F4      		brne .L32
 368 006a 8091 0000 		lds r24,mod_keys
 397:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) {
 369               		.loc 1 397 0 is_stmt 0 discriminator 1
 370 006e C530      		cpi r28,lo8(5)
 371 0070 01F4      		brne .L33
 398:catboard.c    **** 			mod_keys &= ~(KEY_CTRL);
 372               		.loc 1 398 0 is_stmt 1
 373 0072 8E7F      		andi r24,lo8(-2)
 374 0074 00C0      		rjmp .L77
 375               	.L33:
 401:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 376               		.loc 1 401 0
 377 0076 8D7F      		andi r24,lo8(-3)
 378 0078 8093 0000 		sts mod_keys,r24
 402:catboard.c    **** 			send();
 379               		.loc 1 402 0
 380 007c 0E94 0000 		call send
 381               	.LVL26:
 403:catboard.c    **** 			if (last_key==key_id && pressed_key_id!=KEY_PRESSED_SHIFT) {
 382               		.loc 1 403 0
 383 0080 8091 0000 		lds r24,last_key
 384 0084 8D13      		cpse r24,r29
 385 0086 00C0      		rjmp .L25
 403:catboard.c    **** 			if (last_key==key_id && pressed_key_id!=KEY_PRESSED_SHIFT) {
 386               		.loc 1 403 0 is_stmt 0 discriminator 1
 387 0088 C430      		cpi r28,lo8(4)
 388 008a 01F4      		brne .+2
 389 008c 00C0      		rjmp .L25
 404:catboard.c    **** 				if (layout!=layer1) {
 390               		.loc 1 404 0 is_stmt 1
 391 008e 8091 0000 		lds r24,layout
 392 0092 9091 0000 		lds r25,layout+1
 393 0096 20E0      		ldi r18,hi8(layer1)
 394 0098 8030      		cpi r24,lo8(layer1)
 395 009a 9207      		cpc r25,r18
 396 009c 01F4      		brne .+2
 397 009e 00C0      		rjmp .L25
 398               	.LBB44:
 405:catboard.c    **** 					if (layout==layer_fn) {
 399               		.loc 1 405 0
 400 00a0 8050      		subi r24,lo8(layer_fn)
 401 00a2 9040      		sbci r25,hi8(layer_fn)
 402 00a4 01F4      		brne .L35
 406:catboard.c    **** 						prev_layer = layer1;
 403               		.loc 1 406 0
 404 00a6 80E0      		ldi r24,lo8(layer1)
 405 00a8 90E0      		ldi r25,hi8(layer1)
 406 00aa 00C0      		rjmp .L75
 407               	.L35:
 408:catboard.c    **** 						layout = layer1;
 408               		.loc 1 408 0
 409 00ac 80E0      		ldi r24,lo8(layer1)
 410 00ae 90E0      		ldi r25,hi8(layer1)
 411               	.L76:
 412 00b0 9093 0000 		sts layout+1,r25
 413 00b4 8093 0000 		sts layout,r24
 414               	.L36:
 415               	/* epilogue start */
 416               	.LBE44:
 464:catboard.c    **** }
 417               		.loc 1 464 0
 418 00b8 DF91      		pop r29
 419               	.LVL27:
 420 00ba CF91      		pop r28
 421               	.LVL28:
 422               	.LBB45:
 410:catboard.c    **** 					change_layout();
 423               		.loc 1 410 0
 424 00bc 0C94 0000 		jmp change_layout
 425               	.LVL29:
 426               	.L32:
 427               	.LBE45:
 413:catboard.c    **** 		} else if (key_code==KEY_LAYER2 && pressed_key_id==KEY_PRESSED_CTRL) {
 428               		.loc 1 413 0
 429 00c0 923F      		cpi r25,lo8(-14)
 430 00c2 01F0      		breq .+2
 431 00c4 00C0      		rjmp .L25
 432 00c6 8091 0000 		lds r24,mod_keys
 413:catboard.c    **** 		} else if (key_code==KEY_LAYER2 && pressed_key_id==KEY_PRESSED_CTRL) {
 433               		.loc 1 413 0 is_stmt 0 discriminator 1
 434 00ca C530      		cpi r28,lo8(5)
 435 00cc 01F4      		brne .L37
 414:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_CTRL);
 436               		.loc 1 414 0 is_stmt 1
 437 00ce 8F7E      		andi r24,lo8(-17)
 438 00d0 00C0      		rjmp .L77
 439               	.L37:
 417:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 440               		.loc 1 417 0
 441 00d2 8F7D      		andi r24,lo8(-33)
 442 00d4 8093 0000 		sts mod_keys,r24
 418:catboard.c    **** 			send();
 443               		.loc 1 418 0
 444 00d8 0E94 0000 		call send
 445               	.LVL30:
 419:catboard.c    **** 			if (last_key==key_id && pressed_key_id!=KEY_PRESSED_SHIFT) {
 446               		.loc 1 419 0
 447 00dc 8091 0000 		lds r24,last_key
 448 00e0 8D13      		cpse r24,r29
 449 00e2 00C0      		rjmp .L25
 419:catboard.c    **** 			if (last_key==key_id && pressed_key_id!=KEY_PRESSED_SHIFT) {
 450               		.loc 1 419 0 is_stmt 0 discriminator 1
 451 00e4 C430      		cpi r28,lo8(4)
 452 00e6 01F4      		brne .+2
 453 00e8 00C0      		rjmp .L25
 420:catboard.c    **** 				if (layout!=layer2) {
 454               		.loc 1 420 0 is_stmt 1
 455 00ea 8091 0000 		lds r24,layout
 456 00ee 9091 0000 		lds r25,layout+1
 457 00f2 20E0      		ldi r18,hi8(layer2)
 458 00f4 8030      		cpi r24,lo8(layer2)
 459 00f6 9207      		cpc r25,r18
 460 00f8 01F4      		brne .+2
 461 00fa 00C0      		rjmp .L25
 462               	.LBB46:
 421:catboard.c    **** 					if (layout==layer_fn) {
 463               		.loc 1 421 0
 464 00fc 8050      		subi r24,lo8(layer_fn)
 465 00fe 9040      		sbci r25,hi8(layer_fn)
 466 0100 01F4      		brne .L38
 422:catboard.c    **** 						prev_layer = layer2;
 467               		.loc 1 422 0
 468 0102 80E0      		ldi r24,lo8(layer2)
 469 0104 90E0      		ldi r25,hi8(layer2)
 470               	.L75:
 471 0106 9093 0000 		sts prev_layer+1,r25
 472 010a 8093 0000 		sts prev_layer,r24
 473 010e 00C0      		rjmp .L36
 474               	.L38:
 424:catboard.c    **** 						layout = layer2;
 475               		.loc 1 424 0
 476 0110 80E0      		ldi r24,lo8(layer2)
 477 0112 90E0      		ldi r25,hi8(layer2)
 478 0114 00C0      		rjmp .L76
 479               	.LVL31:
 480               	.L28:
 481               	.LBE46:
 433:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys release
 482               		.loc 1 433 0
 483 0116 97FF      		sbrs r25,7
 484 0118 00C0      		rjmp .L39
 434:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 485               		.loc 1 434 0
 486 011a 8091 0000 		lds r24,mac_mode
 487 011e 8823      		tst r24
 488 0120 01F0      		breq .L40
 434:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 489               		.loc 1 434 0 is_stmt 0 discriminator 1
 490 0122 9138      		cpi r25,lo8(-127)
 491 0124 01F4      		brne .L41
 435:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 492               		.loc 1 435 0 is_stmt 1
 493 0126 8091 0000 		lds r24,mod_keys
 494 012a 877F      		andi r24,lo8(-9)
 495 012c 00C0      		rjmp .L77
 496               	.L41:
 436:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 497               		.loc 1 436 0 discriminator 1
 498 012e 9039      		cpi r25,lo8(-112)
 499 0130 01F0      		breq .L43
 500               	.L40:
 436:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 501               		.loc 1 436 0 is_stmt 0 discriminator 2
 502 0132 9038      		cpi r25,lo8(-128)
 503 0134 01F4      		brne .L44
 504               	.L43:
 437:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 505               		.loc 1 437 0 is_stmt 1
 506 0136 8091 0000 		lds r24,mod_keys
 507 013a 8F77      		andi r24,lo8(127)
 508 013c 00C0      		rjmp .L77
 509               	.L44:
 439:catboard.c    **** 			mod_keys &= ~(key_code & 0x7F);
 510               		.loc 1 439 0
 511 013e 9F77      		andi r25,lo8(127)
 512               	.LVL32:
 513 0140 9095      		com r25
 514 0142 8091 0000 		lds r24,mod_keys
 515 0146 8923      		and r24,r25
 516               	.L77:
 517 0148 8093 0000 		sts mod_keys,r24
 518               	/* epilogue start */
 464:catboard.c    **** }
 519               		.loc 1 464 0
 520 014c DF91      		pop r29
 521 014e CF91      		pop r28
 522               	.LVL33:
 441:catboard.c    **** 		send();
 523               		.loc 1 441 0
 524 0150 0C94 0000 		jmp send
 525               	.LVL34:
 526               	.L39:
 527 0154 E0E0      		ldi r30,lo8(queue)
 528 0156 F0E0      		ldi r31,hi8(queue)
 433:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys release
 529               		.loc 1 433 0
 530 0158 90E0      		ldi r25,0
 531               	.LVL35:
 532               	.L47:
 444:catboard.c    **** 			if (queue[i]==key_id) {
 533               		.loc 1 444 0
 534 015a 8191      		ld r24,Z+
 535 015c 8D17      		cp r24,r29
 536 015e 01F0      		breq .L73
 443:catboard.c    **** 		for (i=0; i<6; i++) {
 537               		.loc 1 443 0
 538 0160 9F5F      		subi r25,lo8(-(1))
 539               	.LVL36:
 540 0162 9630      		cpi r25,lo8(6)
 541 0164 01F4      		brne .L47
 542 0166 00C0      		rjmp .L73
 543               	.L49:
 449:catboard.c    **** 			queue[i] = queue[i+1];
 544               		.loc 1 449 0 discriminator 2
 545 0168 E92F      		mov r30,r25
 546 016a F0E0      		ldi r31,0
 547 016c E050      		subi r30,lo8(-(queue))
 548 016e F040      		sbci r31,hi8(-(queue))
 549 0170 8181      		ldd r24,Z+1
 550 0172 8083      		st Z,r24
 448:catboard.c    **** 		for (; i<6; i++) {
 551               		.loc 1 448 0 discriminator 2
 552 0174 9F5F      		subi r25,lo8(-(1))
 553               	.LVL37:
 554               	.L73:
 448:catboard.c    **** 		for (; i<6; i++) {
 555               		.loc 1 448 0 is_stmt 0 discriminator 1
 556 0176 9630      		cpi r25,lo8(6)
 557 0178 01F4      		brne .L49
 451:catboard.c    **** 		send();
 558               		.loc 1 451 0 is_stmt 1
 559 017a 0E94 0000 		call send
 560               	.LVL38:
 453:catboard.c    **** 		if (last_key==key_id) { // realise time
 561               		.loc 1 453 0
 562 017e 8091 0000 		lds r24,last_key
 563 0182 8D13      		cpse r24,r29
 564 0184 00C0      		rjmp .L50
 454:catboard.c    **** 			press_time2 = 0;
 565               		.loc 1 454 0
 566 0186 1092 0000 		sts press_time2+1,__zero_reg__
 567 018a 1092 0000 		sts press_time2,__zero_reg__
 455:catboard.c    **** 			release_time = 1;
 568               		.loc 1 455 0
 569 018e 81E0      		ldi r24,lo8(1)
 570 0190 90E0      		ldi r25,0
 571 0192 9093 0000 		sts release_time+1,r25
 572 0196 8093 0000 		sts release_time,r24
 573 019a 00C0      		rjmp .L78
 574               	.L50:
 458:catboard.c    **** 			press_time = 0;
 575               		.loc 1 458 0
 576 019c 1092 0000 		sts press_time+1,__zero_reg__
 577 01a0 1092 0000 		sts press_time,__zero_reg__
 459:catboard.c    **** 			press_time2 = 0;
 578               		.loc 1 459 0
 579 01a4 1092 0000 		sts press_time2+1,__zero_reg__
 580 01a8 1092 0000 		sts press_time2,__zero_reg__
 460:catboard.c    **** 			release_time = 0;
 581               		.loc 1 460 0
 582 01ac 1092 0000 		sts release_time+1,__zero_reg__
 583 01b0 1092 0000 		sts release_time,__zero_reg__
 584               	.L78:
 461:catboard.c    **** 			repeat_time = 0;
 585               		.loc 1 461 0
 586 01b4 1092 0000 		sts repeat_time+1,__zero_reg__
 587 01b8 1092 0000 		sts repeat_time,__zero_reg__
 588               	.L25:
 589               	/* epilogue start */
 464:catboard.c    **** }
 590               		.loc 1 464 0
 591 01bc DF91      		pop r29
 592               	.LVL39:
 593 01be CF91      		pop r28
 594               	.LVL40:
 595 01c0 0895      		ret
 596               	.LFE13:
 598               		.section	.text.key_press,"ax",@progbits
 599               	.global	key_press
 601               	key_press:
 602               	.LFB12:
 258:catboard.c    **** void key_press(uint8_t key_id) {
 603               		.loc 1 258 0
 604               	.LVL41:
 605 0000 CF93      		push r28
 606               	.LCFI6:
 607               	/* prologue: function */
 608               	/* frame size = 0 */
 609               	/* stack size = 1 */
 610               	.L__stack_usage = 1
 611 0002 C82F      		mov r28,r24
 260:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 612               		.loc 1 260 0
 613 0004 6091 0000 		lds r22,mod_keys
 614 0008 962F      		mov r25,r22
 615 000a 9D7D      		andi r25,lo8(-35)
 616               	.LVL42:
 261:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 617               		.loc 1 261 0
 618 000c 282F      		mov r18,r24
 619 000e 30E0      		ldi r19,0
 620 0010 8091 0000 		lds r24,pressed+35
 621               	.LVL43:
 622 0014 8111      		cpse r24,__zero_reg__
 623 0016 00C0      		rjmp .L117
 261:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 624               		.loc 1 261 0 is_stmt 0 discriminator 1
 625 0018 9923      		tst r25
 626 001a 01F0      		breq .L118
 261:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 627               		.loc 1 261 0
 628 001c 82E0      		ldi r24,lo8(2)
 629 001e 00C0      		rjmp .L80
 630               	.L117:
 631 0020 81E0      		ldi r24,lo8(1)
 632 0022 00C0      		rjmp .L80
 633               	.L118:
 634 0024 8FEF      		ldi r24,lo8(-1)
 635               	.L80:
 261:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 636               		.loc 1 261 0 discriminator 6
 637 0026 F901      		movw r30,r18
 638 0028 E050      		subi r30,lo8(-(pressed))
 639 002a F040      		sbci r31,hi8(-(pressed))
 640 002c 8083      		st Z,r24
 263:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 641               		.loc 1 263 0 is_stmt 1 discriminator 6
 642 002e 8130      		cpi r24,lo8(1)
 643 0030 01F4      		brne .L81
 263:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 644               		.loc 1 263 0 is_stmt 0 discriminator 1
 645 0032 F901      		movw r30,r18
 646 0034 E050      		subi r30,lo8(-(layer_fn))
 647 0036 F040      		sbci r31,hi8(-(layer_fn))
 648 0038 00C0      		rjmp .L141
 649               	.L81:
 263:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 650               		.loc 1 263 0 discriminator 2
 651 003a E091 0000 		lds r30,layout
 652 003e F091 0000 		lds r31,layout+1
 653 0042 EC0F      		add r30,r28
 654 0044 F11D      		adc r31,__zero_reg__
 655               	.L141:
 656 0046 8081      		ld r24,Z
 657               	.LVL44:
 264:catboard.c    **** 	if (key_code==NULL) {
 658               		.loc 1 264 0 is_stmt 1 discriminator 2
 659 0048 8111      		cpse r24,__zero_reg__
 660 004a 00C0      		rjmp .L83
 265:catboard.c    **** 		key_code = layout[key_id];
 661               		.loc 1 265 0
 662 004c 4C2F      		mov r20,r28
 663 004e 50E0      		ldi r21,0
 664 0050 E091 0000 		lds r30,layout
 665 0054 F091 0000 		lds r31,layout+1
 666 0058 E40F      		add r30,r20
 667 005a F51F      		adc r31,r21
 668 005c 8081      		ld r24,Z
 669               	.LVL45:
 266:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 670               		.loc 1 266 0
 671 005e 9923      		tst r25
 672 0060 01F0      		breq .L119
 673 0062 72E0      		ldi r23,lo8(2)
 674 0064 00C0      		rjmp .L84
 675               	.L119:
 676 0066 7FEF      		ldi r23,lo8(-1)
 677               	.L84:
 266:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 678               		.loc 1 266 0 is_stmt 0 discriminator 3
 679 0068 F901      		movw r30,r18
 680 006a E050      		subi r30,lo8(-(pressed))
 681 006c F040      		sbci r31,hi8(-(pressed))
 682 006e 7083      		st Z,r23
 267:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 683               		.loc 1 267 0 is_stmt 1 discriminator 3
 684 0070 8111      		cpse r24,__zero_reg__
 685 0072 00C0      		rjmp .L83
 267:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 686               		.loc 1 267 0 is_stmt 0 discriminator 1
 687 0074 A091 0000 		lds r26,prev_layer
 688 0078 B091 0000 		lds r27,prev_layer+1
 689 007c 1097      		sbiw r26,0
 690 007e 01F4      		brne .+2
 691 0080 00C0      		rjmp .L107
 692 0082 6111      		cpse r22,__zero_reg__
 693 0084 00C0      		rjmp .L107
 268:catboard.c    **** 			key_code = prev_layer[key_id];
 694               		.loc 1 268 0 is_stmt 1
 695 0086 A40F      		add r26,r20
 696 0088 B51F      		adc r27,r21
 697 008a 8C91      		ld r24,X
 698               	.LVL46:
 269:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 699               		.loc 1 269 0
 700 008c 46E0      		ldi r20,lo8(6)
 701 008e 4083      		st Z,r20
 702               	.L83:
 273:catboard.c    **** 	if (key_code>0xF0) { // Catboard keys
 703               		.loc 1 273 0
 704 0090 813F      		cpi r24,lo8(-15)
 705 0092 00F4      		brsh .+2
 706 0094 00C0      		rjmp .L85
 274:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 707               		.loc 1 274 0
 708 0096 8D3F      		cpi r24,lo8(-3)
 709 0098 01F4      		brne .L86
 275:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 710               		.loc 1 275 0
 711 009a F901      		movw r30,r18
 712 009c E050      		subi r30,lo8(-(pressed))
 713 009e F040      		sbci r31,hi8(-(pressed))
 714 00a0 8081      		ld r24,Z
 715               	.LVL47:
 716 00a2 8130      		cpi r24,lo8(1)
 717 00a4 01F4      		brne .L87
 276:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 718               		.loc 1 276 0
 719 00a6 64E0      		ldi r22,lo8(4)
 720 00a8 8BE2      		ldi r24,lo8(43)
 721 00aa 00C0      		rjmp .L144
 722               	.L87:
 278:catboard.c    **** 				if (! (mod_keys & (KEY_ALT|KEY_RIGHT_ALT|KEY_CTRL|KEY_RIGHT_CTRL|KEY_GUI|KEY_RIGHT_GUI))) {
 723               		.loc 1 278 0
 724 00ac 9111      		cpse r25,__zero_reg__
 725 00ae 00C0      		rjmp .L89
 279:catboard.c    **** 					mod_keys |= (KEY_ALT);
 726               		.loc 1 279 0
 727 00b0 6460      		ori r22,lo8(4)
 728 00b2 6093 0000 		sts mod_keys,r22
 729 00b6 00C0      		rjmp .L90
 730               	.L89:
 281:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 731               		.loc 1 281 0
 732 00b8 83E0      		ldi r24,lo8(3)
 733 00ba 8083      		st Z,r24
 734               	.L90:
 283:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 735               		.loc 1 283 0
 736 00bc 8091 0000 		lds r24,mod_keys
 737 00c0 8093 0000 		sts keyboard_modifier_keys,r24
 284:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 738               		.loc 1 284 0
 739 00c4 8BE2      		ldi r24,lo8(43)
 740 00c6 8093 0000 		sts keyboard_keys,r24
 285:catboard.c    **** 				usb_keyboard_send();
 741               		.loc 1 285 0
 742 00ca 0E94 0000 		call usb_keyboard_send
 743               	.LVL48:
 744               	.LBB47:
 745               	.LBB48:
 746               		.loc 2 164 0
 747 00ce 2FEF      		ldi r18,lo8(159999)
 748 00d0 80E7      		ldi r24,hi8(159999)
 749 00d2 92E0      		ldi r25,hlo8(159999)
 750 00d4 2150      		1: subi r18,1
 751 00d6 8040      		sbci r24,0
 752 00d8 9040      		sbci r25,0
 753 00da 01F4      		brne 1b
 754 00dc 00C0      		rjmp .
 755 00de 0000      		nop
 756 00e0 00C0      		rjmp .L143
 757               	.LVL49:
 758               	.L86:
 759               	.LBE48:
 760               	.LBE47:
 289:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 761               		.loc 1 289 0
 762 00e2 8E3F      		cpi r24,lo8(-2)
 763 00e4 01F4      		brne .L91
 290:catboard.c    **** 			if (prev_layer) { // FnLock Off
 764               		.loc 1 290 0
 765 00e6 2091 0000 		lds r18,prev_layer
 766 00ea 3091 0000 		lds r19,prev_layer+1
 767               	.LVL50:
 768 00ee 2115      		cp r18,__zero_reg__
 769 00f0 3105      		cpc r19,__zero_reg__
 770 00f2 01F0      		breq .L92
 291:catboard.c    **** 				layout = prev_layer;
 771               		.loc 1 291 0
 772 00f4 3093 0000 		sts layout+1,r19
 773 00f8 2093 0000 		sts layout,r18
 292:catboard.c    **** 				prev_layer = 0;
 774               		.loc 1 292 0
 775 00fc 1092 0000 		sts prev_layer+1,__zero_reg__
 776 0100 1092 0000 		sts prev_layer,__zero_reg__
 777 0104 00C0      		rjmp .L93
 778               	.L92:
 294:catboard.c    **** 				prev_layer = layout;
 779               		.loc 1 294 0
 780 0106 2091 0000 		lds r18,layout
 781 010a 3091 0000 		lds r19,layout+1
 782 010e 3093 0000 		sts prev_layer+1,r19
 783 0112 2093 0000 		sts prev_layer,r18
 295:catboard.c    **** 				layout = layer_fnlock;
 784               		.loc 1 295 0
 785 0116 20E0      		ldi r18,lo8(layer_fnlock)
 786 0118 30E0      		ldi r19,hi8(layer_fnlock)
 787 011a 3093 0000 		sts layout+1,r19
 788 011e 2093 0000 		sts layout,r18
 789               	.L93:
 297:catboard.c    **** 			if (prev_layer || mac_mode) {
 790               		.loc 1 297 0
 791 0122 2091 0000 		lds r18,prev_layer
 792 0126 3091 0000 		lds r19,prev_layer+1
 793 012a 232B      		or r18,r19
 794 012c 01F4      		brne .L99
 297:catboard.c    **** 			if (prev_layer || mac_mode) {
 795               		.loc 1 297 0 is_stmt 0 discriminator 1
 796 012e 8091 0000 		lds r24,mac_mode
 797               	.LVL51:
 798 0132 8823      		tst r24
 799 0134 01F0      		breq .L100
 800 0136 00C0      		rjmp .L99
 801               	.LVL52:
 802               	.L91:
 302:catboard.c    **** 		} else if (key_code==KEY_MAC_MODE) { // Mac mode
 803               		.loc 1 302 0 is_stmt 1
 804 0138 8C3F      		cpi r24,lo8(-4)
 805 013a 01F4      		brne .L96
 303:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 806               		.loc 1 303 0
 807 013c F901      		movw r30,r18
 808 013e E050      		subi r30,lo8(-(pressed))
 809 0140 F040      		sbci r31,hi8(-(pressed))
 810 0142 8081      		ld r24,Z
 811               	.LVL53:
 812 0144 8130      		cpi r24,lo8(1)
 813 0146 01F4      		brne .L97
 303:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 814               		.loc 1 303 0 is_stmt 0 discriminator 1
 815 0148 862F      		mov r24,r22
 816 014a 8272      		andi r24,lo8(34)
 817 014c 01F0      		breq .L97
 304:catboard.c    **** 				mac_mode = ! mac_mode;
 818               		.loc 1 304 0 is_stmt 1
 819 014e 81E0      		ldi r24,lo8(1)
 820 0150 9091 0000 		lds r25,mac_mode
 821               	.LVL54:
 822 0154 9111      		cpse r25,__zero_reg__
 823 0156 80E0      		ldi r24,0
 824               	.L98:
 825 0158 8093 0000 		sts mac_mode,r24
 305:catboard.c    **** 				if (mac_mode || prev_layer) {
 826               		.loc 1 305 0
 827 015c 8111      		cpse r24,__zero_reg__
 828 015e 00C0      		rjmp .L99
 305:catboard.c    **** 				if (mac_mode || prev_layer) {
 829               		.loc 1 305 0 is_stmt 0 discriminator 1
 830 0160 2091 0000 		lds r18,prev_layer
 831 0164 3091 0000 		lds r19,prev_layer+1
 832               	.LVL55:
 833 0168 232B      		or r18,r19
 834 016a 01F0      		breq .L100
 835               	.L99:
 306:catboard.c    **** 					LED_ON;
 836               		.loc 1 306 0 is_stmt 1
 837 016c 5C9A      		sbi 0xb,4
 838 016e 00C0      		rjmp .L88
 839               	.L100:
 308:catboard.c    **** 					LED_OFF;
 840               		.loc 1 308 0
 841 0170 5C98      		cbi 0xb,4
 842 0172 00C0      		rjmp .L88
 843               	.LVL56:
 844               	.L97:
 311:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 845               		.loc 1 311 0
 846 0174 8CE2      		ldi r24,lo8(44)
 847               	.L144:
 848 0176 0E94 0000 		call usb_keyboard_press
 849               	.LVL57:
 850 017a 00C0      		rjmp .L88
 851               	.LVL58:
 852               	.L96:
 317:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 853               		.loc 1 317 0
 854 017c 813F      		cpi r24,lo8(-15)
 855 017e 01F4      		brne .L101
 318:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 856               		.loc 1 318 0
 857 0180 862F      		mov r24,r22
 858               	.LVL59:
 859 0182 8272      		andi r24,lo8(34)
 860 0184 01F0      		breq .L102
 319:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 861               		.loc 1 319 0
 862 0186 F901      		movw r30,r18
 863 0188 E050      		subi r30,lo8(-(pressed))
 864 018a F040      		sbci r31,hi8(-(pressed))
 865 018c 85E0      		ldi r24,lo8(5)
 866 018e 8083      		st Z,r24
 320:catboard.c    **** 				mod_keys |= KEY_CTRL;
 867               		.loc 1 320 0
 868 0190 6160      		ori r22,lo8(1)
 869 0192 00C0      		rjmp .L146
 870               	.L102:
 323:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 871               		.loc 1 323 0
 872 0194 6623      		tst r22
 873 0196 01F0      		breq .L103
 323:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 874               		.loc 1 323 0 is_stmt 0 discriminator 1
 875 0198 F901      		movw r30,r18
 876 019a E050      		subi r30,lo8(-(pressed))
 877 019c F040      		sbci r31,hi8(-(pressed))
 878 019e 84E0      		ldi r24,lo8(4)
 879 01a0 8083      		st Z,r24
 880               	.L103:
 324:catboard.c    **** 				mod_keys |= KEY_SHIFT;
 881               		.loc 1 324 0 is_stmt 1
 882 01a2 6260      		ori r22,lo8(2)
 883               	.LVL60:
 884               	.L146:
 885 01a4 6093 0000 		sts mod_keys,r22
 886 01a8 00C0      		rjmp .L143
 887               	.LVL61:
 888               	.L101:
 335:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 889               		.loc 1 335 0
 890 01aa 823F      		cpi r24,lo8(-14)
 891 01ac 01F4      		brne .L104
 342:catboard.c    **** 				mod_keys |= KEY_RIGHT_SHIFT;
 892               		.loc 1 342 0
 893 01ae 6062      		ori r22,lo8(32)
 894 01b0 00C0      		rjmp .L146
 895               	.L104:
 353:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 896               		.loc 1 353 0
 897 01b2 8B3F      		cpi r24,lo8(-5)
 898 01b4 01F0      		breq .+2
 899 01b6 00C0      		rjmp .L88
 354:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 900               		.loc 1 354 0
 901 01b8 81E0      		ldi r24,lo8(1)
 902               	.LVL62:
 903 01ba 9091 0000 		lds r25,turbo_repeat
 904               	.LVL63:
 905 01be 9111      		cpse r25,__zero_reg__
 906 01c0 80E0      		ldi r24,0
 907               	.L106:
 908 01c2 8093 0000 		sts turbo_repeat,r24
 909 01c6 00C0      		rjmp .L88
 910               	.LVL64:
 911               	.L85:
 356:catboard.c    **** 	} else if (key_code>=0x80) { // Mod keys
 912               		.loc 1 356 0
 913 01c8 87FF      		sbrs r24,7
 914 01ca 00C0      		rjmp .L107
 357:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 915               		.loc 1 357 0
 916 01cc 9091 0000 		lds r25,mac_mode
 917               	.LVL65:
 918 01d0 9923      		tst r25
 919 01d2 01F0      		breq .L108
 357:catboard.c    **** 		if (mac_mode && key_code==(KEY_CTRL|KEY_MOD)) {
 920               		.loc 1 357 0 is_stmt 0 discriminator 1
 921 01d4 8138      		cpi r24,lo8(-127)
 922 01d6 01F4      		brne .L109
 358:catboard.c    **** 			mod_keys |= KEY_GUI;
 923               		.loc 1 358 0 is_stmt 1
 924 01d8 6860      		ori r22,lo8(8)
 925               	.LVL66:
 926 01da 00C0      		rjmp .L146
 927               	.LVL67:
 928               	.L109:
 359:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 929               		.loc 1 359 0 discriminator 1
 930 01dc 8039      		cpi r24,lo8(-112)
 931 01de 01F0      		breq .L111
 932               	.L108:
 359:catboard.c    **** 		} else if ((mac_mode && key_code==(KEY_RIGHT_CTRL|KEY_MOD)) || key_code==(KEY_RIGHT_GUI|KEY_MOD))
 933               		.loc 1 359 0 is_stmt 0 discriminator 2
 934 01e0 8038      		cpi r24,lo8(-128)
 935 01e2 01F4      		brne .L112
 936               	.L111:
 360:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 937               		.loc 1 360 0 is_stmt 1
 938 01e4 6068      		ori r22,lo8(-128)
 939               	.LVL68:
 940 01e6 00C0      		rjmp .L146
 941               	.LVL69:
 942               	.L112:
 362:catboard.c    **** 			mod_keys |= (key_code & 0x7F);
 943               		.loc 1 362 0
 944 01e8 8F77      		andi r24,lo8(127)
 945               	.LVL70:
 946 01ea 862B      		or r24,r22
 947 01ec 8093 0000 		sts mod_keys,r24
 948 01f0 00C0      		rjmp .L143
 949               	.LVL71:
 950               	.L107:
 366:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 951               		.loc 1 366 0
 952 01f2 8091 0000 		lds r24,last_key
 953               	.LVL72:
 954 01f6 8C13      		cpse r24,r28
 955 01f8 00C0      		rjmp .L113
 366:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 956               		.loc 1 366 0 is_stmt 0 discriminator 1
 957 01fa 2091 0000 		lds r18,release_time
 958 01fe 3091 0000 		lds r19,release_time+1
 959               	.LVL73:
 960 0202 2A30      		cpi r18,10
 961 0204 3105      		cpc r19,__zero_reg__
 962 0206 00F0      		brlo .L88
 963               	.L113:
 964               	.LVL74:
 367:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 965               		.loc 1 367 0 is_stmt 1 discriminator 1
 966 0208 8091 0000 		lds r24,queue+4
 967 020c 8093 0000 		sts queue+5,r24
 968               	.LVL75:
 969 0210 8091 0000 		lds r24,queue+3
 970 0214 8093 0000 		sts queue+4,r24
 971               	.LVL76:
 972 0218 8091 0000 		lds r24,queue+2
 973 021c 8093 0000 		sts queue+3,r24
 974               	.LVL77:
 975 0220 8091 0000 		lds r24,queue+1
 976 0224 8093 0000 		sts queue+2,r24
 977               	.LVL78:
 978 0228 8091 0000 		lds r24,queue
 979 022c 8093 0000 		sts queue+1,r24
 980               	.LVL79:
 368:catboard.c    **** 			queue[0] = key_id;
 981               		.loc 1 368 0 discriminator 1
 982 0230 C093 0000 		sts queue,r28
 983               	.LVL80:
 984               	.L143:
 369:catboard.c    **** 			send();
 985               		.loc 1 369 0 discriminator 1
 986 0234 0E94 0000 		call send
 987               	.LVL81:
 988               	.L88:
 373:catboard.c    **** 	if (last_key==key_id) { // calc press2
 989               		.loc 1 373 0
 990 0238 8091 0000 		lds r24,last_key
 991 023c 8C13      		cpse r24,r28
 992 023e 00C0      		rjmp .L115
 374:catboard.c    **** 		press_time2 = 1;
 993               		.loc 1 374 0
 994 0240 81E0      		ldi r24,lo8(1)
 995 0242 90E0      		ldi r25,0
 996 0244 9093 0000 		sts press_time2+1,r25
 997 0248 8093 0000 		sts press_time2,r24
 998 024c 00C0      		rjmp .L145
 999               	.L115:
 377:catboard.c    **** 		last_key = key_id;
 1000               		.loc 1 377 0
 1001 024e C093 0000 		sts last_key,r28
 378:catboard.c    **** 		press_time = 1;
 1002               		.loc 1 378 0
 1003 0252 81E0      		ldi r24,lo8(1)
 1004 0254 90E0      		ldi r25,0
 1005 0256 9093 0000 		sts press_time+1,r25
 1006 025a 8093 0000 		sts press_time,r24
 379:catboard.c    **** 		press_time2 = 0;
 1007               		.loc 1 379 0
 1008 025e 1092 0000 		sts press_time2+1,__zero_reg__
 1009 0262 1092 0000 		sts press_time2,__zero_reg__
 380:catboard.c    **** 		release_time = 0;
 1010               		.loc 1 380 0
 1011 0266 1092 0000 		sts release_time+1,__zero_reg__
 1012 026a 1092 0000 		sts release_time,__zero_reg__
 1013               	.L145:
 381:catboard.c    **** 		repeat_time = 0;
 1014               		.loc 1 381 0
 1015 026e 1092 0000 		sts repeat_time+1,__zero_reg__
 1016 0272 1092 0000 		sts repeat_time,__zero_reg__
 1017               	/* epilogue start */
 383:catboard.c    **** }
 1018               		.loc 1 383 0
 1019 0276 CF91      		pop r28
 1020               	.LVL82:
 1021 0278 0895      		ret
 1022               	.LFE12:
 1024               		.section	.text.repeat_tick,"ax",@progbits
 1025               	.global	repeat_tick
 1027               	repeat_tick:
 1028               	.LFB11:
 218:catboard.c    **** void repeat_tick(void) {
 1029               		.loc 1 218 0
 1030               	/* prologue: function */
 1031               	/* frame size = 0 */
 1032               	/* stack size = 0 */
 1033               	.L__stack_usage = 0
 219:catboard.c    **** 	if (repeat_time) { // repeat pause
 1034               		.loc 1 219 0
 1035 0000 8091 0000 		lds r24,repeat_time
 1036 0004 9091 0000 		lds r25,repeat_time+1
 1037 0008 0097      		sbiw r24,0
 1038 000a 01F0      		breq .L148
 220:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 1039               		.loc 1 220 0
 1040 000c 2091 0000 		lds r18,release_time
 1041 0010 3091 0000 		lds r19,release_time+1
 1042 0014 3695      		lsr r19
 1043 0016 2795      		ror r18
 1044 0018 3695      		lsr r19
 1045 001a 2795      		ror r18
 1046 001c 8217      		cp r24,r18
 1047 001e 9307      		cpc r25,r19
 1048 0020 00F4      		brsh .L149
 221:catboard.c    **** 			repeat_time++;
 1049               		.loc 1 221 0
 1050 0022 0196      		adiw r24,1
 1051 0024 00C0      		rjmp .L163
 1052               	.L149:
 223:catboard.c    **** 			repeat_time = 1;
 1053               		.loc 1 223 0
 1054 0026 81E0      		ldi r24,lo8(1)
 1055 0028 90E0      		ldi r25,0
 1056 002a 9093 0000 		sts repeat_time+1,r25
 1057 002e 8093 0000 		sts repeat_time,r24
 224:catboard.c    **** 			if (turbo_repeat) {
 1058               		.loc 1 224 0
 1059 0032 8091 0000 		lds r24,turbo_repeat
 1060 0036 8823      		tst r24
 1061 0038 01F4      		brne .+2
 1062 003a 00C0      		rjmp .L147
 225:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 1063               		.loc 1 225 0
 1064 003c 8091 0000 		lds r24,mod_keys
 1065 0040 8093 0000 		sts keyboard_modifier_keys,r24
 226:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 1066               		.loc 1 226 0
 1067 0044 8091 0000 		lds r24,last_key
 1068 0048 0E94 0000 		call get_code
 1069               	.LVL83:
 1070 004c 8093 0000 		sts keyboard_keys,r24
 227:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 1071               		.loc 1 227 0
 1072 0050 0E94 0000 		call usb_keyboard_send
 1073               	.LVL84:
 1074 0054 8111      		cpse r24,__zero_reg__
 1075 0056 00C0      		rjmp .L147
 228:catboard.c    **** 					keyboard_keys[0] = 0;
 1076               		.loc 1 228 0
 1077 0058 1092 0000 		sts keyboard_keys,__zero_reg__
 229:catboard.c    **** 					usb_keyboard_send();
 1078               		.loc 1 229 0
 1079 005c 0C94 0000 		jmp usb_keyboard_send
 1080               	.LVL85:
 1081               	.L148:
 233:catboard.c    **** 	} else if (press_time2) { // press2 pause
 1082               		.loc 1 233 0
 1083 0060 2091 0000 		lds r18,press_time2
 1084 0064 3091 0000 		lds r19,press_time2+1
 1085 0068 8091 0000 		lds r24,press_time
 1086 006c 9091 0000 		lds r25,press_time+1
 1087 0070 2115      		cp r18,__zero_reg__
 1088 0072 3105      		cpc r19,__zero_reg__
 1089 0074 01F0      		breq .L153
 234:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 1090               		.loc 1 234 0
 1091 0076 4091 0000 		lds r20,pressed+35
 1092 007a 4423      		tst r20
 1093 007c 01F0      		breq .L159
 1094 007e 45E0      		ldi r20,lo8(5)
 1095 0080 50E0      		ldi r21,0
 1096 0082 00C0      		rjmp .L154
 1097               	.L159:
 1098 0084 4EE1      		ldi r20,lo8(30)
 1099 0086 50E0      		ldi r21,0
 1100               	.L154:
 234:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 1101               		.loc 1 234 0 is_stmt 0 discriminator 3
 1102 0088 840F      		add r24,r20
 1103 008a 951F      		adc r25,r21
 1104 008c 2817      		cp r18,r24
 1105 008e 3907      		cpc r19,r25
 1106 0090 00F4      		brsh .L155
 235:catboard.c    **** 			press_time2++;
 1107               		.loc 1 235 0 is_stmt 1
 1108 0092 2F5F      		subi r18,-1
 1109 0094 3F4F      		sbci r19,-1
 1110 0096 3093 0000 		sts press_time2+1,r19
 1111 009a 2093 0000 		sts press_time2,r18
 1112 009e 0895      		ret
 1113               	.L155:
 237:catboard.c    **** 			repeat_time = 1;
 1114               		.loc 1 237 0
 1115 00a0 81E0      		ldi r24,lo8(1)
 1116 00a2 90E0      		ldi r25,0
 1117               	.L163:
 1118 00a4 9093 0000 		sts repeat_time+1,r25
 1119 00a8 8093 0000 		sts repeat_time,r24
 1120 00ac 0895      		ret
 1121               	.L153:
 239:catboard.c    **** 	} else if (release_time) { // release pause
 1122               		.loc 1 239 0
 1123 00ae 2091 0000 		lds r18,release_time
 1124 00b2 3091 0000 		lds r19,release_time+1
 1125 00b6 2115      		cp r18,__zero_reg__
 1126 00b8 3105      		cpc r19,__zero_reg__
 1127 00ba 01F0      		breq .L156
 240:catboard.c    **** 		if (release_time<(press_time+50)) {
 1128               		.loc 1 240 0
 1129 00bc C296      		adiw r24,50
 1130 00be 2817      		cp r18,r24
 1131 00c0 3907      		cpc r19,r25
 1132 00c2 00F4      		brsh .L157
 241:catboard.c    **** 			release_time++;
 1133               		.loc 1 241 0
 1134 00c4 2F5F      		subi r18,-1
 1135 00c6 3F4F      		sbci r19,-1
 1136 00c8 3093 0000 		sts release_time+1,r19
 1137 00cc 2093 0000 		sts release_time,r18
 1138 00d0 0895      		ret
 1139               	.L157:
 243:catboard.c    **** 			last_key = 0xFF;
 1140               		.loc 1 243 0
 1141 00d2 8FEF      		ldi r24,lo8(-1)
 1142 00d4 8093 0000 		sts last_key,r24
 244:catboard.c    **** 			release_time = 0;
 1143               		.loc 1 244 0
 1144 00d8 1092 0000 		sts release_time+1,__zero_reg__
 1145 00dc 1092 0000 		sts release_time,__zero_reg__
 245:catboard.c    **** 			press_time = 0;
 1146               		.loc 1 245 0
 1147 00e0 1092 0000 		sts press_time+1,__zero_reg__
 1148 00e4 1092 0000 		sts press_time,__zero_reg__
 246:catboard.c    **** 			press_time2 = 0;
 1149               		.loc 1 246 0
 1150 00e8 1092 0000 		sts press_time2+1,__zero_reg__
 1151 00ec 1092 0000 		sts press_time2,__zero_reg__
 1152 00f0 0895      		ret
 1153               	.L156:
 249:catboard.c    **** 	} else if (press_time) { // press1 pause
 1154               		.loc 1 249 0
 1155 00f2 0097      		sbiw r24,0
 1156 00f4 01F0      		breq .L147
 250:catboard.c    **** 		if (press_time<250) {
 1157               		.loc 1 250 0
 1158 00f6 8A3F      		cpi r24,-6
 1159 00f8 9105      		cpc r25,__zero_reg__
 1160 00fa 00F4      		brsh .L158
 251:catboard.c    **** 			press_time++;
 1161               		.loc 1 251 0
 1162 00fc 0196      		adiw r24,1
 1163 00fe 9093 0000 		sts press_time+1,r25
 1164 0102 8093 0000 		sts press_time,r24
 1165 0106 0895      		ret
 1166               	.L158:
 253:catboard.c    **** 			press_time = 0;
 1167               		.loc 1 253 0
 1168 0108 1092 0000 		sts press_time+1,__zero_reg__
 1169 010c 1092 0000 		sts press_time,__zero_reg__
 1170               	.L147:
 1171 0110 0895      		ret
 1172               	.LFE11:
 1174               		.section	.text.poll,"ax",@progbits
 1175               	.global	poll
 1177               	poll:
 1178               	.LFB10:
 197:catboard.c    **** void poll() {
 1179               		.loc 1 197 0
 1180 0000 7F92      		push r7
 1181               	.LCFI7:
 1182 0002 8F92      		push r8
 1183               	.LCFI8:
 1184 0004 9F92      		push r9
 1185               	.LCFI9:
 1186 0006 AF92      		push r10
 1187               	.LCFI10:
 1188 0008 BF92      		push r11
 1189               	.LCFI11:
 1190 000a CF92      		push r12
 1191               	.LCFI12:
 1192 000c DF92      		push r13
 1193               	.LCFI13:
 1194 000e EF92      		push r14
 1195               	.LCFI14:
 1196 0010 FF92      		push r15
 1197               	.LCFI15:
 1198 0012 0F93      		push r16
 1199               	.LCFI16:
 1200 0014 1F93      		push r17
 1201               	.LCFI17:
 1202 0016 CF93      		push r28
 1203               	.LCFI18:
 1204 0018 DF93      		push r29
 1205               	.LCFI19:
 1206               	/* prologue: function */
 1207               	/* frame size = 0 */
 1208               	/* stack size = 13 */
 1209               	.L__stack_usage = 13
 1210               	.LVL86:
 1211 001a 70E0      		ldi r23,lo8(row_port)
 1212 001c E72E      		mov r14,r23
 1213 001e 70E0      		ldi r23,hi8(row_port)
 1214 0020 F72E      		mov r15,r23
 1215 0022 00E0      		ldi r16,lo8(row_bit)
 1216 0024 10E0      		ldi r17,hi8(row_bit)
 199:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1217               		.loc 1 199 0
 1218 0026 912C      		mov r9,__zero_reg__
 1219               	.LVL87:
 1220               	.L168:
 200:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 1221               		.loc 1 200 0
 1222 0028 D701      		movw r26,r14
 1223 002a CD91      		ld r28,X+
 1224 002c DD91      		ld r29,X+
 1225 002e 7D01      		movw r14,r26
 1226 0030 F801      		movw r30,r16
 1227 0032 7190      		ld r7,Z+
 1228 0034 8F01      		movw r16,r30
 1229 0036 972D      		mov r25,r7
 1230 0038 9095      		com r25
 1231 003a 8881      		ld r24,Y
 1232 003c 8923      		and r24,r25
 1233 003e 8883      		st Y,r24
 1234               	.LVL88:
 1235               	.LBB49:
 1236               	.LBB50:
 165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #else
 167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	{
 172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		{
 176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		}
 180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		return;
 181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	}
 182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	else
 183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #endif
 186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** }
 187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** /**
 189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   
 207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  
 214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****  */
 223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** void
 224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** {
 226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#else
 242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		//round up by default
 243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	#endif
 245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 
 246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1237               		.loc 2 246 0
 1238 0040 F5E0      		ldi r31,lo8(5)
 1239 0042 FA95      		1: dec r31
 1240 0044 01F4      		brne 1b
 1241 0046 0000      		nop
 1242               	.LVL89:
 1243 0048 50E0      		ldi r21,lo8(col_pin)
 1244 004a C52E      		mov r12,r21
 1245 004c 50E0      		ldi r21,hi8(col_pin)
 1246 004e D52E      		mov r13,r21
 1247 0050 60E0      		ldi r22,lo8(col_bit)
 1248 0052 A62E      		mov r10,r22
 1249 0054 60E0      		ldi r22,hi8(col_bit)
 1250 0056 B62E      		mov r11,r22
 1251 0058 812C      		mov r8,__zero_reg__
 1252               	.LVL90:
 1253               	.L167:
 1254               	.LBE50:
 1255               	.LBE49:
 203:catboard.c    **** 			key_id = col*ROWS+row;
 1256               		.loc 1 203 0
 1257 005a 882D      		mov r24,r8
 1258 005c 890D      		add r24,r9
 1259               	.LVL91:
 204:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1260               		.loc 1 204 0
 1261 005e D601      		movw r26,r12
 1262 0060 ED91      		ld r30,X+
 1263 0062 FD91      		ld r31,X+
 1264 0064 6D01      		movw r12,r26
 1265 0066 D501      		movw r26,r10
 1266 0068 9D91      		ld r25,X+
 1267 006a 5D01      		movw r10,r26
 1268 006c 2081      		ld r18,Z
 1269 006e 9223      		and r25,r18
 1270 0070 282F      		mov r18,r24
 1271 0072 30E0      		ldi r19,0
 205:catboard.c    **** 				if (! pressed[key_id]) {
 1272               		.loc 1 205 0
 1273 0074 F901      		movw r30,r18
 1274 0076 E050      		subi r30,lo8(-(pressed))
 1275 0078 F040      		sbci r31,hi8(-(pressed))
 204:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1276               		.loc 1 204 0
 1277 007a 9111      		cpse r25,__zero_reg__
 1278 007c 00C0      		rjmp .L165
 205:catboard.c    **** 				if (! pressed[key_id]) {
 1279               		.loc 1 205 0
 1280 007e 9081      		ld r25,Z
 1281 0080 9111      		cpse r25,__zero_reg__
 1282 0082 00C0      		rjmp .L166
 206:catboard.c    **** 					key_press(key_id);
 1283               		.loc 1 206 0
 1284 0084 0E94 0000 		call key_press
 1285               	.LVL92:
 1286 0088 00C0      		rjmp .L166
 1287               	.LVL93:
 1288               	.L165:
 208:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 1289               		.loc 1 208 0
 1290 008a 9081      		ld r25,Z
 1291 008c 9111      		cpse r25,__zero_reg__
 209:catboard.c    **** 				key_release(key_id);
 1292               		.loc 1 209 0
 1293 008e 0E94 0000 		call key_release
 1294               	.LVL94:
 1295               	.L166:
 1296 0092 B5E0      		ldi r27,lo8(5)
 1297 0094 8B0E      		add r8,r27
 1298               	.LVL95:
 202:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 1299               		.loc 1 202 0
 1300 0096 ECE3      		ldi r30,lo8(60)
 1301 0098 8E12      		cpse r8,r30
 1302 009a 00C0      		rjmp .L167
 212:catboard.c    **** 		*row_port[row] |= row_bit[row];
 1303               		.loc 1 212 0
 1304 009c 8881      		ld r24,Y
 1305 009e 8729      		or r24,r7
 1306 00a0 8883      		st Y,r24
 199:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1307               		.loc 1 199 0
 1308 00a2 9394      		inc r9
 1309               	.LVL96:
 1310 00a4 9B12      		cpse r9,r27
 1311 00a6 00C0      		rjmp .L168
 214:catboard.c    **** 	repeat_tick();
 1312               		.loc 1 214 0
 1313 00a8 0E94 0000 		call repeat_tick
 1314               	.LVL97:
 1315               	.LBB51:
 1316               	.LBB52:
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1317               		.loc 2 164 0
 1318 00ac 8FE1      		ldi r24,lo8(19999)
 1319 00ae 9EE4      		ldi r25,hi8(19999)
 1320 00b0 0197      		1: sbiw r24,1
 1321 00b2 01F4      		brne 1b
 1322 00b4 00C0      		rjmp .
 1323 00b6 0000      		nop
 1324               	/* epilogue start */
 1325               	.LBE52:
 1326               	.LBE51:
 216:catboard.c    **** }
 1327               		.loc 1 216 0
 1328 00b8 DF91      		pop r29
 1329 00ba CF91      		pop r28
 1330 00bc 1F91      		pop r17
 1331 00be 0F91      		pop r16
 1332 00c0 FF90      		pop r15
 1333 00c2 EF90      		pop r14
 1334 00c4 DF90      		pop r13
 1335 00c6 CF90      		pop r12
 1336 00c8 BF90      		pop r11
 1337 00ca AF90      		pop r10
 1338 00cc 9F90      		pop r9
 1339               	.LVL98:
 1340 00ce 8F90      		pop r8
 1341 00d0 7F90      		pop r7
 1342 00d2 0895      		ret
 1343               	.LFE10:
 1345               		.section	.text.startup.main,"ax",@progbits
 1346               	.global	main
 1348               	main:
 1349               	.LFB8:
 160:catboard.c    **** int main(void) {
 1350               		.loc 1 160 0
 1351               	/* prologue: function */
 1352               	/* frame size = 0 */
 1353               	/* stack size = 0 */
 1354               	.L__stack_usage = 0
 162:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 1355               		.loc 1 162 0
 1356 0000 84B7      		in r24,0x34
 1357 0002 877F      		andi r24,lo8(-9)
 1358 0004 84BF      		out 0x34,r24
 163:catboard.c    **** 	wdt_disable();
 1359               		.loc 1 163 0
 1360 0006 88E1      		ldi r24,lo8(24)
 1361               	/* #APP */
 1362               	 ;  163 "catboard.c" 1
 1363 0008 0FB6      		in __tmp_reg__, __SREG__
 1364 000a F894      		cli
 1365 000c 8093 6000 		sts 96, r24
 1366 0010 1092 6000 		sts 96, __zero_reg__
 1367 0014 0FBE      		out __SREG__,__tmp_reg__
 1368               		
 1369               	 ;  0 "" 2
 1370               	.LVL99:
 1371               	/* #NOAPP */
 1372               	.LBB53:
 1373               	.LBB54:
 1374               		.file 3 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h"
   1:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    All rights reserved.
   3:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
   4:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
   7:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      distribution.
  13:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  17:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  29:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  31:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  34:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  37:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  38:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \file */
  39:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  41:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  43:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** peripherals as needed.
  46:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  47:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  50:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** macros are not available.
  53:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  54:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  59:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
  60:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  61:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  62:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  64:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <small>
  66:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <center>
  67:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** <table border="3">
  68:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  69:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  73:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  74:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  75:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  76:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  77:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  78:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  79:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  80:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  81:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  82:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  83:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  84:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  85:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  86:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  87:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
  88:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
  89:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  90:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  91:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  92:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  93:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
  94:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
  95:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  96:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
  97:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
  98:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
  99:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 247:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 248:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 249:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 250:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 251:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 252:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 253:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 254:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 255:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 256:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 257:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 258:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 259:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 260:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 261:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 262:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 263:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 264:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 265:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 266:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 267:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 268:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 269:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 270:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 271:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 272:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 273:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 274:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 275:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 276:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 277:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 278:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 279:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 280:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 281:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 282:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 283:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 284:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 285:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 286:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 287:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 288:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 289:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 290:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 291:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 292:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 293:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 294:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 295:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 296:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 297:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 298:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 299:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 300:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 301:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 302:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 303:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 304:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 305:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 306:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 307:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 308:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 309:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 310:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 311:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 312:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 313:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 314:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 315:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 316:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 317:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 318:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 319:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 320:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 321:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 322:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 323:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 324:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 325:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 326:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 327:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 328:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 329:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 330:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 331:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 332:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 333:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 334:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 335:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 336:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 337:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 338:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 339:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_all_enable()</td>
 340:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Enable all modules.</td>
 341:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 342:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 343:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 344:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   <tr>
 345:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>power_all_disable()</td>
 346:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>Disable all modules.</td>
 347:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 348:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****   </tr>
 349:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </table>
 350:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </center>
 351:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** </small>
 352:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 353:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** @} */
 354:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 355:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
 356:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** // Include any other device on need basis
 357:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 358:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 359:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 360:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 361:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 362:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 363:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 364:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 365:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 366:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 367:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 368:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 369:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 370:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
 371:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 372:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 373:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 374:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 375:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 376:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 377:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 378:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 379:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 380:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 381:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 382:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 383:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
 384:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
 385:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
 386:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
 387:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
 388:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
 389:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
 390:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
 391:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 392:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 393:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 394:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 395:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 396:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 397:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 398:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 399:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 400:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 401:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 402:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 403:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 404:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 405:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 406:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 407:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 408:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 409:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 410:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 411:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 412:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 413:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 414:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
 415:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 416:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 417:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
 418:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 419:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 420:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 421:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 422:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 423:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 424:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 425:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 426:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 427:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 428:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 429:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
 430:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 431:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 432:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 433:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 434:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 435:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 436:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 437:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 438:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 439:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 440:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 441:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 442:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 443:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 444:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 445:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 446:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 447:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 448:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 449:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 450:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
 451:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
 452:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
 453:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
 454:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
 455:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
 456:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
 457:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
 458:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 459:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
 460:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
 461:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
 462:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
 463:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
 464:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
 465:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
 466:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
 467:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 468:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 469:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 470:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
 471:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
 472:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
 473:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
 474:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
 475:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
 476:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 477:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 478:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 479:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
 480:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
 481:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
 482:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
 483:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
 484:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
 485:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 486:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
 487:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
 488:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
 489:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
 490:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
 491:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
 492:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
 493:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
 494:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 495:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
 496:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
 497:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
 498:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
 499:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
 500:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
 501:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
 502:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
 503:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 504:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
 505:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 506:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
 507:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 508:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 509:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 510:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
 511:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 512:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 513:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 514:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
 515:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 516:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 517:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 518:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 519:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 520:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 521:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 522:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 523:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 524:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 525:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do { \
 526:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 527:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 528:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 529:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|R_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 530:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 531:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 532:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 533:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } while(0)
 534:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 535:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
 536:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
 537:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
 538:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
 539:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
 540:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 541:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 542:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 543:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 544:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 545:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 546:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 547:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 548:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 549:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 550:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 551:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 552:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 553:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 554:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 555:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 556:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 557:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 558:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 559:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 560:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 561:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 562:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 563:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 564:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 565:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 566:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 567:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 568:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 569:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 570:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 571:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 572:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 573:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 574:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
 575:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
 576:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 577:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
 578:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
 579:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 580:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 581:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 582:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 583:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
 584:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 585:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 586:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 587:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 588:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 589:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
 590:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 591:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 592:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 593:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
 594:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 595:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 596:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 597:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 598:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 599:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 600:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 601:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 602:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 603:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 604:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 605:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 606:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 607:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 608:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 609:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 610:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 611:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 612:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 613:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 614:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 615:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 616:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 617:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 618:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 619:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 620:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 621:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 622:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 625:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 626:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 627:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 628:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 629:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 630:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 631:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 632:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 633:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 634:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 635:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 636:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 637:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 638:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 639:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 640:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 641:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
 642:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
 643:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
 644:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
 645:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 646:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 647:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 648:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 649:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 650:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 651:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 652:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 653:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 654:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 655:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 656:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 657:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 658:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 659:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 660:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 661:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 662:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 663:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 664:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 665:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 666:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 667:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 668:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 669:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 670:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 671:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 672:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 673:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 674:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 675:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 676:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 677:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 678:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 679:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 680:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 681:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 682:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 683:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 684:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 685:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 686:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
 687:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
 688:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 689:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 690:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 691:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 692:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 693:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 694:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 695:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 696:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 697:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 698:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 699:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 700:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 701:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 702:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 703:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 704:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 705:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 706:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 707:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 708:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 709:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 710:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 711:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 712:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 713:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 714:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 715:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 716:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 717:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 718:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 719:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 720:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 721:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 722:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
 723:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 724:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 725:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 726:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 727:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 728:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
 729:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 730:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 731:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 732:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 733:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
 734:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 735:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 736:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 737:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 738:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 739:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 740:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 741:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 742:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 743:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 744:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 745:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 746:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 747:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 748:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 749:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 750:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 751:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 752:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 753:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 754:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 755:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 756:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 757:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 758:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 759:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 760:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 761:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 762:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 763:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
 764:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 765:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 766:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 767:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 768:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 769:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
 770:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
 771:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 772:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 773:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
 774:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 775:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 776:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
 777:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 778:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 779:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 780:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 781:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 782:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 783:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 784:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 785:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 786:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 787:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 788:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 789:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 790:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 791:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 792:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 793:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 794:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 795:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 796:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 797:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 798:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 799:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 800:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 801:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 802:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
 803:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
 804:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 805:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 806:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
 807:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
 808:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
 809:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
 810:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
 811:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
 812:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 813:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 814:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 815:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 816:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 817:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 818:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 819:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 820:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 821:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 822:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 823:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 824:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 825:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 826:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 827:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 828:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 829:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 830:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 831:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 832:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 833:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 834:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 835:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 836:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 837:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 838:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 839:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 840:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
 841:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
 842:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 843:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 844:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__)
 845:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 846:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 847:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 848:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 849:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 850:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 851:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 852:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 853:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 854:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 855:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Reduced Power Stage Controller */
 856:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 857:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 858:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 859:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 860:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 861:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 862:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 863:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
 864:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
 865:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 866:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 867:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
 868:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
 869:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
 870:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
 871:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
 872:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
 873:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
 874:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
 875:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
 876:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
 877:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
 878:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
 879:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
 880:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 881:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 882:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 883:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 884:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 885:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 886:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 887:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 888:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 889:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 890:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 891:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 892:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 893:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
 894:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
 895:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 896:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 897:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
 898:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
 899:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
 900:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
 901:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
 902:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
 903:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
 904:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
 905:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
 906:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
 907:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
 908:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
 909:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
 910:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
 911:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
 912:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
 913:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
 914:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 915:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 916:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 917:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 918:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 919:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 920:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 921:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 922:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 923:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 924:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 925:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 926:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 927:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 928:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 929:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 930:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
 931:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
 932:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 933:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 934:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
 935:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
 936:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
 937:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
 938:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
 939:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
 940:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
 941:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
 942:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 943:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 944:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 945:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 946:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 947:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 948:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 949:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 950:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 951:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 952:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
 953:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
 954:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 955:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 956:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 957:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 958:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 959:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 960:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 961:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 962:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 963:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 964:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 965:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 966:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 967:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
 968:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
 969:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 970:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 971:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__)
 972:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 973:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 974:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 975:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 976:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 977:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 978:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 979:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 980:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 981:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 982:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 983:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 984:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 985:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 986:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 987:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 988:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 989:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 990:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 991:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 992:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 993:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 994:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
 995:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
 996:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 997:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
 998:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
 999:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1000:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1001:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1002:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1003:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1004:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1005:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1006:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1007:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1008:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1009:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Voltage ADC */
1010:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1011:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1012:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1013:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
1014:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
1015:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1016:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1017:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
1018:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1019:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1020:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1021:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1022:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1023:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1024:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1025:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1026:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1027:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1028:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1029:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1030:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
1031:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1032:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1033:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1034:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1035:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1036:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1037:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1038:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
1039:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
1040:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1041:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1042:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1043:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1044:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1045:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1046:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1047:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
1048:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
1049:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1050:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
1051:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
1052:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1053:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
1054:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
1055:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1056:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1057:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
1058:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
1059:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
1060:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
1061:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
1062:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
1063:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
1064:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
1065:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
1066:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
1067:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
1068:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
1069:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
1070:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
1071:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
1072:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
1073:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1074:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1075:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1076:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1077:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1078:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1079:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1080:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1081:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1082:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1083:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Universal Serial Interface */
1084:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1085:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1086:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1087:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1088:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1089:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1090:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1091:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
1092:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1093:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1094:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1095:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1096:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1097:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1098:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1099:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1100:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1101:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1102:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1103:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1104:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1105:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1106:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1107:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1108:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1109:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1110:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1111:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1112:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1113:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1114:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1115:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1116:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1117:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1118:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
1119:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
1120:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1121:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1122:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1123:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1124:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
1125:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1126:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1127:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1128:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1129:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1130:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
1131:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1132:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1133:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1134:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
1135:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1136:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1137:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
1138:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1139:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1140:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1141:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1142:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1143:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1144:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1145:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1146:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1147:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1148:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1149:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /* Voltage ADC */
1150:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1151:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1152:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1153:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1154:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1155:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1156:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
1157:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
1158:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1159:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
1160:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
1161:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1162:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1163:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
1164:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1165:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1166:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1167:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
1168:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1169:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1170:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1171:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1172:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1173:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1174:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1175:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1176:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1177:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1178:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1179:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1180:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1181:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1182:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1183:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1184:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
1185:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
1186:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1187:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
1188:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
1189:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1190:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
1191:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
1192:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1193:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1194:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
1195:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny87__)
1196:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1197:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1198:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1199:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1200:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1201:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1202:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1203:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1204:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1205:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1206:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1207:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1208:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1209:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1210:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1211:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1212:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1213:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1214:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1215:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1216:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
1217:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
1218:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1219:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1220:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
1221:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1222:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1223:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1224:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
1225:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1226:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1227:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1228:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1229:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1230:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1231:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1232:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1233:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1234:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1235:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1236:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1237:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1238:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1239:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1240:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1241:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1242:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1243:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1244:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
1245:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1246:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1247:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1248:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1249:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1250:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
1251:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1252:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1253:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1254:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
1255:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1256:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1257:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1258:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1259:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1260:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1261:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1262:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1263:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1264:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1265:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1266:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1267:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1268:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1269:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1270:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1271:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1272:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1273:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1274:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
1275:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
1276:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1277:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1278:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1279:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1280:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
1281:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
1282:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1283:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
1284:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
1285:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1286:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
1287:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
1288:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1289:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
1290:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
1291:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1292:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable() \
1293:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1294:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1295:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1296:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1297:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1298:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable() \
1299:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** do{ \
1300:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1301:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1302:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** }while(0)
1303:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1304:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1305:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
1306:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
1307:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
1308:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
1309:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
1310:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1311:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1312:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1313:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1314:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1315:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1316:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1317:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
1318:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
1319:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1320:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1321:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
1322:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
1323:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1324:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1325:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1326:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1327:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1328:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1329:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1330:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1331:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1332:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1333:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
1334:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
1335:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1336:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
1337:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
1338:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1339:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
1340:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
1341:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1342:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
1343:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1344:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1345:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1346:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1347:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1348:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1349:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1350:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1351:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1352:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1353:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1354:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1355:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1356:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1357:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1358:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1359:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1360:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1361:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1362:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1363:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1364:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1365:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1366:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1367:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1368:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1369:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1370:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1371:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1372:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1373:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1374:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1375:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1376:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1377:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1378:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1379:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1380:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1381:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1382:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1383:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1384:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1385:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1386:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1387:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1388:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1389:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1390:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1391:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1392:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1393:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1394:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1395:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1396:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVB__) \
1397:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1398:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1399:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__) \
1400:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1401:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1402:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1403:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1404:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1405:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1406:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1407:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1408:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1409:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1410:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1411:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1412:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1413:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1414:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1415:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1416:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1417:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1418:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1419:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1420:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1421:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1422:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1423:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1424:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1425:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1426:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1427:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1428:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1429:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1430:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** || defined(__DOXYGEN__)
1431:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1432:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1433:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1434:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1435:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1436:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1437:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
1438:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
1439:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1440:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
1441:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
1442:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1443:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1444:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1445:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1446:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code 
1447:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** typedef enum
1448:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1449:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1450:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1451:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1452:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1453:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1454:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1455:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1456:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1457:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_256 = 8,
1458:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1459:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } clock_div_t;
1460:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \endcode
1461:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Clock prescaler setting enumerations.
1462:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1463:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1464:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** typedef enum
1465:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1466:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1467:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1468:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1469:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1470:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1471:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1472:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1473:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1474:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     clock_div_256 = 8
1475:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__)
1476:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     , clock_div_1_rc = 15
1477:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** #endif
1478:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** } clock_div_t;
1479:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1480:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1481:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1482:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1483:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1484:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1485:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1486:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1487:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1488:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** optimizations are disabled.
1489:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** 
1490:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** The type of x is clock_div_t.
1491:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** */
1492:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1493:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h **** {
1494:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1495:/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h ****     __asm__ __volatile__ (
 1375               		.loc 3 1495 0
 1376 0016 90E0      		ldi r25,0
 1377 0018 80E8      		ldi r24,lo8(-128)
 1378               	/* #APP */
 1379               	 ;  1495 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/power.h" 1
 1380 001a 0FB6      		in __tmp_reg__,__SREG__
 1381 001c F894      		cli
 1382 001e 8093 6100 		sts 97, r24
 1383 0022 9093 6100 		sts 97, r25
 1384 0026 0FBE      		out __SREG__, __tmp_reg__
 1385               	 ;  0 "" 2
 1386               	/* #NOAPP */
 1387               	.LBE54:
 1388               	.LBE53:
 168:catboard.c    **** 	init();
 1389               		.loc 1 168 0
 1390 0028 0E94 0000 		call init
 1391               	.LVL100:
 1392               	.L175:
 170:catboard.c    **** 		poll();
 1393               		.loc 1 170 0 discriminator 1
 1394 002c 0E94 0000 		call poll
 1395               	.LVL101:
 1396 0030 00C0      		rjmp .L175
 1397               	.LFE8:
 1399               	.global	repeat_time
 1400               		.section .bss
 1403               	repeat_time:
 1404 0000 0000      		.zero	2
 1405               	.global	release_time
 1408               	release_time:
 1409 0002 0000      		.zero	2
 1410               	.global	press_time2
 1413               	press_time2:
 1414 0004 0000      		.zero	2
 1415               	.global	press_time
 1418               	press_time:
 1419 0006 0000      		.zero	2
 1420               	.global	last_key
 1421               		.data
 1424               	last_key:
 1425 0000 FF        		.byte	-1
 1426               	.global	turbo_repeat
 1429               	turbo_repeat:
 1430 0001 01        		.byte	1
 1431               	.global	prev_layer
 1432               		.section .bss
 1435               	prev_layer:
 1436 0008 0000      		.zero	2
 1437               	.global	mod_keys
 1440               	mod_keys:
 1441 000a 00        		.zero	1
 1442               	.global	queue
 1443               		.data
 1446               	queue:
 1447 0002 FF        		.byte	-1
 1448 0003 FF        		.byte	-1
 1449 0004 FF        		.byte	-1
 1450 0005 FF        		.byte	-1
 1451 0006 FF        		.byte	-1
 1452 0007 FF        		.byte	-1
 1453 0008 FF        		.byte	-1
 1454               		.comm	pressed,60,1
 1455               	.global	col_bit
 1456               		.section	.rodata
 1459               	col_bit:
 1460 0000 40        		.byte	64
 1461 0001 20        		.byte	32
 1462 0002 08        		.byte	8
 1463 0003 04        		.byte	4
 1464 0004 02        		.byte	2
 1465 0005 01        		.byte	1
 1466 0006 80        		.byte	-128
 1467 0007 40        		.byte	64
 1468 0008 20        		.byte	32
 1469 0009 10        		.byte	16
 1470 000a 02        		.byte	2
 1471 000b 01        		.byte	1
 1472               	.global	col_pin
 1475               	col_pin:
 1476 000c 2900      		.word	41
 1477 000e 2900      		.word	41
 1478 0010 2900      		.word	41
 1479 0012 2900      		.word	41
 1480 0014 2900      		.word	41
 1481 0016 2900      		.word	41
 1482 0018 2300      		.word	35
 1483 001a 2300      		.word	35
 1484 001c 2300      		.word	35
 1485 001e 2300      		.word	35
 1486 0020 2300      		.word	35
 1487 0022 2300      		.word	35
 1488               	.global	row_bit
 1491               	row_bit:
 1492 0024 80        		.byte	-128
 1493 0025 40        		.byte	64
 1494 0026 20        		.byte	32
 1495 0027 10        		.byte	16
 1496 0028 04        		.byte	4
 1497               	.global	row_port
 1500               	row_port:
 1501 0029 2800      		.word	40
 1502 002b 2800      		.word	40
 1503 002d 2800      		.word	40
 1504 002f 2800      		.word	40
 1505 0031 2800      		.word	40
 1506               	.global	layer_fnlock
 1509               	layer_fnlock:
 1510 0033 29        		.byte	41
 1511 0034 82        		.byte	-126
 1512 0035 90        		.byte	-112
 1513 0036 2B        		.byte	43
 1514 0037 35        		.byte	53
 1515 0038 FD        		.byte	-3
 1516 0039 00        		.byte	0
 1517 003a 4E        		.byte	78
 1518 003b 4B        		.byte	75
 1519 003c 1E        		.byte	30
 1520 003d 84        		.byte	-124
 1521 003e 00        		.byte	0
 1522 003f 50        		.byte	80
 1523 0040 4A        		.byte	74
 1524 0041 1F        		.byte	31
 1525 0042 84        		.byte	-124
 1526 0043 00        		.byte	0
 1527 0044 51        		.byte	81
 1528 0045 52        		.byte	82
 1529 0046 20        		.byte	32
 1530 0047 81        		.byte	-127
 1531 0048 00        		.byte	0
 1532 0049 4F        		.byte	79
 1533 004a 4D        		.byte	77
 1534 004b 21        		.byte	33
 1535 004c 2C        		.byte	44
 1536 004d 00        		.byte	0
 1537 004e 28        		.byte	40
 1538 004f 35        		.byte	53
 1539 0050 22        		.byte	34
 1540 0051 2C        		.byte	44
 1541 0052 62        		.byte	98
 1542 0053 55        		.byte	85
 1543 0054 54        		.byte	84
 1544 0055 23        		.byte	35
 1545 0056 FF        		.byte	-1
 1546 0057 59        		.byte	89
 1547 0058 5C        		.byte	92
 1548 0059 5F        		.byte	95
 1549 005a 24        		.byte	36
 1550 005b C0        		.byte	-64
 1551 005c 5A        		.byte	90
 1552 005d 5D        		.byte	93
 1553 005e 60        		.byte	96
 1554 005f 25        		.byte	37
 1555 0060 28        		.byte	40
 1556 0061 5B        		.byte	91
 1557 0062 5E        		.byte	94
 1558 0063 61        		.byte	97
 1559 0064 26        		.byte	38
 1560 0065 53        		.byte	83
 1561 0066 63        		.byte	99
 1562 0067 57        		.byte	87
 1563 0068 56        		.byte	86
 1564 0069 27        		.byte	39
 1565 006a 2E        		.byte	46
 1566 006b A0        		.byte	-96
 1567 006c 28        		.byte	40
 1568 006d 29        		.byte	41
 1569 006e 2D        		.byte	45
 1570               	.global	layer_fn
 1573               	layer_fn:
 1574 006f FB        		.byte	-5
 1575 0070 F1        		.byte	-15
 1576 0071 90        		.byte	-112
 1577 0072 2B        		.byte	43
 1578 0073 46        		.byte	70
 1579 0074 FD        		.byte	-3
 1580 0075 00        		.byte	0
 1581 0076 00        		.byte	0
 1582 0077 00        		.byte	0
 1583 0078 3A        		.byte	58
 1584 0079 84        		.byte	-124
 1585 007a 00        		.byte	0
 1586 007b 00        		.byte	0
 1587 007c 00        		.byte	0
 1588 007d 3B        		.byte	59
 1589 007e 84        		.byte	-124
 1590 007f 00        		.byte	0
 1591 0080 00        		.byte	0
 1592 0081 00        		.byte	0
 1593 0082 3C        		.byte	60
 1594 0083 81        		.byte	-127
 1595 0084 00        		.byte	0
 1596 0085 00        		.byte	0
 1597 0086 00        		.byte	0
 1598 0087 3D        		.byte	61
 1599 0088 82        		.byte	-126
 1600 0089 00        		.byte	0
 1601 008a 00        		.byte	0
 1602 008b 35        		.byte	53
 1603 008c 3E        		.byte	62
 1604 008d FC        		.byte	-4
 1605 008e 2A        		.byte	42
 1606 008f 28        		.byte	40
 1607 0090 28        		.byte	40
 1608 0091 3F        		.byte	63
 1609 0092 FF        		.byte	-1
 1610 0093 4C        		.byte	76
 1611 0094 50        		.byte	80
 1612 0095 4A        		.byte	74
 1613 0096 40        		.byte	64
 1614 0097 FE        		.byte	-2
 1615 0098 49        		.byte	73
 1616 0099 51        		.byte	81
 1617 009a 52        		.byte	82
 1618 009b 41        		.byte	65
 1619 009c 00        		.byte	0
 1620 009d 00        		.byte	0
 1621 009e 4F        		.byte	79
 1622 009f 4D        		.byte	77
 1623 00a0 42        		.byte	66
 1624 00a1 47        		.byte	71
 1625 00a2 00        		.byte	0
 1626 00a3 4E        		.byte	78
 1627 00a4 4B        		.byte	75
 1628 00a5 43        		.byte	67
 1629 00a6 45        		.byte	69
 1630 00a7 F2        		.byte	-14
 1631 00a8 48        		.byte	72
 1632 00a9 29        		.byte	41
 1633 00aa 44        		.byte	68
 1634               	.global	layer1
 1637               	layer1:
 1638 00ab 29        		.byte	41
 1639 00ac F1        		.byte	-15
 1640 00ad 90        		.byte	-112
 1641 00ae 2B        		.byte	43
 1642 00af 35        		.byte	53
 1643 00b0 FD        		.byte	-3
 1644 00b1 1D        		.byte	29
 1645 00b2 04        		.byte	4
 1646 00b3 14        		.byte	20
 1647 00b4 1E        		.byte	30
 1648 00b5 84        		.byte	-124
 1649 00b6 1B        		.byte	27
 1650 00b7 16        		.byte	22
 1651 00b8 1A        		.byte	26
 1652 00b9 1F        		.byte	31
 1653 00ba 84        		.byte	-124
 1654 00bb 06        		.byte	6
 1655 00bc 07        		.byte	7
 1656 00bd 08        		.byte	8
 1657 00be 20        		.byte	32
 1658 00bf 81        		.byte	-127
 1659 00c0 19        		.byte	25
 1660 00c1 09        		.byte	9
 1661 00c2 15        		.byte	21
 1662 00c3 21        		.byte	33
 1663 00c4 82        		.byte	-126
 1664 00c5 05        		.byte	5
 1665 00c6 0A        		.byte	10
 1666 00c7 17        		.byte	23
 1667 00c8 22        		.byte	34
 1668 00c9 2C        		.byte	44
 1669 00ca 11        		.byte	17
 1670 00cb 0B        		.byte	11
 1671 00cc 1C        		.byte	28
 1672 00cd 23        		.byte	35
 1673 00ce FF        		.byte	-1
 1674 00cf 10        		.byte	16
 1675 00d0 0D        		.byte	13
 1676 00d1 18        		.byte	24
 1677 00d2 24        		.byte	36
 1678 00d3 C0        		.byte	-64
 1679 00d4 36        		.byte	54
 1680 00d5 0E        		.byte	14
 1681 00d6 0C        		.byte	12
 1682 00d7 25        		.byte	37
 1683 00d8 31        		.byte	49
 1684 00d9 37        		.byte	55
 1685 00da 0F        		.byte	15
 1686 00db 12        		.byte	18
 1687 00dc 26        		.byte	38
 1688 00dd 30        		.byte	48
 1689 00de 38        		.byte	56
 1690 00df 33        		.byte	51
 1691 00e0 13        		.byte	19
 1692 00e1 27        		.byte	39
 1693 00e2 2E        		.byte	46
 1694 00e3 F2        		.byte	-14
 1695 00e4 34        		.byte	52
 1696 00e5 2F        		.byte	47
 1697 00e6 2D        		.byte	45
 1698               	.global	mac_mode
 1699               		.section .bss
 1702               	mac_mode:
 1703 000b 00        		.zero	1
 1704               	.global	layout
 1705               		.data
 1708               	layout:
 1709 0009 0000      		.word	layer2
 1710               	.global	layer2
 1711               		.section	.rodata
 1714               	layer2:
 1715 00e7 29        		.byte	41
 1716 00e8 F1        		.byte	-15
 1717 00e9 90        		.byte	-112
 1718 00ea 2B        		.byte	43
 1719 00eb 35        		.byte	53
 1720 00ec FD        		.byte	-3
 1721 00ed 14        		.byte	20
 1722 00ee 09        		.byte	9
 1723 00ef 0D        		.byte	13
 1724 00f0 1E        		.byte	30
 1725 00f1 84        		.byte	-124
 1726 00f2 38        		.byte	56
 1727 00f3 1C        		.byte	28
 1728 00f4 06        		.byte	6
 1729 00f5 1F        		.byte	31
 1730 00f6 84        		.byte	-124
 1731 00f7 16        		.byte	22
 1732 00f8 19        		.byte	25
 1733 00f9 18        		.byte	24
 1734 00fa 20        		.byte	32
 1735 00fb 81        		.byte	-127
 1736 00fc 10        		.byte	16
 1737 00fd 04        		.byte	4
 1738 00fe 0E        		.byte	14
 1739 00ff 21        		.byte	33
 1740 0100 82        		.byte	-126
 1741 0101 0C        		.byte	12
 1742 0102 13        		.byte	19
 1743 0103 08        		.byte	8
 1744 0104 22        		.byte	34
 1745 0105 2C        		.byte	44
 1746 0106 17        		.byte	23
 1747 0107 15        		.byte	21
 1748 0108 11        		.byte	17
 1749 0109 23        		.byte	35
 1750 010a FF        		.byte	-1
 1751 010b 1B        		.byte	27
 1752 010c 12        		.byte	18
 1753 010d 0A        		.byte	10
 1754 010e 24        		.byte	36
 1755 010f C0        		.byte	-64
 1756 0110 05        		.byte	5
 1757 0111 0F        		.byte	15
 1758 0112 0B        		.byte	11
 1759 0113 25        		.byte	37
 1760 0114 31        		.byte	49
 1761 0115 36        		.byte	54
 1762 0116 07        		.byte	7
 1763 0117 1A        		.byte	26
 1764 0118 26        		.byte	38
 1765 0119 30        		.byte	48
 1766 011a 37        		.byte	55
 1767 011b 33        		.byte	51
 1768 011c 1D        		.byte	29
 1769 011d 27        		.byte	39
 1770 011e 2E        		.byte	46
 1771 011f F2        		.byte	-14
 1772 0120 34        		.byte	52
 1773 0121 2F        		.byte	47
 1774 0122 2D        		.byte	45
 1985               	.Letext0:
 1986               		.file 4 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/stdint.h"
 1987               		.file 5 "usb_keyboard.h"
 1988               		.file 6 "jcuken.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 catboard.c
     /tmp/ccHVOHOO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccHVOHOO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccHVOHOO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccHVOHOO.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccHVOHOO.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccHVOHOO.s:12     .text.init:0000000000000000 init
                            *COM*:000000000000003c pressed
     /tmp/ccHVOHOO.s:89     .text.change_layout:0000000000000000 change_layout
     /tmp/ccHVOHOO.s:1702   .bss:000000000000000b mac_mode
     /tmp/ccHVOHOO.s:166    .text.get_code:0000000000000000 get_code
     /tmp/ccHVOHOO.s:1573   .rodata:000000000000006f layer_fn
     /tmp/ccHVOHOO.s:1708   .data:0000000000000009 layout
     /tmp/ccHVOHOO.s:1637   .rodata:00000000000000ab layer1
     /tmp/ccHVOHOO.s:237    .text.send:0000000000000000 send
     /tmp/ccHVOHOO.s:1446   .data:0000000000000002 queue
     /tmp/ccHVOHOO.s:1440   .bss:000000000000000a mod_keys
     /tmp/ccHVOHOO.s:288    .text.key_release:0000000000000000 key_release
     /tmp/ccHVOHOO.s:1435   .bss:0000000000000008 prev_layer
     /tmp/ccHVOHOO.s:1424   .data:0000000000000000 last_key
     /tmp/ccHVOHOO.s:1714   .rodata:00000000000000e7 layer2
     /tmp/ccHVOHOO.s:1413   .bss:0000000000000004 press_time2
     /tmp/ccHVOHOO.s:1408   .bss:0000000000000002 release_time
     /tmp/ccHVOHOO.s:1418   .bss:0000000000000006 press_time
     /tmp/ccHVOHOO.s:1403   .bss:0000000000000000 repeat_time
     /tmp/ccHVOHOO.s:601    .text.key_press:0000000000000000 key_press
     /tmp/ccHVOHOO.s:1509   .rodata:0000000000000033 layer_fnlock
     /tmp/ccHVOHOO.s:1429   .data:0000000000000001 turbo_repeat
     /tmp/ccHVOHOO.s:1027   .text.repeat_tick:0000000000000000 repeat_tick
     /tmp/ccHVOHOO.s:1177   .text.poll:0000000000000000 poll
     /tmp/ccHVOHOO.s:1500   .rodata:0000000000000029 row_port
     /tmp/ccHVOHOO.s:1491   .rodata:0000000000000024 row_bit
     /tmp/ccHVOHOO.s:1475   .rodata:000000000000000c col_pin
     /tmp/ccHVOHOO.s:1459   .rodata:0000000000000000 col_bit
     /tmp/ccHVOHOO.s:1348   .text.startup.main:0000000000000000 main

UNDEFINED SYMBOLS
usb_init
usb_configured
keyboard_modifier_keys
keyboard_keys
usb_keyboard_send
usb_keyboard_press
__do_copy_data
__do_clear_bss
