   1               		.file	"catboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.section	.text.init_ports,"ax",@progbits
  10               	.global	init_ports
  12               	init_ports:
  13               	.LFB8:
  14               		.file 1 "at90usb162mu.h"
   1:at90usb162mu.h **** #define LED_CONFIG		(DDRD	|= (1<<6))
   2:at90usb162mu.h **** #define LED_OFF			(PORTD	|= (1<<6))
   3:at90usb162mu.h **** #define LED_ON			(PORTD	&= ~(1<<6))
   4:at90usb162mu.h **** 
   5:at90usb162mu.h **** #define LED_BLUE_CONFIG	(DDRD	|= (1<<1))
   6:at90usb162mu.h **** #define LED_BLUE_OFF		(PORTD	&= ~(1<<1))
   7:at90usb162mu.h **** #define LED_BLUE_ON		(PORTD	|= (1<<1))
   8:at90usb162mu.h **** 
   9:at90usb162mu.h **** #define LED_RED_CONFIG	(DDRC	|= (1<<6))
  10:at90usb162mu.h **** #define LED_RED_OFF	(PORTC	|= (1<<6))
  11:at90usb162mu.h **** #define LED_RED_ON		(PORTC	&= ~(1<<6))
  12:at90usb162mu.h **** 
  13:at90usb162mu.h **** #define FN_KEY_ID			7*5+4
  14:at90usb162mu.h **** 
  15:at90usb162mu.h **** // Init ports
  16:at90usb162mu.h **** void init_ports(void) {
  15               		.loc 1 16 0
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
  17:at90usb162mu.h **** 	DDRB  = 0b01001010; DDRC  = 0b00100000; DDRD  = 0b00000100;
  20               		.loc 1 17 0
  21 0000 8AE4      		ldi r24,lo8(74)
  22 0002 84B9      		out 0x4,r24
  23 0004 80E2      		ldi r24,lo8(32)
  24 0006 87B9      		out 0x7,r24
  25 0008 84E0      		ldi r24,lo8(4)
  26 000a 8AB9      		out 0xa,r24
  18:at90usb162mu.h **** 	PORTB = 0xFF;		PORTC = 0xFF; 		PORTD = 0xFF;
  27               		.loc 1 18 0
  28 000c 8FEF      		ldi r24,lo8(-1)
  29 000e 85B9      		out 0x5,r24
  30 0010 88B9      		out 0x8,r24
  31 0012 8BB9      		out 0xb,r24
  32 0014 0895      		ret
  33               	.LFE8:
  35               		.section	.text.init,"ax",@progbits
  36               	.global	init
  38               	init:
  39               	.LFB10:
  40               		.file 2 "catboard.c"
   1:catboard.c    **** /*
   2:catboard.c    **** * Project: CatBoard ][
   3:catboard.c    **** * Version: 3.2 beta
   4:catboard.c    **** * Date: 2013-09-07
   5:catboard.c    **** * Author: Vladimir Romanovich <ibnteo@gmail.com>
   6:catboard.c    **** * License: GPL2
   7:catboard.c    **** * Blog: http://ibnteo.klava.org/tag/catboard
   8:catboard.c    **** * Site: http://catboard.klava.org/
   9:catboard.c    **** * 
  10:catboard.c    **** * Board: AVR-USB162MU (http://microsin.net/programming/AVR/avr-usb162mu.html) analogue Teensy 1.0
  11:catboard.c    **** */
  12:catboard.c    **** 
  13:catboard.c    **** #include <avr/io.h>
  14:catboard.c    **** #include <avr/pgmspace.h>
  15:catboard.c    **** #include <avr/interrupt.h>
  16:catboard.c    **** #include <avr/wdt.h>
  17:catboard.c    **** #include <avr/power.h>
  18:catboard.c    **** #include <util/delay.h>
  19:catboard.c    **** #include "usb_keyboard.h"
  20:catboard.c    **** 
  21:catboard.c    **** #define STR_MANUFACTURER	L"ibnTeo"
  22:catboard.c    **** #define STR_PRODUCT		L"CatBoard"
  23:catboard.c    **** 
  24:catboard.c    **** #define _PINC		(uint8_t *const)&PINC
  25:catboard.c    **** #define _PORTC		(uint8_t *const)&PORTC
  26:catboard.c    **** #define _PIND		(uint8_t *const)&PIND
  27:catboard.c    **** #define _PORTD		(uint8_t *const)&PORTD
  28:catboard.c    **** #define _PORTB		(uint8_t *const)&PORTB
  29:catboard.c    **** #define _PINB		(uint8_t *const)&PINB
  30:catboard.c    **** 
  31:catboard.c    **** #define ROWS	5
  32:catboard.c    **** #define COLS	12
  33:catboard.c    **** #define KEYS	COLS*ROWS
  34:catboard.c    **** 
  35:catboard.c    **** //1=num lock, 2=caps lock, 4=scroll lock, 8=compose, 16=kana
  36:catboard.c    **** #define LED_NUM_LOCK		1
  37:catboard.c    **** #define LED_CAPS_LOCK		2
  38:catboard.c    **** #define LED_SCROLL_LOCK		4
  39:catboard.c    **** #define LED_COMPOSE			8
  40:catboard.c    **** #define LED_KANA			16
  41:catboard.c    **** 
  42:catboard.c    **** #define NULL				0
  43:catboard.c    **** #define NA					0
  44:catboard.c    **** // 109-127 - catboard
  45:catboard.c    **** #define KEY_CB_START		109
  46:catboard.c    **** #define KEY_LAYER1			109
  47:catboard.c    **** #define KEY_LAYER2			110
  48:catboard.c    **** #define KEY_MACRO			111
  49:catboard.c    **** // ...
  50:catboard.c    **** #define KEY_MY_SHIFT		119
  51:catboard.c    **** #define KEY_TYPO_MODE		120
  52:catboard.c    **** #define KEY_LED				121 // (+Shift)
  53:catboard.c    **** #define KEY_LOCK			122
  54:catboard.c    **** #define KEY_TURBO_REPEAT	123
  55:catboard.c    **** #define KEY_OS_MODE			124 // (+Shift)
  56:catboard.c    **** #define KEY_ALT_TAB			125
  57:catboard.c    **** #define KEY_FN_LOCK			126 // (+Shift)
  58:catboard.c    **** #define KEY_FN				127
  59:catboard.c    **** #define KEY_NULL			0
  60:catboard.c    **** 
  61:catboard.c    **** #define KEY_LCTRL	101
  62:catboard.c    **** #define KEY_LSHIFT	102
  63:catboard.c    **** #define KEY_LALT	103
  64:catboard.c    **** #define KEY_LGUI	104
  65:catboard.c    **** #define KEY_RCTRL	105
  66:catboard.c    **** #define KEY_RSHIFT	106
  67:catboard.c    **** #define KEY_RALT	107
  68:catboard.c    **** #define KEY_RGUI	108
  69:catboard.c    **** 
  70:catboard.c    **** 
  71:catboard.c    **** #define KEY_PRESSED_FN		1
  72:catboard.c    **** #define KEY_PRESSED_MODS	2
  73:catboard.c    **** #define KEY_PRESSED_ALT		3
  74:catboard.c    **** #define KEY_PRESSED_SHIFT	4
  75:catboard.c    **** #define KEY_PRESSED_CTRL	5
  76:catboard.c    **** #define KEY_PRESSED_PREV	6
  77:catboard.c    **** 
  78:catboard.c    **** //#include "qwerty.h"
  79:catboard.c    **** //#include "dvorak.h"
  80:catboard.c    **** #include "jcuken.h"
  81:catboard.c    **** 
  82:catboard.c    **** //#include "at90usb162.h"
  83:catboard.c    **** #include "at90usb162mu.h"
  84:catboard.c    **** 
  85:catboard.c    **** //#include "my_macros.h"
  86:catboard.c    **** 
  87:catboard.c    **** // 0 - shorcuts my layout; 1 - shorcuts qwerty layout
  88:catboard.c    **** #define KEY_SHORTCUTS_LAYER1	1
  89:catboard.c    **** 
  90:catboard.c    **** // Nonstandart hardware layout
  91:catboard.c    **** #define KEY_LAYOUT_ALT_SHIFT	1
  92:catboard.c    **** #define KEY_LAYOUT_CTRL_SHIFT	2
  93:catboard.c    **** #define KEY_LAYOUT_GUI_SPACE	3
  94:catboard.c    **** 
  95:catboard.c    **** //#define KEY_LAYOUT		0
  96:catboard.c    **** #define KEY_LAYOUT		KEY_LAYOUT_ALT_SHIFT
  97:catboard.c    **** 
  98:catboard.c    **** // OS mode: 0 - Windows, 1 - Linux, 2 - Mac
  99:catboard.c    **** uint8_t os_mode = 1;
 100:catboard.c    **** 
 101:catboard.c    **** uint8_t caps_lock_led = 0;
 102:catboard.c    **** 
 103:catboard.c    **** // 0x00-0x7F - normal keys
 104:catboard.c    **** // 0x80-0xF0 - mod_keys | 0x80
 105:catboard.c    **** // 0xF1-0xFF - catboard keys
 106:catboard.c    **** 
 107:catboard.c    **** // TODO: think...
 108:catboard.c    **** // 4-99 - Normal keys (96 keys)
 109:catboard.c    **** // 101-108|KEY_MOD - Mod keys (8 keys)
 110:catboard.c    **** // 109-127|KEY_MOD - CatBoard keys (19 keys)
 111:catboard.c    **** // n|0x80 - Shift inverse keys
 112:catboard.c    **** 
 113:catboard.c    **** 
 114:catboard.c    **** // Start layout
 115:catboard.c    **** uint8_t *layout = &layer2;
 116:catboard.c    **** 
 117:catboard.c    **** int8_t pressed[KEYS];
 118:catboard.c    **** uint8_t queue[7] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 119:catboard.c    **** uint8_t mod_keys = 0;
 120:catboard.c    **** uint8_t *prev_layer = 0;
 121:catboard.c    **** 
 122:catboard.c    **** uint8_t turbo_repeat = 1;
 123:catboard.c    **** uint8_t locked = 0;
 124:catboard.c    **** uint8_t led = 1; // LED light
 125:catboard.c    **** 
 126:catboard.c    **** uint8_t last_key = 0xFF;
 127:catboard.c    **** uint16_t press_time = 0;
 128:catboard.c    **** uint16_t press_time2 = 0;
 129:catboard.c    **** uint16_t release_time = 0;
 130:catboard.c    **** uint16_t repeat_time = 0;
 131:catboard.c    **** 
 132:catboard.c    **** void init(void);
 133:catboard.c    **** void send(void);
 134:catboard.c    **** void poll(void);
 135:catboard.c    **** void repeat_tick(void);
 136:catboard.c    **** void key_press(uint8_t key_id);
 137:catboard.c    **** void key_release(uint8_t key_id);
 138:catboard.c    **** uint8_t get_code(uint8_t key_id);
 139:catboard.c    **** 
 140:catboard.c    **** /*
 141:catboard.c    **** rus
 142:catboard.c    **** §!@#$%^&*()–»
 143:catboard.c    **** јџќ®†њѓѕў‘“ъ
 144:catboard.c    **** ƒыћ÷©}°љ∆…эё
 145:catboard.c    **** ]ђ≈≠µи™~≤≥“
 146:catboard.c    **** 
 147:catboard.c    **** rus shift
 148:catboard.c    **** ±|"£€∞¬¶√'`—«
 149:catboard.c    **** ЈЏЌ®†ЊЃЅЎ’”Ъ
 150:catboard.c    **** ƒЫЋ÷©{•Љ∆…ЭЁ
 151:catboard.c    **** [Ђ≈≠µИ™~<>„
 152:catboard.c    **** 
 153:catboard.c    **** lat
 154:catboard.c    **** §¡™£¢∞§¶•ªº–≠
 155:catboard.c    **** œ∑´®†¥¨ˆøπ“‘
 156:catboard.c    **** åß∂ƒ©˙∆˚¬…æ«
 157:catboard.c    **** `Ω≈ç√∫˜µ≤≥÷
 158:catboard.c    **** 
 159:catboard.c    **** lat shift
 160:catboard.c    **** ±⁄€‹›ﬁﬂ‡°·‚—±
 161:catboard.c    **** Œ„´‰ˇÁ¨ˆØ∏”’
 162:catboard.c    **** ÅÍÎÏ˝ÓÔÒÚÆ»
 163:catboard.c    **** `¸˛Ç◊ı˜Â¯˘¿
 164:catboard.c    **** */
 165:catboard.c    **** 
 166:catboard.c    **** 
 167:catboard.c    **** int main(void) {
 168:catboard.c    **** 	// Disable watchdog if enabled by bootloader/fuses
 169:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 170:catboard.c    **** 	wdt_disable();
 171:catboard.c    **** 
 172:catboard.c    **** 	// Disable clock division
 173:catboard.c    **** 	clock_prescale_set(clock_div_1);
 174:catboard.c    **** 
 175:catboard.c    **** 	init();
 176:catboard.c    **** 	for (;;) {
 177:catboard.c    **** 		poll();
 178:catboard.c    **** 	}
 179:catboard.c    **** }
 180:catboard.c    **** 
 181:catboard.c    **** void init(void) {
  41               		.loc 2 181 0
  42               	/* prologue: function */
  43               	/* frame size = 0 */
  44               	/* stack size = 0 */
  45               	.L__stack_usage = 0
 182:catboard.c    **** 	// Set for 16 MHz clock
 183:catboard.c    **** 	CLKPR = 0x80; CLKPR = 0;
  46               		.loc 2 183 0
  47 0000 80E8      		ldi r24,lo8(-128)
  48 0002 8093 6100 		sts 97,r24
  49 0006 1092 6100 		sts 97,__zero_reg__
 184:catboard.c    **** 
 185:catboard.c    **** 	init_ports();
  50               		.loc 2 185 0
  51 000a 0E94 0000 		call init_ports
  52               	.LVL0:
 186:catboard.c    **** 
 187:catboard.c    **** 	LED_CONFIG;
  53               		.loc 2 187 0
  54 000e 569A      		sbi 0xa,6
 188:catboard.c    **** 	LED_RED_CONFIG;
  55               		.loc 2 188 0
  56 0010 3E9A      		sbi 0x7,6
 189:catboard.c    **** 	LED_BLUE_CONFIG;
  57               		.loc 2 189 0
  58 0012 519A      		sbi 0xa,1
 190:catboard.c    **** 
 191:catboard.c    **** 	LED_RED_OFF;
  59               		.loc 2 191 0
  60 0014 469A      		sbi 0x8,6
 192:catboard.c    **** 	LED_BLUE_OFF;
  61               		.loc 2 192 0
  62 0016 5998      		cbi 0xb,1
 193:catboard.c    **** 	if (led) LED_ON;
  63               		.loc 2 193 0
  64 0018 8091 0000 		lds r24,led
  65 001c 8111      		cpse r24,__zero_reg__
  66               		.loc 2 193 0 is_stmt 0 discriminator 1
  67 001e 5E98      		cbi 0xb,6
  68               	.L3:
  69               	.LVL1:
  70 0020 E0E0      		ldi r30,lo8(pressed)
  71 0022 F0E0      		ldi r31,hi8(pressed)
  72               	.LVL2:
  73               	.L4:
  74               	.LBB19:
 194:catboard.c    **** 
 195:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
 196:catboard.c    **** 		pressed[i] = 0;
  75               		.loc 2 196 0 is_stmt 1 discriminator 2
  76 0024 1192      		st Z+,__zero_reg__
 195:catboard.c    **** 	for (uint8_t i=0; i<KEYS; i++) {
  77               		.loc 2 195 0 discriminator 2
  78 0026 80E0      		ldi r24,hi8(pressed+60)
  79 0028 E030      		cpi r30,lo8(pressed+60)
  80 002a F807      		cpc r31,r24
  81 002c 01F4      		brne .L4
  82               	.LBE19:
 197:catboard.c    **** 	}
 198:catboard.c    **** 
 199:catboard.c    **** 	usb_init();
  83               		.loc 2 199 0
  84 002e 0E94 0000 		call usb_init
  85               	.LVL3:
  86               	.L5:
 200:catboard.c    **** 	while(!usb_configured());
  87               		.loc 2 200 0 discriminator 1
  88 0032 0E94 0000 		call usb_configured
  89               	.LVL4:
  90 0036 8823      		tst r24
  91 0038 01F0      		breq .L5
 201:catboard.c    **** 	LED_OFF;
  92               		.loc 2 201 0
  93 003a 5E9A      		sbi 0xb,6
 202:catboard.c    **** 	if (led) LED_RED_ON;
  94               		.loc 2 202 0
  95 003c 8091 0000 		lds r24,led
  96 0040 8111      		cpse r24,__zero_reg__
  97               		.loc 2 202 0 is_stmt 0 discriminator 1
  98 0042 4698      		cbi 0x8,6
  99               	.L6:
 203:catboard.c    **** 	caps_lock_led = keyboard_leds;
 100               		.loc 2 203 0 is_stmt 1
 101 0044 8091 0000 		lds r24,keyboard_leds
 102 0048 8093 0000 		sts caps_lock_led,r24
 103 004c 0895      		ret
 104               	.LFE10:
 106               		.section	.text.caps_lock_change_layer,"ax",@progbits
 107               	.global	caps_lock_change_layer
 109               	caps_lock_change_layer:
 110               	.LFB12:
 204:catboard.c    **** }
 205:catboard.c    **** 
 206:catboard.c    **** void poll() {
 207:catboard.c    **** 	uint8_t row, col, key_id;
 208:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 209:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 210:catboard.c    **** 		_delay_us(1);
 211:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 212:catboard.c    **** 			key_id = col*ROWS+row;
 213:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 214:catboard.c    **** 				if (! pressed[key_id]) {
 215:catboard.c    **** 					key_press(key_id);
 216:catboard.c    **** 				}
 217:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 218:catboard.c    **** 				key_release(key_id);
 219:catboard.c    **** 			}
 220:catboard.c    **** 		}
 221:catboard.c    **** 		*row_port[row] |= row_bit[row];
 222:catboard.c    **** 	}
 223:catboard.c    **** 	if (caps_lock_led != (keyboard_leds & LED_CAPS_LOCK)) { // change layout
 224:catboard.c    **** 		caps_lock_change_layer();
 225:catboard.c    **** 	}
 226:catboard.c    **** 	//if (keyboard_leds) LED_ON; else LED_OFF;
 227:catboard.c    **** 	repeat_tick();
 228:catboard.c    **** 	_delay_ms(5);
 229:catboard.c    **** }
 230:catboard.c    **** 
 231:catboard.c    **** void caps_lock_change_layer() {
 111               		.loc 2 231 0
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114               	/* stack size = 0 */
 115               	.L__stack_usage = 0
 232:catboard.c    **** 	caps_lock_led = (keyboard_leds & LED_CAPS_LOCK);
 116               		.loc 2 232 0
 117 0000 2091 0000 		lds r18,keyboard_leds
 118 0004 2270      		andi r18,lo8(2)
 119 0006 2093 0000 		sts caps_lock_led,r18
 120 000a 8091 0000 		lds r24,layout
 121 000e 9091 0000 		lds r25,layout+1
 233:catboard.c    **** 	if ((caps_lock_led) && (layout != layer1)) {
 122               		.loc 2 233 0
 123 0012 2223      		tst r18
 124 0014 01F0      		breq .L19
 125               		.loc 2 233 0 is_stmt 0 discriminator 1
 126 0016 20E0      		ldi r18,hi8(layer1)
 127 0018 8030      		cpi r24,lo8(layer1)
 128 001a 9207      		cpc r25,r18
 129 001c 01F0      		breq .L18
 234:catboard.c    **** 		if (layout==layer_fn) {
 130               		.loc 2 234 0 is_stmt 1
 131 001e 8050      		subi r24,lo8(layer_fn)
 132 0020 9040      		sbci r25,hi8(layer_fn)
 133 0022 01F4      		brne .L22
 235:catboard.c    **** 			prev_layer = layer1;
 134               		.loc 2 235 0
 135 0024 80E0      		ldi r24,lo8(layer1)
 136 0026 90E0      		ldi r25,hi8(layer1)
 137 0028 9093 0000 		sts prev_layer+1,r25
 138 002c 8093 0000 		sts prev_layer,r24
 139 0030 00C0      		rjmp .L23
 140               	.L22:
 236:catboard.c    **** 		} else {
 237:catboard.c    **** 			layout = layer1;
 141               		.loc 2 237 0
 142 0032 80E0      		ldi r24,lo8(layer1)
 143 0034 90E0      		ldi r25,hi8(layer1)
 144 0036 9093 0000 		sts layout+1,r25
 145 003a 8093 0000 		sts layout,r24
 146               	.L23:
 238:catboard.c    **** 		}
 239:catboard.c    **** 		LED_RED_OFF;
 147               		.loc 2 239 0
 148 003e 469A      		sbi 0x8,6
 240:catboard.c    **** 		if (led) LED_BLUE_ON;
 149               		.loc 2 240 0
 150 0040 8091 0000 		lds r24,led
 151 0044 8823      		tst r24
 152 0046 01F0      		breq .L18
 153               		.loc 2 240 0 is_stmt 0 discriminator 1
 154 0048 599A      		sbi 0xb,1
 155 004a 0895      		ret
 156               	.L19:
 241:catboard.c    **** 	} else if ((! caps_lock_led) && (layout != layer2)) {
 157               		.loc 2 241 0 is_stmt 1 discriminator 1
 158 004c 20E0      		ldi r18,hi8(layer2)
 159 004e 8030      		cpi r24,lo8(layer2)
 160 0050 9207      		cpc r25,r18
 161 0052 01F0      		breq .L18
 242:catboard.c    **** 		if (layout==layer_fn) {
 162               		.loc 2 242 0
 163 0054 8050      		subi r24,lo8(layer_fn)
 164 0056 9040      		sbci r25,hi8(layer_fn)
 165 0058 01F4      		brne .L25
 243:catboard.c    **** 			prev_layer = layer2;
 166               		.loc 2 243 0
 167 005a 80E0      		ldi r24,lo8(layer2)
 168 005c 90E0      		ldi r25,hi8(layer2)
 169 005e 9093 0000 		sts prev_layer+1,r25
 170 0062 8093 0000 		sts prev_layer,r24
 171 0066 00C0      		rjmp .L26
 172               	.L25:
 244:catboard.c    **** 		} else {
 245:catboard.c    **** 			layout = layer2;
 173               		.loc 2 245 0
 174 0068 80E0      		ldi r24,lo8(layer2)
 175 006a 90E0      		ldi r25,hi8(layer2)
 176 006c 9093 0000 		sts layout+1,r25
 177 0070 8093 0000 		sts layout,r24
 178               	.L26:
 246:catboard.c    **** 		}
 247:catboard.c    **** 		LED_BLUE_OFF;
 179               		.loc 2 247 0
 180 0074 5998      		cbi 0xb,1
 248:catboard.c    **** 		if (led) LED_RED_ON;
 181               		.loc 2 248 0
 182 0076 8091 0000 		lds r24,led
 183 007a 8111      		cpse r24,__zero_reg__
 184               		.loc 2 248 0 is_stmt 0 discriminator 1
 185 007c 4698      		cbi 0x8,6
 186               	.L18:
 187 007e 0895      		ret
 188               	.LFE12:
 190               		.section	.text.change_layout,"ax",@progbits
 191               	.global	change_layout
 193               	change_layout:
 194               	.LFB16:
 249:catboard.c    **** 	}
 250:catboard.c    **** }
 251:catboard.c    **** 
 252:catboard.c    **** void repeat_tick(void) {
 253:catboard.c    **** 	if (repeat_time) { // repeat pause
 254:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 255:catboard.c    **** 			repeat_time++;
 256:catboard.c    **** 		} else { // repeat press
 257:catboard.c    **** 			repeat_time = 1;
 258:catboard.c    **** 			if (turbo_repeat) {
 259:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 260:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 261:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 262:catboard.c    **** 					keyboard_keys[0] = 0;
 263:catboard.c    **** 					usb_keyboard_send();
 264:catboard.c    **** 				}
 265:catboard.c    **** 			}
 266:catboard.c    **** 		}
 267:catboard.c    **** 	} else if (press_time2) { // press2 pause
 268:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 269:catboard.c    **** 			press_time2++;
 270:catboard.c    **** 		} else {
 271:catboard.c    **** 			repeat_time = 1;
 272:catboard.c    **** 		}
 273:catboard.c    **** 	} else if (release_time) { // release pause
 274:catboard.c    **** 		if (release_time<(press_time+50)) {
 275:catboard.c    **** 			release_time++;
 276:catboard.c    **** 		} else {
 277:catboard.c    **** 			last_key = 0xFF;
 278:catboard.c    **** 			release_time = 0;
 279:catboard.c    **** 			press_time = 0;
 280:catboard.c    **** 			press_time2 = 0;
 281:catboard.c    **** 			release_time = 0;
 282:catboard.c    **** 		}
 283:catboard.c    **** 	} else if (press_time) { // press1 pause
 284:catboard.c    **** 		if (press_time<250) {
 285:catboard.c    **** 			press_time++;
 286:catboard.c    **** 		} else {
 287:catboard.c    **** 			press_time = 0;
 288:catboard.c    **** 		}
 289:catboard.c    **** 	}	
 290:catboard.c    **** }
 291:catboard.c    **** 
 292:catboard.c    **** void key_press(uint8_t key_id) {
 293:catboard.c    **** 	uint8_t i;
 294:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 295:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 296:catboard.c    **** 	
 297:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 298:catboard.c    **** 	if (key_code==NULL) {
 299:catboard.c    **** 		key_code = layout[key_id];
 300:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 301:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 302:catboard.c    **** 			key_code = prev_layer[key_id];
 303:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 304:catboard.c    **** 		}
 305:catboard.c    **** 	}
 306:catboard.c    **** 
 307:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 308:catboard.c    **** 	
 309:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys
 310:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 311:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 312:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 313:catboard.c    **** 			} else { // Alt press, Tab press and release
 314:catboard.c    **** 				if (! mod_keys) {
 315:catboard.c    **** 					mod_keys |= (KEY_ALT);
 316:catboard.c    **** 				} else {
 317:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 318:catboard.c    **** 				}
 319:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 320:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 321:catboard.c    **** 				usb_keyboard_send();
 322:catboard.c    **** 				_delay_ms(50);
 323:catboard.c    **** 				send();
 324:catboard.c    **** 			}
 325:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 326:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 327:catboard.c    **** 				if (prev_layer) { // FnLock Off
 328:catboard.c    **** 					layout = prev_layer;
 329:catboard.c    **** 					prev_layer = 0;
 330:catboard.c    **** 				} else { // FnLock On
 331:catboard.c    **** 					prev_layer = layout;
 332:catboard.c    **** 					layout = layer_fnlock;
 333:catboard.c    **** 				}
 334:catboard.c    **** 			}
 335:catboard.c    **** 		} else if (key_code==KEY_OS_MODE) { // Mac mode
 336:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 337:catboard.c    **** 				os_mode++;
 338:catboard.c    **** 				if (os_mode>2) os_mode = 0;
 339:catboard.c    **** 			} else { // Press Space
 340:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 341:catboard.c    **** 			}
 342:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 343:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 344:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 345:catboard.c    **** 				mod_keys |= KEY_CTRL;
 346:catboard.c    **** 				send();
 347:catboard.c    **** 			} else {
 348:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 349:catboard.c    **** 				mod_keys |= KEY_SHIFT;
 350:catboard.c    **** 				send();
 351:catboard.c    **** 			}
 352:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 353:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 354:catboard.c    **** 			send();
 355:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 356:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 357:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 358:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 359:catboard.c    **** 			send();
 360:catboard.c    **** 		} else if (key_code==KEY_MACRO) { // TODO: My Macro
 361:catboard.c    **** 			/*uint8_t macros_pos_index = 0;
 362:catboard.c    **** 			for (i==0; i<sizeof(macros_pos); i++) {
 363:catboard.c    **** 				if (key_id==macros_pos[i]) {
 364:catboard.c    **** 					macros_pos_index = i;
 365:catboard.c    **** 					break;
 366:catboard.c    **** 				}
 367:catboard.c    **** 			}
 368:catboard.c    **** 			uint16_t *macros;
 369:catboard.c    **** 			uint16_t *macros = macros_press[macros_pos_index];
 370:catboard.c    **** 			for (i==0; i<sizeof(macros); i=i+2) {
 371:catboard.c    **** 				usb_keyboard_press(macros[i], macros[i+1]);
 372:catboard.c    **** 			}*/
 373:catboard.c    **** 		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
 374:catboard.c    **** 			if (locked) {
 375:catboard.c    **** 				locked = 0;
 376:catboard.c    **** 				if (led) {
 377:catboard.c    **** 					if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 378:catboard.c    **** 					if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 379:catboard.c    **** 				}
 380:catboard.c    **** 			} else {
 381:catboard.c    **** 				locked = 1;
 382:catboard.c    **** 				LED_OFF;
 383:catboard.c    **** 				LED_RED_OFF;
 384:catboard.c    **** 				LED_BLUE_OFF;
 385:catboard.c    **** 				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
 386:catboard.c    **** 			}
 387:catboard.c    **** 		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
 388:catboard.c    **** 			if (led) {
 389:catboard.c    **** 				led = 0;
 390:catboard.c    **** 				LED_OFF;
 391:catboard.c    **** 				LED_RED_OFF;
 392:catboard.c    **** 				LED_BLUE_OFF;
 393:catboard.c    **** 			} else {
 394:catboard.c    **** 				led = 1;
 395:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 396:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 397:catboard.c    **** 			}
 398:catboard.c    **** 		}
 399:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys
 400:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 401:catboard.c    **** 			mod_keys |= KEY_GUI;
 402:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 403:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 404:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 405:catboard.c    **** 			mod_keys |= KEY_CTRL;
 406:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 407:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 408:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 409:catboard.c    **** 			mod_keys |= KEY_ALT;
 410:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 411:catboard.c    **** 			mod_keys |= KEY_GUI;
 412:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 413:catboard.c    **** 			mod_keys |= KEY_RIGHT_CTRL;
 414:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 415:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 416:catboard.c    **** 		} else if (key_code==KEY_RALT) {
 417:catboard.c    **** 			mod_keys |= KEY_RIGHT_ALT;
 418:catboard.c    **** 		} else if (key_code==KEY_RGUI) {
 419:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 420:catboard.c    **** 		}
 421:catboard.c    **** 		send();
 422:catboard.c    **** 		press_time = 0;
 423:catboard.c    **** 		press_time2 = 0;
 424:catboard.c    **** 		release_time = 0;
 425:catboard.c    **** 		repeat_time = 0;
 426:catboard.c    **** 		last_key = 0;
 427:catboard.c    **** 	} else {
 428:catboard.c    **** 		/*if (mod_keys & (KEY_ALT|KEY_RIGHT_ALT)) { // TODO: typo
 429:catboard.c    **** 			uint16_t num = layer2_typo[0];
 430:catboard.c    **** 			char str[4];
 431:catboard.c    **** 			itoa(num, &str, 16);
 432:catboard.c    **** 		}*/
 433:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 434:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 435:catboard.c    **** 			queue[0] = key_id;
 436:catboard.c    **** 			send();
 437:catboard.c    **** 		}
 438:catboard.c    **** 	}
 439:catboard.c    **** 	// Autorepeat
 440:catboard.c    **** 	if (last_key==key_id) { // calc press2
 441:catboard.c    **** 		press_time2 = 1;
 442:catboard.c    **** 		repeat_time = 0;
 443:catboard.c    **** 	} else { // calc press1
 444:catboard.c    **** 		last_key = key_id;
 445:catboard.c    **** 		press_time = 1;
 446:catboard.c    **** 		press_time2 = 0;
 447:catboard.c    **** 		release_time = 0;
 448:catboard.c    **** 		repeat_time = 0;
 449:catboard.c    **** 	}
 450:catboard.c    **** }
 451:catboard.c    **** 
 452:catboard.c    **** void key_release(uint8_t key_id) {
 453:catboard.c    **** 	uint8_t i;
 454:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 455:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 456:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 457:catboard.c    **** 		key_code = prev_layer[key_id];
 458:catboard.c    **** 	}
 459:catboard.c    **** 	pressed[key_id] = 0;
 460:catboard.c    **** 	if (locked) return;
 461:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys release
 462:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 463:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 464:catboard.c    **** 			send();
 465:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 466:catboard.c    **** 			mod_keys &= ~(KEY_CTRL);
 467:catboard.c    **** 			send();
 468:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // LAYER1
 469:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 470:catboard.c    **** 			send();
 471:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 472:catboard.c    **** 				if (layout!=layer1) {
 473:catboard.c    **** 					if (layout==layer_fn) {
 474:catboard.c    **** 						prev_layer = layer1;
 475:catboard.c    **** 					} else {
 476:catboard.c    **** 						layout = layer1;
 477:catboard.c    **** 					}
 478:catboard.c    **** 					change_layout();
 479:catboard.c    **** 					//LED_ON;
 480:catboard.c    **** 					LED_RED_OFF;
 481:catboard.c    **** 					if (led) LED_BLUE_ON;
 482:catboard.c    **** 				}
 483:catboard.c    **** 			}
 484:catboard.c    **** 			last_key = 0xFF;
 485:catboard.c    **** 			press_time = 0;
 486:catboard.c    **** 			press_time2 = 0;
 487:catboard.c    **** 			release_time = 0;
 488:catboard.c    **** 			repeat_time = 0;
 489:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // LAYER2
 490:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 491:catboard.c    **** 			send();
 492:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 493:catboard.c    **** 				if (layout!=layer2) {
 494:catboard.c    **** 					if (layout==layer_fn) {
 495:catboard.c    **** 						prev_layer = layer2;
 496:catboard.c    **** 					} else {
 497:catboard.c    **** 						layout = layer2;
 498:catboard.c    **** 					}
 499:catboard.c    **** 					change_layout();
 500:catboard.c    **** 					//LED_OFF;
 501:catboard.c    **** 					LED_BLUE_OFF;
 502:catboard.c    **** 					if (led) LED_RED_ON;
 503:catboard.c    **** 				}
 504:catboard.c    **** 			}
 505:catboard.c    **** 			last_key = 0xFF;
 506:catboard.c    **** 			press_time = 0;
 507:catboard.c    **** 			press_time2 = 0;
 508:catboard.c    **** 			release_time = 0;
 509:catboard.c    **** 			repeat_time = 0;
 510:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 511:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 512:catboard.c    **** 			send();
 513:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 514:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 515:catboard.c    **** 			}
 516:catboard.c    **** 			last_key = 0xFF;
 517:catboard.c    **** 			press_time = 0;
 518:catboard.c    **** 			press_time2 = 0;
 519:catboard.c    **** 			release_time = 0;
 520:catboard.c    **** 			repeat_time = 0;
 521:catboard.c    **** 		}
 522:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 523:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 524:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 525:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 526:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 527:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 528:catboard.c    **** 			mod_keys &= ~KEY_CTRL;
 529:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 530:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 531:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 532:catboard.c    **** 			mod_keys &= ~KEY_ALT;
 533:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 534:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 535:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 536:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_CTRL;
 537:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 538:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_SHIFT;
 539:catboard.c    **** 		} else if (key_code==KEY_RALT) {
 540:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_ALT;
 541:catboard.c    **** 		} else if (key_code==KEY_RGUI) {
 542:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 543:catboard.c    **** 		}
 544:catboard.c    **** 		send();
 545:catboard.c    **** 		press_time = 0;
 546:catboard.c    **** 		press_time2 = 0;
 547:catboard.c    **** 		release_time = 0;
 548:catboard.c    **** 		repeat_time = 0;
 549:catboard.c    **** 		last_key = 0;
 550:catboard.c    **** 	} else {
 551:catboard.c    **** 		for (i=0; i<6; i++) {
 552:catboard.c    **** 			if (queue[i]==key_id) {
 553:catboard.c    **** 				break;
 554:catboard.c    **** 			}
 555:catboard.c    **** 		}
 556:catboard.c    **** 		for (; i<6; i++) {
 557:catboard.c    **** 			queue[i] = queue[i+1];
 558:catboard.c    **** 		}
 559:catboard.c    **** 		send();
 560:catboard.c    **** 		// Autorepeat
 561:catboard.c    **** 		if (last_key==key_id) { // realise time
 562:catboard.c    **** 			press_time2 = 0;
 563:catboard.c    **** 			release_time = 1;
 564:catboard.c    **** 			repeat_time = 0;
 565:catboard.c    **** 		} else { // reset
 566:catboard.c    **** 			press_time = 0;
 567:catboard.c    **** 			press_time2 = 0;
 568:catboard.c    **** 			release_time = 0;
 569:catboard.c    **** 			repeat_time = 0;
 570:catboard.c    **** 		}
 571:catboard.c    **** 	}
 572:catboard.c    **** }
 573:catboard.c    **** 
 574:catboard.c    **** void change_layout(void) {
 195               		.loc 2 574 0 is_stmt 1
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 0 */
 199               	.L__stack_usage = 0
 575:catboard.c    **** 	if (KEY_LAYOUT==KEY_LAYOUT_GUI_SPACE || os_mode==2) { // Press Cmd+Space
 200               		.loc 2 575 0
 201 0000 8091 0000 		lds r24,os_mode
 202 0004 8230      		cpi r24,lo8(2)
 203 0006 01F4      		brne .L37
 204               	.LBB30:
 205               	.LBB31:
 576:catboard.c    **** 		keyboard_modifier_keys = KEY_GUI;
 206               		.loc 2 576 0
 207 0008 88E0      		ldi r24,lo8(8)
 208 000a 8093 0000 		sts keyboard_modifier_keys,r24
 577:catboard.c    **** 		keyboard_keys[0] = 0;
 209               		.loc 2 577 0
 210 000e 1092 0000 		sts keyboard_keys,__zero_reg__
 578:catboard.c    **** 		usb_keyboard_send();
 211               		.loc 2 578 0
 212 0012 0E94 0000 		call usb_keyboard_send
 213               	.LVL5:
 214               	.LBB32:
 215               	.LBB33:
 216               		.file 3 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h"
   1:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 217               		.loc 3 164 0
 218 0016 2FEF      		ldi r18,lo8(159999)
 219 0018 80E7      		ldi r24,hi8(159999)
 220 001a 92E0      		ldi r25,hlo8(159999)
 221 001c 2150      		1: subi r18,1
 222 001e 8040      		sbci r24,0
 223 0020 9040      		sbci r25,0
 224 0022 01F4      		brne 1b
 225 0024 00C0      		rjmp .
 226 0026 0000      		nop
 227               	.LBE33:
 228               	.LBE32:
 579:catboard.c    **** 		_delay_ms(50);
 580:catboard.c    **** 		usb_keyboard_press(KEY_SPACE, KEY_GUI);
 229               		.loc 2 580 0
 230 0028 68E0      		ldi r22,lo8(8)
 231 002a 8CE2      		ldi r24,lo8(44)
 232 002c 00C0      		rjmp .L38
 233               	.LVL6:
 234               	.L37:
 235               	.LBE31:
 236               	.LBE30:
 581:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_ALT_SHIFT) { // Press Alt+Shift
 582:catboard.c    **** 		keyboard_modifier_keys = KEY_ALT;
 237               		.loc 2 582 0
 238 002e 84E0      		ldi r24,lo8(4)
 239 0030 8093 0000 		sts keyboard_modifier_keys,r24
 583:catboard.c    **** 		keyboard_keys[0] = 0;
 240               		.loc 2 583 0
 241 0034 1092 0000 		sts keyboard_keys,__zero_reg__
 584:catboard.c    **** 		usb_keyboard_send();
 242               		.loc 2 584 0
 243 0038 0E94 0000 		call usb_keyboard_send
 244               	.LVL7:
 245               	.LBB34:
 246               	.LBB35:
 247               		.loc 3 164 0
 248 003c 2FEF      		ldi r18,lo8(159999)
 249 003e 80E7      		ldi r24,hi8(159999)
 250 0040 92E0      		ldi r25,hlo8(159999)
 251 0042 2150      		1: subi r18,1
 252 0044 8040      		sbci r24,0
 253 0046 9040      		sbci r25,0
 254 0048 01F4      		brne 1b
 255 004a 00C0      		rjmp .
 256 004c 0000      		nop
 257               	.LBE35:
 258               	.LBE34:
 585:catboard.c    **** 		_delay_ms(50);
 586:catboard.c    **** 		usb_keyboard_press(0, KEY_ALT|KEY_SHIFT);
 259               		.loc 2 586 0
 260 004e 66E0      		ldi r22,lo8(6)
 261 0050 80E0      		ldi r24,0
 262               	.LVL8:
 263               	.L38:
 264 0052 0C94 0000 		jmp usb_keyboard_press
 265               	.LVL9:
 266               	.LFE16:
 268               		.section	.text.get_code,"ax",@progbits
 269               	.global	get_code
 271               	get_code:
 272               	.LFB18:
 587:catboard.c    **** 	} else if (KEY_LAYOUT==KEY_LAYOUT_CTRL_SHIFT) { // Press Ctrl+Shift
 588:catboard.c    **** 		keyboard_modifier_keys = KEY_CTRL;
 589:catboard.c    **** 		keyboard_keys[0] = 0;
 590:catboard.c    **** 		usb_keyboard_send();
 591:catboard.c    **** 		_delay_ms(50);
 592:catboard.c    **** 		usb_keyboard_press(0, KEY_CTRL|KEY_SHIFT);
 593:catboard.c    **** 	}
 594:catboard.c    **** }
 595:catboard.c    **** 
 596:catboard.c    **** void send(void) {
 597:catboard.c    **** 	uint8_t i;
 598:catboard.c    **** 	for (i=0; i<6; i++) {
 599:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 600:catboard.c    **** 	}
 601:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 602:catboard.c    **** 	usb_keyboard_send();
 603:catboard.c    **** }
 604:catboard.c    **** 
 605:catboard.c    **** uint8_t get_code(uint8_t key_id) {
 273               		.loc 2 605 0
 274               	.LVL10:
 275               	/* prologue: function */
 276               	/* frame size = 0 */
 277               	/* stack size = 0 */
 278               	.L__stack_usage = 0
 606:catboard.c    **** 	uint8_t key_code = 0;
 607:catboard.c    **** 	if (key_id<KEYS) { // not 0xFF
 279               		.loc 2 607 0
 280 0000 8C33      		cpi r24,lo8(60)
 281 0002 00F4      		brsh .L44
 282               	.LVL11:
 283               	.LBB38:
 284               	.LBB39:
 608:catboard.c    **** 		if (pressed[key_id]==KEY_PRESSED_FN) { // key+Fn key
 285               		.loc 2 608 0
 286 0004 282F      		mov r18,r24
 287 0006 30E0      		ldi r19,0
 288 0008 F901      		movw r30,r18
 289 000a E050      		subi r30,lo8(-(pressed))
 290 000c F040      		sbci r31,hi8(-(pressed))
 291 000e 9081      		ld r25,Z
 292 0010 9130      		cpi r25,lo8(1)
 293 0012 01F4      		brne .L41
 609:catboard.c    **** 			if (layer_fn[key_id]>0 && layer_fn[key_id]<0x80) {
 294               		.loc 2 609 0
 295 0014 F901      		movw r30,r18
 296 0016 E050      		subi r30,lo8(-(layer_fn))
 297 0018 F040      		sbci r31,hi8(-(layer_fn))
 298 001a 8081      		ld r24,Z
 299               	.LVL12:
 300 001c 1816      		cp __zero_reg__,r24
 301 001e 04F0      		brlt .L40
 302 0020 00C0      		rjmp .L44
 303               	.L41:
 610:catboard.c    **** 				key_code = layer_fn[key_id];
 611:catboard.c    **** 			}
 612:catboard.c    **** 		} else if (layout!=layer_fn && pressed[key_id]==KEY_PRESSED_MODS) { // keyboard shortcuts from la
 304               		.loc 2 612 0
 305 0022 4091 0000 		lds r20,layout
 306 0026 5091 0000 		lds r21,layout+1
 307 002a 60E0      		ldi r22,hi8(layer_fn)
 308 002c 4030      		cpi r20,lo8(layer_fn)
 309 002e 5607      		cpc r21,r22
 310 0030 01F0      		breq .L43
 311 0032 9230      		cpi r25,lo8(2)
 312 0034 01F4      		brne .L43
 613:catboard.c    **** 			key_code = (KEY_SHORTCUTS_LAYER1 ? layer1[key_id] : layer2[key_id]);
 313               		.loc 2 613 0
 314 0036 F901      		movw r30,r18
 315 0038 E050      		subi r30,lo8(-(layer1))
 316 003a F040      		sbci r31,hi8(-(layer1))
 317 003c 00C0      		rjmp .L48
 318               	.L43:
 614:catboard.c    **** 		} else {
 615:catboard.c    **** 			key_code = layout[key_id];
 319               		.loc 2 615 0
 320 003e FA01      		movw r30,r20
 321 0040 E80F      		add r30,r24
 322 0042 F11D      		adc r31,__zero_reg__
 323               	.L48:
 324 0044 8081      		ld r24,Z
 325               	.LVL13:
 326 0046 0895      		ret
 327               	.LVL14:
 328               	.L44:
 329               	.LBE39:
 330               	.LBE38:
 606:catboard.c    **** 	uint8_t key_code = 0;
 331               		.loc 2 606 0
 332 0048 80E0      		ldi r24,0
 333               	.L40:
 334               	.LVL15:
 616:catboard.c    **** 		}
 617:catboard.c    **** 	}
 618:catboard.c    **** 	return key_code;
 619:catboard.c    **** }
 335               		.loc 2 619 0
 336 004a 0895      		ret
 337               	.LFE18:
 339               		.section	.text.send,"ax",@progbits
 340               	.global	send
 342               	send:
 343               	.LFB17:
 596:catboard.c    **** void send(void) {
 344               		.loc 2 596 0
 345 0000 0F93      		push r16
 346               	.LCFI0:
 347 0002 1F93      		push r17
 348               	.LCFI1:
 349 0004 CF93      		push r28
 350               	.LCFI2:
 351 0006 DF93      		push r29
 352               	.LCFI3:
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 4 */
 356               	.L__stack_usage = 4
 357               	.LVL16:
 358 0008 C0E0      		ldi r28,lo8(queue)
 359 000a D0E0      		ldi r29,hi8(queue)
 360 000c 00E0      		ldi r16,lo8(keyboard_keys)
 361 000e 10E0      		ldi r17,hi8(keyboard_keys)
 362               	.LVL17:
 363               	.L50:
 599:catboard.c    **** 		keyboard_keys[i] = get_code(queue[i]);
 364               		.loc 2 599 0 discriminator 2
 365 0010 8991      		ld r24,Y+
 366 0012 0E94 0000 		call get_code
 367               	.LVL18:
 368 0016 F801      		movw r30,r16
 369 0018 8193      		st Z+,r24
 370 001a 8F01      		movw r16,r30
 598:catboard.c    **** 	for (i=0; i<6; i++) {
 371               		.loc 2 598 0 discriminator 2
 372 001c F0E0      		ldi r31,hi8(queue+6)
 373 001e C030      		cpi r28,lo8(queue+6)
 374 0020 DF07      		cpc r29,r31
 375 0022 01F4      		brne .L50
 601:catboard.c    **** 	keyboard_modifier_keys = mod_keys;
 376               		.loc 2 601 0
 377 0024 8091 0000 		lds r24,mod_keys
 378 0028 8093 0000 		sts keyboard_modifier_keys,r24
 379               	/* epilogue start */
 603:catboard.c    **** }
 380               		.loc 2 603 0
 381 002c DF91      		pop r29
 382 002e CF91      		pop r28
 383 0030 1F91      		pop r17
 384 0032 0F91      		pop r16
 602:catboard.c    **** 	usb_keyboard_send();
 385               		.loc 2 602 0
 386 0034 0C94 0000 		jmp usb_keyboard_send
 387               	.LVL19:
 388               	.LFE17:
 390               		.section	.text.key_release,"ax",@progbits
 391               	.global	key_release
 393               	key_release:
 394               	.LFB15:
 452:catboard.c    **** void key_release(uint8_t key_id) {
 395               		.loc 2 452 0
 396               	.LVL20:
 397 0000 CF93      		push r28
 398               	.LCFI4:
 399 0002 DF93      		push r29
 400               	.LCFI5:
 401               	/* prologue: function */
 402               	/* frame size = 0 */
 403               	/* stack size = 2 */
 404               	.L__stack_usage = 2
 405 0004 C82F      		mov r28,r24
 454:catboard.c    **** 	int8_t pressed_key_id = pressed[key_id];
 406               		.loc 2 454 0
 407 0006 282F      		mov r18,r24
 408 0008 30E0      		ldi r19,0
 409 000a F901      		movw r30,r18
 410 000c E050      		subi r30,lo8(-(pressed))
 411 000e F040      		sbci r31,hi8(-(pressed))
 412 0010 D081      		ld r29,Z
 413               	.LVL21:
 455:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 414               		.loc 2 455 0
 415 0012 D130      		cpi r29,lo8(1)
 416 0014 01F4      		brne .L53
 455:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 417               		.loc 2 455 0 is_stmt 0 discriminator 1
 418 0016 F901      		movw r30,r18
 419 0018 E050      		subi r30,lo8(-(layer_fn))
 420 001a F040      		sbci r31,hi8(-(layer_fn))
 421 001c 00C0      		rjmp .L136
 422               	.L53:
 455:catboard.c    **** 	uint8_t key_code = ((pressed_key_id==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 423               		.loc 2 455 0 discriminator 2
 424 001e E091 0000 		lds r30,layout
 425 0022 F091 0000 		lds r31,layout+1
 426 0026 E20F      		add r30,r18
 427 0028 F31F      		adc r31,r19
 428 002a 8081      		ld r24,Z
 429               	.LVL22:
 456:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 430               		.loc 2 456 0 is_stmt 1 discriminator 2
 431 002c D630      		cpi r29,lo8(6)
 432 002e 01F4      		brne .L54
 456:catboard.c    **** 	if (pressed_key_id==KEY_PRESSED_PREV && prev_layer) {
 433               		.loc 2 456 0 is_stmt 0 discriminator 1
 434 0030 4091 0000 		lds r20,prev_layer
 435 0034 5091 0000 		lds r21,prev_layer+1
 436 0038 4115      		cp r20,__zero_reg__
 437 003a 5105      		cpc r21,__zero_reg__
 438 003c 01F0      		breq .L54
 457:catboard.c    **** 		key_code = prev_layer[key_id];
 439               		.loc 2 457 0 is_stmt 1
 440 003e FA01      		movw r30,r20
 441 0040 E20F      		add r30,r18
 442 0042 F31F      		adc r31,r19
 443               	.LVL23:
 444               	.L136:
 445 0044 8081      		ld r24,Z
 446               	.LVL24:
 447               	.L54:
 459:catboard.c    **** 	pressed[key_id] = 0;
 448               		.loc 2 459 0
 449 0046 F901      		movw r30,r18
 450 0048 E050      		subi r30,lo8(-(pressed))
 451 004a F040      		sbci r31,hi8(-(pressed))
 452 004c 1082      		st Z,__zero_reg__
 460:catboard.c    **** 	if (locked) return;
 453               		.loc 2 460 0
 454 004e 9091 0000 		lds r25,locked
 455 0052 9111      		cpse r25,__zero_reg__
 456 0054 00C0      		rjmp .L52
 461:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys release
 457               		.loc 2 461 0
 458 0056 8D36      		cpi r24,lo8(109)
 459 0058 00F4      		brsh .+2
 460 005a 00C0      		rjmp .L56
 462:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 461               		.loc 2 462 0
 462 005c 8D37      		cpi r24,lo8(125)
 463 005e 01F4      		brne .L57
 462:catboard.c    **** 		if (key_code==KEY_ALT_TAB && pressed_key_id!=KEY_PRESSED_ALT) { // AltTab: Alt release
 464               		.loc 2 462 0 is_stmt 0 discriminator 1
 465 0060 D330      		cpi r29,lo8(3)
 466 0062 01F4      		brne .+2
 467 0064 00C0      		rjmp .L52
 463:catboard.c    **** 			mod_keys &= ~(KEY_ALT);
 468               		.loc 2 463 0 is_stmt 1
 469 0066 8091 0000 		lds r24,mod_keys
 470               	.LVL25:
 471 006a 8B7F      		andi r24,lo8(-5)
 472 006c 00C0      		rjmp .L140
 473               	.LVL26:
 474               	.L57:
 465:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 475               		.loc 2 465 0
 476 006e 8D36      		cpi r24,lo8(109)
 477 0070 01F0      		breq .+2
 478 0072 00C0      		rjmp .L58
 479 0074 8091 0000 		lds r24,mod_keys
 480               	.LVL27:
 465:catboard.c    **** 		} else if (key_code==KEY_LAYER1 && pressed_key_id==KEY_PRESSED_CTRL) { // Layer1: Ctrl release
 481               		.loc 2 465 0 is_stmt 0 discriminator 1
 482 0078 D530      		cpi r29,lo8(5)
 483 007a 01F4      		brne .L59
 466:catboard.c    **** 			mod_keys &= ~(KEY_CTRL);
 484               		.loc 2 466 0 is_stmt 1
 485 007c 8E7F      		andi r24,lo8(-2)
 486               	.L140:
 487 007e 8093 0000 		sts mod_keys,r24
 488               	/* epilogue start */
 572:catboard.c    **** }
 489               		.loc 2 572 0
 490 0082 DF91      		pop r29
 491               	.LVL28:
 492 0084 CF91      		pop r28
 467:catboard.c    **** 			send();
 493               		.loc 2 467 0
 494 0086 0C94 0000 		jmp send
 495               	.LVL29:
 496               	.L59:
 469:catboard.c    **** 			mod_keys &= ~(KEY_SHIFT);
 497               		.loc 2 469 0
 498 008a 8D7F      		andi r24,lo8(-3)
 499 008c 8093 0000 		sts mod_keys,r24
 470:catboard.c    **** 			send();
 500               		.loc 2 470 0
 501 0090 0E94 0000 		call send
 502               	.LVL30:
 471:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 503               		.loc 2 471 0
 504 0094 8091 0000 		lds r24,last_key
 505 0098 8C13      		cpse r24,r28
 506 009a 00C0      		rjmp .L71
 471:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 507               		.loc 2 471 0 is_stmt 0 discriminator 1
 508 009c 8091 0000 		lds r24,press_time
 509 00a0 9091 0000 		lds r25,press_time+1
 510 00a4 0097      		sbiw r24,0
 511 00a6 01F4      		brne .+2
 512 00a8 00C0      		rjmp .L71
 513 00aa C297      		sbiw r24,50
 514 00ac 00F0      		brlo .+2
 515 00ae 00C0      		rjmp .L71
 516 00b0 D430      		cpi r29,lo8(4)
 517 00b2 01F4      		brne .+2
 518 00b4 00C0      		rjmp .L71
 472:catboard.c    **** 				if (layout!=layer1) {
 519               		.loc 2 472 0 is_stmt 1
 520 00b6 8091 0000 		lds r24,layout
 521 00ba 9091 0000 		lds r25,layout+1
 522 00be 20E0      		ldi r18,hi8(layer1)
 523 00c0 8030      		cpi r24,lo8(layer1)
 524 00c2 9207      		cpc r25,r18
 525 00c4 01F4      		brne .+2
 526 00c6 00C0      		rjmp .L71
 527               	.LBB40:
 473:catboard.c    **** 					if (layout==layer_fn) {
 528               		.loc 2 473 0
 529 00c8 8050      		subi r24,lo8(layer_fn)
 530 00ca 9040      		sbci r25,hi8(layer_fn)
 531 00cc 01F4      		brne .L63
 474:catboard.c    **** 						prev_layer = layer1;
 532               		.loc 2 474 0
 533 00ce 80E0      		ldi r24,lo8(layer1)
 534 00d0 90E0      		ldi r25,hi8(layer1)
 535 00d2 9093 0000 		sts prev_layer+1,r25
 536 00d6 8093 0000 		sts prev_layer,r24
 537 00da 00C0      		rjmp .L64
 538               	.L63:
 476:catboard.c    **** 						layout = layer1;
 539               		.loc 2 476 0
 540 00dc 80E0      		ldi r24,lo8(layer1)
 541 00de 90E0      		ldi r25,hi8(layer1)
 542 00e0 9093 0000 		sts layout+1,r25
 543 00e4 8093 0000 		sts layout,r24
 544               	.L64:
 478:catboard.c    **** 					change_layout();
 545               		.loc 2 478 0
 546 00e8 0E94 0000 		call change_layout
 547               	.LVL31:
 480:catboard.c    **** 					LED_RED_OFF;
 548               		.loc 2 480 0
 549 00ec 469A      		sbi 0x8,6
 481:catboard.c    **** 					if (led) LED_BLUE_ON;
 550               		.loc 2 481 0
 551 00ee 8091 0000 		lds r24,led
 552 00f2 8823      		tst r24
 553 00f4 01F4      		brne .+2
 554 00f6 00C0      		rjmp .L71
 481:catboard.c    **** 					if (led) LED_BLUE_ON;
 555               		.loc 2 481 0 is_stmt 0 discriminator 1
 556 00f8 599A      		sbi 0xb,1
 557 00fa 00C0      		rjmp .L71
 558               	.LVL32:
 559               	.L58:
 560               	.LBE40:
 489:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // LAYER2
 561               		.loc 2 489 0 is_stmt 1
 562 00fc 8E36      		cpi r24,lo8(110)
 563 00fe 01F4      		brne .L65
 490:catboard.c    **** 			mod_keys &= ~(KEY_RIGHT_SHIFT);
 564               		.loc 2 490 0
 565 0100 8091 0000 		lds r24,mod_keys
 566               	.LVL33:
 567 0104 8F7D      		andi r24,lo8(-33)
 568 0106 8093 0000 		sts mod_keys,r24
 491:catboard.c    **** 			send();
 569               		.loc 2 491 0
 570 010a 0E94 0000 		call send
 571               	.LVL34:
 492:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 572               		.loc 2 492 0
 573 010e 8091 0000 		lds r24,last_key
 574 0112 8C13      		cpse r24,r28
 575 0114 00C0      		rjmp .L71
 492:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_SHIFT) {
 576               		.loc 2 492 0 is_stmt 0 discriminator 1
 577 0116 8091 0000 		lds r24,press_time
 578 011a 9091 0000 		lds r25,press_time+1
 579 011e 0097      		sbiw r24,0
 580 0120 01F4      		brne .+2
 581 0122 00C0      		rjmp .L71
 582 0124 C297      		sbiw r24,50
 583 0126 00F0      		brlo .+2
 584 0128 00C0      		rjmp .L71
 585 012a D430      		cpi r29,lo8(4)
 586 012c 01F4      		brne .+2
 587 012e 00C0      		rjmp .L71
 493:catboard.c    **** 				if (layout!=layer2) {
 588               		.loc 2 493 0 is_stmt 1
 589 0130 8091 0000 		lds r24,layout
 590 0134 9091 0000 		lds r25,layout+1
 591 0138 20E0      		ldi r18,hi8(layer2)
 592 013a 8030      		cpi r24,lo8(layer2)
 593 013c 9207      		cpc r25,r18
 594 013e 01F0      		breq .L71
 595               	.LBB41:
 494:catboard.c    **** 					if (layout==layer_fn) {
 596               		.loc 2 494 0
 597 0140 8050      		subi r24,lo8(layer_fn)
 598 0142 9040      		sbci r25,hi8(layer_fn)
 599 0144 01F4      		brne .L69
 495:catboard.c    **** 						prev_layer = layer2;
 600               		.loc 2 495 0
 601 0146 80E0      		ldi r24,lo8(layer2)
 602 0148 90E0      		ldi r25,hi8(layer2)
 603 014a 9093 0000 		sts prev_layer+1,r25
 604 014e 8093 0000 		sts prev_layer,r24
 605 0152 00C0      		rjmp .L70
 606               	.L69:
 497:catboard.c    **** 						layout = layer2;
 607               		.loc 2 497 0
 608 0154 80E0      		ldi r24,lo8(layer2)
 609 0156 90E0      		ldi r25,hi8(layer2)
 610 0158 9093 0000 		sts layout+1,r25
 611 015c 8093 0000 		sts layout,r24
 612               	.L70:
 499:catboard.c    **** 					change_layout();
 613               		.loc 2 499 0
 614 0160 0E94 0000 		call change_layout
 615               	.LVL35:
 501:catboard.c    **** 					LED_BLUE_OFF;
 616               		.loc 2 501 0
 617 0164 5998      		cbi 0xb,1
 502:catboard.c    **** 					if (led) LED_RED_ON;
 618               		.loc 2 502 0
 619 0166 8091 0000 		lds r24,led
 620 016a 8823      		tst r24
 621 016c 01F0      		breq .L71
 502:catboard.c    **** 					if (led) LED_RED_ON;
 622               		.loc 2 502 0 is_stmt 0 discriminator 1
 623 016e 4698      		cbi 0x8,6
 624 0170 00C0      		rjmp .L71
 625               	.LVL36:
 626               	.L65:
 627               	.LBE41:
 510:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 628               		.loc 2 510 0 is_stmt 1
 629 0172 8737      		cpi r24,lo8(119)
 630 0174 01F0      		breq .+2
 631 0176 00C0      		rjmp .L52
 511:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 632               		.loc 2 511 0
 633 0178 8091 0000 		lds r24,mod_keys
 634               	.LVL37:
 635 017c 8D7F      		andi r24,lo8(-3)
 636 017e 8093 0000 		sts mod_keys,r24
 512:catboard.c    **** 			send();
 637               		.loc 2 512 0
 638 0182 0E94 0000 		call send
 639               	.LVL38:
 513:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 640               		.loc 2 513 0
 641 0186 8091 0000 		lds r24,last_key
 642 018a 8C13      		cpse r24,r28
 643 018c 00C0      		rjmp .L71
 513:catboard.c    **** 			if (last_key==key_id && press_time && press_time<50 && pressed_key_id!=KEY_PRESSED_MODS && ! mod
 644               		.loc 2 513 0 is_stmt 0 discriminator 1
 645 018e 8091 0000 		lds r24,press_time
 646 0192 9091 0000 		lds r25,press_time+1
 647 0196 0097      		sbiw r24,0
 648 0198 01F0      		breq .L71
 649 019a C297      		sbiw r24,50
 650 019c 00F4      		brsh .L71
 651 019e D230      		cpi r29,lo8(2)
 652 01a0 01F0      		breq .L71
 653 01a2 8091 0000 		lds r24,mod_keys
 654 01a6 8111      		cpse r24,__zero_reg__
 655 01a8 00C0      		rjmp .L71
 514:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 656               		.loc 2 514 0 is_stmt 1
 657 01aa 60E0      		ldi r22,0
 658 01ac 8CE2      		ldi r24,lo8(44)
 659 01ae 0E94 0000 		call usb_keyboard_press
 660               	.LVL39:
 661               	.L71:
 516:catboard.c    **** 			last_key = 0xFF;
 662               		.loc 2 516 0
 663 01b2 8FEF      		ldi r24,lo8(-1)
 664 01b4 8093 0000 		sts last_key,r24
 665 01b8 00C0      		rjmp .L90
 666               	.LVL40:
 667               	.L56:
 522:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 668               		.loc 2 522 0
 669 01ba 8536      		cpi r24,lo8(101)
 670 01bc 00F4      		brsh .+2
 671 01be 00C0      		rjmp .L72
 523:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 672               		.loc 2 523 0
 673 01c0 9091 0000 		lds r25,os_mode
 674 01c4 9230      		cpi r25,lo8(2)
 675 01c6 01F4      		brne .L73
 523:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 676               		.loc 2 523 0 is_stmt 0 discriminator 1
 677 01c8 8536      		cpi r24,lo8(101)
 678 01ca 01F4      		brne .L74
 524:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 679               		.loc 2 524 0 is_stmt 1
 680 01cc 8091 0000 		lds r24,mod_keys
 681               	.LVL41:
 682 01d0 877F      		andi r24,lo8(-9)
 683 01d2 00C0      		rjmp .L137
 684               	.LVL42:
 685               	.L74:
 525:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 686               		.loc 2 525 0 discriminator 1
 687 01d4 8936      		cpi r24,lo8(105)
 688 01d6 01F0      		breq .+2
 689 01d8 00C0      		rjmp .L134
 690 01da 00C0      		rjmp .L76
 691               	.L73:
 525:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 692               		.loc 2 525 0 is_stmt 0 discriminator 2
 693 01dc 8C36      		cpi r24,lo8(108)
 694 01de 01F4      		brne .L78
 695               	.L76:
 526:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_GUI;
 696               		.loc 2 526 0 is_stmt 1
 697 01e0 8091 0000 		lds r24,mod_keys
 698               	.LVL43:
 699 01e4 8F77      		andi r24,lo8(127)
 700               	.L137:
 701 01e6 8093 0000 		sts mod_keys,r24
 702 01ea 00C0      		rjmp .L75
 703               	.LVL44:
 704               	.L78:
 527:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 705               		.loc 2 527 0
 706 01ec 8536      		cpi r24,lo8(101)
 707 01ee 01F4      		brne .L79
 528:catboard.c    **** 			mod_keys &= ~KEY_CTRL;
 708               		.loc 2 528 0
 709 01f0 8091 0000 		lds r24,mod_keys
 710               	.LVL45:
 711 01f4 8E7F      		andi r24,lo8(-2)
 712 01f6 00C0      		rjmp .L137
 713               	.LVL46:
 714               	.L79:
 715 01f8 9091 0000 		lds r25,mod_keys
 529:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 716               		.loc 2 529 0
 717 01fc 8636      		cpi r24,lo8(102)
 718 01fe 01F4      		brne .L80
 530:catboard.c    **** 			mod_keys &= ~KEY_SHIFT;
 719               		.loc 2 530 0
 720 0200 9D7F      		andi r25,lo8(-3)
 721 0202 00C0      		rjmp .L138
 722               	.L80:
 531:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 723               		.loc 2 531 0
 724 0204 8736      		cpi r24,lo8(103)
 725 0206 01F4      		brne .L81
 532:catboard.c    **** 			mod_keys &= ~KEY_ALT;
 726               		.loc 2 532 0
 727 0208 9B7F      		andi r25,lo8(-5)
 728 020a 00C0      		rjmp .L138
 729               	.L81:
 533:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 730               		.loc 2 533 0
 731 020c 8836      		cpi r24,lo8(104)
 732 020e 01F4      		brne .L82
 534:catboard.c    **** 			mod_keys &= ~KEY_GUI;
 733               		.loc 2 534 0
 734 0210 977F      		andi r25,lo8(-9)
 735 0212 00C0      		rjmp .L138
 736               	.L82:
 535:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 737               		.loc 2 535 0
 738 0214 8936      		cpi r24,lo8(105)
 739 0216 01F4      		brne .L83
 536:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_CTRL;
 740               		.loc 2 536 0
 741 0218 9F7E      		andi r25,lo8(-17)
 742 021a 00C0      		rjmp .L138
 743               	.L83:
 537:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 744               		.loc 2 537 0
 745 021c 8A36      		cpi r24,lo8(106)
 746 021e 01F4      		brne .L84
 538:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_SHIFT;
 747               		.loc 2 538 0
 748 0220 9F7D      		andi r25,lo8(-33)
 749 0222 00C0      		rjmp .L138
 750               	.L84:
 540:catboard.c    **** 			mod_keys &= ~KEY_RIGHT_ALT;
 751               		.loc 2 540 0
 752 0224 9F7B      		andi r25,lo8(-65)
 753               	.L138:
 754 0226 9093 0000 		sts mod_keys,r25
 755               	.LVL47:
 756               	.L75:
 544:catboard.c    **** 		send();
 757               		.loc 2 544 0
 758 022a 0E94 0000 		call send
 759               	.LVL48:
 545:catboard.c    **** 		press_time = 0;
 760               		.loc 2 545 0
 761 022e 1092 0000 		sts press_time+1,__zero_reg__
 762 0232 1092 0000 		sts press_time,__zero_reg__
 546:catboard.c    **** 		press_time2 = 0;
 763               		.loc 2 546 0
 764 0236 1092 0000 		sts press_time2+1,__zero_reg__
 765 023a 1092 0000 		sts press_time2,__zero_reg__
 547:catboard.c    **** 		release_time = 0;
 766               		.loc 2 547 0
 767 023e 1092 0000 		sts release_time+1,__zero_reg__
 768 0242 1092 0000 		sts release_time,__zero_reg__
 548:catboard.c    **** 		repeat_time = 0;
 769               		.loc 2 548 0
 770 0246 1092 0000 		sts repeat_time+1,__zero_reg__
 771 024a 1092 0000 		sts repeat_time,__zero_reg__
 549:catboard.c    **** 		last_key = 0;
 772               		.loc 2 549 0
 773 024e 1092 0000 		sts last_key,__zero_reg__
 774 0252 00C0      		rjmp .L52
 775               	.LVL49:
 776               	.L72:
 777 0254 E0E0      		ldi r30,lo8(queue)
 778 0256 F0E0      		ldi r31,hi8(queue)
 522:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys release
 779               		.loc 2 522 0
 780 0258 80E0      		ldi r24,0
 781               	.LVL50:
 782               	.L87:
 552:catboard.c    **** 			if (queue[i]==key_id) {
 783               		.loc 2 552 0
 784 025a 9191      		ld r25,Z+
 785 025c 9C17      		cp r25,r28
 786 025e 01F0      		breq .L135
 551:catboard.c    **** 		for (i=0; i<6; i++) {
 787               		.loc 2 551 0
 788 0260 8F5F      		subi r24,lo8(-(1))
 789               	.LVL51:
 790 0262 8630      		cpi r24,lo8(6)
 791 0264 01F4      		brne .L87
 792 0266 00C0      		rjmp .L135
 793               	.L89:
 557:catboard.c    **** 			queue[i] = queue[i+1];
 794               		.loc 2 557 0 discriminator 2
 795 0268 E82F      		mov r30,r24
 796 026a F0E0      		ldi r31,0
 797 026c E050      		subi r30,lo8(-(queue))
 798 026e F040      		sbci r31,hi8(-(queue))
 799 0270 9181      		ldd r25,Z+1
 800 0272 9083      		st Z,r25
 556:catboard.c    **** 		for (; i<6; i++) {
 801               		.loc 2 556 0 discriminator 2
 802 0274 8F5F      		subi r24,lo8(-(1))
 803               	.LVL52:
 804               	.L135:
 556:catboard.c    **** 		for (; i<6; i++) {
 805               		.loc 2 556 0 is_stmt 0 discriminator 1
 806 0276 8630      		cpi r24,lo8(6)
 807 0278 01F4      		brne .L89
 559:catboard.c    **** 		send();
 808               		.loc 2 559 0 is_stmt 1
 809 027a 0E94 0000 		call send
 810               	.LVL53:
 561:catboard.c    **** 		if (last_key==key_id) { // realise time
 811               		.loc 2 561 0
 812 027e 8091 0000 		lds r24,last_key
 813 0282 8C13      		cpse r24,r28
 814 0284 00C0      		rjmp .L90
 562:catboard.c    **** 			press_time2 = 0;
 815               		.loc 2 562 0
 816 0286 1092 0000 		sts press_time2+1,__zero_reg__
 817 028a 1092 0000 		sts press_time2,__zero_reg__
 563:catboard.c    **** 			release_time = 1;
 818               		.loc 2 563 0
 819 028e 81E0      		ldi r24,lo8(1)
 820 0290 90E0      		ldi r25,0
 821 0292 9093 0000 		sts release_time+1,r25
 822 0296 8093 0000 		sts release_time,r24
 823 029a 00C0      		rjmp .L139
 824               	.L90:
 566:catboard.c    **** 			press_time = 0;
 825               		.loc 2 566 0
 826 029c 1092 0000 		sts press_time+1,__zero_reg__
 827 02a0 1092 0000 		sts press_time,__zero_reg__
 567:catboard.c    **** 			press_time2 = 0;
 828               		.loc 2 567 0
 829 02a4 1092 0000 		sts press_time2+1,__zero_reg__
 830 02a8 1092 0000 		sts press_time2,__zero_reg__
 568:catboard.c    **** 			release_time = 0;
 831               		.loc 2 568 0
 832 02ac 1092 0000 		sts release_time+1,__zero_reg__
 833 02b0 1092 0000 		sts release_time,__zero_reg__
 834               	.L139:
 569:catboard.c    **** 			repeat_time = 0;
 835               		.loc 2 569 0
 836 02b4 1092 0000 		sts repeat_time+1,__zero_reg__
 837 02b8 1092 0000 		sts repeat_time,__zero_reg__
 838 02bc 00C0      		rjmp .L52
 839               	.LVL54:
 840               	.L134:
 525:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 841               		.loc 2 525 0
 842 02be 8C36      		cpi r24,lo8(108)
 843 02c0 01F0      		breq .+2
 844 02c2 00C0      		rjmp .L79
 845 02c4 00C0      		rjmp .L76
 846               	.LVL55:
 847               	.L52:
 848               	/* epilogue start */
 572:catboard.c    **** }
 849               		.loc 2 572 0
 850 02c6 DF91      		pop r29
 851               	.LVL56:
 852 02c8 CF91      		pop r28
 853               	.LVL57:
 854 02ca 0895      		ret
 855               	.LFE15:
 857               		.section	.text.key_press,"ax",@progbits
 858               	.global	key_press
 860               	key_press:
 861               	.LFB14:
 292:catboard.c    **** void key_press(uint8_t key_id) {
 862               		.loc 2 292 0
 863               	.LVL58:
 864 0000 CF93      		push r28
 865               	.LCFI6:
 866               	/* prologue: function */
 867               	/* frame size = 0 */
 868               	/* stack size = 1 */
 869               	.L__stack_usage = 1
 870 0002 C82F      		mov r28,r24
 294:catboard.c    **** 	uint8_t mods_pressed = (mod_keys & (KEY_CTRL|KEY_RIGHT_CTRL|KEY_ALT|KEY_RIGHT_ALT|KEY_GUI|KEY_RIGH
 871               		.loc 2 294 0
 872 0004 6091 0000 		lds r22,mod_keys
 873 0008 462F      		mov r20,r22
 874 000a 4D7D      		andi r20,lo8(-35)
 875               	.LVL59:
 295:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 876               		.loc 2 295 0
 877 000c 282F      		mov r18,r24
 878 000e 30E0      		ldi r19,0
 879 0010 8091 0000 		lds r24,pressed+39
 880               	.LVL60:
 881 0014 8111      		cpse r24,__zero_reg__
 882 0016 00C0      		rjmp .L193
 295:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 883               		.loc 2 295 0 is_stmt 0 discriminator 1
 884 0018 4423      		tst r20
 885 001a 01F0      		breq .L194
 295:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 886               		.loc 2 295 0
 887 001c 82E0      		ldi r24,lo8(2)
 888 001e 00C0      		rjmp .L142
 889               	.L193:
 890 0020 81E0      		ldi r24,lo8(1)
 891 0022 00C0      		rjmp .L142
 892               	.L194:
 893 0024 8FEF      		ldi r24,lo8(-1)
 894               	.L142:
 295:catboard.c    **** 	pressed[key_id] = (pressed[FN_KEY_ID] ? KEY_PRESSED_FN : (mods_pressed ? KEY_PRESSED_MODS : -1));
 895               		.loc 2 295 0 discriminator 6
 896 0026 F901      		movw r30,r18
 897 0028 E050      		subi r30,lo8(-(pressed))
 898 002a F040      		sbci r31,hi8(-(pressed))
 899 002c 8083      		st Z,r24
 297:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 900               		.loc 2 297 0 is_stmt 1 discriminator 6
 901 002e 8130      		cpi r24,lo8(1)
 902 0030 01F4      		brne .L143
 297:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 903               		.loc 2 297 0 is_stmt 0 discriminator 1
 904 0032 F901      		movw r30,r18
 905 0034 E050      		subi r30,lo8(-(layer_fn))
 906 0036 F040      		sbci r31,hi8(-(layer_fn))
 907 0038 00C0      		rjmp .L241
 908               	.L143:
 297:catboard.c    **** 	uint8_t key_code = ((pressed[key_id]==KEY_PRESSED_FN) ? layer_fn[key_id] : layout[key_id]);
 909               		.loc 2 297 0 discriminator 2
 910 003a E091 0000 		lds r30,layout
 911 003e F091 0000 		lds r31,layout+1
 912 0042 EC0F      		add r30,r28
 913 0044 F11D      		adc r31,__zero_reg__
 914               	.L241:
 915 0046 7081      		ld r23,Z
 916               	.LVL61:
 298:catboard.c    **** 	if (key_code==NULL) {
 917               		.loc 2 298 0 is_stmt 1 discriminator 2
 918 0048 7111      		cpse r23,__zero_reg__
 919 004a 00C0      		rjmp .L145
 299:catboard.c    **** 		key_code = layout[key_id];
 920               		.loc 2 299 0
 921 004c 8C2F      		mov r24,r28
 922 004e 90E0      		ldi r25,0
 923 0050 E091 0000 		lds r30,layout
 924 0054 F091 0000 		lds r31,layout+1
 925 0058 E80F      		add r30,r24
 926 005a F91F      		adc r31,r25
 927 005c 7081      		ld r23,Z
 928               	.LVL62:
 300:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 929               		.loc 2 300 0
 930 005e 4423      		tst r20
 931 0060 01F0      		breq .L195
 932 0062 42E0      		ldi r20,lo8(2)
 933               	.LVL63:
 934 0064 00C0      		rjmp .L146
 935               	.LVL64:
 936               	.L195:
 937 0066 4FEF      		ldi r20,lo8(-1)
 938               	.LVL65:
 939               	.L146:
 300:catboard.c    **** 		pressed[key_id] = (mods_pressed ? KEY_PRESSED_MODS : -1);
 940               		.loc 2 300 0 is_stmt 0 discriminator 3
 941 0068 F901      		movw r30,r18
 942 006a E050      		subi r30,lo8(-(pressed))
 943 006c F040      		sbci r31,hi8(-(pressed))
 944 006e 4083      		st Z,r20
 301:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 945               		.loc 2 301 0 is_stmt 1 discriminator 3
 946 0070 7111      		cpse r23,__zero_reg__
 947 0072 00C0      		rjmp .L145
 301:catboard.c    **** 		if (key_code==NULL && prev_layer && ! mod_keys) {
 948               		.loc 2 301 0 is_stmt 0 discriminator 1
 949 0074 4091 0000 		lds r20,prev_layer
 950 0078 5091 0000 		lds r21,prev_layer+1
 951 007c 4115      		cp r20,__zero_reg__
 952 007e 5105      		cpc r21,__zero_reg__
 953 0080 01F0      		breq .L145
 954 0082 6111      		cpse r22,__zero_reg__
 955 0084 00C0      		rjmp .L145
 302:catboard.c    **** 			key_code = prev_layer[key_id];
 956               		.loc 2 302 0 is_stmt 1
 957 0086 DA01      		movw r26,r20
 958 0088 A80F      		add r26,r24
 959 008a B91F      		adc r27,r25
 960 008c 7C91      		ld r23,X
 961               	.LVL66:
 303:catboard.c    **** 			pressed[key_id] = KEY_PRESSED_PREV;
 962               		.loc 2 303 0
 963 008e 86E0      		ldi r24,lo8(6)
 964 0090 8083      		st Z,r24
 965               	.L145:
 307:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 966               		.loc 2 307 0
 967 0092 8091 0000 		lds r24,locked
 968 0096 8823      		tst r24
 969 0098 01F0      		breq .L147
 307:catboard.c    **** 	if (locked && key_code!=KEY_LOCK) return;
 970               		.loc 2 307 0 is_stmt 0 discriminator 1
 971 009a 7A37      		cpi r23,lo8(122)
 972 009c 01F0      		breq .+2
 973 009e 00C0      		rjmp .L141
 974 00a0 00C0      		rjmp .L238
 975               	.L147:
 309:catboard.c    **** 	if (key_code>=KEY_CB_START) { // Catboard keys
 976               		.loc 2 309 0 is_stmt 1
 977 00a2 7D36      		cpi r23,lo8(109)
 978 00a4 00F4      		brsh .+2
 979 00a6 00C0      		rjmp .L150
 310:catboard.c    **** 		if (key_code==KEY_ALT_TAB) { // AltTab press
 980               		.loc 2 310 0
 981 00a8 7D37      		cpi r23,lo8(125)
 982 00aa 01F4      		brne .L151
 311:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN) { // Fn + AltTab
 983               		.loc 2 311 0
 984 00ac F901      		movw r30,r18
 985 00ae E050      		subi r30,lo8(-(pressed))
 986 00b0 F040      		sbci r31,hi8(-(pressed))
 987 00b2 8081      		ld r24,Z
 988 00b4 8130      		cpi r24,lo8(1)
 989 00b6 01F4      		brne .L152
 312:catboard.c    **** 				usb_keyboard_press(KEY_TAB, KEY_ALT);
 990               		.loc 2 312 0
 991 00b8 64E0      		ldi r22,lo8(4)
 992               	.LVL67:
 993 00ba 8BE2      		ldi r24,lo8(43)
 994 00bc 00C0      		rjmp .L243
 995               	.LVL68:
 996               	.L152:
 314:catboard.c    **** 				if (! mod_keys) {
 997               		.loc 2 314 0
 998 00be 6111      		cpse r22,__zero_reg__
 999 00c0 00C0      		rjmp .L154
 315:catboard.c    **** 					mod_keys |= (KEY_ALT);
 1000               		.loc 2 315 0
 1001 00c2 84E0      		ldi r24,lo8(4)
 1002 00c4 8093 0000 		sts mod_keys,r24
 1003 00c8 00C0      		rjmp .L155
 1004               	.L154:
 317:catboard.c    **** 					pressed[key_id] = KEY_PRESSED_ALT;
 1005               		.loc 2 317 0
 1006 00ca 83E0      		ldi r24,lo8(3)
 1007 00cc 8083      		st Z,r24
 1008               	.L155:
 319:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 1009               		.loc 2 319 0
 1010 00ce 8091 0000 		lds r24,mod_keys
 1011 00d2 8093 0000 		sts keyboard_modifier_keys,r24
 320:catboard.c    **** 				keyboard_keys[0] = KEY_TAB;
 1012               		.loc 2 320 0
 1013 00d6 8BE2      		ldi r24,lo8(43)
 1014 00d8 8093 0000 		sts keyboard_keys,r24
 321:catboard.c    **** 				usb_keyboard_send();
 1015               		.loc 2 321 0
 1016 00dc 0E94 0000 		call usb_keyboard_send
 1017               	.LVL69:
 1018               	.LBB42:
 1019               	.LBB43:
 1020               		.loc 3 164 0
 1021 00e0 2FEF      		ldi r18,lo8(159999)
 1022 00e2 40E7      		ldi r20,hi8(159999)
 1023 00e4 82E0      		ldi r24,hlo8(159999)
 1024 00e6 2150      		1: subi r18,1
 1025 00e8 4040      		sbci r20,0
 1026 00ea 8040      		sbci r24,0
 1027 00ec 01F4      		brne 1b
 1028 00ee 00C0      		rjmp .
 1029 00f0 0000      		nop
 1030 00f2 00C0      		rjmp .L244
 1031               	.LVL70:
 1032               	.L151:
 1033               	.LBE43:
 1034               	.LBE42:
 325:catboard.c    **** 		} else if (key_code==KEY_FN_LOCK) { // FnLock
 1035               		.loc 2 325 0
 1036 00f4 7E37      		cpi r23,lo8(126)
 1037 00f6 01F4      		brne .L156
 326:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 1038               		.loc 2 326 0
 1039 00f8 F901      		movw r30,r18
 1040 00fa E050      		subi r30,lo8(-(pressed))
 1041 00fc F040      		sbci r31,hi8(-(pressed))
 1042 00fe 8081      		ld r24,Z
 1043 0100 8130      		cpi r24,lo8(1)
 1044 0102 01F0      		breq .+2
 1045 0104 00C0      		rjmp .L153
 326:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 1046               		.loc 2 326 0 is_stmt 0 discriminator 1
 1047 0106 6272      		andi r22,lo8(34)
 1048               	.LVL71:
 1049 0108 01F4      		brne .+2
 1050 010a 00C0      		rjmp .L153
 327:catboard.c    **** 				if (prev_layer) { // FnLock Off
 1051               		.loc 2 327 0 is_stmt 1
 1052 010c 2091 0000 		lds r18,prev_layer
 1053 0110 3091 0000 		lds r19,prev_layer+1
 1054               	.LVL72:
 1055 0114 2115      		cp r18,__zero_reg__
 1056 0116 3105      		cpc r19,__zero_reg__
 1057 0118 01F0      		breq .L159
 328:catboard.c    **** 					layout = prev_layer;
 1058               		.loc 2 328 0
 1059 011a 3093 0000 		sts layout+1,r19
 1060 011e 2093 0000 		sts layout,r18
 329:catboard.c    **** 					prev_layer = 0;
 1061               		.loc 2 329 0
 1062 0122 1092 0000 		sts prev_layer+1,__zero_reg__
 1063 0126 1092 0000 		sts prev_layer,__zero_reg__
 1064 012a 00C0      		rjmp .L153
 1065               	.L159:
 331:catboard.c    **** 					prev_layer = layout;
 1066               		.loc 2 331 0
 1067 012c 8091 0000 		lds r24,layout
 1068 0130 9091 0000 		lds r25,layout+1
 1069 0134 9093 0000 		sts prev_layer+1,r25
 1070 0138 8093 0000 		sts prev_layer,r24
 332:catboard.c    **** 					layout = layer_fnlock;
 1071               		.loc 2 332 0
 1072 013c 80E0      		ldi r24,lo8(layer_fnlock)
 1073 013e 90E0      		ldi r25,hi8(layer_fnlock)
 1074 0140 9093 0000 		sts layout+1,r25
 1075 0144 8093 0000 		sts layout,r24
 1076 0148 00C0      		rjmp .L153
 1077               	.LVL73:
 1078               	.L156:
 335:catboard.c    **** 		} else if (key_code==KEY_OS_MODE) { // Mac mode
 1079               		.loc 2 335 0
 1080 014a 7C37      		cpi r23,lo8(124)
 1081 014c 01F4      		brne .L160
 336:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 1082               		.loc 2 336 0
 1083 014e F901      		movw r30,r18
 1084 0150 E050      		subi r30,lo8(-(pressed))
 1085 0152 F040      		sbci r31,hi8(-(pressed))
 1086 0154 8081      		ld r24,Z
 1087 0156 8130      		cpi r24,lo8(1)
 1088 0158 01F4      		brne .L161
 336:catboard.c    **** 			if (pressed[key_id]==KEY_PRESSED_FN && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) {
 1089               		.loc 2 336 0 is_stmt 0 discriminator 1
 1090 015a 862F      		mov r24,r22
 1091 015c 8272      		andi r24,lo8(34)
 1092 015e 01F0      		breq .L161
 337:catboard.c    **** 				os_mode++;
 1093               		.loc 2 337 0 is_stmt 1
 1094 0160 8091 0000 		lds r24,os_mode
 1095 0164 8F5F      		subi r24,lo8(-(1))
 1096 0166 8093 0000 		sts os_mode,r24
 338:catboard.c    **** 				if (os_mode>2) os_mode = 0;
 1097               		.loc 2 338 0
 1098 016a 8330      		cpi r24,lo8(3)
 1099 016c 00F4      		brsh .+2
 1100 016e 00C0      		rjmp .L153
 338:catboard.c    **** 				if (os_mode>2) os_mode = 0;
 1101               		.loc 2 338 0 is_stmt 0 discriminator 1
 1102 0170 1092 0000 		sts os_mode,__zero_reg__
 1103 0174 00C0      		rjmp .L153
 1104               	.L161:
 340:catboard.c    **** 				usb_keyboard_press(KEY_SPACE, mod_keys);
 1105               		.loc 2 340 0 is_stmt 1
 1106 0176 8CE2      		ldi r24,lo8(44)
 1107               	.LVL74:
 1108               	.L243:
 1109 0178 0E94 0000 		call usb_keyboard_press
 1110               	.LVL75:
 1111 017c 00C0      		rjmp .L153
 1112               	.LVL76:
 1113               	.L160:
 342:catboard.c    **** 		} else if (key_code==KEY_LAYER1) { // KEY_LAYOUT1
 1114               		.loc 2 342 0
 1115 017e 7D36      		cpi r23,lo8(109)
 1116 0180 01F4      		brne .L162
 343:catboard.c    **** 			if (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT)) {
 1117               		.loc 2 343 0
 1118 0182 862F      		mov r24,r22
 1119 0184 8272      		andi r24,lo8(34)
 1120 0186 01F0      		breq .L163
 344:catboard.c    **** 				pressed[key_id] = KEY_PRESSED_CTRL;
 1121               		.loc 2 344 0
 1122 0188 F901      		movw r30,r18
 1123 018a E050      		subi r30,lo8(-(pressed))
 1124 018c F040      		sbci r31,hi8(-(pressed))
 1125 018e 85E0      		ldi r24,lo8(5)
 1126 0190 8083      		st Z,r24
 345:catboard.c    **** 				mod_keys |= KEY_CTRL;
 1127               		.loc 2 345 0
 1128 0192 6160      		ori r22,lo8(1)
 1129               	.LVL77:
 1130 0194 00C0      		rjmp .L249
 1131               	.LVL78:
 1132               	.L163:
 348:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 1133               		.loc 2 348 0
 1134 0196 6623      		tst r22
 1135 0198 01F0      		breq .L250
 348:catboard.c    **** 				if (mod_keys) pressed[key_id] = KEY_PRESSED_SHIFT;
 1136               		.loc 2 348 0 is_stmt 0 discriminator 1
 1137 019a F901      		movw r30,r18
 1138 019c E050      		subi r30,lo8(-(pressed))
 1139 019e F040      		sbci r31,hi8(-(pressed))
 1140 01a0 84E0      		ldi r24,lo8(4)
 1141 01a2 8083      		st Z,r24
 1142 01a4 00C0      		rjmp .L250
 1143               	.L162:
 352:catboard.c    **** 		} else if (key_code==KEY_LAYER2) { // KEY_LAYOUT2
 1144               		.loc 2 352 0 is_stmt 1
 1145 01a6 7E36      		cpi r23,lo8(110)
 1146 01a8 01F4      		brne .L165
 353:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 1147               		.loc 2 353 0
 1148 01aa 6062      		ori r22,lo8(32)
 1149               	.LVL79:
 1150 01ac 00C0      		rjmp .L249
 1151               	.LVL80:
 1152               	.L165:
 355:catboard.c    **** 		} else if (key_code==KEY_TURBO_REPEAT) { // TURBO_REPEAT ON/OFF
 1153               		.loc 2 355 0
 1154 01ae 7B37      		cpi r23,lo8(123)
 1155 01b0 01F4      		brne .L166
 356:catboard.c    **** 			turbo_repeat = ! turbo_repeat;
 1156               		.loc 2 356 0
 1157 01b2 81E0      		ldi r24,lo8(1)
 1158 01b4 9091 0000 		lds r25,turbo_repeat
 1159 01b8 9111      		cpse r25,__zero_reg__
 1160 01ba 80E0      		ldi r24,0
 1161               	.L167:
 1162 01bc 8093 0000 		sts turbo_repeat,r24
 1163 01c0 00C0      		rjmp .L153
 1164               	.L166:
 357:catboard.c    **** 		} else if (key_code==KEY_MY_SHIFT) { // My Shift
 1165               		.loc 2 357 0
 1166 01c2 7737      		cpi r23,lo8(119)
 1167 01c4 01F4      		brne .L168
 1168               	.L250:
 358:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 1169               		.loc 2 358 0
 1170 01c6 6260      		ori r22,lo8(2)
 1171               	.LVL81:
 1172               	.L249:
 1173 01c8 6093 0000 		sts mod_keys,r22
 1174 01cc 00C0      		rjmp .L244
 1175               	.LVL82:
 1176               	.L168:
 360:catboard.c    **** 		} else if (key_code==KEY_MACRO) { // TODO: My Macro
 1177               		.loc 2 360 0
 1178 01ce 7F36      		cpi r23,lo8(111)
 1179 01d0 01F4      		brne .+2
 1180 01d2 00C0      		rjmp .L153
 373:catboard.c    **** 		} else if (key_code==KEY_LOCK) { // Lock/Unlock keyboard
 1181               		.loc 2 373 0
 1182 01d4 7A37      		cpi r23,lo8(122)
 1183 01d6 01F4      		brne .L239
 1184 01d8 00C0      		rjmp .L169
 1185               	.L238:
 375:catboard.c    **** 				locked = 0;
 1186               		.loc 2 375 0
 1187 01da 1092 0000 		sts locked,__zero_reg__
 376:catboard.c    **** 				if (led) {
 1188               		.loc 2 376 0
 1189 01de 8091 0000 		lds r24,led
 1190 01e2 8823      		tst r24
 1191 01e4 01F4      		brne .+2
 1192 01e6 00C0      		rjmp .L153
 377:catboard.c    **** 					if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 1193               		.loc 2 377 0
 1194 01e8 2091 0000 		lds r18,layout
 1195 01ec 3091 0000 		lds r19,layout+1
 1196               	.LVL83:
 1197 01f0 90E0      		ldi r25,hi8(layer1)
 1198 01f2 2030      		cpi r18,lo8(layer1)
 1199 01f4 3907      		cpc r19,r25
 1200 01f6 01F0      		breq .L175
 1201 01f8 00C0      		rjmp .L252
 1202               	.LVL84:
 1203               	.L169:
 381:catboard.c    **** 				locked = 1;
 1204               		.loc 2 381 0
 1205 01fa 81E0      		ldi r24,lo8(1)
 1206 01fc 8093 0000 		sts locked,r24
 382:catboard.c    **** 				LED_OFF;
 1207               		.loc 2 382 0
 1208 0200 5E9A      		sbi 0xb,6
 383:catboard.c    **** 				LED_RED_OFF;
 1209               		.loc 2 383 0
 1210 0202 469A      		sbi 0x8,6
 384:catboard.c    **** 				LED_BLUE_OFF;
 1211               		.loc 2 384 0
 1212 0204 5998      		cbi 0xb,1
 385:catboard.c    **** 				usb_keyboard_press(KEY_L, KEY_GUI); // Block computer
 1213               		.loc 2 385 0
 1214 0206 68E0      		ldi r22,lo8(8)
 1215               	.LVL85:
 1216 0208 8FE0      		ldi r24,lo8(15)
 1217 020a 00C0      		rjmp .L243
 1218               	.LVL86:
 1219               	.L239:
 387:catboard.c    **** 		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
 1220               		.loc 2 387 0
 1221 020c 7937      		cpi r23,lo8(121)
 1222 020e 01F0      		breq .+2
 1223 0210 00C0      		rjmp .L153
 387:catboard.c    **** 		} else if (key_code==KEY_LED && (mod_keys & (KEY_SHIFT|KEY_RIGHT_SHIFT))) { // LED On/Off
 1224               		.loc 2 387 0 is_stmt 0 discriminator 1
 1225 0212 6272      		andi r22,lo8(34)
 1226               	.LVL87:
 1227 0214 01F4      		brne .+2
 1228 0216 00C0      		rjmp .L153
 388:catboard.c    **** 			if (led) {
 1229               		.loc 2 388 0 is_stmt 1
 1230 0218 8091 0000 		lds r24,led
 1231 021c 8823      		tst r24
 1232 021e 01F0      		breq .L174
 389:catboard.c    **** 				led = 0;
 1233               		.loc 2 389 0
 1234 0220 1092 0000 		sts led,__zero_reg__
 390:catboard.c    **** 				LED_OFF;
 1235               		.loc 2 390 0
 1236 0224 5E9A      		sbi 0xb,6
 391:catboard.c    **** 				LED_RED_OFF;
 1237               		.loc 2 391 0
 1238 0226 469A      		sbi 0x8,6
 392:catboard.c    **** 				LED_BLUE_OFF;
 1239               		.loc 2 392 0
 1240 0228 5998      		cbi 0xb,1
 1241 022a 00C0      		rjmp .L153
 1242               	.L174:
 394:catboard.c    **** 				led = 1;
 1243               		.loc 2 394 0
 1244 022c 81E0      		ldi r24,lo8(1)
 1245 022e 8093 0000 		sts led,r24
 395:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 1246               		.loc 2 395 0
 1247 0232 2091 0000 		lds r18,layout
 1248 0236 3091 0000 		lds r19,layout+1
 1249               	.LVL88:
 1250 023a 40E0      		ldi r20,hi8(layer1)
 1251 023c 2030      		cpi r18,lo8(layer1)
 1252 023e 3407      		cpc r19,r20
 1253 0240 01F0      		breq .L175
 1254               	.L252:
 395:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 1255               		.loc 2 395 0 is_stmt 0 discriminator 2
 1256 0242 8091 0000 		lds r24,prev_layer
 1257 0246 9091 0000 		lds r25,prev_layer+1
 1258 024a 8050      		subi r24,lo8(layer1)
 1259 024c 9040      		sbci r25,hi8(layer1)
 1260 024e 01F4      		brne .L176
 1261               	.L175:
 395:catboard.c    **** 				if (layout==layer1 || prev_layer==layer1) LED_BLUE_ON;
 1262               		.loc 2 395 0 discriminator 1
 1263 0250 599A      		sbi 0xb,1
 1264               	.L176:
 396:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 1265               		.loc 2 396 0 is_stmt 1
 1266 0252 2050      		subi r18,lo8(layer2)
 1267 0254 3040      		sbci r19,hi8(layer2)
 1268 0256 01F0      		breq .L177
 396:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 1269               		.loc 2 396 0 is_stmt 0 discriminator 2
 1270 0258 8091 0000 		lds r24,prev_layer
 1271 025c 9091 0000 		lds r25,prev_layer+1
 1272 0260 8050      		subi r24,lo8(layer2)
 1273 0262 9040      		sbci r25,hi8(layer2)
 1274 0264 01F0      		breq .+2
 1275 0266 00C0      		rjmp .L153
 1276               	.L177:
 396:catboard.c    **** 				if (layout==layer2 || prev_layer==layer2) LED_RED_ON;
 1277               		.loc 2 396 0 discriminator 1
 1278 0268 4698      		cbi 0x8,6
 1279 026a 00C0      		rjmp .L153
 1280               	.LVL89:
 1281               	.L150:
 399:catboard.c    **** 	} else if (key_code>=KEY_LCTRL) { // Mod keys
 1282               		.loc 2 399 0 is_stmt 1
 1283 026c 7536      		cpi r23,lo8(101)
 1284 026e 00F0      		brlo .L178
 400:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 1285               		.loc 2 400 0
 1286 0270 8091 0000 		lds r24,os_mode
 1287 0274 8230      		cpi r24,lo8(2)
 1288 0276 01F4      		brne .L179
 400:catboard.c    **** 		if (os_mode==2 && key_code==KEY_LCTRL) {
 1289               		.loc 2 400 0 is_stmt 0 discriminator 1
 1290 0278 7536      		cpi r23,lo8(101)
 1291 027a 01F4      		brne .L180
 1292 027c 00C0      		rjmp .L248
 1293               	.L180:
 402:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 1294               		.loc 2 402 0 is_stmt 1 discriminator 1
 1295 027e 7936      		cpi r23,lo8(105)
 1296 0280 01F0      		breq .+2
 1297 0282 00C0      		rjmp .L240
 1298 0284 00C0      		rjmp .L182
 1299               	.L179:
 402:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 1300               		.loc 2 402 0 is_stmt 0 discriminator 2
 1301 0286 7C36      		cpi r23,lo8(108)
 1302 0288 01F4      		brne .L184
 1303               	.L182:
 403:catboard.c    **** 			mod_keys |= KEY_RIGHT_GUI;
 1304               		.loc 2 403 0 is_stmt 1
 1305 028a 6068      		ori r22,lo8(-128)
 1306               	.LVL90:
 1307 028c 00C0      		rjmp .L242
 1308               	.LVL91:
 1309               	.L184:
 404:catboard.c    **** 		} else if (key_code==KEY_LCTRL) {
 1310               		.loc 2 404 0
 1311 028e 7536      		cpi r23,lo8(101)
 1312 0290 01F4      		brne .L185
 405:catboard.c    **** 			mod_keys |= KEY_CTRL;
 1313               		.loc 2 405 0
 1314 0292 6160      		ori r22,lo8(1)
 1315               	.LVL92:
 1316 0294 00C0      		rjmp .L242
 1317               	.LVL93:
 1318               	.L185:
 406:catboard.c    **** 		} else if (key_code==KEY_LSHIFT) {
 1319               		.loc 2 406 0
 1320 0296 7636      		cpi r23,lo8(102)
 1321 0298 01F4      		brne .L186
 407:catboard.c    **** 			mod_keys |= KEY_SHIFT;
 1322               		.loc 2 407 0
 1323 029a 6260      		ori r22,lo8(2)
 1324               	.LVL94:
 1325 029c 00C0      		rjmp .L242
 1326               	.LVL95:
 1327               	.L186:
 408:catboard.c    **** 		} else if (key_code==KEY_LALT) {
 1328               		.loc 2 408 0
 1329 029e 7736      		cpi r23,lo8(103)
 1330 02a0 01F4      		brne .L187
 409:catboard.c    **** 			mod_keys |= KEY_ALT;
 1331               		.loc 2 409 0
 1332 02a2 6460      		ori r22,lo8(4)
 1333               	.LVL96:
 1334 02a4 00C0      		rjmp .L242
 1335               	.LVL97:
 1336               	.L187:
 410:catboard.c    **** 		} else if (key_code==KEY_LGUI) {
 1337               		.loc 2 410 0
 1338 02a6 7836      		cpi r23,lo8(104)
 1339 02a8 01F4      		brne .L188
 1340               	.L248:
 411:catboard.c    **** 			mod_keys |= KEY_GUI;
 1341               		.loc 2 411 0
 1342 02aa 6860      		ori r22,lo8(8)
 1343               	.LVL98:
 1344 02ac 00C0      		rjmp .L242
 1345               	.LVL99:
 1346               	.L188:
 412:catboard.c    **** 		} else if (key_code==KEY_RCTRL) {
 1347               		.loc 2 412 0
 1348 02ae 7936      		cpi r23,lo8(105)
 1349 02b0 01F4      		brne .L189
 413:catboard.c    **** 			mod_keys |= KEY_RIGHT_CTRL;
 1350               		.loc 2 413 0
 1351 02b2 6061      		ori r22,lo8(16)
 1352               	.LVL100:
 1353 02b4 00C0      		rjmp .L242
 1354               	.LVL101:
 1355               	.L189:
 414:catboard.c    **** 		} else if (key_code==KEY_RSHIFT) {
 1356               		.loc 2 414 0
 1357 02b6 7A36      		cpi r23,lo8(106)
 1358 02b8 01F4      		brne .L190
 415:catboard.c    **** 			mod_keys |= KEY_RIGHT_SHIFT;
 1359               		.loc 2 415 0
 1360 02ba 6062      		ori r22,lo8(32)
 1361               	.LVL102:
 1362 02bc 00C0      		rjmp .L242
 1363               	.LVL103:
 1364               	.L190:
 417:catboard.c    **** 			mod_keys |= KEY_RIGHT_ALT;
 1365               		.loc 2 417 0
 1366 02be 6064      		ori r22,lo8(64)
 1367               	.LVL104:
 1368               	.L242:
 1369 02c0 6093 0000 		sts mod_keys,r22
 421:catboard.c    **** 		send();
 1370               		.loc 2 421 0
 1371 02c4 0E94 0000 		call send
 1372               	.LVL105:
 422:catboard.c    **** 		press_time = 0;
 1373               		.loc 2 422 0
 1374 02c8 1092 0000 		sts press_time+1,__zero_reg__
 1375 02cc 1092 0000 		sts press_time,__zero_reg__
 424:catboard.c    **** 		release_time = 0;
 1376               		.loc 2 424 0
 1377 02d0 1092 0000 		sts release_time+1,__zero_reg__
 1378 02d4 1092 0000 		sts release_time,__zero_reg__
 426:catboard.c    **** 		last_key = 0;
 1379               		.loc 2 426 0
 1380 02d8 1092 0000 		sts last_key,__zero_reg__
 1381 02dc 00C0      		rjmp .L153
 1382               	.LVL106:
 1383               	.L178:
 433:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 1384               		.loc 2 433 0
 1385 02de 8091 0000 		lds r24,last_key
 1386 02e2 8C13      		cpse r24,r28
 1387 02e4 00C0      		rjmp .L191
 433:catboard.c    **** 		if (! (last_key==key_id && release_time<10)) { // debounce
 1388               		.loc 2 433 0 is_stmt 0 discriminator 1
 1389 02e6 8091 0000 		lds r24,release_time
 1390 02ea 9091 0000 		lds r25,release_time+1
 1391 02ee 0A97      		sbiw r24,10
 1392 02f0 00F0      		brlo .L153
 1393               	.L191:
 1394               	.LVL107:
 434:catboard.c    **** 			for (i=5; i>0; i--) queue[i] = queue[i-1];
 1395               		.loc 2 434 0 is_stmt 1 discriminator 1
 1396 02f2 8091 0000 		lds r24,queue+4
 1397 02f6 8093 0000 		sts queue+5,r24
 1398               	.LVL108:
 1399 02fa 8091 0000 		lds r24,queue+3
 1400 02fe 8093 0000 		sts queue+4,r24
 1401               	.LVL109:
 1402 0302 8091 0000 		lds r24,queue+2
 1403 0306 8093 0000 		sts queue+3,r24
 1404               	.LVL110:
 1405 030a 8091 0000 		lds r24,queue+1
 1406 030e 8093 0000 		sts queue+2,r24
 1407               	.LVL111:
 1408 0312 8091 0000 		lds r24,queue
 1409 0316 8093 0000 		sts queue+1,r24
 1410               	.LVL112:
 435:catboard.c    **** 			queue[0] = key_id;
 1411               		.loc 2 435 0 discriminator 1
 1412 031a C093 0000 		sts queue,r28
 1413               	.LVL113:
 1414               	.L244:
 436:catboard.c    **** 			send();
 1415               		.loc 2 436 0 discriminator 1
 1416 031e 0E94 0000 		call send
 1417               	.LVL114:
 1418               	.L153:
 440:catboard.c    **** 	if (last_key==key_id) { // calc press2
 1419               		.loc 2 440 0
 1420 0322 8091 0000 		lds r24,last_key
 1421 0326 8C13      		cpse r24,r28
 1422 0328 00C0      		rjmp .L192
 441:catboard.c    **** 		press_time2 = 1;
 1423               		.loc 2 441 0
 1424 032a 81E0      		ldi r24,lo8(1)
 1425 032c 90E0      		ldi r25,0
 1426 032e 9093 0000 		sts press_time2+1,r25
 1427 0332 8093 0000 		sts press_time2,r24
 1428 0336 00C0      		rjmp .L245
 1429               	.L192:
 444:catboard.c    **** 		last_key = key_id;
 1430               		.loc 2 444 0
 1431 0338 C093 0000 		sts last_key,r28
 445:catboard.c    **** 		press_time = 1;
 1432               		.loc 2 445 0
 1433 033c 81E0      		ldi r24,lo8(1)
 1434 033e 90E0      		ldi r25,0
 1435 0340 9093 0000 		sts press_time+1,r25
 1436 0344 8093 0000 		sts press_time,r24
 446:catboard.c    **** 		press_time2 = 0;
 1437               		.loc 2 446 0
 1438 0348 1092 0000 		sts press_time2+1,__zero_reg__
 1439 034c 1092 0000 		sts press_time2,__zero_reg__
 447:catboard.c    **** 		release_time = 0;
 1440               		.loc 2 447 0
 1441 0350 1092 0000 		sts release_time+1,__zero_reg__
 1442 0354 1092 0000 		sts release_time,__zero_reg__
 1443               	.L245:
 448:catboard.c    **** 		repeat_time = 0;
 1444               		.loc 2 448 0
 1445 0358 1092 0000 		sts repeat_time+1,__zero_reg__
 1446 035c 1092 0000 		sts repeat_time,__zero_reg__
 1447 0360 00C0      		rjmp .L141
 1448               	.LVL115:
 1449               	.L240:
 402:catboard.c    **** 		} else if ((os_mode==2 && key_code==KEY_RCTRL) || key_code==KEY_RGUI) {
 1450               		.loc 2 402 0
 1451 0362 7C36      		cpi r23,lo8(108)
 1452 0364 01F0      		breq .+2
 1453 0366 00C0      		rjmp .L185
 1454 0368 00C0      		rjmp .L182
 1455               	.LVL116:
 1456               	.L141:
 1457               	/* epilogue start */
 450:catboard.c    **** }
 1458               		.loc 2 450 0
 1459 036a CF91      		pop r28
 1460               	.LVL117:
 1461 036c 0895      		ret
 1462               	.LFE14:
 1464               		.section	.text.repeat_tick,"ax",@progbits
 1465               	.global	repeat_tick
 1467               	repeat_tick:
 1468               	.LFB13:
 252:catboard.c    **** void repeat_tick(void) {
 1469               		.loc 2 252 0
 1470               	/* prologue: function */
 1471               	/* frame size = 0 */
 1472               	/* stack size = 0 */
 1473               	.L__stack_usage = 0
 253:catboard.c    **** 	if (repeat_time) { // repeat pause
 1474               		.loc 2 253 0
 1475 0000 8091 0000 		lds r24,repeat_time
 1476 0004 9091 0000 		lds r25,repeat_time+1
 1477 0008 0097      		sbiw r24,0
 1478 000a 01F0      		breq .L254
 254:catboard.c    **** 		if (repeat_time<(release_time>>2)) {
 1479               		.loc 2 254 0
 1480 000c 2091 0000 		lds r18,release_time
 1481 0010 3091 0000 		lds r19,release_time+1
 1482 0014 3695      		lsr r19
 1483 0016 2795      		ror r18
 1484 0018 3695      		lsr r19
 1485 001a 2795      		ror r18
 1486 001c 8217      		cp r24,r18
 1487 001e 9307      		cpc r25,r19
 1488 0020 00F4      		brsh .L255
 255:catboard.c    **** 			repeat_time++;
 1489               		.loc 2 255 0
 1490 0022 0196      		adiw r24,1
 1491 0024 00C0      		rjmp .L269
 1492               	.L255:
 257:catboard.c    **** 			repeat_time = 1;
 1493               		.loc 2 257 0
 1494 0026 81E0      		ldi r24,lo8(1)
 1495 0028 90E0      		ldi r25,0
 1496 002a 9093 0000 		sts repeat_time+1,r25
 1497 002e 8093 0000 		sts repeat_time,r24
 258:catboard.c    **** 			if (turbo_repeat) {
 1498               		.loc 2 258 0
 1499 0032 8091 0000 		lds r24,turbo_repeat
 1500 0036 8823      		tst r24
 1501 0038 01F4      		brne .+2
 1502 003a 00C0      		rjmp .L253
 259:catboard.c    **** 				keyboard_modifier_keys = mod_keys;
 1503               		.loc 2 259 0
 1504 003c 8091 0000 		lds r24,mod_keys
 1505 0040 8093 0000 		sts keyboard_modifier_keys,r24
 260:catboard.c    **** 				keyboard_keys[0] = get_code(last_key);
 1506               		.loc 2 260 0
 1507 0044 8091 0000 		lds r24,last_key
 1508 0048 0E94 0000 		call get_code
 1509               	.LVL118:
 1510 004c 8093 0000 		sts keyboard_keys,r24
 261:catboard.c    **** 				if (! usb_keyboard_send()) { // repeat release
 1511               		.loc 2 261 0
 1512 0050 0E94 0000 		call usb_keyboard_send
 1513               	.LVL119:
 1514 0054 8111      		cpse r24,__zero_reg__
 1515 0056 00C0      		rjmp .L253
 262:catboard.c    **** 					keyboard_keys[0] = 0;
 1516               		.loc 2 262 0
 1517 0058 1092 0000 		sts keyboard_keys,__zero_reg__
 263:catboard.c    **** 					usb_keyboard_send();
 1518               		.loc 2 263 0
 1519 005c 0C94 0000 		jmp usb_keyboard_send
 1520               	.LVL120:
 1521               	.L254:
 267:catboard.c    **** 	} else if (press_time2) { // press2 pause
 1522               		.loc 2 267 0
 1523 0060 2091 0000 		lds r18,press_time2
 1524 0064 3091 0000 		lds r19,press_time2+1
 1525 0068 8091 0000 		lds r24,press_time
 1526 006c 9091 0000 		lds r25,press_time+1
 1527 0070 2115      		cp r18,__zero_reg__
 1528 0072 3105      		cpc r19,__zero_reg__
 1529 0074 01F0      		breq .L259
 268:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 1530               		.loc 2 268 0
 1531 0076 4091 0000 		lds r20,pressed+39
 1532 007a 4423      		tst r20
 1533 007c 01F0      		breq .L265
 1534 007e 45E0      		ldi r20,lo8(5)
 1535 0080 50E0      		ldi r21,0
 1536 0082 00C0      		rjmp .L260
 1537               	.L265:
 1538 0084 4EE1      		ldi r20,lo8(30)
 1539 0086 50E0      		ldi r21,0
 1540               	.L260:
 268:catboard.c    **** 		if (press_time2<(press_time+(pressed[FN_KEY_ID] ? 5 : 30))) {
 1541               		.loc 2 268 0 is_stmt 0 discriminator 3
 1542 0088 840F      		add r24,r20
 1543 008a 951F      		adc r25,r21
 1544 008c 2817      		cp r18,r24
 1545 008e 3907      		cpc r19,r25
 1546 0090 00F4      		brsh .L261
 269:catboard.c    **** 			press_time2++;
 1547               		.loc 2 269 0 is_stmt 1
 1548 0092 2F5F      		subi r18,-1
 1549 0094 3F4F      		sbci r19,-1
 1550 0096 3093 0000 		sts press_time2+1,r19
 1551 009a 2093 0000 		sts press_time2,r18
 1552 009e 0895      		ret
 1553               	.L261:
 271:catboard.c    **** 			repeat_time = 1;
 1554               		.loc 2 271 0
 1555 00a0 81E0      		ldi r24,lo8(1)
 1556 00a2 90E0      		ldi r25,0
 1557               	.L269:
 1558 00a4 9093 0000 		sts repeat_time+1,r25
 1559 00a8 8093 0000 		sts repeat_time,r24
 1560 00ac 0895      		ret
 1561               	.L259:
 273:catboard.c    **** 	} else if (release_time) { // release pause
 1562               		.loc 2 273 0
 1563 00ae 2091 0000 		lds r18,release_time
 1564 00b2 3091 0000 		lds r19,release_time+1
 1565 00b6 2115      		cp r18,__zero_reg__
 1566 00b8 3105      		cpc r19,__zero_reg__
 1567 00ba 01F0      		breq .L262
 274:catboard.c    **** 		if (release_time<(press_time+50)) {
 1568               		.loc 2 274 0
 1569 00bc C296      		adiw r24,50
 1570 00be 2817      		cp r18,r24
 1571 00c0 3907      		cpc r19,r25
 1572 00c2 00F4      		brsh .L263
 275:catboard.c    **** 			release_time++;
 1573               		.loc 2 275 0
 1574 00c4 2F5F      		subi r18,-1
 1575 00c6 3F4F      		sbci r19,-1
 1576 00c8 3093 0000 		sts release_time+1,r19
 1577 00cc 2093 0000 		sts release_time,r18
 1578 00d0 0895      		ret
 1579               	.L263:
 277:catboard.c    **** 			last_key = 0xFF;
 1580               		.loc 2 277 0
 1581 00d2 8FEF      		ldi r24,lo8(-1)
 1582 00d4 8093 0000 		sts last_key,r24
 278:catboard.c    **** 			release_time = 0;
 1583               		.loc 2 278 0
 1584 00d8 1092 0000 		sts release_time+1,__zero_reg__
 1585 00dc 1092 0000 		sts release_time,__zero_reg__
 279:catboard.c    **** 			press_time = 0;
 1586               		.loc 2 279 0
 1587 00e0 1092 0000 		sts press_time+1,__zero_reg__
 1588 00e4 1092 0000 		sts press_time,__zero_reg__
 280:catboard.c    **** 			press_time2 = 0;
 1589               		.loc 2 280 0
 1590 00e8 1092 0000 		sts press_time2+1,__zero_reg__
 1591 00ec 1092 0000 		sts press_time2,__zero_reg__
 1592 00f0 0895      		ret
 1593               	.L262:
 283:catboard.c    **** 	} else if (press_time) { // press1 pause
 1594               		.loc 2 283 0
 1595 00f2 0097      		sbiw r24,0
 1596 00f4 01F0      		breq .L253
 284:catboard.c    **** 		if (press_time<250) {
 1597               		.loc 2 284 0
 1598 00f6 8A3F      		cpi r24,-6
 1599 00f8 9105      		cpc r25,__zero_reg__
 1600 00fa 00F4      		brsh .L264
 285:catboard.c    **** 			press_time++;
 1601               		.loc 2 285 0
 1602 00fc 0196      		adiw r24,1
 1603 00fe 9093 0000 		sts press_time+1,r25
 1604 0102 8093 0000 		sts press_time,r24
 1605 0106 0895      		ret
 1606               	.L264:
 287:catboard.c    **** 			press_time = 0;
 1607               		.loc 2 287 0
 1608 0108 1092 0000 		sts press_time+1,__zero_reg__
 1609 010c 1092 0000 		sts press_time,__zero_reg__
 1610               	.L253:
 1611 0110 0895      		ret
 1612               	.LFE13:
 1614               		.section	.text.poll,"ax",@progbits
 1615               	.global	poll
 1617               	poll:
 1618               	.LFB11:
 206:catboard.c    **** void poll() {
 1619               		.loc 2 206 0
 1620 0000 7F92      		push r7
 1621               	.LCFI7:
 1622 0002 8F92      		push r8
 1623               	.LCFI8:
 1624 0004 9F92      		push r9
 1625               	.LCFI9:
 1626 0006 AF92      		push r10
 1627               	.LCFI10:
 1628 0008 BF92      		push r11
 1629               	.LCFI11:
 1630 000a CF92      		push r12
 1631               	.LCFI12:
 1632 000c DF92      		push r13
 1633               	.LCFI13:
 1634 000e EF92      		push r14
 1635               	.LCFI14:
 1636 0010 FF92      		push r15
 1637               	.LCFI15:
 1638 0012 0F93      		push r16
 1639               	.LCFI16:
 1640 0014 1F93      		push r17
 1641               	.LCFI17:
 1642 0016 CF93      		push r28
 1643               	.LCFI18:
 1644 0018 DF93      		push r29
 1645               	.LCFI19:
 1646               	/* prologue: function */
 1647               	/* frame size = 0 */
 1648               	/* stack size = 13 */
 1649               	.L__stack_usage = 13
 1650               	.LVL121:
 1651 001a 70E0      		ldi r23,lo8(row_port)
 1652 001c E72E      		mov r14,r23
 1653 001e 70E0      		ldi r23,hi8(row_port)
 1654 0020 F72E      		mov r15,r23
 1655 0022 00E0      		ldi r16,lo8(row_bit)
 1656 0024 10E0      		ldi r17,hi8(row_bit)
 208:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1657               		.loc 2 208 0
 1658 0026 812C      		mov r8,__zero_reg__
 1659               	.LVL122:
 1660               	.L274:
 209:catboard.c    **** 		*row_port[row] &= ~row_bit[row];
 1661               		.loc 2 209 0
 1662 0028 D701      		movw r26,r14
 1663 002a CD91      		ld r28,X+
 1664 002c DD91      		ld r29,X+
 1665 002e 7D01      		movw r14,r26
 1666 0030 F801      		movw r30,r16
 1667 0032 9190      		ld r9,Z+
 1668 0034 8F01      		movw r16,r30
 1669 0036 992D      		mov r25,r9
 1670 0038 9095      		com r25
 1671 003a 8881      		ld r24,Y
 1672 003c 8923      		and r24,r25
 1673 003e 8883      		st Y,r24
 1674               	.LVL123:
 1675               	.LBB44:
 1676               	.LBB45:
 165:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 166:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #else
 167:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	{
 172:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		{
 176:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		}
 180:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		return;
 181:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	}
 182:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	else
 183:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
 186:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** }
 187:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 188:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /**
 189:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 191:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 193:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 196:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 198:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 202:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   
 207:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 211:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****  
 214:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 222:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****  */
 223:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** void
 224:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** {
 226:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 235:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 238:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 241:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#else
 242:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		//round up by default
 243:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#endif
 245:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 246:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1677               		.loc 3 246 0
 1678 0040 F5E0      		ldi r31,lo8(5)
 1679 0042 FA95      		1: dec r31
 1680 0044 01F4      		brne 1b
 1681 0046 0000      		nop
 1682               	.LVL124:
 1683 0048 50E0      		ldi r21,lo8(col_pin)
 1684 004a C52E      		mov r12,r21
 1685 004c 50E0      		ldi r21,hi8(col_pin)
 1686 004e D52E      		mov r13,r21
 1687 0050 60E0      		ldi r22,lo8(col_bit)
 1688 0052 A62E      		mov r10,r22
 1689 0054 60E0      		ldi r22,hi8(col_bit)
 1690 0056 B62E      		mov r11,r22
 1691 0058 712C      		mov r7,__zero_reg__
 1692               	.LVL125:
 1693               	.L273:
 1694               	.LBE45:
 1695               	.LBE44:
 212:catboard.c    **** 			key_id = col*ROWS+row;
 1696               		.loc 2 212 0
 1697 005a 872D      		mov r24,r7
 1698 005c 880D      		add r24,r8
 1699               	.LVL126:
 213:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1700               		.loc 2 213 0
 1701 005e D601      		movw r26,r12
 1702 0060 ED91      		ld r30,X+
 1703 0062 FD91      		ld r31,X+
 1704 0064 6D01      		movw r12,r26
 1705 0066 D501      		movw r26,r10
 1706 0068 9D91      		ld r25,X+
 1707 006a 5D01      		movw r10,r26
 1708 006c 2081      		ld r18,Z
 1709 006e 9223      		and r25,r18
 1710 0070 282F      		mov r18,r24
 1711 0072 30E0      		ldi r19,0
 214:catboard.c    **** 				if (! pressed[key_id]) {
 1712               		.loc 2 214 0
 1713 0074 F901      		movw r30,r18
 1714 0076 E050      		subi r30,lo8(-(pressed))
 1715 0078 F040      		sbci r31,hi8(-(pressed))
 213:catboard.c    **** 			if (! (*col_pin[col] & col_bit[col])) { // press key
 1716               		.loc 2 213 0
 1717 007a 9111      		cpse r25,__zero_reg__
 1718 007c 00C0      		rjmp .L271
 214:catboard.c    **** 				if (! pressed[key_id]) {
 1719               		.loc 2 214 0
 1720 007e 9081      		ld r25,Z
 1721 0080 9111      		cpse r25,__zero_reg__
 1722 0082 00C0      		rjmp .L272
 215:catboard.c    **** 					key_press(key_id);
 1723               		.loc 2 215 0
 1724 0084 0E94 0000 		call key_press
 1725               	.LVL127:
 1726 0088 00C0      		rjmp .L272
 1727               	.LVL128:
 1728               	.L271:
 217:catboard.c    **** 			} else if (pressed[key_id]) { // release key
 1729               		.loc 2 217 0
 1730 008a 9081      		ld r25,Z
 1731 008c 9111      		cpse r25,__zero_reg__
 218:catboard.c    **** 				key_release(key_id);
 1732               		.loc 2 218 0
 1733 008e 0E94 0000 		call key_release
 1734               	.LVL129:
 1735               	.L272:
 1736 0092 B5E0      		ldi r27,lo8(5)
 1737 0094 7B0E      		add r7,r27
 1738               	.LVL130:
 211:catboard.c    **** 		for (col=0; col<COLS; col++) { // read columns
 1739               		.loc 2 211 0
 1740 0096 ECE3      		ldi r30,lo8(60)
 1741 0098 7E12      		cpse r7,r30
 1742 009a 00C0      		rjmp .L273
 221:catboard.c    **** 		*row_port[row] |= row_bit[row];
 1743               		.loc 2 221 0
 1744 009c 8881      		ld r24,Y
 1745 009e 8929      		or r24,r9
 1746 00a0 8883      		st Y,r24
 208:catboard.c    **** 	for (row=0; row<ROWS; row++) { // scan rows
 1747               		.loc 2 208 0
 1748 00a2 8394      		inc r8
 1749               	.LVL131:
 1750 00a4 8B12      		cpse r8,r27
 1751 00a6 00C0      		rjmp .L274
 223:catboard.c    **** 	if (caps_lock_led != (keyboard_leds & LED_CAPS_LOCK)) { // change layout
 1752               		.loc 2 223 0
 1753 00a8 8091 0000 		lds r24,keyboard_leds
 1754 00ac 8270      		andi r24,lo8(2)
 1755 00ae 9091 0000 		lds r25,caps_lock_led
 1756 00b2 9813      		cpse r25,r24
 1757               	.LBB46:
 224:catboard.c    **** 		caps_lock_change_layer();
 1758               		.loc 2 224 0
 1759 00b4 0E94 0000 		call caps_lock_change_layer
 1760               	.LVL132:
 1761               	.L275:
 1762               	.LBE46:
 227:catboard.c    **** 	repeat_tick();
 1763               		.loc 2 227 0
 1764 00b8 0E94 0000 		call repeat_tick
 1765               	.LVL133:
 1766               	.LBB47:
 1767               	.LBB48:
 164:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1768               		.loc 3 164 0
 1769 00bc 8FE1      		ldi r24,lo8(19999)
 1770 00be 9EE4      		ldi r25,hi8(19999)
 1771 00c0 0197      		1: sbiw r24,1
 1772 00c2 01F4      		brne 1b
 1773 00c4 00C0      		rjmp .
 1774 00c6 0000      		nop
 1775               	/* epilogue start */
 1776               	.LBE48:
 1777               	.LBE47:
 229:catboard.c    **** }
 1778               		.loc 2 229 0
 1779 00c8 DF91      		pop r29
 1780 00ca CF91      		pop r28
 1781 00cc 1F91      		pop r17
 1782 00ce 0F91      		pop r16
 1783 00d0 FF90      		pop r15
 1784 00d2 EF90      		pop r14
 1785 00d4 DF90      		pop r13
 1786 00d6 CF90      		pop r12
 1787 00d8 BF90      		pop r11
 1788 00da AF90      		pop r10
 1789 00dc 9F90      		pop r9
 1790 00de 8F90      		pop r8
 1791               	.LVL134:
 1792 00e0 7F90      		pop r7
 1793 00e2 0895      		ret
 1794               	.LFE11:
 1796               		.section	.text.startup.main,"ax",@progbits
 1797               	.global	main
 1799               	main:
 1800               	.LFB9:
 167:catboard.c    **** int main(void) {
 1801               		.loc 2 167 0
 1802               	/* prologue: function */
 1803               	/* frame size = 0 */
 1804               	/* stack size = 0 */
 1805               	.L__stack_usage = 0
 169:catboard.c    **** 	MCUSR &= ~(1 << WDRF);
 1806               		.loc 2 169 0
 1807 0000 84B7      		in r24,0x34
 1808 0002 877F      		andi r24,lo8(-9)
 1809 0004 84BF      		out 0x34,r24
 170:catboard.c    **** 	wdt_disable();
 1810               		.loc 2 170 0
 1811 0006 88E1      		ldi r24,lo8(24)
 1812               	/* #APP */
 1813               	 ;  170 "catboard.c" 1
 1814 0008 0FB6      		in __tmp_reg__, __SREG__
 1815 000a F894      		cli
 1816 000c 8093 6000 		sts 96, r24
 1817 0010 1092 6000 		sts 96, __zero_reg__
 1818 0014 0FBE      		out __SREG__,__tmp_reg__
 1819               		
 1820               	 ;  0 "" 2
 1821               	.LVL135:
 1822               	/* #NOAPP */
 1823               	.LBB49:
 1824               	.LBB50:
 1825               		.file 4 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h"
   1:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****    All rights reserved.
   3:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
   4:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
   7:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****      distribution.
  13:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  17:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  29:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  31:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  34:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  37:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  38:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /** \file */
  39:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  41:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  43:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** peripherals as needed.
  46:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  47:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  50:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** macros are not available.
  53:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  54:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  59:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** */
  60:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  61:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  62:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  64:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** <small>
  66:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** <center>
  67:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** <table border="3">
  68:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
  69:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
  73:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  74:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
  75:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  76:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  77:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  78:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
  79:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  80:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
  81:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  82:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  83:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  84:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
  85:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  86:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
  87:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
  88:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
  89:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  90:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
  91:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  92:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
  93:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
  94:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
  95:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  96:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
  97:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
  98:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
  99:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 100:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 101:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 102:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 103:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 104:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 105:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 106:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 107:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 108:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 109:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 110:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 111:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 112:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 113:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 114:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 115:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 116:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 117:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 118:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 119:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 120:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 121:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 122:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 123:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 124:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 125:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 126:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 127:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 128:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 129:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 130:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 131:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 132:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 133:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 134:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 135:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 136:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 137:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 138:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 139:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 140:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 141:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 142:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 143:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 144:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 145:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 146:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 147:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 148:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 149:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 150:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 151:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 152:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 153:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 154:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 155:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 156:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 157:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 158:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 159:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 160:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 161:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 162:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 163:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 164:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 165:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 166:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 167:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 168:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 169:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 170:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 171:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 172:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 173:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 174:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 175:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 176:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 177:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 178:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 179:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 180:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 181:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 182:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 183:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 184:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 185:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 186:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 187:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 188:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 189:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 190:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 191:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 192:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 193:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 194:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 195:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 196:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 197:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 198:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 199:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 200:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 201:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 202:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 203:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 204:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 205:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 206:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 207:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 208:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 209:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 210:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 211:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 212:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 213:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 214:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 215:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 216:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 217:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 218:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 219:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 220:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 221:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 222:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 223:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 224:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 225:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 226:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 227:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 228:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 229:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 230:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 231:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 232:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 233:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 234:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 235:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 236:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 237:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 238:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 239:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 240:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 241:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 242:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 243:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 244:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 245:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 246:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 247:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 248:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 249:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 250:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 251:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 252:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 253:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 254:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 255:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 256:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 257:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 258:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 259:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 260:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 261:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 262:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 263:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 264:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 265:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 266:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 267:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 268:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 269:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 270:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 271:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 272:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 273:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 274:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 275:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 276:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 277:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 278:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 279:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 280:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 281:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 282:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 283:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 284:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 285:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 286:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 287:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 288:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 289:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 290:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 291:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 292:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 293:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 294:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 295:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 296:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 297:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 298:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 299:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 300:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 301:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 302:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 303:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 304:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 305:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 306:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 307:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 308:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 309:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 310:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 311:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 312:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 313:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 314:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 315:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 316:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 317:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 318:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 319:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 320:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 321:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 322:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 323:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 324:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 325:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 326:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 327:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 328:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 329:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 330:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 331:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 332:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 333:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 334:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 335:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 336:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 337:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 338:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 339:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_all_enable()</td>
 340:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Enable all modules.</td>
 341:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 342:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 343:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 344:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   <tr>
 345:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>power_all_disable()</td>
 346:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>Disable all modules.</td>
 347:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 348:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****   </tr>
 349:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** </table>
 350:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** </center>
 351:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** </small>
 352:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 353:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** @} */
 354:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 355:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
 356:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** // Include any other device on need basis
 357:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 358:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 359:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 360:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 361:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 362:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 363:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 364:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 365:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 366:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 367:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 368:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 369:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 370:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
 371:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 372:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 373:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 374:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 375:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 376:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 377:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 378:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 379:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 380:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 381:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 382:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 383:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
 384:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
 385:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
 386:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
 387:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
 388:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
 389:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
 390:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
 391:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 392:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable() \
 393:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do { \
 394:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 395:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 396:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 397:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 398:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 399:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 400:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 401:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** } while(0)
 402:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 403:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 404:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable() \
 405:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do { \
 406:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 407:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 408:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 409:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 410:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 411:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 412:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 413:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** } while(0)
 414:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #endif
 415:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 416:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 417:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
 418:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 419:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 420:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 421:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 422:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 423:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 424:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 425:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 426:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 427:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 428:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 429:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
 430:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 431:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 432:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 433:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 434:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 435:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 436:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 437:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 438:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 439:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 440:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 441:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 442:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 443:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 444:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 445:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 446:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 447:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 448:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 449:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 450:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
 451:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
 452:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
 453:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
 454:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
 455:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
 456:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
 457:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
 458:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 459:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
 460:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
 461:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
 462:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
 463:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
 464:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
 465:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
 466:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
 467:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 468:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 469:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 470:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
 471:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
 472:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
 473:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
 474:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
 475:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
 476:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 477:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 478:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 479:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
 480:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
 481:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
 482:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
 483:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
 484:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
 485:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 486:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
 487:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
 488:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
 489:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
 490:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
 491:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
 492:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
 493:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
 494:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 495:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
 496:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
 497:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
 498:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
 499:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
 500:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
 501:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
 502:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
 503:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 504:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #endif
 505:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 506:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
 507:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 508:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 509:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 510:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
 511:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 512:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable() \
 513:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do { \
 514:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
 515:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 516:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 517:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 518:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 519:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 520:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 521:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** } while(0)
 522:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 523:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 524:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable() \
 525:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do { \
 526:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 527:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 528:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 529:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|R_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 530:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 531:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 532:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 533:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** } while(0)
 534:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 535:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
 536:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
 537:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
 538:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
 539:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
 540:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 541:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 542:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 543:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 544:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 545:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 546:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 547:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 548:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 549:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 550:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 551:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 552:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 553:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 554:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 555:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 556:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 557:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 558:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 559:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 560:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 561:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 562:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 563:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 564:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 565:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 566:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 567:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 568:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 569:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 570:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 571:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 572:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 573:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 574:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
 575:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
 576:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 577:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
 578:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
 579:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 580:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable() \
 581:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
 582:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 583:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
 584:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
 585:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 586:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable() \
 587:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
 588:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 589:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
 590:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
 591:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 592:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 593:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
 594:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 595:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 596:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 597:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 598:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 599:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 600:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 601:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 602:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 603:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 604:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 605:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 606:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 607:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 608:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 609:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 610:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 611:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 612:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 613:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 614:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 615:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 616:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 617:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 618:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 619:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 620:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 621:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 622:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 625:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 626:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 627:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 628:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable() \
 629:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
 630:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 631:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 632:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
 633:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 634:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable() \
 635:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
 636:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 637:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 638:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
 639:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 640:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 641:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
 642:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
 643:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
 644:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
 645:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 646:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 647:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 648:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 649:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 650:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 651:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 652:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 653:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 654:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 655:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 656:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 657:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 658:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 659:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 660:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 661:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 662:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 663:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 664:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 665:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 666:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 667:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 668:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 669:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 670:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 671:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 672:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 673:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable() \
 674:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
 675:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 676:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 677:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
 678:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 679:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable() \
 680:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
 681:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 682:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 683:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
 684:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 685:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 686:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
 687:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
 688:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 689:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 690:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 691:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 692:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 693:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 694:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 695:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 696:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 697:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 698:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 699:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 700:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 701:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 702:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 703:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 704:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 705:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 706:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 707:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 708:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 709:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 710:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 711:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 712:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 713:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 714:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 715:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 716:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 717:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 718:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 719:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 720:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable() \
 721:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
 722:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
 723:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 724:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
 725:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 726:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable() \
 727:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
 728:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
 729:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 730:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
 731:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 732:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 733:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
 734:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 735:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 736:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 737:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 738:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 739:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 740:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 741:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 742:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 743:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 744:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 745:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 746:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 747:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 748:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 749:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 750:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 751:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 752:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 753:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 754:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 755:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 756:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 757:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 758:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 759:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 760:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 761:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 762:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 763:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable() \
 764:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
 765:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 766:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 767:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
 768:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 769:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable() \
 770:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
 771:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 772:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 773:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
 774:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 775:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 776:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
 777:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 778:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 779:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 780:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 781:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 782:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 783:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 784:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 785:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 786:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 787:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 788:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 789:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 790:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 791:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 792:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 793:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 794:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 795:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 796:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 797:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 798:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 799:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 800:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 801:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 802:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
 803:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
 804:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 805:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 806:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
 807:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
 808:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
 809:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
 810:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
 811:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
 812:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 813:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 814:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 815:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 816:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 817:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 818:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 819:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 820:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 821:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 822:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 823:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 824:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 825:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 826:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 827:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 828:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 829:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 830:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 831:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 832:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 833:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 834:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 835:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 836:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 837:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 838:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 839:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 840:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
 841:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
 842:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 843:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 844:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__)
 845:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 846:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 847:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 848:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 849:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 850:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 851:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 852:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 853:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 854:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 855:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Reduced Power Stage Controller */
 856:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 857:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 858:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 859:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 860:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 861:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 862:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 863:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
 864:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
 865:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 866:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 867:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
 868:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
 869:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
 870:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
 871:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
 872:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
 873:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
 874:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
 875:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
 876:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
 877:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
 878:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
 879:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
 880:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 881:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 882:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 883:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 884:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 885:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 886:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 887:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 888:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 889:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 890:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 891:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 892:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 893:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
 894:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
 895:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 896:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 897:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
 898:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
 899:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
 900:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
 901:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
 902:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
 903:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
 904:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
 905:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
 906:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
 907:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
 908:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
 909:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
 910:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
 911:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
 912:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
 913:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
 914:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 915:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 916:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 917:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 918:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 919:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 920:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 921:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 922:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 923:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 924:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 925:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 926:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 927:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 928:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 929:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 930:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
 931:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
 932:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 933:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 934:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
 935:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
 936:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
 937:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
 938:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
 939:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
 940:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
 941:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
 942:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 943:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 944:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 945:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 946:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 947:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 948:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 949:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 950:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 951:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 952:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
 953:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
 954:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 955:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 956:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 957:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 958:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 959:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 960:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 961:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 962:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 963:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 964:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 965:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 966:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 967:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
 968:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
 969:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 970:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 971:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__)
 972:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 973:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 974:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 975:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 976:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 977:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 978:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 979:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 980:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 981:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 982:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 983:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 984:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 985:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 986:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 987:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 988:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 989:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 990:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 991:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 992:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 993:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 994:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
 995:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
 996:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 997:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
 998:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
 999:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1000:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1001:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1002:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1003:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1004:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1005:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1006:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1007:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1008:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1009:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Voltage ADC */
1010:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1011:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1012:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1013:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
1014:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
1015:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1016:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1017:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
1018:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1019:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1020:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1021:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1022:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1023:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1024:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1025:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1026:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1027:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1028:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1029:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1030:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
1031:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1032:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1033:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1034:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1035:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1036:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1037:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1038:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
1039:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
1040:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1041:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1042:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1043:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1044:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1045:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1046:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1047:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
1048:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
1049:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1050:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
1051:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
1052:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1053:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
1054:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
1055:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1056:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1057:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
1058:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
1059:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
1060:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
1061:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
1062:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
1063:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
1064:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
1065:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
1066:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
1067:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
1068:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
1069:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
1070:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
1071:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
1072:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
1073:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1074:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1075:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1076:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1077:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1078:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1079:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1080:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1081:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1082:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1083:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Universal Serial Interface */
1084:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1085:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1086:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1087:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1088:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1089:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1090:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1091:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
1092:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1093:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1094:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1095:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1096:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1097:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1098:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1099:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1100:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1101:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1102:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1103:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1104:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1105:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1106:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1107:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1108:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1109:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1110:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1111:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1112:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1113:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1114:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1115:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1116:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1117:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1118:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
1119:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
1120:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1121:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable() \
1122:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
1123:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1124:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
1125:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
1126:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1127:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable() \
1128:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
1129:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1130:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
1131:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
1132:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1133:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1134:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
1135:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1136:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1137:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
1138:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1139:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1140:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1141:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1142:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1143:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1144:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1145:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1146:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1147:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1148:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1149:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /* Voltage ADC */
1150:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1151:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1152:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1153:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1154:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1155:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1156:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
1157:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
1158:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1159:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
1160:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
1161:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1162:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1163:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
1164:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1165:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1166:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1167:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
1168:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1169:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1170:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1171:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1172:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1173:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1174:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1175:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1176:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1177:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1178:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1179:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1180:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1181:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1182:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1183:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1184:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
1185:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
1186:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1187:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
1188:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
1189:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1190:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
1191:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
1192:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1193:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1194:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
1195:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny87__)
1196:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1197:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1198:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1199:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1200:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1201:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1202:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1203:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1204:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1205:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1206:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1207:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1208:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1209:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1210:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1211:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1212:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1213:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1214:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1215:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1216:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
1217:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
1218:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1219:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1220:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
1221:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1222:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1223:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1224:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
1225:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1226:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1227:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1228:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1229:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1230:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1231:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1232:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1233:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1234:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1235:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1236:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1237:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1238:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1239:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1240:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1241:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable() \
1242:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
1243:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1244:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
1245:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
1246:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1247:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable() \
1248:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
1249:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1250:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
1251:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
1252:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1253:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1254:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
1255:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1256:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1257:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1258:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1259:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1260:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1261:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1262:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1263:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1264:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1265:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1266:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1267:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1268:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1269:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1270:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1271:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1272:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1273:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1274:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
1275:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
1276:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1277:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1278:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1279:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1280:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
1281:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
1282:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1283:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
1284:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
1285:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1286:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
1287:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
1288:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1289:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
1290:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
1291:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1292:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable() \
1293:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
1294:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1295:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1296:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
1297:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1298:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable() \
1299:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** do{ \
1300:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1301:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1302:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** }while(0)
1303:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1304:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1305:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
1306:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
1307:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
1308:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
1309:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
1310:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1311:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1312:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1313:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1314:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1315:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1316:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1317:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
1318:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
1319:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1320:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1321:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
1322:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
1323:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1324:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1325:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1326:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1327:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1328:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1329:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1330:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1331:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1332:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1333:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
1334:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
1335:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1336:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
1337:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
1338:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1339:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
1340:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
1341:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1342:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #endif
1343:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1344:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1345:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1346:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1347:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1348:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1349:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1350:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1351:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1352:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1353:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1354:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1355:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1356:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1357:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1358:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1359:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1360:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1361:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1362:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1363:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1364:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1365:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1366:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1367:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1368:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1369:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1370:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1371:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1372:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1373:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1374:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1375:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1376:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1377:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1378:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1379:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1380:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1381:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1382:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1383:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1384:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1385:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1386:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1387:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1388:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1389:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1390:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1391:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1392:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1393:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1394:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1395:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1396:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVB__) \
1397:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1398:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1399:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__) \
1400:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1401:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1402:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1403:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1404:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1405:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1406:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1407:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1408:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1409:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1410:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1411:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1412:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1413:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1414:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1415:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1416:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1417:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1418:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1419:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1420:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1421:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1422:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1423:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1424:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1425:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1426:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1427:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1428:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1429:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1430:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** || defined(__DOXYGEN__)
1431:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1432:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1433:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1434:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1435:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1436:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1437:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
1438:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
1439:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1440:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
1441:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
1442:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** */
1443:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1444:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1445:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1446:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** \code 
1447:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** typedef enum
1448:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** {
1449:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1450:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1451:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1452:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1453:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1454:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1455:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1456:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1457:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_256 = 8,
1458:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1459:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** } clock_div_t;
1460:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** \endcode
1461:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** Clock prescaler setting enumerations.
1462:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1463:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** */
1464:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** typedef enum
1465:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** {
1466:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1467:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1468:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1469:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1470:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1471:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1472:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1473:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1474:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     clock_div_256 = 8
1475:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__)
1476:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     , clock_div_1_rc = 15
1477:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** #endif
1478:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** } clock_div_t;
1479:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1480:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1481:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1482:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1483:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1484:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1485:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1486:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1487:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1488:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** optimizations are disabled.
1489:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** 
1490:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** The type of x is clock_div_t.
1491:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** */
1492:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1493:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h **** {
1494:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1495:/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h ****     __asm__ __volatile__ (
 1826               		.loc 4 1495 0
 1827 0016 90E0      		ldi r25,0
 1828 0018 80E8      		ldi r24,lo8(-128)
 1829               	/* #APP */
 1830               	 ;  1495 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/power.h" 1
 1831 001a 0FB6      		in __tmp_reg__,__SREG__
 1832 001c F894      		cli
 1833 001e 8093 6100 		sts 97, r24
 1834 0022 9093 6100 		sts 97, r25
 1835 0026 0FBE      		out __SREG__, __tmp_reg__
 1836               	 ;  0 "" 2
 1837               	/* #NOAPP */
 1838               	.LBE50:
 1839               	.LBE49:
 175:catboard.c    **** 	init();
 1840               		.loc 2 175 0
 1841 0028 0E94 0000 		call init
 1842               	.LVL136:
 1843               	.L282:
 177:catboard.c    **** 		poll();
 1844               		.loc 2 177 0 discriminator 1
 1845 002c 0E94 0000 		call poll
 1846               	.LVL137:
 1847 0030 00C0      		rjmp .L282
 1848               	.LFE9:
 1850               	.global	repeat_time
 1851               		.section .bss
 1854               	repeat_time:
 1855 0000 0000      		.zero	2
 1856               	.global	release_time
 1859               	release_time:
 1860 0002 0000      		.zero	2
 1861               	.global	press_time2
 1864               	press_time2:
 1865 0004 0000      		.zero	2
 1866               	.global	press_time
 1869               	press_time:
 1870 0006 0000      		.zero	2
 1871               	.global	last_key
 1872               		.data
 1875               	last_key:
 1876 0000 FF        		.byte	-1
 1877               	.global	led
 1880               	led:
 1881 0001 01        		.byte	1
 1882               	.global	locked
 1883               		.section .bss
 1886               	locked:
 1887 0008 00        		.zero	1
 1888               	.global	turbo_repeat
 1889               		.data
 1892               	turbo_repeat:
 1893 0002 01        		.byte	1
 1894               	.global	prev_layer
 1895               		.section .bss
 1898               	prev_layer:
 1899 0009 0000      		.zero	2
 1900               	.global	mod_keys
 1903               	mod_keys:
 1904 000b 00        		.zero	1
 1905               	.global	queue
 1906               		.data
 1909               	queue:
 1910 0003 FF        		.byte	-1
 1911 0004 FF        		.byte	-1
 1912 0005 FF        		.byte	-1
 1913 0006 FF        		.byte	-1
 1914 0007 FF        		.byte	-1
 1915 0008 FF        		.byte	-1
 1916 0009 FF        		.byte	-1
 1917               		.comm	pressed,60,1
 1918               	.global	layout
 1921               	layout:
 1922 000a 0000      		.word	layer2
 1923               	.global	caps_lock_led
 1924               		.section .bss
 1927               	caps_lock_led:
 1928 000c 00        		.zero	1
 1929               	.global	os_mode
 1930               		.data
 1933               	os_mode:
 1934 000c 01        		.byte	1
 1935               	.global	layer_fnlock
 1936               		.section	.rodata
 1939               	layer_fnlock:
 1940 0000 35        		.byte	53
 1941 0001 2B        		.byte	43
 1942 0002 69        		.byte	105
 1943 0003 7D        		.byte	125
 1944 0004 7B        		.byte	123
 1945 0005 1E        		.byte	30
 1946 0006 4B        		.byte	75
 1947 0007 4E        		.byte	78
 1948 0008 68        		.byte	104
 1949 0009 6D        		.byte	109
 1950 000a 1F        		.byte	31
 1951 000b 4A        		.byte	74
 1952 000c 50        		.byte	80
 1953 000d 6F        		.byte	111
 1954 000e 6F        		.byte	111
 1955 000f 20        		.byte	32
 1956 0010 52        		.byte	82
 1957 0011 51        		.byte	81
 1958 0012 6F        		.byte	111
 1959 0013 67        		.byte	103
 1960 0014 21        		.byte	33
 1961 0015 4D        		.byte	77
 1962 0016 4F        		.byte	79
 1963 0017 6F        		.byte	111
 1964 0018 65        		.byte	101
 1965 0019 22        		.byte	34
 1966 001a 35        		.byte	53
 1967 001b 28        		.byte	40
 1968 001c 6F        		.byte	111
 1969 001d 77        		.byte	119
 1970 001e 23        		.byte	35
 1971 001f 54        		.byte	84
 1972 0020 55        		.byte	85
 1973 0021 62        		.byte	98
 1974 0022 2C        		.byte	44
 1975 0023 24        		.byte	36
 1976 0024 5F        		.byte	95
 1977 0025 5C        		.byte	92
 1978 0026 59        		.byte	89
 1979 0027 7F        		.byte	127
 1980 0028 25        		.byte	37
 1981 0029 60        		.byte	96
 1982 002a 5D        		.byte	93
 1983 002b 5A        		.byte	90
 1984 002c 6B        		.byte	107
 1985 002d 26        		.byte	38
 1986 002e 61        		.byte	97
 1987 002f 5E        		.byte	94
 1988 0030 5B        		.byte	91
 1989 0031 00        		.byte	0
 1990 0032 27        		.byte	39
 1991 0033 56        		.byte	86
 1992 0034 57        		.byte	87
 1993 0035 63        		.byte	99
 1994 0036 6E        		.byte	110
 1995 0037 2D        		.byte	45
 1996 0038 29        		.byte	41
 1997 0039 28        		.byte	40
 1998 003a 53        		.byte	83
 1999 003b 2E        		.byte	46
 2000               	.global	layer_fn
 2003               	layer_fn:
 2004 003c 46        		.byte	70
 2005 003d 2B        		.byte	43
 2006 003e 69        		.byte	105
 2007 003f 7D        		.byte	125
 2008 0040 7B        		.byte	123
 2009 0041 3A        		.byte	58
 2010 0042 00        		.byte	0
 2011 0043 00        		.byte	0
 2012 0044 68        		.byte	104
 2013 0045 6D        		.byte	109
 2014 0046 3B        		.byte	59
 2015 0047 00        		.byte	0
 2016 0048 00        		.byte	0
 2017 0049 00        		.byte	0
 2018 004a 00        		.byte	0
 2019 004b 3C        		.byte	60
 2020 004c 00        		.byte	0
 2021 004d 00        		.byte	0
 2022 004e 00        		.byte	0
 2023 004f 67        		.byte	103
 2024 0050 3D        		.byte	61
 2025 0051 00        		.byte	0
 2026 0052 00        		.byte	0
 2027 0053 00        		.byte	0
 2028 0054 65        		.byte	101
 2029 0055 3E        		.byte	62
 2030 0056 35        		.byte	53
 2031 0057 00        		.byte	0
 2032 0058 00        		.byte	0
 2033 0059 77        		.byte	119
 2034 005a 3F        		.byte	63
 2035 005b 79        		.byte	121
 2036 005c 28        		.byte	40
 2037 005d 2A        		.byte	42
 2038 005e 7C        		.byte	124
 2039 005f 40        		.byte	64
 2040 0060 4A        		.byte	74
 2041 0061 50        		.byte	80
 2042 0062 4C        		.byte	76
 2043 0063 7F        		.byte	127
 2044 0064 41        		.byte	65
 2045 0065 52        		.byte	82
 2046 0066 51        		.byte	81
 2047 0067 49        		.byte	73
 2048 0068 7E        		.byte	126
 2049 0069 42        		.byte	66
 2050 006a 4D        		.byte	77
 2051 006b 4F        		.byte	79
 2052 006c 00        		.byte	0
 2053 006d 00        		.byte	0
 2054 006e 43        		.byte	67
 2055 006f 4B        		.byte	75
 2056 0070 4E        		.byte	78
 2057 0071 00        		.byte	0
 2058 0072 7A        		.byte	122
 2059 0073 44        		.byte	68
 2060 0074 29        		.byte	41
 2061 0075 48        		.byte	72
 2062 0076 47        		.byte	71
 2063 0077 45        		.byte	69
 2064               	.global	layer1
 2067               	layer1:
 2068 0078 35        		.byte	53
 2069 0079 2B        		.byte	43
 2070 007a 69        		.byte	105
 2071 007b 7D        		.byte	125
 2072 007c 29        		.byte	41
 2073 007d 1E        		.byte	30
 2074 007e 14        		.byte	20
 2075 007f 04        		.byte	4
 2076 0080 68        		.byte	104
 2077 0081 6D        		.byte	109
 2078 0082 1F        		.byte	31
 2079 0083 1A        		.byte	26
 2080 0084 16        		.byte	22
 2081 0085 1B        		.byte	27
 2082 0086 1D        		.byte	29
 2083 0087 20        		.byte	32
 2084 0088 08        		.byte	8
 2085 0089 07        		.byte	7
 2086 008a 06        		.byte	6
 2087 008b 67        		.byte	103
 2088 008c 21        		.byte	33
 2089 008d 15        		.byte	21
 2090 008e 09        		.byte	9
 2091 008f 19        		.byte	25
 2092 0090 65        		.byte	101
 2093 0091 22        		.byte	34
 2094 0092 17        		.byte	23
 2095 0093 0A        		.byte	10
 2096 0094 05        		.byte	5
 2097 0095 77        		.byte	119
 2098 0096 23        		.byte	35
 2099 0097 1C        		.byte	28
 2100 0098 0B        		.byte	11
 2101 0099 11        		.byte	17
 2102 009a 2C        		.byte	44
 2103 009b 24        		.byte	36
 2104 009c 18        		.byte	24
 2105 009d 0D        		.byte	13
 2106 009e 10        		.byte	16
 2107 009f 7F        		.byte	127
 2108 00a0 25        		.byte	37
 2109 00a1 0C        		.byte	12
 2110 00a2 0E        		.byte	14
 2111 00a3 36        		.byte	54
 2112 00a4 6B        		.byte	107
 2113 00a5 26        		.byte	38
 2114 00a6 12        		.byte	18
 2115 00a7 0F        		.byte	15
 2116 00a8 37        		.byte	55
 2117 00a9 38        		.byte	56
 2118 00aa 27        		.byte	39
 2119 00ab 13        		.byte	19
 2120 00ac 33        		.byte	51
 2121 00ad 31        		.byte	49
 2122 00ae 6E        		.byte	110
 2123 00af 2D        		.byte	45
 2124 00b0 2F        		.byte	47
 2125 00b1 34        		.byte	52
 2126 00b2 30        		.byte	48
 2127 00b3 2E        		.byte	46
 2128               	.global	col_bit
 2131               	col_bit:
 2132 00b4 08        		.byte	8
 2133 00b5 01        		.byte	1
 2134 00b6 10        		.byte	16
 2135 00b7 01        		.byte	1
 2136 00b8 04        		.byte	4
 2137 00b9 20        		.byte	32
 2138 00ba 10        		.byte	16
 2139 00bb 10        		.byte	16
 2140 00bc 04        		.byte	4
 2141 00bd 20        		.byte	32
 2142 00be 80        		.byte	-128
 2143 00bf 80        		.byte	-128
 2144               	.global	col_pin
 2147               	col_pin:
 2148 00c0 2900      		.word	41
 2149 00c2 2900      		.word	41
 2150 00c4 2900      		.word	41
 2151 00c6 2300      		.word	35
 2152 00c8 2600      		.word	38
 2153 00ca 2900      		.word	41
 2154 00cc 2300      		.word	35
 2155 00ce 2600      		.word	38
 2156 00d0 2300      		.word	35
 2157 00d2 2300      		.word	35
 2158 00d4 2600      		.word	38
 2159 00d6 2300      		.word	35
 2160               	.global	row_bit
 2163               	row_bit:
 2164 00d8 20        		.byte	32
 2165 00d9 04        		.byte	4
 2166 00da 40        		.byte	64
 2167 00db 08        		.byte	8
 2168 00dc 02        		.byte	2
 2169               	.global	row_port
 2172               	row_port:
 2173 00dd 2800      		.word	40
 2174 00df 2B00      		.word	43
 2175 00e1 2500      		.word	37
 2176 00e3 2500      		.word	37
 2177 00e5 2500      		.word	37
 2178               	.global	layer2
 2181               	layer2:
 2182 00e7 35        		.byte	53
 2183 00e8 2B        		.byte	43
 2184 00e9 69        		.byte	105
 2185 00ea 7D        		.byte	125
 2186 00eb 29        		.byte	41
 2187 00ec 1E        		.byte	30
 2188 00ed 0D        		.byte	13
 2189 00ee 09        		.byte	9
 2190 00ef 68        		.byte	104
 2191 00f0 6D        		.byte	109
 2192 00f1 1F        		.byte	31
 2193 00f2 06        		.byte	6
 2194 00f3 1C        		.byte	28
 2195 00f4 38        		.byte	56
 2196 00f5 14        		.byte	20
 2197 00f6 20        		.byte	32
 2198 00f7 18        		.byte	24
 2199 00f8 1A        		.byte	26
 2200 00f9 16        		.byte	22
 2201 00fa 67        		.byte	103
 2202 00fb 21        		.byte	33
 2203 00fc 0E        		.byte	14
 2204 00fd 04        		.byte	4
 2205 00fe 10        		.byte	16
 2206 00ff 65        		.byte	101
 2207 0100 22        		.byte	34
 2208 0101 08        		.byte	8
 2209 0102 13        		.byte	19
 2210 0103 0C        		.byte	12
 2211 0104 77        		.byte	119
 2212 0105 23        		.byte	35
 2213 0106 11        		.byte	17
 2214 0107 15        		.byte	21
 2215 0108 17        		.byte	23
 2216 0109 2C        		.byte	44
 2217 010a 24        		.byte	36
 2218 010b 0A        		.byte	10
 2219 010c 12        		.byte	18
 2220 010d 1B        		.byte	27
 2221 010e 7F        		.byte	127
 2222 010f 25        		.byte	37
 2223 0110 0B        		.byte	11
 2224 0111 0F        		.byte	15
 2225 0112 05        		.byte	5
 2226 0113 6B        		.byte	107
 2227 0114 26        		.byte	38
 2228 0115 19        		.byte	25
 2229 0116 07        		.byte	7
 2230 0117 36        		.byte	54
 2231 0118 37        		.byte	55
 2232 0119 27        		.byte	39
 2233 011a 1D        		.byte	29
 2234 011b 33        		.byte	51
 2235 011c 31        		.byte	49
 2236 011d 6E        		.byte	110
 2237 011e 2D        		.byte	45
 2238 011f 2F        		.byte	47
 2239 0120 34        		.byte	52
 2240 0121 30        		.byte	48
 2241 0122 2E        		.byte	46
 2468               	.Letext0:
 2469               		.file 5 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/stdint.h"
 2470               		.file 6 "usb_keyboard.h"
 2471               		.file 7 "jcuken.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 catboard.c
     /tmp/cctYVPM5.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cctYVPM5.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cctYVPM5.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cctYVPM5.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cctYVPM5.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cctYVPM5.s:12     .text.init_ports:0000000000000000 init_ports
     /tmp/cctYVPM5.s:38     .text.init:0000000000000000 init
     /tmp/cctYVPM5.s:1880   .data:0000000000000001 led
                            *COM*:000000000000003c pressed
     /tmp/cctYVPM5.s:1927   .bss:000000000000000c caps_lock_led
     /tmp/cctYVPM5.s:109    .text.caps_lock_change_layer:0000000000000000 caps_lock_change_layer
     /tmp/cctYVPM5.s:1921   .data:000000000000000a layout
     /tmp/cctYVPM5.s:2067   .rodata:0000000000000078 layer1
     /tmp/cctYVPM5.s:2003   .rodata:000000000000003c layer_fn
     /tmp/cctYVPM5.s:1898   .bss:0000000000000009 prev_layer
     /tmp/cctYVPM5.s:2181   .rodata:00000000000000e7 layer2
     /tmp/cctYVPM5.s:193    .text.change_layout:0000000000000000 change_layout
     /tmp/cctYVPM5.s:1933   .data:000000000000000c os_mode
     /tmp/cctYVPM5.s:271    .text.get_code:0000000000000000 get_code
     /tmp/cctYVPM5.s:342    .text.send:0000000000000000 send
     /tmp/cctYVPM5.s:1909   .data:0000000000000003 queue
     /tmp/cctYVPM5.s:1903   .bss:000000000000000b mod_keys
     /tmp/cctYVPM5.s:393    .text.key_release:0000000000000000 key_release
     /tmp/cctYVPM5.s:1886   .bss:0000000000000008 locked
     /tmp/cctYVPM5.s:1875   .data:0000000000000000 last_key
     /tmp/cctYVPM5.s:1869   .bss:0000000000000006 press_time
     /tmp/cctYVPM5.s:1864   .bss:0000000000000004 press_time2
     /tmp/cctYVPM5.s:1859   .bss:0000000000000002 release_time
     /tmp/cctYVPM5.s:1854   .bss:0000000000000000 repeat_time
     /tmp/cctYVPM5.s:860    .text.key_press:0000000000000000 key_press
     /tmp/cctYVPM5.s:1939   .rodata:0000000000000000 layer_fnlock
     /tmp/cctYVPM5.s:1892   .data:0000000000000002 turbo_repeat
     /tmp/cctYVPM5.s:1467   .text.repeat_tick:0000000000000000 repeat_tick
     /tmp/cctYVPM5.s:1617   .text.poll:0000000000000000 poll
     /tmp/cctYVPM5.s:2172   .rodata:00000000000000dd row_port
     /tmp/cctYVPM5.s:2163   .rodata:00000000000000d8 row_bit
     /tmp/cctYVPM5.s:2147   .rodata:00000000000000c0 col_pin
     /tmp/cctYVPM5.s:2131   .rodata:00000000000000b4 col_bit
     /tmp/cctYVPM5.s:1799   .text.startup.main:0000000000000000 main

UNDEFINED SYMBOLS
usb_init
usb_configured
keyboard_leds
keyboard_modifier_keys
keyboard_keys
usb_keyboard_send
usb_keyboard_press
__do_copy_data
__do_clear_bss
